Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/jdk/incubator/vector/', will run:
* jtreg:test/jdk/jdk/incubator/vector
Clean up dirs for jtreg_test_jdk_jdk_incubator_vector

Running test 'jtreg:test/jdk/jdk/incubator/vector'
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorTests.java
Passed: jdk/incubator/vector/Double512VectorTests.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorTests.java
Passed: jdk/incubator/vector/Double128VectorTests.java
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorTests.java
Passed: jdk/incubator/vector/ByteMaxVectorTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/FloatMaxVectorTests.java
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float512VectorTests.java
Passed: jdk/incubator/vector/Int128VectorTests.java
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
--------------------------------------------------
TEST: jdk/incubator/vector/IntMaxVectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.144 seconds
messages:
command: build IntMaxVectorTests
reason: Named class compiled on demand
started: Wed Apr 16 23:49:45 IST 2025
Test directory:
  compile: IntMaxVectorTests
finished: Wed Apr 16 23:49:46 IST 2025
elapsed time (seconds): 1.144

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.144 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/IntMaxVectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 23:49:45 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 12
Process id: 1860623
finished: Wed Apr 16 23:49:46 IST 2025
elapsed time (seconds): 1.144
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/IntMaxVectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/5 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/IntMaxVectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/IntMaxVectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/IntMaxVectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/IntMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/IntMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/IntMaxVectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/IntMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/IntMaxVectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation IntMaxVectorTests 
TIME:   132.85 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation IntMaxVectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation IntMaxVectorTests 
started: Wed Apr 16 23:49:46 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1866282
finished: Wed Apr 16 23:51:59 IST 2025
elapsed time (seconds): 132.85
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -2182574371909968871
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-2182574371909968871" to command line.
test IntMaxVectorTests.ABSIntMaxVectorTests(int[-i * 5]): success [556ms]
test IntMaxVectorTests.ABSIntMaxVectorTests(int[i * 5]): success [7ms]
test IntMaxVectorTests.ABSIntMaxVectorTests(int[i + 1]): success [49ms]
test IntMaxVectorTests.ABSIntMaxVectorTests(int[cornerCaseValue(i)]): success [7ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[-i * 5], mask[i % 2]): success [194ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[i * 5], mask[i % 2]): success [3ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[i + 1], mask[i % 2]): success [70ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[-i * 5], mask[true]): success [2ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.ADDIntMaxVectorTests(int[-i * 5], int[i * 5]): success [260ms]
test IntMaxVectorTests.ADDIntMaxVectorTests(int[-i * 5], int[i + 1]): success [29ms]
test IntMaxVectorTests.ADDIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [60ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [16ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [21ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [136ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [64ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [67ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [8ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [5ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTests(int[-i * 5]): success [90ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTests(int[i * 5]): success [85ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTests(int[i + 1]): success [1ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[-i * 5], mask[i % 2]): success [62ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[i * 5], mask[i % 2]): success [109ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTests(int[-i * 5]): success [10ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTests(int[i * 5]): success [10ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTests(int[i + 1]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[-i * 5], mask[i % 2]): success [8ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[i * 5], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[i + 1], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTests(int[-i * 5], int[i * 5]): success [114ms]
test IntMaxVectorTests.ANDIntMaxVectorTests(int[-i * 5], int[i + 1]): success [2ms]
test IntMaxVectorTests.ANDIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [60ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [15ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [4ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [67ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTests(int[-i * 5]): success [107ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTests(int[i * 5]): success [88ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTests(int[i + 1]): success [0ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[-i * 5], mask[i % 2]): success [19ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[i * 5], mask[i % 2]): success [104ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTests(int[-i * 5], int[i * 5]): success [176ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTests(int[-i * 5], int[i + 1]): success [3ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [72ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [104ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [77ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.ASHRIntMaxVectorTests(int[-i * 5], int[i * 5]): success [109ms]
test IntMaxVectorTests.ASHRIntMaxVectorTests(int[-i * 5], int[i + 1]): success [3ms]
test IntMaxVectorTests.ASHRIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [67ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [77ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [75ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShift(int[-i * 5], int[i * 5]): success [222ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShift(int[-i * 5], int[i + 1]): success [3ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [60ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftConst(int[-i * 5]): success [7ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftConst(int[i * 5]): success [2ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftConst(int[i + 1]): success [52ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [63ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [10ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [3ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [51ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [112ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [3ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [91ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [388ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [3ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [5ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [12ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [5ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [52ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [4ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [1ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [3ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
t

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

[i - 2], int[cornerCaseValue(i)], mask[true]): success [54ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[i], mask[true]): success [55ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[i - length / 2], mask[true]): success [57ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[i + 1], mask[true]): success [56ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[i - 2], mask[true]): success [57ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[zigZag(i)], mask[true]): success [57ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[cornerCaseValue(i)], mask[true]): success [65ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[i], mask[true]): success [61ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[i - length / 2], mask[true]): success [57ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[i + 1], mask[true]): success [56ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[i - 2], mask[true]): success [57ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[zigZag(i)], mask[true]): success [56ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [56ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i], int[i], mask[false]): success [56ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i], int[i - length / 2], mask[false]): success [56ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i], int[i + 1], mask[false]): success [58ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i], int[i - 2], mask[false]): success [56ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i], int[zigZag(i)], mask[false]): success [57ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i], int[cornerCaseValue(i)], mask[false]): success [63ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - length / 2], int[i], mask[false]): success [57ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - length / 2], int[i - length / 2], mask[false]): success [56ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - length / 2], int[i + 1], mask[false]): success [56ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - length / 2], int[i - 2], mask[false]): success [56ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - length / 2], int[zigZag(i)], mask[false]): success [56ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - length / 2], int[cornerCaseValue(i)], mask[false]): success [57ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i + 1], int[i], mask[false]): success [56ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i + 1], int[i - length / 2], mask[false]): success [100ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i + 1], int[i + 1], mask[false]): success [53ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i + 1], int[i - 2], mask[false]): success [53ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i + 1], int[zigZag(i)], mask[false]): success [53ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i + 1], int[cornerCaseValue(i)], mask[false]): success [61ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - 2], int[i], mask[false]): success [53ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - 2], int[i - length / 2], mask[false]): success [53ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - 2], int[i + 1], mask[false]): success [53ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - 2], int[i - 2], mask[false]): success [53ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - 2], int[zigZag(i)], mask[false]): success [53ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[i - 2], int[cornerCaseValue(i)], mask[false]): success [61ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[i], mask[false]): success [53ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[i - length / 2], mask[false]): success [53ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[i + 1], mask[false]): success [57ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[i - 2], mask[false]): success [53ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[zigZag(i)], mask[false]): success [53ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[zigZag(i)], int[cornerCaseValue(i)], mask[false]): success [53ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[i], mask[false]): success [60ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[i - length / 2], mask[false]): success [53ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[i + 1], mask[false]): success [53ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[i - 2], mask[false]): success [53ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[zigZag(i)], mask[false]): success [53ms]
test IntMaxVectorTests.ULTIntMaxVectorTestsMasked(int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [52ms]
test IntMaxVectorTests.UMAXIntMaxVectorTests(int[-i * 5], int[i * 5]): success [89ms]
test IntMaxVectorTests.UMAXIntMaxVectorTests(int[-i * 5], int[i + 1]): success [2ms]
test IntMaxVectorTests.UMAXIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [94ms]
test IntMaxVectorTests.UMAXIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [17ms]
test IntMaxVectorTests.UMAXIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test IntMaxVectorTests.UMAXIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [66ms]
test IntMaxVectorTests.UMAXIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.UMAXIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.UMAXIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.UMAXIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.UMAXIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.UMAXIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTests(int[-i * 5]): success [56ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTests(int[i * 5]): success [67ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTests(int[i + 1]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTests(int[cornerCaseValue(i)]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[-i * 5], mask[i % 2]): success [15ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[i * 5], mask[i % 2]): success [83ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[i + 1], mask[i % 2]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[-i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[-i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.UMAXReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.UMINIntMaxVectorTests(int[-i * 5], int[i * 5]): success [96ms]
test IntMaxVectorTests.UMINIntMaxVectorTests(int[-i * 5], int[i + 1]): success [34ms]
test IntMaxVectorTests.UMINIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [94ms]
test IntMaxVectorTests.UMINIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [9ms]
test IntMaxVectorTests.UMINIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test IntMaxVectorTests.UMINIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [65ms]
test IntMaxVectorTests.UMINIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.UMINIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.UMINIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.UMINIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.UMINIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.UMINIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTests(int[-i * 5]): success [56ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTests(int[i * 5]): success [77ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTests(int[i + 1]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTests(int[cornerCaseValue(i)]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[-i * 5], mask[i % 2]): success [15ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[i * 5], mask[i % 2]): success [120ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[i + 1], mask[i % 2]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[i * 5], mask[true]): success [5ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[-i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.UMINReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.VectorShapeIntMaxVectorTestsSmokeTest(): success [0ms]
test IntMaxVectorTests.VectorTypeIntMaxVectorTestsSmokeTest(): success [0ms]
test IntMaxVectorTests.WithLanesIntMaxVectorTestsSmokeTest(): success [0ms]
test IntMaxVectorTests.WithShapeIntMaxVectorTestsSmokeTest(): success [0ms]
test IntMaxVectorTests.XORIntMaxVectorTests(int[-i * 5], int[i * 5]): success [9ms]
test IntMaxVectorTests.XORIntMaxVectorTests(int[-i * 5], int[i + 1]): success [2ms]
test IntMaxVectorTests.XORIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [93ms]
test IntMaxVectorTests.XORIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [9ms]
test IntMaxVectorTests.XORIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test IntMaxVectorTests.XORIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [67ms]
test IntMaxVectorTests.XORIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.XORIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.XORIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.XORIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.XORIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.XORIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTests(int[-i * 5]): success [53ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTests(int[i * 5]): success [91ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTests(int[i + 1]): success [0ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[-i * 5], mask[i % 2]): success [15ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[i * 5], mask[i % 2]): success [109ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.XORReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.ZOMOIntMaxVectorTests(int[-i * 5]): success [90ms]
test IntMaxVectorTests.ZOMOIntMaxVectorTests(int[i * 5]): success [51ms]
test IntMaxVectorTests.ZOMOIntMaxVectorTests(int[i + 1]): success [142ms]
test IntMaxVectorTests.ZOMOIntMaxVectorTests(int[cornerCaseValue(i)]): success [50ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[-i * 5], mask[i % 2]): success [106ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[i * 5], mask[i % 2]): success [54ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[i + 1], mask[i % 2]): success [139ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [52ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[-i * 5], mask[true]): success [52ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[i * 5], mask[true]): success [52ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[i + 1], mask[true]): success [52ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[cornerCaseValue(i)], mask[true]): success [52ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[-i * 5], mask[false]): success [52ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[i * 5], mask[false]): success [52ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[i + 1], mask[false]): success [52ms]
test IntMaxVectorTests.ZOMOMaskedIntMaxVectorTests(int[cornerCaseValue(i)], mask[false]): success [52ms]
test IntMaxVectorTests.ZeroIntMaxVectorTests(int[-i * 5]): success [61ms]
test IntMaxVectorTests.ZeroIntMaxVectorTests(int[i * 5]): success [48ms]
test IntMaxVectorTests.ZeroIntMaxVectorTests(int[i + 1]): success [32ms]
test IntMaxVectorTests.ZeroIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.absIntMaxVectorTests(int[-i * 5]): success [38ms]
test IntMaxVectorTests.absIntMaxVectorTests(int[i * 5]): success [1ms]
test IntMaxVectorTests.absIntMaxVectorTests(int[i + 1]): success [73ms]
test IntMaxVectorTests.absIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTests(int[-i * 5], int[i * 5]): success [7ms]
test IntMaxVectorTests.addIntMaxVectorTests(int[-i * 5], int[i + 1]): success [41ms]
test IntMaxVectorTests.addIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [12ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test IntMaxVectorTests.addIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.addIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.allTrueIntMaxVectorTests(boolean[i % 2]): success [20ms]
test IntMaxVectorTests.allTrueIntMaxVectorTests(boolean[i % 5]): success [20ms]
test IntMaxVectorTests.andIntMaxVectorTests(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.andIntMaxVectorTests(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.andIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.andIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.andIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.andIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.anyTrueIntMaxVectorTests(boolean[i % 2]): success [5ms]
test IntMaxVectorTests.anyTrueIntMaxVectorTests(boolean[i % 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [5ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [5ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [5ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [1ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.bitwiseBlendIntMaxVectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.bitwiseDivByZeroSmokeTest(): success [10ms]
test IntMaxVectorTests.blendIntMaxVectorTests(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test IntMaxVectorTests.blendIntMaxVectorTests(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test IntMaxVectorTests.blendIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [134ms]
test IntMaxVectorTests.blendIntMaxVectorTests(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTests(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTests(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTests(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [17ms]
test IntMaxVectorTests.blendIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test IntMaxVectorTests.blendIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [83ms]
test IntMaxVectorTests.blendIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.blendIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[-i * 5], mask[i % 2]): success [137ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[i * 5], mask[i % 2]): success [40ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[i + 1], mask[i % 2]): success [116ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [41ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[-i * 5], mask[true]): success [53ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[-i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.compressIntMaxVectorTests(int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.divIntMaxVectorTests(int[-i * 5], int[i * 5]): success [133ms]
test IntMaxVectorTests.divIntMaxVectorTests(int[-i * 5], int[i + 1]): success [54ms]
test IntMaxVectorTests.divIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [134ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [10ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [95ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [171ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [54ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [248ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [54ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [54ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [53ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [54ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [53ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [132ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i], int[i]): success [118ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i], int[i - length / 2]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i], int[i + 1]): success [58ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i], int[i - 2]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i], int[zigZag(i)]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i], int[cornerCaseValue(i)]): success [52ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - length / 2], int[i]): success [86ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - length / 2], int[i - length / 2]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - length / 2], int[i + 1]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - length / 2], int[i - 2]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - length / 2], int[zigZag(i)]): success [55ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [54ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i + 1], int[i]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i + 1], int[i - length / 2]): success [62ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i + 1], int[i + 1]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i + 1], int[i - 2]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i + 1], int[zigZag(i)]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i + 1], int[cornerCaseValue(i)]): success [52ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - 2], int[i]): success [52ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - 2], int[i - length / 2]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - 2], int[i + 1]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - 2], int[i - 2]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - 2], int[zigZag(i)]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - 2], int[cornerCaseValue(i)]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[zigZag(i)], int[i]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[zigZag(i)], int[i - length / 2]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[zigZag(i)], int[i + 1]): success [52ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[zigZag(i)], int[i - 2]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[zigZag(i)], int[zigZag(i)]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [52ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[cornerCaseValue(i)], int[i]): success [52ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[cornerCaseValue(i)], int[i + 1]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[cornerCaseValue(i)], int[i - 2]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [52ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [53ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [1ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [9ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[-i * 5], mask[i % 2]): success [119ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[i * 5], mask[i % 2]): success [40ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[i + 1], mask[i % 2]): success [111ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[-i * 5], mask[true]): success [16ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[-i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.getIntMaxVectorTests(int[-i * 5]): success [4ms]
test IntMaxVectorTests.getIntMaxVectorTests(int[i * 5]): success [3ms]
test IntMaxVectorTests.getIntMaxVectorTests(int[i + 1]): success [73ms]
test IntMaxVectorTests.getIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.hashCodeIntMaxVectorTestsSmokeTest(int[-i * 5]): success [37ms]
test IntMaxVectorTests.hashCodeIntMaxVectorTestsSmokeTest(int[i * 5]): success [1ms]
test IntMaxVectorTests.hashCodeIntMaxVectorTestsSmokeTest(int[i + 1]): success [1ms]
test IntMaxVectorTests.hashCodeIntMaxVectorTestsSmokeTest(int[cornerCaseValue(i)]): success [1ms]
test IntMaxVectorTests.indexInRangeIntMaxVectorTestsSmokeTest(0): success [67ms]
test IntMaxVectorTests.indexInRangeIntMaxVectorTestsSmokeTest(-1): success [2ms]
test IntMaxVectorTests.indexInRangeIntMaxVectorTestsSmokeTest(1): success [16ms]
test IntMaxVectorTests.indexInRangeIntMaxVectorTestsSmokeTest(2): success [2ms]
test IntMaxVectorTests.indexInRangeIntMaxVectorTestsSmokeTest(-2): success [2ms]
test IntMaxVectorTests.indexInRangeLongIntMaxVectorTestsSmokeTest(0): success [2ms]
test IntMaxVectorTests.indexInRangeLongIntMaxVectorTestsSmokeTest(-1): success [2ms]
test IntMaxVectorTests.indexInRangeLongIntMaxVectorTestsSmokeTest(1): success [2ms]
test IntMaxVectorTests.indexInRangeLongIntMaxVectorTestsSmokeTest(2): success [3ms]
test IntMaxVectorTests.indexInRangeLongIntMaxVectorTestsSmokeTest(-2): success [2ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(0): success [0ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(1): success [0ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(32): success [0ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(37): success [0ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(1024): success [0ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(1025): success [0ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(1029): success [0ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(0): success [0ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(1): success [4ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(32): success [0ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(37): success [0ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(1024): success [1ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(1025): success [0ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(1029): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i], int[i]): success [117ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i], int[i - length / 2]): success [54ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i], int[i + 1]): success [58ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i], int[i - 2]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i], int[zigZag(i)]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i], int[cornerCaseValue(i)]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - length / 2], int[i]): success [111ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - length / 2], int[i - length / 2]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - length / 2], int[i + 1]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - length / 2], int[i - 2]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - length / 2], int[zigZag(i)]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i + 1], int[i]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i + 1], int[i - length / 2]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i + 1], int[i + 1]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i + 1], int[i - 2]): success [51ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i + 1], int[zigZag(i)]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i + 1], int[cornerCaseValue(i)]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - 2], int[i]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - 2], int[i - length / 2]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - 2], int[i + 1]): success [51ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - 2], int[i - 2]): success [51ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - 2], int[zigZag(i)]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - 2], int[cornerCaseValue(i)]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[zigZag(i)], int[i]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[zigZag(i)], int[i - length / 2]): success [51ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[zigZag(i)], int[i + 1]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[zigZag(i)], int[i - 2]): success [51ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[zigZag(i)], int[zigZag(i)]): success [51ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[cornerCaseValue(i)], int[i]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[cornerCaseValue(i)], int[i + 1]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[cornerCaseValue(i)], int[i - 2]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [52ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i], int[i]): success [1ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [3ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [5ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.maskAndIntMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test IntMaxVectorTests.maskAndIntMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test IntMaxVectorTests.maskAndNotIntMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test IntMaxVectorTests.maskAndNotIntMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test IntMaxVectorTests.maskCompressIntMaxVectorTestsSmokeTest(mask[i % 2]): success [257ms]
test IntMaxVectorTests.maskCompressIntMaxVectorTestsSmokeTest(mask[true]): success [103ms]
test IntMaxVectorTests.maskCompressIntMaxVectorTestsSmokeTest(mask[false]): success [54ms]
test IntMaxVectorTests.maskEqIntMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test IntMaxVectorTests.maskEqIntMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test IntMaxVectorTests.maskEqualsIntMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test IntMaxVectorTests.maskEqualsIntMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test IntMaxVectorTests.maskFirstTrueIntMaxVectorTestsSmokeTest(mask[i % 2]): success [36ms]
test IntMaxVectorTests.maskFirstTrueIntMaxVectorTestsSmokeTest(mask[true]): success [35ms]
test IntMaxVectorTests.maskFirstTrueIntMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test IntMaxVectorTests.maskHashCodeIntMaxVectorTestsSmokeTest(mask[i % 2]): success [0ms]
test IntMaxVectorTests.maskHashCodeIntMaxVectorTestsSmokeTest(mask[true]): success [0ms]
test IntMaxVectorTests.maskHashCodeIntMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test IntMaxVectorTests.maskLastTrueIntMaxVectorTestsSmokeTest(mask[i % 2]): success [71ms]
test IntMaxVectorTests.maskLastTrueIntMaxVectorTestsSmokeTest(mask[true]): success [35ms]
test IntMaxVectorTests.maskLastTrueIntMaxVectorTestsSmokeTest(mask[false]): success [17ms]
test IntMaxVectorTests.maskOrIntMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test IntMaxVectorTests.maskOrIntMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test IntMaxVectorTests.maskTrueCountIntMaxVectorTestsSmokeTest(mask[i % 2]): success [34ms]
test IntMaxVectorTests.maskTrueCountIntMaxVectorTestsSmokeTest(mask[true]): success [37ms]
test IntMaxVectorTests.maskTrueCountIntMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test IntMaxVectorTests.maskXorIntMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test IntMaxVectorTests.maskXorIntMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test IntMaxVectorTests.maxIntMaxVectorTests(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.maxIntMaxVectorTests(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.maxIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.maxIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.maxIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.maxIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.minIntMaxVectorTests(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.minIntMaxVectorTests(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.minIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.minIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.minIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.minIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTests(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.mulIntMaxVectorTests(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.negIntMaxVectorTests(int[-i * 5]): success [12ms]
test IntMaxVectorTests.negIntMaxVectorTests(int[i * 5]): success [1ms]
test IntMaxVectorTests.negIntMaxVectorTests(int[i + 1]): success [73ms]
test IntMaxVectorTests.negIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.notIntMaxVectorTests(int[-i * 5]): success [16ms]
test IntMaxVectorTests.notIntMaxVectorTests(int[i * 5]): success [1ms]
test IntMaxVectorTests.notIntMaxVectorTests(int[i + 1]): success [79ms]
test IntMaxVectorTests.notIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.orIntMaxVectorTests(int[-i * 5], int[i * 5]): success [7ms]
test IntMaxVectorTests.orIntMaxVectorTests(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.orIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.orIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.orIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.orIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.shuffleEqualsIntMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [9ms]
test IntMaxVectorTests.shuffleEqualsIntMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [7ms]
test IntMaxVectorTests.shuffleMiscellaneousIntMaxVectorTestsSmokeTest(shuffle[random]): success [16ms]
test IntMaxVectorTests.shuffleTest(): success [316ms]
test IntMaxVectorTests.shuffleToStringIntMaxVectorTestsSmokeTest(shuffle[random]): success [35ms]
test IntMaxVectorTests.sliceBinaryIntMaxVectorTestsBinary(int[-i * 5], int[i * 5]): success [526ms]
test IntMaxVectorTests.sliceBinaryIntMaxVectorTestsBinary(int[-i * 5], int[i + 1]): success [49ms]
test IntMaxVectorTests.sliceBinaryIntMaxVectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [170ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [111ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [50ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [199ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [49ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [48ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [48ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [52ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [51ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [48ms]
test IntMaxVectorTests.sliceUnaryIntMaxVectorTests(int[-i * 5]): success [174ms]
test IntMaxVectorTests.sliceUnaryIntMaxVectorTests(int[i * 5]): success [48ms]
test IntMaxVectorTests.sliceUnaryIntMaxVectorTests(int[i + 1]): success [153ms]
test IntMaxVectorTests.sliceUnaryIntMaxVectorTests(int[cornerCaseValue(i)]): success [48ms]
test IntMaxVectorTests.smokeTest1(): success [0ms]
test IntMaxVectorTests.smokeTest2(): success [80ms]
test IntMaxVectorTests.subIntMaxVectorTests(int[-i * 5], int[i * 5]): success [6ms]
test IntMaxVectorTests.subIntMaxVectorTests(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [48ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.toDoubleArrayIntMaxVectorTestsSmokeTest(int[-i * 5]): success [0ms]
test IntMaxVectorTests.toDoubleArrayIntMaxVectorTestsSmokeTest(int[i * 5]): success [0ms]
test IntMaxVectorTests.toDoubleArrayIntMaxVectorTestsSmokeTest(int[i + 1]): success [0ms]
test IntMaxVectorTests.toDoubleArrayIntMaxVectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.toIntArrayIntMaxVectorTestsSmokeTest(int[-i * 5]): success [0ms]
test IntMaxVectorTests.toIntArrayIntMaxVectorTestsSmokeTest(int[i * 5]): success [0ms]
test IntMaxVectorTests.toIntArrayIntMaxVectorTestsSmokeTest(int[i + 1]): success [0ms]
test IntMaxVectorTests.toIntArrayIntMaxVectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.toLongArrayIntMaxVectorTestsSmokeTest(int[-i * 5]): success [0ms]
test IntMaxVectorTests.toLongArrayIntMaxVectorTestsSmokeTest(int[i * 5]): success [0ms]
test IntMaxVectorTests.toLongArrayIntMaxVectorTestsSmokeTest(int[i + 1]): success [0ms]
test IntMaxVectorTests.toLongArrayIntMaxVectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.toStringIntMaxVectorTestsSmokeTest(int[-i * 5]): success [1ms]
test IntMaxVectorTests.toStringIntMaxVectorTestsSmokeTest(int[i * 5]): success [7ms]
test IntMaxVectorTests.toStringIntMaxVectorTestsSmokeTest(int[i + 1]): success [4ms]
test IntMaxVectorTests.toStringIntMaxVectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.unsliceBinaryIntMaxVectorTestsBinary(int[-i * 5], int[i * 5]): success [182ms]
test IntMaxVectorTests.unsliceBinaryIntMaxVectorTestsBinary(int[-i * 5], int[i + 1]): success [50ms]
test IntMaxVectorTests.unsliceBinaryIntMaxVectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [193ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [404ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [97ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [362ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [227ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [96ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [96ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [133ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [98ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [95ms]
test IntMaxVectorTests.unsliceUnaryIntMaxVectorTests(int[-i * 5]): success [163ms]
test IntMaxVectorTests.unsliceUnaryIntMaxVectorTests(int[i * 5]): success [48ms]
test IntMaxVectorTests.unsliceUnaryIntMaxVectorTests(int[i + 1]): success [205ms]
test IntMaxVectorTests.unsliceUnaryIntMaxVectorTests(int[cornerCaseValue(i)]): success [47ms]
test IntMaxVectorTests.viewAsFloatingLanesTest(): success [420ms]
test IntMaxVectorTests.viewAsIntegeralLanesTest(): success [0ms]
test IntMaxVectorTests.withIntMaxVectorTests(int[-i * 5], int[i * 5]): success [17ms]
test IntMaxVectorTests.withIntMaxVectorTests(int[-i * 5], int[i + 1]): success [17ms]
test IntMaxVectorTests.withIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [91ms]

===============================================
jdk/incubator/vector/IntMaxVectorTests.java
Total tests run: 3618, Passes: 3617, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/5 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/IntMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/IntMaxVectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/IntMaxVectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/IntMaxVectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/IntMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/IntMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/IntMaxVectorTests.d/testng.0.jta jdk/incubator/vector/IntMaxVectorTests.java false IntMaxVectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Double64VectorTests.java
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/MethodOverideTest.java
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/Byte128VectorTests.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorTests.java
Passed: jdk/incubator/vector/Float64VectorTests.java
TEST: jdk/incubator/vector/Int512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.078 seconds
messages:
command: build Int512VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 23:48:45 IST 2025
Test directory:
  compile: Int512VectorTests
finished: Wed Apr 16 23:48:46 IST 2025
elapsed time (seconds): 1.078

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.077 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 23:48:45 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 10
Process id: 1860332
finished: Wed Apr 16 23:48:46 IST 2025
elapsed time (seconds): 1.077
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int512VectorTests 
TIME:   287.255 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int512VectorTests 
started: Wed Apr 16 23:48:46 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1865883
finished: Wed Apr 16 23:53:34 IST 2025
elapsed time (seconds): 287.255
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -7268824074904921220
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-7268824074904921220" to command line.
test Int512VectorTests.ABSInt512VectorTests(int[-i * 5]): success [350ms]
test Int512VectorTests.ABSInt512VectorTests(int[i * 5]): success [414ms]
test Int512VectorTests.ABSInt512VectorTests(int[i + 1]): success [15ms]
test Int512VectorTests.ABSInt512VectorTests(int[cornerCaseValue(i)]): success [5ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[-i * 5], mask[i % 2]): success [144ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i * 5], mask[i % 2]): success [127ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i + 1], mask[i % 2]): success [112ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[-i * 5], mask[true]): success [118ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i * 5], mask[true]): success [2ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[-i * 5], mask[false]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i * 5], mask[false]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.ADDInt512VectorTests(int[-i * 5], int[i * 5]): success [135ms]
test Int512VectorTests.ADDInt512VectorTests(int[-i * 5], int[i + 1]): success [335ms]
test Int512VectorTests.ADDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [15ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [7ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [21ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [8ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [241ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [69ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [4ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [96ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[-i * 5]): success [122ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[i * 5]): success [3ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[i + 1]): success [69ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[-i * 5], mask[i % 2]): success [95ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i + 1], mask[i % 2]): success [88ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[-i * 5], mask[true]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i + 1], mask[true]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[-i * 5], mask[false]): success [1ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i * 5], mask[false]): success [14ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[-i * 5]): success [8ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[i * 5]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[i + 1]): success [10ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[-i * 5], mask[i % 2]): success [7ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i * 5], mask[false]): success [12ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.ANDInt512VectorTests(int[-i * 5], int[i * 5]): success [443ms]
test Int512VectorTests.ANDInt512VectorTests(int[-i * 5], int[i + 1]): success [102ms]
test Int512VectorTests.ANDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [3ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [4ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [18ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [10ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [4ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [87ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[-i * 5]): success [169ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[i * 5]): success [2ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[i + 1]): success [66ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[-i * 5], mask[i % 2]): success [20ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i + 1], mask[i % 2]): success [89ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i * 5], mask[true]): success [2ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i * 5], mask[false]): success [14ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int512VectorTests.AND_NOTInt512VectorTests(int[-i * 5], int[i * 5]): success [396ms]
test Int512VectorTests.AND_NOTInt512VectorTests(int[-i * 5], int[i + 1]): success [258ms]
test Int512VectorTests.AND_NOTInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [49ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [81ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [97ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [62ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [48ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [199ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [50ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [48ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [48ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [85ms]
test Int512VectorTests.ASHRInt512VectorTests(int[-i * 5], int[i * 5]): success [134ms]
test Int512VectorTests.ASHRInt512VectorTests(int[-i * 5], int[i + 1]): success [224ms]
test Int512VectorTests.ASHRInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [46ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [121ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [110ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [47ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [55ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [221ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [48ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [47ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [47ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [47ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [109ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [306ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[-i * 5]): success [9ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[i * 5]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[i + 1]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [16ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [27ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [69ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [30ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [10ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [60ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [5ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [14ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [126ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [8ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [8ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [173ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [7ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [7ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [7ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [8ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [7ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [327ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [3ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [106ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [66ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [46ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [4ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [4ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseVal

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

 5], mask[true]): success [232ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [452ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [233ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [241ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [235ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [236ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i]): success [144ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i - length / 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i + 1]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i - 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[zigZag(i)]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i - length / 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i + 1]): success [101ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i - 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[zigZag(i)]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i - length / 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i + 1]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i - 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[zigZag(i)]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [73ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i - length / 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i + 1]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i - 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[zigZag(i)]): success [78ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i - length / 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i + 1]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i - 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[zigZag(i)]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [72ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [9ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [72ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.expandInt512VectorTests(int[-i * 5], mask[i % 2]): success [364ms]
test Int512VectorTests.expandInt512VectorTests(int[i * 5], mask[i % 2]): success [110ms]
test Int512VectorTests.expandInt512VectorTests(int[i + 1], mask[i % 2]): success [72ms]
test Int512VectorTests.expandInt512VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [79ms]
test Int512VectorTests.expandInt512VectorTests(int[-i * 5], mask[true]): success [83ms]
test Int512VectorTests.expandInt512VectorTests(int[i * 5], mask[true]): success [212ms]
test Int512VectorTests.expandInt512VectorTests(int[i + 1], mask[true]): success [2ms]
test Int512VectorTests.expandInt512VectorTests(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.expandInt512VectorTests(int[-i * 5], mask[false]): success [4ms]
test Int512VectorTests.expandInt512VectorTests(int[i * 5], mask[false]): success [4ms]
test Int512VectorTests.expandInt512VectorTests(int[i + 1], mask[false]): success [4ms]
test Int512VectorTests.expandInt512VectorTests(int[cornerCaseValue(i)], mask[false]): success [19ms]
test Int512VectorTests.getInt512VectorTests(int[-i * 5]): success [8ms]
test Int512VectorTests.getInt512VectorTests(int[i * 5]): success [8ms]
test Int512VectorTests.getInt512VectorTests(int[i + 1]): success [7ms]
test Int512VectorTests.getInt512VectorTests(int[cornerCaseValue(i)]): success [7ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[-i * 5]): success [35ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(0): success [63ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(-1): success [2ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(1): success [15ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(2): success [2ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(-2): success [3ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(0): success [2ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(-1): success [1ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(1): success [1ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(2): success [1ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(-2): success [1ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(0): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(32): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(37): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1024): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1025): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1029): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(0): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1): success [4ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(32): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(37): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1024): success [1ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1025): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1029): success [0ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i]): success [144ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i - length / 2]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i + 1]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i - 2]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[zigZag(i)]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i]): success [99ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i - length / 2]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i + 1]): success [78ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i - 2]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[zigZag(i)]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i - length / 2]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i + 1]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i - 2]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[zigZag(i)]): success [73ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i - length / 2]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i + 1]): success [77ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i - 2]): success [79ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[zigZag(i)]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i - length / 2]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i + 1]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i - 2]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[zigZag(i)]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [6ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [72ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.maskAndInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Int512VectorTests.maskAndInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskAndNotInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [11ms]
test Int512VectorTests.maskAndNotInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskCompressInt512VectorTestsSmokeTest(mask[i % 2]): success [679ms]
test Int512VectorTests.maskCompressInt512VectorTestsSmokeTest(mask[true]): success [324ms]
test Int512VectorTests.maskCompressInt512VectorTestsSmokeTest(mask[false]): success [348ms]
test Int512VectorTests.maskEqInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int512VectorTests.maskEqInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskEqualsInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int512VectorTests.maskEqualsInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskFirstTrueInt512VectorTestsSmokeTest(mask[i % 2]): success [70ms]
test Int512VectorTests.maskFirstTrueInt512VectorTestsSmokeTest(mask[true]): success [93ms]
test Int512VectorTests.maskFirstTrueInt512VectorTestsSmokeTest(mask[false]): success [61ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(-1): success [57ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(0): success [0ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int512VectorTests.maskHashCodeInt512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int512VectorTests.maskHashCodeInt512VectorTestsSmokeTest(mask[true]): success [0ms]
test Int512VectorTests.maskHashCodeInt512VectorTestsSmokeTest(mask[false]): success [0ms]
test Int512VectorTests.maskLastTrueInt512VectorTestsSmokeTest(mask[i % 2]): success [112ms]
test Int512VectorTests.maskLastTrueInt512VectorTestsSmokeTest(mask[true]): success [96ms]
test Int512VectorTests.maskLastTrueInt512VectorTestsSmokeTest(mask[false]): success [82ms]
test Int512VectorTests.maskOrInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Int512VectorTests.maskOrInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskTrueCountInt512VectorTestsSmokeTest(mask[i % 2]): success [69ms]
test Int512VectorTests.maskTrueCountInt512VectorTestsSmokeTest(mask[true]): success [94ms]
test Int512VectorTests.maskTrueCountInt512VectorTestsSmokeTest(mask[false]): success [61ms]
test Int512VectorTests.maskXorInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int512VectorTests.maskXorInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maxInt512VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.maxInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.maxInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [5ms]
test Int512VectorTests.maxInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int512VectorTests.maxInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.maxInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.minInt512VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.minInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.minInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.minInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.minInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.minInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [32ms]
test Int512VectorTests.mulInt512VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int512VectorTests.mulInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.mulInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.negInt512VectorTests(int[-i * 5]): success [8ms]
test Int512VectorTests.negInt512VectorTests(int[i * 5]): success [8ms]
test Int512VectorTests.negInt512VectorTests(int[i + 1]): success [2ms]
test Int512VectorTests.negInt512VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int512VectorTests.notInt512VectorTests(int[-i * 5]): success [54ms]
test Int512VectorTests.notInt512VectorTests(int[i * 5]): success [57ms]
test Int512VectorTests.notInt512VectorTests(int[i + 1]): success [45ms]
test Int512VectorTests.notInt512VectorTests(int[cornerCaseValue(i)]): success [45ms]
test Int512VectorTests.orInt512VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int512VectorTests.orInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.orInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.orInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.orInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.orInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.shuffleEqualsInt512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [9ms]
test Int512VectorTests.shuffleEqualsInt512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [6ms]
test Int512VectorTests.shuffleMiscellaneousInt512VectorTestsSmokeTest(shuffle[random]): success [1ms]
test Int512VectorTests.shuffleTest(): success [596ms]
test Int512VectorTests.shuffleToStringInt512VectorTestsSmokeTest(shuffle[random]): success [34ms]
test Int512VectorTests.sliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i * 5]): success [634ms]
test Int512VectorTests.sliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i + 1]): success [1236ms]
test Int512VectorTests.sliceBinaryInt512VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [427ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [399ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [802ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [400ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [398ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1438ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [420ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [401ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [401ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [400ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[-i * 5]): success [329ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[i * 5]): success [747ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[i + 1]): success [316ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[cornerCaseValue(i)]): success [352ms]
test Int512VectorTests.smokeTest1(): success [0ms]
test Int512VectorTests.smokeTest2(): success [87ms]
test Int512VectorTests.subInt512VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.subInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.subInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int512VectorTests.subInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.subInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[-i * 5]): success [3ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[-i * 5]): success [5ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[i * 5]): success [7ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[i + 1]): success [13ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [12ms]
test Int512VectorTests.unsliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i * 5]): success [366ms]
test Int512VectorTests.unsliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i + 1]): success [946ms]
test Int512VectorTests.unsliceBinaryInt512VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [321ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [686ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [2835ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [667ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [687ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [4204ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [669ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [670ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [683ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [752ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[-i * 5]): success [325ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[i * 5]): success [858ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[i + 1]): success [457ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[cornerCaseValue(i)]): success [375ms]
test Int512VectorTests.viewAsFloatingLanesTest(): success [381ms]
test Int512VectorTests.viewAsIntegeralLanesTest(): success [7ms]
test Int512VectorTests.withInt512VectorTests(int[-i * 5], int[i * 5]): success [10ms]
test Int512VectorTests.withInt512VectorTests(int[-i * 5], int[i + 1]): success [10ms]
test Int512VectorTests.withInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [10ms]

===============================================
jdk/incubator/vector/Int512VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Int512VectorTests.d/testng.0.jta jdk/incubator/vector/Int512VectorTests.java false Int512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long256VectorTests.java
Passed: jdk/incubator/vector/Byte64VectorTests.java
Passed: jdk/incubator/vector/Long128VectorTests.java
Passed: jdk/incubator/vector/UnalignedHeapTest.java
Passed: jdk/incubator/vector/Long512VectorTests.java
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/LongMaxVectorTests.java
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/VectorMathTest.java
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int64VectorTests.java
Passed: jdk/incubator/vector/ShortMaxVectorTests.java
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/Short128VectorTests.java
Passed: jdk/incubator/vector/AddTest.java
TEST: jdk/incubator/vector/Long64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.109 seconds
messages:
command: build Long64VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 23:51:59 IST 2025
Test directory:
  compile: Long64VectorTests
finished: Wed Apr 16 23:52:00 IST 2025
elapsed time (seconds): 1.109

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.108 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long64VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 23:51:59 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 12
Process id: 1860623
finished: Wed Apr 16 23:52:00 IST 2025
elapsed time (seconds): 1.108
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/5 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long64VectorTests 
TIME:   548.948 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long64VectorTests 
started: Wed Apr 16 23:52:00 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1867069
finished: Thu Apr 17 00:01:09 IST 2025
elapsed time (seconds): 548.948
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 5279086491832584036
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=5279086491832584036" to command line.
test Long64VectorTests.ABSLong64VectorTests(long[-i * 5]): success [577ms]
test Long64VectorTests.ABSLong64VectorTests(long[i * 5]): success [28ms]
test Long64VectorTests.ABSLong64VectorTests(long[i + 1]): success [63ms]
test Long64VectorTests.ABSLong64VectorTests(long[cornerCaseValue(i)]): success [13ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[-i * 5], mask[i % 2]): success [263ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[i * 5], mask[i % 2]): success [25ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[i + 1], mask[i % 2]): success [5ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [83ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[-i * 5], mask[true]): success [11ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[i * 5], mask[true]): success [7ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[i + 1], mask[true]): success [7ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[cornerCaseValue(i)], mask[true]): success [8ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[-i * 5], mask[false]): success [101ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[i * 5], mask[false]): success [12ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[i + 1], mask[false]): success [8ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long64VectorTests.ADDLong64VectorTests(long[-i * 5], long[i * 5]): success [287ms]
test Long64VectorTests.ADDLong64VectorTests(long[-i * 5], long[i + 1]): success [34ms]
test Long64VectorTests.ADDLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [50ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [16ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [25ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [4ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [4ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [4ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [5ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [171ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [33ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [34ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [14ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [6ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [6ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [6ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [10ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [15ms]
test Long64VectorTests.ADDReduceLong64VectorTests(long[-i * 5]): success [122ms]
test Long64VectorTests.ADDReduceLong64VectorTests(long[i * 5]): success [33ms]
test Long64VectorTests.ADDReduceLong64VectorTests(long[i + 1]): success [8ms]
test Long64VectorTests.ADDReduceLong64VectorTests(long[cornerCaseValue(i)]): success [66ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[-i * 5], mask[i % 2]): success [117ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[i * 5], mask[i % 2]): success [43ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[i + 1], mask[i % 2]): success [34ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [23ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[-i * 5], mask[true]): success [83ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[i * 5], mask[true]): success [6ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[i + 1], mask[true]): success [5ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [5ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[-i * 5], mask[false]): success [40ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[i * 5], mask[false]): success [5ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[i + 1], mask[false]): success [6ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [5ms]
test Long64VectorTests.ADDReduceLongLong64VectorTests(long[-i * 5]): success [5ms]
test Long64VectorTests.ADDReduceLongLong64VectorTests(long[i * 5]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTests(long[i + 1]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long64VectorTests.ANDLong64VectorTests(long[-i * 5], long[i * 5]): success [195ms]
test Long64VectorTests.ANDLong64VectorTests(long[-i * 5], long[i + 1]): success [7ms]
test Long64VectorTests.ANDLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [34ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [43ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [21ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [2ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [73ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [33ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [34ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [8ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [8ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [6ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [7ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [6ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [8ms]
test Long64VectorTests.ANDReduceLong64VectorTests(long[-i * 5]): success [119ms]
test Long64VectorTests.ANDReduceLong64VectorTests(long[i * 5]): success [34ms]
test Long64VectorTests.ANDReduceLong64VectorTests(long[i + 1]): success [8ms]
test Long64VectorTests.ANDReduceLong64VectorTests(long[cornerCaseValue(i)]): success [67ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[-i * 5], mask[i % 2]): success [81ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[i * 5], mask[i % 2]): success [51ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[i + 1], mask[i % 2]): success [9ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [109ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[-i * 5], mask[true]): success [9ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[i * 5], mask[true]): success [9ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[i + 1], mask[true]): success [9ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [9ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[-i * 5], mask[false]): success [15ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[i * 5], mask[false]): success [9ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[i + 1], mask[false]): success [9ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [10ms]
test Long64VectorTests.AND_NOTLong64VectorTests(long[-i * 5], long[i * 5]): success [387ms]
test Long64VectorTests.AND_NOTLong64VectorTests(long[-i * 5], long[i + 1]): success [178ms]
test Long64VectorTests.AND_NOTLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [179ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [310ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [181ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [235ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [173ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [174ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [173ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [174ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [173ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [176ms]
test Long64VectorTests.ASHRLong64VectorTests(long[-i * 5], long[i * 5]): success [334ms]
test Long64VectorTests.ASHRLong64VectorTests(long[-i * 5], long[i + 1]): success [169ms]
test Long64VectorTests.ASHRLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [170ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [324ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [175ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [208ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [175ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [175ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [175ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [175ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [174ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [175ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [203ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [22ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftConst(long[-i * 5]): success [39ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftConst(long[i * 5]): success [20ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftConst(long[i + 1]): success [5ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [110ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [56ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [49ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [5ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [5ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [57ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [48ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [50ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [5ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [4ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [144ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [49ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [58ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [11ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [11ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [13ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [17ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [11ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [12ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [11ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [12ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [12ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [452ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [3ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [4ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [89ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [8ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [5ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [27ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [68ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [5ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cor

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

i * 5], long[i * 5], mask[true]): success [8ms]
test Long64VectorTests.divLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [7ms]
test Long64VectorTests.divLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [7ms]
test Long64VectorTests.divLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [8ms]
test Long64VectorTests.divLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [8ms]
test Long64VectorTests.divLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [8ms]
test Long64VectorTests.divLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test Long64VectorTests.divLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [4ms]
test Long64VectorTests.divLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [4ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [836ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [607ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [672ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [604ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): failure [16ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$7(LongVector.java:914)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.bOpTemplateMF(LongVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Long64Vector.bOpMF(Long64Vector.java:204)
	at jdk.incubator.vector/jdk.incubator.vector.Long64Vector.bOpMF(Long64Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$6(LongVector.java:914)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lanewiseTemplate(LongVector.java:895)
	at jdk.incubator.vector/jdk.incubator.vector.Long64Vector.lanewise(Long64Vector.java:281)
	at jdk.incubator.vector/jdk.incubator.vector.Long64Vector.lanewise(Long64Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.div(LongVector.java:1645)
	at Long64VectorTests.divLong64VectorTestsMasked(Long64VectorTests.java:1780)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [610ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [606ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [613ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [648ms]
test Long64VectorTests.eqLong64VectorTests(long[i], long[i]): success [209ms]
test Long64VectorTests.eqLong64VectorTests(long[i], long[i - length / 2]): success [116ms]
test Long64VectorTests.eqLong64VectorTests(long[i], long[i + 1]): success [116ms]
test Long64VectorTests.eqLong64VectorTests(long[i], long[i - 2]): success [139ms]
test Long64VectorTests.eqLong64VectorTests(long[i], long[zigZag(i)]): success [116ms]
test Long64VectorTests.eqLong64VectorTests(long[i], long[cornerCaseValue(i)]): success [115ms]
test Long64VectorTests.eqLong64VectorTests(long[i - length / 2], long[i]): success [116ms]
test Long64VectorTests.eqLong64VectorTests(long[i - length / 2], long[i - length / 2]): success [117ms]
test Long64VectorTests.eqLong64VectorTests(long[i - length / 2], long[i + 1]): success [116ms]
test Long64VectorTests.eqLong64VectorTests(long[i - length / 2], long[i - 2]): success [125ms]
test Long64VectorTests.eqLong64VectorTests(long[i - length / 2], long[zigZag(i)]): success [115ms]
test Long64VectorTests.eqLong64VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [116ms]
test Long64VectorTests.eqLong64VectorTests(long[i + 1], long[i]): success [117ms]
test Long64VectorTests.eqLong64VectorTests(long[i + 1], long[i - length / 2]): success [131ms]
test Long64VectorTests.eqLong64VectorTests(long[i + 1], long[i + 1]): success [115ms]
test Long64VectorTests.eqLong64VectorTests(long[i + 1], long[i - 2]): success [114ms]
test Long64VectorTests.eqLong64VectorTests(long[i + 1], long[zigZag(i)]): success [115ms]
test Long64VectorTests.eqLong64VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [115ms]
test Long64VectorTests.eqLong64VectorTests(long[i - 2], long[i]): success [115ms]
test Long64VectorTests.eqLong64VectorTests(long[i - 2], long[i - length / 2]): success [115ms]
test Long64VectorTests.eqLong64VectorTests(long[i - 2], long[i + 1]): success [141ms]
test Long64VectorTests.eqLong64VectorTests(long[i - 2], long[i - 2]): success [118ms]
test Long64VectorTests.eqLong64VectorTests(long[i - 2], long[zigZag(i)]): success [113ms]
test Long64VectorTests.eqLong64VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [113ms]
test Long64VectorTests.eqLong64VectorTests(long[zigZag(i)], long[i]): success [113ms]
test Long64VectorTests.eqLong64VectorTests(long[zigZag(i)], long[i - length / 2]): success [113ms]
test Long64VectorTests.eqLong64VectorTests(long[zigZag(i)], long[i + 1]): success [113ms]
test Long64VectorTests.eqLong64VectorTests(long[zigZag(i)], long[i - 2]): success [114ms]
test Long64VectorTests.eqLong64VectorTests(long[zigZag(i)], long[zigZag(i)]): success [113ms]
test Long64VectorTests.eqLong64VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [113ms]
test Long64VectorTests.eqLong64VectorTests(long[cornerCaseValue(i)], long[i]): success [134ms]
test Long64VectorTests.eqLong64VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [198ms]
test Long64VectorTests.eqLong64VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [151ms]
test Long64VectorTests.eqLong64VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [114ms]
test Long64VectorTests.eqLong64VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [114ms]
test Long64VectorTests.eqLong64VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [115ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [4ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [52ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [3ms]
test Long64VectorTests.expandLong64VectorTests(long[-i * 5], mask[i % 2]): success [128ms]
test Long64VectorTests.expandLong64VectorTests(long[i * 5], mask[i % 2]): success [24ms]
test Long64VectorTests.expandLong64VectorTests(long[i + 1], mask[i % 2]): success [23ms]
test Long64VectorTests.expandLong64VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [24ms]
test Long64VectorTests.expandLong64VectorTests(long[-i * 5], mask[true]): success [23ms]
test Long64VectorTests.expandLong64VectorTests(long[i * 5], mask[true]): success [23ms]
test Long64VectorTests.expandLong64VectorTests(long[i + 1], mask[true]): success [20ms]
test Long64VectorTests.expandLong64VectorTests(long[cornerCaseValue(i)], mask[true]): success [14ms]
test Long64VectorTests.expandLong64VectorTests(long[-i * 5], mask[false]): success [45ms]
test Long64VectorTests.expandLong64VectorTests(long[i * 5], mask[false]): success [15ms]
test Long64VectorTests.expandLong64VectorTests(long[i + 1], mask[false]): success [15ms]
test Long64VectorTests.expandLong64VectorTests(long[cornerCaseValue(i)], mask[false]): success [15ms]
test Long64VectorTests.getLong64VectorTests(long[-i * 5]): success [40ms]
test Long64VectorTests.getLong64VectorTests(long[i * 5]): success [3ms]
test Long64VectorTests.getLong64VectorTests(long[i + 1]): success [5ms]
test Long64VectorTests.getLong64VectorTests(long[cornerCaseValue(i)]): success [4ms]
test Long64VectorTests.hashCodeLong64VectorTestsSmokeTest(long[-i * 5]): success [101ms]
test Long64VectorTests.hashCodeLong64VectorTestsSmokeTest(long[i * 5]): success [13ms]
test Long64VectorTests.hashCodeLong64VectorTestsSmokeTest(long[i + 1]): success [18ms]
test Long64VectorTests.hashCodeLong64VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [4ms]
test Long64VectorTests.indexInRangeLong64VectorTestsSmokeTest(0): success [102ms]
test Long64VectorTests.indexInRangeLong64VectorTestsSmokeTest(-1): success [5ms]
test Long64VectorTests.indexInRangeLong64VectorTestsSmokeTest(1): success [5ms]
test Long64VectorTests.indexInRangeLong64VectorTestsSmokeTest(2): success [7ms]
test Long64VectorTests.indexInRangeLong64VectorTestsSmokeTest(-2): success [7ms]
test Long64VectorTests.indexInRangeLongLong64VectorTestsSmokeTest(0): success [7ms]
test Long64VectorTests.indexInRangeLongLong64VectorTestsSmokeTest(-1): success [8ms]
test Long64VectorTests.indexInRangeLongLong64VectorTestsSmokeTest(1): success [8ms]
test Long64VectorTests.indexInRangeLongLong64VectorTestsSmokeTest(2): success [18ms]
test Long64VectorTests.indexInRangeLongLong64VectorTestsSmokeTest(-2): success [8ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(0): success [0ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(1): success [0ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(32): success [0ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(37): success [0ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(1024): success [0ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(1025): success [0ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(1029): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(0): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(1): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(32): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(37): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(1024): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(1025): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(1029): success [0ms]
test Long64VectorTests.ltLong64VectorTests(long[i], long[i]): success [205ms]
test Long64VectorTests.ltLong64VectorTests(long[i], long[i - length / 2]): success [113ms]
test Long64VectorTests.ltLong64VectorTests(long[i], long[i + 1]): success [114ms]
test Long64VectorTests.ltLong64VectorTests(long[i], long[i - 2]): success [172ms]
test Long64VectorTests.ltLong64VectorTests(long[i], long[zigZag(i)]): success [116ms]
test Long64VectorTests.ltLong64VectorTests(long[i], long[cornerCaseValue(i)]): success [116ms]
test Long64VectorTests.ltLong64VectorTests(long[i - length / 2], long[i]): success [114ms]
test Long64VectorTests.ltLong64VectorTests(long[i - length / 2], long[i - length / 2]): success [113ms]
test Long64VectorTests.ltLong64VectorTests(long[i - length / 2], long[i + 1]): success [119ms]
test Long64VectorTests.ltLong64VectorTests(long[i - length / 2], long[i - 2]): success [114ms]
test Long64VectorTests.ltLong64VectorTests(long[i - length / 2], long[zigZag(i)]): success [159ms]
test Long64VectorTests.ltLong64VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [159ms]
test Long64VectorTests.ltLong64VectorTests(long[i + 1], long[i]): success [115ms]
test Long64VectorTests.ltLong64VectorTests(long[i + 1], long[i - length / 2]): success [122ms]
test Long64VectorTests.ltLong64VectorTests(long[i + 1], long[i + 1]): success [115ms]
test Long64VectorTests.ltLong64VectorTests(long[i + 1], long[i - 2]): success [113ms]
test Long64VectorTests.ltLong64VectorTests(long[i + 1], long[zigZag(i)]): success [113ms]
test Long64VectorTests.ltLong64VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [115ms]
test Long64VectorTests.ltLong64VectorTests(long[i - 2], long[i]): success [115ms]
test Long64VectorTests.ltLong64VectorTests(long[i - 2], long[i - length / 2]): success [124ms]
test Long64VectorTests.ltLong64VectorTests(long[i - 2], long[i + 1]): success [240ms]
test Long64VectorTests.ltLong64VectorTests(long[i - 2], long[i - 2]): success [114ms]
test Long64VectorTests.ltLong64VectorTests(long[i - 2], long[zigZag(i)]): success [114ms]
test Long64VectorTests.ltLong64VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [114ms]
test Long64VectorTests.ltLong64VectorTests(long[zigZag(i)], long[i]): success [114ms]
test Long64VectorTests.ltLong64VectorTests(long[zigZag(i)], long[i - length / 2]): success [149ms]
test Long64VectorTests.ltLong64VectorTests(long[zigZag(i)], long[i + 1]): success [121ms]
test Long64VectorTests.ltLong64VectorTests(long[zigZag(i)], long[i - 2]): success [117ms]
test Long64VectorTests.ltLong64VectorTests(long[zigZag(i)], long[zigZag(i)]): success [169ms]
test Long64VectorTests.ltLong64VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [114ms]
test Long64VectorTests.ltLong64VectorTests(long[cornerCaseValue(i)], long[i]): success [128ms]
test Long64VectorTests.ltLong64VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [114ms]
test Long64VectorTests.ltLong64VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [124ms]
test Long64VectorTests.ltLong64VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [131ms]
test Long64VectorTests.ltLong64VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [115ms]
test Long64VectorTests.ltLong64VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [195ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i], long[i]): success [6ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [11ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [60ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.maskAndLong64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test Long64VectorTests.maskAndLong64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long64VectorTests.maskAndNotLong64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long64VectorTests.maskAndNotLong64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long64VectorTests.maskCompressLong64VectorTestsSmokeTest(mask[i % 2]): success [324ms]
test Long64VectorTests.maskCompressLong64VectorTestsSmokeTest(mask[true]): success [130ms]
test Long64VectorTests.maskCompressLong64VectorTestsSmokeTest(mask[false]): success [214ms]
test Long64VectorTests.maskEqLong64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test Long64VectorTests.maskEqLong64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long64VectorTests.maskEqualsLong64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [1ms]
test Long64VectorTests.maskEqualsLong64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long64VectorTests.maskFirstTrueLong64VectorTestsSmokeTest(mask[i % 2]): success [62ms]
test Long64VectorTests.maskFirstTrueLong64VectorTestsSmokeTest(mask[true]): success [54ms]
test Long64VectorTests.maskFirstTrueLong64VectorTestsSmokeTest(mask[false]): success [17ms]
test Long64VectorTests.maskFromToLongLong64VectorTestsSmokeTest(-1): success [120ms]
test Long64VectorTests.maskFromToLongLong64VectorTestsSmokeTest(0): success [0ms]
test Long64VectorTests.maskFromToLongLong64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long64VectorTests.maskFromToLongLong64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long64VectorTests.maskHashCodeLong64VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long64VectorTests.maskHashCodeLong64VectorTestsSmokeTest(mask[true]): success [0ms]
test Long64VectorTests.maskHashCodeLong64VectorTestsSmokeTest(mask[false]): success [0ms]
test Long64VectorTests.maskLastTrueLong64VectorTestsSmokeTest(mask[i % 2]): success [76ms]
test Long64VectorTests.maskLastTrueLong64VectorTestsSmokeTest(mask[true]): success [51ms]
test Long64VectorTests.maskLastTrueLong64VectorTestsSmokeTest(mask[false]): success [29ms]
test Long64VectorTests.maskOrLong64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [59ms]
test Long64VectorTests.maskOrLong64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long64VectorTests.maskTrueCountLong64VectorTestsSmokeTest(mask[i % 2]): success [29ms]
test Long64VectorTests.maskTrueCountLong64VectorTestsSmokeTest(mask[true]): success [50ms]
test Long64VectorTests.maskTrueCountLong64VectorTestsSmokeTest(mask[false]): success [18ms]
test Long64VectorTests.maskXorLong64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Long64VectorTests.maskXorLong64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long64VectorTests.maxLong64VectorTests(long[-i * 5], long[i * 5]): success [21ms]
test Long64VectorTests.maxLong64VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long64VectorTests.maxLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.maxLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [9ms]
test Long64VectorTests.maxLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [2ms]
test Long64VectorTests.maxLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.minLong64VectorTests(long[-i * 5], long[i * 5]): success [8ms]
test Long64VectorTests.minLong64VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long64VectorTests.minLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.minLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [12ms]
test Long64VectorTests.minLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [2ms]
test Long64VectorTests.minLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [9ms]
test Long64VectorTests.mulLong64VectorTests(long[-i * 5], long[i * 5]): success [27ms]
test Long64VectorTests.mulLong64VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long64VectorTests.mulLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [11ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [2ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [10ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long64VectorTests.negLong64VectorTests(long[-i * 5]): success [54ms]
test Long64VectorTests.negLong64VectorTests(long[i * 5]): success [5ms]
test Long64VectorTests.negLong64VectorTests(long[i + 1]): success [39ms]
test Long64VectorTests.negLong64VectorTests(long[cornerCaseValue(i)]): success [4ms]
test Long64VectorTests.notLong64VectorTests(long[-i * 5]): success [358ms]
test Long64VectorTests.notLong64VectorTests(long[i * 5]): success [165ms]
test Long64VectorTests.notLong64VectorTests(long[i + 1]): success [280ms]
test Long64VectorTests.notLong64VectorTests(long[cornerCaseValue(i)]): success [194ms]
test Long64VectorTests.orLong64VectorTests(long[-i * 5], long[i * 5]): success [11ms]
test Long64VectorTests.orLong64VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long64VectorTests.orLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.orLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [11ms]
test Long64VectorTests.orLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long64VectorTests.orLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.shuffleEqualsLong64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [17ms]
test Long64VectorTests.shuffleEqualsLong64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [20ms]
test Long64VectorTests.shuffleMiscellaneousLong64VectorTestsSmokeTest(shuffle[random]): success [15ms]
test Long64VectorTests.shuffleTest(): success [369ms]
test Long64VectorTests.shuffleToStringLong64VectorTestsSmokeTest(shuffle[random]): success [67ms]
test Long64VectorTests.sliceBinaryLong64VectorTestsBinary(long[-i * 5], long[i * 5]): success [2179ms]
test Long64VectorTests.sliceBinaryLong64VectorTestsBinary(long[-i * 5], long[i + 1]): success [1394ms]
test Long64VectorTests.sliceBinaryLong64VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [1409ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [2102ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [1561ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1862ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [1627ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1634ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1477ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1601ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1844ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1698ms]
test Long64VectorTests.sliceUnaryLong64VectorTests(long[-i * 5]): success [1668ms]
test Long64VectorTests.sliceUnaryLong64VectorTests(long[i * 5]): success [1325ms]
test Long64VectorTests.sliceUnaryLong64VectorTests(long[i + 1]): success [1166ms]
test Long64VectorTests.sliceUnaryLong64VectorTests(long[cornerCaseValue(i)]): success [1298ms]
test Long64VectorTests.smokeTest1(): success [0ms]
test Long64VectorTests.smokeTest2(): success [157ms]
test Long64VectorTests.subLong64VectorTests(long[-i * 5], long[i * 5]): success [7ms]
test Long64VectorTests.subLong64VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long64VectorTests.subLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [8ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [65ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [12ms]
test Long64VectorTests.subLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [2ms]
test Long64VectorTests.subLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [9ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long64VectorTests.toDoubleArrayLong64VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long64VectorTests.toDoubleArrayLong64VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long64VectorTests.toDoubleArrayLong64VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long64VectorTests.toDoubleArrayLong64VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.toIntArrayLong64VectorTestsSmokeTest(long[-i * 5]): success [67ms]
test Long64VectorTests.toIntArrayLong64VectorTestsSmokeTest(long[i * 5]): success [12ms]
test Long64VectorTests.toIntArrayLong64VectorTestsSmokeTest(long[i + 1]): success [9ms]
test Long64VectorTests.toIntArrayLong64VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [7ms]
test Long64VectorTests.toLongArrayLong64VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long64VectorTests.toLongArrayLong64VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long64VectorTests.toLongArrayLong64VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long64VectorTests.toLongArrayLong64VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.toStringLong64VectorTestsSmokeTest(long[-i * 5]): success [10ms]
test Long64VectorTests.toStringLong64VectorTestsSmokeTest(long[i * 5]): success [22ms]
test Long64VectorTests.toStringLong64VectorTestsSmokeTest(long[i + 1]): success [50ms]
test Long64VectorTests.toStringLong64VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.unsliceBinaryLong64VectorTestsBinary(long[-i * 5], long[i * 5]): success [1662ms]
test Long64VectorTests.unsliceBinaryLong64VectorTestsBinary(long[-i * 5], long[i + 1]): success [1185ms]
test Long64VectorTests.unsliceBinaryLong64VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [1217ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [4054ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [2286ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2136ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2165ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2154ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2159ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [2161ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [2166ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2150ms]
test Long64VectorTests.unsliceUnaryLong64VectorTests(long[-i * 5]): success [1325ms]
test Long64VectorTests.unsliceUnaryLong64VectorTests(long[i * 5]): success [1122ms]
test Long64VectorTests.unsliceUnaryLong64VectorTests(long[i + 1]): success [1076ms]
test Long64VectorTests.unsliceUnaryLong64VectorTests(long[cornerCaseValue(i)]): success [1187ms]
test Long64VectorTests.viewAsFloatingLanesTest(): success [637ms]
test Long64VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long64VectorTests.withLong64VectorTests(long[-i * 5], long[i * 5]): success [146ms]
test Long64VectorTests.withLong64VectorTests(long[-i * 5], long[i + 1]): success [84ms]
test Long64VectorTests.withLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [67ms]

===============================================
jdk/incubator/vector/Long64VectorTests.java
Total tests run: 3321, Passes: 3319, Failures: 2, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/5 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Long64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Long64VectorTests.d/testng.0.jta jdk/incubator/vector/Long64VectorTests.java false Long64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
--------------------------------------------------
Passed: jdk/incubator/vector/Vector512ConversionTests.java
TEST: jdk/incubator/vector/Byte256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   28.377 seconds
messages:
command: build Byte256VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 23:43:27 IST 2025
Test directory:
  compile: Byte256VectorTests
finished: Wed Apr 16 23:43:55 IST 2025
elapsed time (seconds): 28.377

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   28.37 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 23:43:27 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 8
Process id: 1860048
finished: Wed Apr 16 23:43:55 IST 2025
elapsed time (seconds): 28.37
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Byte256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/8 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Byte256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Byte256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Byte256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte256VectorTests 
TIME:   1082.399 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Byte256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte256VectorTests 
started: Wed Apr 16 23:43:55 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1861926
finished: Thu Apr 17 00:01:58 IST 2025
elapsed time (seconds): 1082.399
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -5747642654608181632
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-5747642654608181632" to command line.
test Byte256VectorTests.ABSByte256VectorTests(byte[-i * 5]): success [1349ms]
test Byte256VectorTests.ABSByte256VectorTests(byte[i * 5]): success [14ms]
test Byte256VectorTests.ABSByte256VectorTests(byte[i + 1]): success [98ms]
test Byte256VectorTests.ABSByte256VectorTests(byte[cornerCaseValue(i)]): success [8ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[-i * 5], mask[i % 2]): success [591ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i * 5], mask[i % 2]): success [213ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i + 1], mask[i % 2]): success [155ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [10ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[-i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i * 5], mask[true]): success [5ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i + 1], mask[true]): success [6ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[cornerCaseValue(i)], mask[true]): success [10ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[-i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i * 5], mask[false]): success [4ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte256VectorTests.ADDByte256VectorTests(byte[-i * 5], byte[i * 5]): success [1349ms]
test Byte256VectorTests.ADDByte256VectorTests(byte[-i * 5], byte[i + 1]): success [13ms]
test Byte256VectorTests.ADDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [135ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5]): success [66ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [28ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [5ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [14ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [17ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [448ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [2ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [451ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [10ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [163ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [9ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [8ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [8ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [77ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [6ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[-i * 5]): success [192ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[i * 5]): success [91ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[i + 1]): success [31ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[cornerCaseValue(i)]): success [22ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [168ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i * 5], mask[i % 2]): success [125ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i + 1], mask[i % 2]): success [6ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [65ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[-i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i + 1], mask[true]): success [10ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[-i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i * 5], mask[false]): success [4ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[-i * 5]): success [9ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[i * 5]): success [11ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[i + 1]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[cornerCaseValue(i)]): success [16ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [9ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i * 5], mask[i % 2]): success [1ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i + 1], mask[i % 2]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [25ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[-i * 5], mask[true]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i * 5], mask[true]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i + 1], mask[true]): success [86ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[-i * 5], mask[false]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i * 5], mask[false]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i + 1], mask[false]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte256VectorTests.ANDByte256VectorTests(byte[-i * 5], byte[i * 5]): success [1316ms]
test Byte256VectorTests.ANDByte256VectorTests(byte[-i * 5], byte[i + 1]): success [9ms]
test Byte256VectorTests.ANDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [230ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [7ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [50ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [3ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [31ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [5ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [15ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [40ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [161ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [10ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [8ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [8ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [7ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [7ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [7ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[-i * 5]): success [291ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[i * 5]): success [82ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[i + 1]): success [6ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[cornerCaseValue(i)]): success [23ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [42ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i * 5], mask[i % 2]): success [147ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i + 1], mask[i % 2]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [32ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[-i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i * 5], mask[true]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i + 1], mask[true]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[-i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte256VectorTests.AND_NOTByte256VectorTests(byte[-i * 5], byte[i * 5]): success [1551ms]
test Byte256VectorTests.AND_NOTByte256VectorTests(byte[-i * 5], byte[i + 1]): success [163ms]
test Byte256VectorTests.AND_NOTByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [552ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [392ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [198ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [444ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [188ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [153ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [183ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [155ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [191ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [152ms]
test Byte256VectorTests.ASHRByte256VectorTests(byte[-i * 5], byte[i * 5]): success [835ms]
test Byte256VectorTests.ASHRByte256VectorTests(byte[-i * 5], byte[i + 1]): success [188ms]
test Byte256VectorTests.ASHRByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [576ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [751ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [204ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [461ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [182ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [178ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [154ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [196ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [149ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [191ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShift(byte[-i * 5], byte[i * 5]): success [1012ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShift(byte[-i * 5], byte[i + 1]): success [7ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShift(byte[-i * 5], byte[cornerCaseValue(i)]): success [120ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[-i * 5]): success [218ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[i * 5]): success [7ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[i + 1]): success [76ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [600ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [8ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [154ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[true]): success [10ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[true]): success [9ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [9ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[false]): success [42ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[false]): success [9ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [8ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[i % 2]): success [25ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[i % 2]): success [10ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[i % 2]): success [144ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[true]): success [68ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[false]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [295ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[i * 5]): success [17ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[i + 1]): success [337ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [15ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[i * 5]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[i + 1]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [15ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [43ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [11ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [445ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [6ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [108ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [8ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [44ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [9ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [78ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [75ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [454ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [6ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [49ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

te[i + 1]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [25ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [27ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.bitwiseDivByZeroSmokeTest(): success [26ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i * 5], mask[i % 2]): success [36ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i + 1], mask[i % 2]): success [13ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [151ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i * 5], mask[true]): success [6ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i + 1], mask[true]): success [8ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [8ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i * 5], mask[false]): success [8ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i + 1], mask[false]): success [6ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [267ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [136ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [272ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [136ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [141ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [150ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [137ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [188ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [135ms]
test Byte256VectorTests.compressByte256VectorTests(byte[-i * 5], mask[i % 2]): success [3398ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i * 5], mask[i % 2]): success [391ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i + 1], mask[i % 2]): success [666ms]
test Byte256VectorTests.compressByte256VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [312ms]
test Byte256VectorTests.compressByte256VectorTests(byte[-i * 5], mask[true]): success [1760ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i * 5], mask[true]): success [10ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i + 1], mask[true]): success [10ms]
test Byte256VectorTests.compressByte256VectorTests(byte[cornerCaseValue(i)], mask[true]): success [10ms]
test Byte256VectorTests.compressByte256VectorTests(byte[-i * 5], mask[false]): success [39ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i * 5], mask[false]): success [42ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i + 1], mask[false]): success [106ms]
test Byte256VectorTests.compressByte256VectorTests(byte[cornerCaseValue(i)], mask[false]): success [39ms]
test Byte256VectorTests.divByte256VectorTests(byte[-i * 5], byte[i * 5]): success [890ms]
test Byte256VectorTests.divByte256VectorTests(byte[-i * 5], byte[i + 1]): success [454ms]
test Byte256VectorTests.divByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1077ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [39ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1166ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [12ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [10ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [10ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [10ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [14ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [6ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [11ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [2063ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [956ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1617ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1031ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [901ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1153ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [1053ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [900ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1014ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i]): success [535ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i - length / 2]): success [317ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i + 1]): success [301ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i - 2]): success [331ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[zigZag(i)]): success [272ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[cornerCaseValue(i)]): success [310ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i]): success [269ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i - length / 2]): success [382ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i + 1]): success [274ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i - 2]): success [294ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [291ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [336ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i]): success [298ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i - length / 2]): success [299ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i + 1]): success [293ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i - 2]): success [292ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[zigZag(i)]): success [294ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [335ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i]): success [271ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i - length / 2]): success [288ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i + 1]): success [284ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i - 2]): success [287ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[zigZag(i)]): success [303ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [310ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i]): success [268ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [278ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i + 1]): success [285ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i - 2]): success [288ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [288ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [292ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i]): success [296ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [291ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [289ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [309ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [289ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [284ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i]): success [5ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i]): success [166ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - 2]): success [13ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [6ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [15ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [11ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [5ms]
test Byte256VectorTests.expandByte256VectorTests(byte[-i * 5], mask[i % 2]): success [6893ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i * 5], mask[i % 2]): success [361ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i + 1], mask[i % 2]): success [483ms]
test Byte256VectorTests.expandByte256VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [310ms]
test Byte256VectorTests.expandByte256VectorTests(byte[-i * 5], mask[true]): success [2565ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i * 5], mask[true]): success [9ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i + 1], mask[true]): success [6ms]
test Byte256VectorTests.expandByte256VectorTests(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.expandByte256VectorTests(byte[-i * 5], mask[false]): success [22ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i * 5], mask[false]): success [22ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i + 1], mask[false]): success [22ms]
test Byte256VectorTests.expandByte256VectorTests(byte[cornerCaseValue(i)], mask[false]): success [22ms]
test Byte256VectorTests.getByte256VectorTests(byte[-i * 5]): success [35ms]
test Byte256VectorTests.getByte256VectorTests(byte[i * 5]): success [34ms]
test Byte256VectorTests.getByte256VectorTests(byte[i + 1]): success [237ms]
test Byte256VectorTests.getByte256VectorTests(byte[cornerCaseValue(i)]): success [25ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[-i * 5]): success [52ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[i * 5]): success [2ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[i + 1]): success [2ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [18ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(0): success [120ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(-1): success [7ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(1): success [23ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(2): success [6ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(-2): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(0): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(-1): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(1): success [9ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(2): success [8ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(-2): success [7ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(0): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(32): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(37): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1024): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1025): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1029): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(0): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(32): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(37): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1024): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1025): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1029): success [0ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i]): success [466ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i - length / 2]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i + 1]): success [325ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i - 2]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[zigZag(i)]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[cornerCaseValue(i)]): success [269ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i - length / 2]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i + 1]): success [274ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i - 2]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [276ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i - length / 2]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i + 1]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i - 2]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[zigZag(i)]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [305ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i]): success [272ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i - length / 2]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i + 1]): success [275ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i - 2]): success [275ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[zigZag(i)]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [270ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i]): success [269ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [272ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i + 1]): success [268ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i - 2]): success [276ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [387ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [299ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i]): success [321ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [274ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [269ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [269ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [267ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i]): success [120ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i + 1]): success [6ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - 2]): success [6ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [7ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.maskAndByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [21ms]
test Byte256VectorTests.maskAndByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskAndNotByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Byte256VectorTests.maskAndNotByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskCompressByte256VectorTestsSmokeTest(mask[i % 2]): success [885ms]
test Byte256VectorTests.maskCompressByte256VectorTestsSmokeTest(mask[true]): success [601ms]
test Byte256VectorTests.maskCompressByte256VectorTestsSmokeTest(mask[false]): success [573ms]
test Byte256VectorTests.maskEqByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Byte256VectorTests.maskEqByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskEqualsByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Byte256VectorTests.maskEqualsByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskFirstTrueByte256VectorTestsSmokeTest(mask[i % 2]): success [121ms]
test Byte256VectorTests.maskFirstTrueByte256VectorTestsSmokeTest(mask[true]): success [148ms]
test Byte256VectorTests.maskFirstTrueByte256VectorTestsSmokeTest(mask[false]): success [107ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(-1): success [123ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(0): success [0ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Byte256VectorTests.maskHashCodeByte256VectorTestsSmokeTest(mask[i % 2]): success [1ms]
test Byte256VectorTests.maskHashCodeByte256VectorTestsSmokeTest(mask[true]): success [0ms]
test Byte256VectorTests.maskHashCodeByte256VectorTestsSmokeTest(mask[false]): success [0ms]
test Byte256VectorTests.maskLastTrueByte256VectorTestsSmokeTest(mask[i % 2]): success [237ms]
test Byte256VectorTests.maskLastTrueByte256VectorTestsSmokeTest(mask[true]): success [148ms]
test Byte256VectorTests.maskLastTrueByte256VectorTestsSmokeTest(mask[false]): success [144ms]
test Byte256VectorTests.maskOrByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [24ms]
test Byte256VectorTests.maskOrByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskTrueCountByte256VectorTestsSmokeTest(mask[i % 2]): success [117ms]
test Byte256VectorTests.maskTrueCountByte256VectorTestsSmokeTest(mask[true]): success [151ms]
test Byte256VectorTests.maskTrueCountByte256VectorTestsSmokeTest(mask[false]): success [107ms]
test Byte256VectorTests.maskXorByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Byte256VectorTests.maskXorByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maxByte256VectorTests(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte256VectorTests.maxByte256VectorTests(byte[-i * 5], byte[i + 1]): success [5ms]
test Byte256VectorTests.maxByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.maxByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [10ms]
test Byte256VectorTests.maxByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.maxByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.minByte256VectorTests(byte[-i * 5], byte[i * 5]): success [9ms]
test Byte256VectorTests.minByte256VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte256VectorTests.minByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.minByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [9ms]
test Byte256VectorTests.minByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.minByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.mulByte256VectorTests(byte[-i * 5], byte[i * 5]): success [9ms]
test Byte256VectorTests.mulByte256VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte256VectorTests.mulByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [40ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [22ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [4ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [2ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [11ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [8ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte256VectorTests.negByte256VectorTests(byte[-i * 5]): success [24ms]
test Byte256VectorTests.negByte256VectorTests(byte[i * 5]): success [6ms]
test Byte256VectorTests.negByte256VectorTests(byte[i + 1]): success [104ms]
test Byte256VectorTests.negByte256VectorTests(byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.notByte256VectorTests(byte[-i * 5]): success [186ms]
test Byte256VectorTests.notByte256VectorTests(byte[i * 5]): success [165ms]
test Byte256VectorTests.notByte256VectorTests(byte[i + 1]): success [341ms]
test Byte256VectorTests.notByte256VectorTests(byte[cornerCaseValue(i)]): success [183ms]
test Byte256VectorTests.orByte256VectorTests(byte[-i * 5], byte[i * 5]): success [10ms]
test Byte256VectorTests.orByte256VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte256VectorTests.orByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.orByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [18ms]
test Byte256VectorTests.orByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [3ms]
test Byte256VectorTests.orByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[-i * 5]): success [2ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[i * 5]): success [22ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.shuffleEqualsByte256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [4196ms]
test Byte256VectorTests.shuffleEqualsByte256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [546ms]
test Byte256VectorTests.shuffleMiscellaneousByte256VectorTestsSmokeTest(shuffle[random]): success [98ms]
test Byte256VectorTests.shuffleTest(): success [1532ms]
test Byte256VectorTests.shuffleToStringByte256VectorTestsSmokeTest(shuffle[random]): success [74ms]
test Byte256VectorTests.sliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [5557ms]
test Byte256VectorTests.sliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [1681ms]
test Byte256VectorTests.sliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [3207ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [3664ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1699ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [4636ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1696ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [1556ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1647ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [2582ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [1578ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1551ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[-i * 5]): success [3045ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[i * 5]): success [1166ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[i + 1]): success [2579ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[cornerCaseValue(i)]): success [1108ms]
test Byte256VectorTests.smokeTest1(): success [31ms]
test Byte256VectorTests.smokeTest2(): success [60ms]
test Byte256VectorTests.subByte256VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte256VectorTests.subByte256VectorTests(byte[-i * 5], byte[i + 1]): success [395ms]
test Byte256VectorTests.subByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [520ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1373ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [31ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [36ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[-i * 5]): success [1ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[i + 1]): success [3ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[-i * 5]): success [3ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[i * 5]): success [9ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[i + 1]): success [8ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[-i * 5]): success [22ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[i * 5]): success [14ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[i + 1]): success [67ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.unsliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [3256ms]
test Byte256VectorTests.unsliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [1119ms]
test Byte256VectorTests.unsliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [2375ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [11806ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [2657ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [20544ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [2661ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [2505ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2411ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [2325ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [2380ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2392ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[-i * 5]): success [2600ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[i * 5]): success [1395ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[i + 1]): success [1795ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[cornerCaseValue(i)]): success [1110ms]
test Byte256VectorTests.viewAsFloatingLanesTest(): success [19ms]
test Byte256VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Byte256VectorTests.withByte256VectorTests(byte[-i * 5], byte[i * 5]): success [21ms]
test Byte256VectorTests.withByte256VectorTests(byte[-i * 5], byte[i + 1]): success [21ms]
test Byte256VectorTests.withByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [818ms]

===============================================
jdk/incubator/vector/Byte256VectorTests.java
Total tests run: 3602, Passes: 3601, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/8 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Byte256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Byte256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Byte256VectorTests.d/testng.0.jta jdk/incubator/vector/Byte256VectorTests.java false Byte256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Short64VectorTests.java
Passed: jdk/incubator/vector/Short256VectorTests.java
TEST: jdk/incubator/vector/Short512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.831 seconds
messages:
command: build Short512VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 23:53:30 IST 2025
Test directory:
  compile: Short512VectorTests
finished: Wed Apr 16 23:53:31 IST 2025
elapsed time (seconds): 0.831

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.831 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 23:53:30 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 6
Process id: 1859845
finished: Wed Apr 16 23:53:31 IST 2025
elapsed time (seconds): 0.831
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short512VectorTests 
TIME:   613.818 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short512VectorTests 
started: Wed Apr 16 23:53:31 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1867894
finished: Thu Apr 17 00:03:45 IST 2025
elapsed time (seconds): 613.818
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -1451379764648953552
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-1451379764648953552" to command line.
test Short512VectorTests.ABSMaskedShort512VectorTests(short[-i * 5], mask[i % 2]): success [730ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i * 5], mask[i % 2]): success [988ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i + 1], mask[i % 2]): success [12ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[-i * 5], mask[true]): success [169ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i + 1], mask[true]): success [35ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[-i * 5], mask[false]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.ABSShort512VectorTests(short[-i * 5]): success [362ms]
test Short512VectorTests.ABSShort512VectorTests(short[i * 5]): success [46ms]
test Short512VectorTests.ABSShort512VectorTests(short[i + 1]): success [3ms]
test Short512VectorTests.ABSShort512VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[-i * 5]): success [69ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[i * 5]): success [2ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[i + 1]): success [22ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[cornerCaseValue(i)]): success [4ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [17ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i + 1], mask[true]): success [25ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [50ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[-i * 5]): success [266ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[i * 5]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[i + 1]): success [76ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [99ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [124ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [41ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[-i * 5], mask[true]): success [7ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i * 5], mask[true]): success [6ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i + 1], mask[true]): success [33ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.ADDShort512VectorTests(short[-i * 5], short[i * 5]): success [140ms]
test Short512VectorTests.ADDShort512VectorTests(short[-i * 5], short[i + 1]): success [1044ms]
test Short512VectorTests.ADDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [8ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [23ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [2ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [33ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [8ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [613ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [178ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [6ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [158ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [21ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[-i * 5]): success [174ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[i * 5]): success [5ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[i + 1]): success [76ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [34ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [4ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [123ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[-i * 5], mask[true]): success [4ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i * 5], mask[true]): success [5ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i + 1], mask[true]): success [28ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [39ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[-i * 5], mask[false]): success [5ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i * 5], mask[false]): success [4ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i + 1], mask[false]): success [4ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short512VectorTests.ANDShort512VectorTests(short[-i * 5], short[i * 5]): success [914ms]
test Short512VectorTests.ANDShort512VectorTests(short[-i * 5], short[i + 1]): success [202ms]
test Short512VectorTests.ANDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [8ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [39ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [11ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [186ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [5ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [5ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [6ms]
test Short512VectorTests.AND_NOTShort512VectorTests(short[-i * 5], short[i * 5]): success [843ms]
test Short512VectorTests.AND_NOTShort512VectorTests(short[-i * 5], short[i + 1]): success [567ms]
test Short512VectorTests.AND_NOTShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [90ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [123ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [236ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [88ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [111ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [337ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [125ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [116ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [137ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [108ms]
test Short512VectorTests.ASHRShort512VectorTests(short[-i * 5], short[i * 5]): success [198ms]
test Short512VectorTests.ASHRShort512VectorTests(short[-i * 5], short[i + 1]): success [513ms]
test Short512VectorTests.ASHRShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [91ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [390ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [283ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [86ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [76ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [361ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [134ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [132ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [82ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [76ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [201ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [568ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [6ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[-i * 5]): success [163ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[i * 5]): success [6ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[i + 1]): success [6ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [6ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [29ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [202ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [6ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [112ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [5ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [16ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [6ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [102ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [5ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [5ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [23ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [241ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [295ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [11ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [11ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [12ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [12ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [13ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [13ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [13ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [359ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [103ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [46ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [73ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512V

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

Value(i)]): success [4ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [12ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [153ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.VectorShapeShort512VectorTestsSmokeTest(): success [0ms]
test Short512VectorTests.VectorTypeShort512VectorTestsSmokeTest(): success [0ms]
test Short512VectorTests.WithLanesShort512VectorTestsSmokeTest(): success [0ms]
test Short512VectorTests.WithShapeShort512VectorTestsSmokeTest(): success [0ms]
test Short512VectorTests.XORReduceShort512VectorTests(short[-i * 5]): success [128ms]
test Short512VectorTests.XORReduceShort512VectorTests(short[i * 5]): success [12ms]
test Short512VectorTests.XORReduceShort512VectorTests(short[i + 1]): success [78ms]
test Short512VectorTests.XORReduceShort512VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [17ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [4ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [133ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[-i * 5], mask[true]): success [3ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[i + 1], mask[true]): success [28ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.XORShort512VectorTests(short[-i * 5], short[i * 5]): success [11ms]
test Short512VectorTests.XORShort512VectorTests(short[-i * 5], short[i + 1]): success [4ms]
test Short512VectorTests.XORShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [11ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [154ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[-i * 5], mask[i % 2]): success [473ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i * 5], mask[i % 2]): success [496ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i + 1], mask[i % 2]): success [393ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [396ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[-i * 5], mask[true]): success [631ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i * 5], mask[true]): success [392ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i + 1], mask[true]): success [392ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [395ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[-i * 5], mask[false]): success [390ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i * 5], mask[false]): success [485ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i + 1], mask[false]): success [393ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [393ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[-i * 5]): success [272ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[i * 5]): success [420ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[i + 1]): success [270ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[cornerCaseValue(i)]): success [269ms]
test Short512VectorTests.ZeroShort512VectorTests(short[-i * 5]): success [64ms]
test Short512VectorTests.ZeroShort512VectorTests(short[i * 5]): success [80ms]
test Short512VectorTests.ZeroShort512VectorTests(short[i + 1]): success [63ms]
test Short512VectorTests.ZeroShort512VectorTests(short[cornerCaseValue(i)]): success [63ms]
test Short512VectorTests.absShort512VectorTests(short[-i * 5]): success [18ms]
test Short512VectorTests.absShort512VectorTests(short[i * 5]): success [13ms]
test Short512VectorTests.absShort512VectorTests(short[i + 1]): success [13ms]
test Short512VectorTests.absShort512VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.addShort512VectorTests(short[-i * 5], short[i * 5]): success [223ms]
test Short512VectorTests.addShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.addShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [415ms]
test Short512VectorTests.addShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [32ms]
test Short512VectorTests.addShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.allTrueShort512VectorTests(boolean[i % 2]): success [22ms]
test Short512VectorTests.allTrueShort512VectorTests(boolean[i % 5]): success [15ms]
test Short512VectorTests.andShort512VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short512VectorTests.andShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.andShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.andShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short512VectorTests.andShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [3ms]
test Short512VectorTests.andShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.anyTrueShort512VectorTests(boolean[i % 2]): success [13ms]
test Short512VectorTests.anyTrueShort512VectorTests(boolean[i % 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [6ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [55ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [88ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [8ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [74ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [8ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [74ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [9ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [80ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.bitwiseDivByZeroSmokeTest(): success [13ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [31ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i + 1], mask[true]): success [147ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [102ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [234ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [136ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [69ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [209ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [70ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [71ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [74ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [70ms]
test Short512VectorTests.compressShort512VectorTests(short[-i * 5], mask[i % 2]): success [2847ms]
test Short512VectorTests.compressShort512VectorTests(short[i * 5], mask[i % 2]): success [279ms]
test Short512VectorTests.compressShort512VectorTests(short[i + 1], mask[i % 2]): success [148ms]
test Short512VectorTests.compressShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [187ms]
test Short512VectorTests.compressShort512VectorTests(short[-i * 5], mask[true]): success [251ms]
test Short512VectorTests.compressShort512VectorTests(short[i * 5], mask[true]): success [1675ms]
test Short512VectorTests.compressShort512VectorTests(short[i + 1], mask[true]): success [16ms]
test Short512VectorTests.compressShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short512VectorTests.compressShort512VectorTests(short[-i * 5], mask[false]): success [14ms]
test Short512VectorTests.compressShort512VectorTests(short[i * 5], mask[false]): success [14ms]
test Short512VectorTests.compressShort512VectorTests(short[i + 1], mask[false]): success [19ms]
test Short512VectorTests.compressShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [18ms]
test Short512VectorTests.divShort512VectorTests(short[-i * 5], short[i * 5]): success [354ms]
test Short512VectorTests.divShort512VectorTests(short[-i * 5], short[i + 1]): success [513ms]
test Short512VectorTests.divShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [254ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [27ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [7ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [945ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [21ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [11ms]
test Short512VectorTests.divShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [3ms]
test Short512VectorTests.divShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [441ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [1336ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [557ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [428ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [1072ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [445ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [424ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [430ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [416ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i]): success [386ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i - length / 2]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i + 1]): success [156ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i - 2]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[zigZag(i)]): success [141ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[cornerCaseValue(i)]): success [155ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i]): success [132ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i - length / 2]): success [160ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i + 1]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i - 2]): success [134ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[zigZag(i)]): success [156ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [131ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i]): success [131ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i - length / 2]): success [155ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i + 1]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i - 2]): success [131ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[zigZag(i)]): success [158ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [131ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i]): success [154ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i - length / 2]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i + 1]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i - 2]): success [159ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[zigZag(i)]): success [131ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [162ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i]): success [131ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i - length / 2]): success [132ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i + 1]): success [155ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i - 2]): success [131ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[zigZag(i)]): success [156ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [137ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [131ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [169ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [210ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [15ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.expandShort512VectorTests(short[-i * 5], mask[i % 2]): success [5754ms]
test Short512VectorTests.expandShort512VectorTests(short[i * 5], mask[i % 2]): success [195ms]
test Short512VectorTests.expandShort512VectorTests(short[i + 1], mask[i % 2]): success [159ms]
test Short512VectorTests.expandShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [148ms]
test Short512VectorTests.expandShort512VectorTests(short[-i * 5], mask[true]): success [134ms]
test Short512VectorTests.expandShort512VectorTests(short[i * 5], mask[true]): success [2342ms]
test Short512VectorTests.expandShort512VectorTests(short[i + 1], mask[true]): success [3ms]
test Short512VectorTests.expandShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.expandShort512VectorTests(short[-i * 5], mask[false]): success [11ms]
test Short512VectorTests.expandShort512VectorTests(short[i * 5], mask[false]): success [11ms]
test Short512VectorTests.expandShort512VectorTests(short[i + 1], mask[false]): success [11ms]
test Short512VectorTests.expandShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [11ms]
test Short512VectorTests.getShort512VectorTests(short[-i * 5]): success [19ms]
test Short512VectorTests.getShort512VectorTests(short[i * 5]): success [19ms]
test Short512VectorTests.getShort512VectorTests(short[i + 1]): success [19ms]
test Short512VectorTests.getShort512VectorTests(short[cornerCaseValue(i)]): success [19ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[-i * 5]): success [40ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(0): success [68ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(-1): success [3ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(1): success [20ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(2): success [3ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(-2): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(0): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(-1): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(1): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(2): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(-2): success [3ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(0): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(32): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(37): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1024): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1025): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1029): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(0): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(32): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(37): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1024): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1025): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1029): success [0ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i]): success [313ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i - length / 2]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i + 1]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i - 2]): success [143ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[zigZag(i)]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[cornerCaseValue(i)]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i - length / 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i + 1]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i - 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[zigZag(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i - length / 2]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i + 1]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i - 2]): success [132ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[zigZag(i)]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i]): success [135ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i - length / 2]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i + 1]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i - 2]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[zigZag(i)]): success [143ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i - length / 2]): success [133ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i + 1]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i - 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[zigZag(i)]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i]): success [162ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [132ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [151ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [116ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.maskAndNotShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Short512VectorTests.maskAndNotShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskAndShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Short512VectorTests.maskAndShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskCompressShort512VectorTestsSmokeTest(mask[i % 2]): success [833ms]
test Short512VectorTests.maskCompressShort512VectorTestsSmokeTest(mask[true]): success [585ms]
test Short512VectorTests.maskCompressShort512VectorTestsSmokeTest(mask[false]): success [578ms]
test Short512VectorTests.maskEqShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short512VectorTests.maskEqShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskEqualsShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short512VectorTests.maskEqualsShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskFirstTrueShort512VectorTestsSmokeTest(mask[i % 2]): success [118ms]
test Short512VectorTests.maskFirstTrueShort512VectorTestsSmokeTest(mask[true]): success [147ms]
test Short512VectorTests.maskFirstTrueShort512VectorTestsSmokeTest(mask[false]): success [107ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(-1): success [61ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(0): success [0ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short512VectorTests.maskHashCodeShort512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Short512VectorTests.maskHashCodeShort512VectorTestsSmokeTest(mask[true]): success [5ms]
test Short512VectorTests.maskHashCodeShort512VectorTestsSmokeTest(mask[false]): success [0ms]
test Short512VectorTests.maskLastTrueShort512VectorTestsSmokeTest(mask[i % 2]): success [160ms]
test Short512VectorTests.maskLastTrueShort512VectorTestsSmokeTest(mask[true]): success [146ms]
test Short512VectorTests.maskLastTrueShort512VectorTestsSmokeTest(mask[false]): success [131ms]
test Short512VectorTests.maskOrShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Short512VectorTests.maskOrShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskTrueCountShort512VectorTestsSmokeTest(mask[i % 2]): success [117ms]
test Short512VectorTests.maskTrueCountShort512VectorTestsSmokeTest(mask[true]): success [147ms]
test Short512VectorTests.maskTrueCountShort512VectorTestsSmokeTest(mask[false]): success [107ms]
test Short512VectorTests.maskXorShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short512VectorTests.maskXorShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maxShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.maxShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.maxShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [5ms]
test Short512VectorTests.maxShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.maxShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.maxShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.minShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.minShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.minShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.minShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.minShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.minShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.mulShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.mulShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.mulShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.negShort512VectorTests(short[-i * 5]): success [8ms]
test Short512VectorTests.negShort512VectorTests(short[i * 5]): success [12ms]
test Short512VectorTests.negShort512VectorTests(short[i + 1]): success [2ms]
test Short512VectorTests.negShort512VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.notShort512VectorTests(short[-i * 5]): success [74ms]
test Short512VectorTests.notShort512VectorTests(short[i * 5]): success [89ms]
test Short512VectorTests.notShort512VectorTests(short[i + 1]): success [67ms]
test Short512VectorTests.notShort512VectorTests(short[cornerCaseValue(i)]): success [67ms]
test Short512VectorTests.orShort512VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short512VectorTests.orShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.orShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.orShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.orShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.orShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.shuffleEqualsShort512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [442ms]
test Short512VectorTests.shuffleEqualsShort512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [79ms]
test Short512VectorTests.shuffleMiscellaneousShort512VectorTestsSmokeTest(shuffle[random]): success [187ms]
test Short512VectorTests.shuffleTest(): success [1060ms]
test Short512VectorTests.shuffleToStringShort512VectorTestsSmokeTest(shuffle[random]): success [67ms]
test Short512VectorTests.sliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i * 5]): success [883ms]
test Short512VectorTests.sliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i + 1]): success [3903ms]
test Short512VectorTests.sliceBinaryShort512VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [610ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [709ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [2440ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [787ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [782ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [5658ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [740ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [2635ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [765ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [762ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[-i * 5]): success [603ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[i * 5]): success [2277ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[i + 1]): success [622ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[cornerCaseValue(i)]): success [597ms]
test Short512VectorTests.smokeTest1(): success [0ms]
test Short512VectorTests.smokeTest2(): success [150ms]
test Short512VectorTests.subShort512VectorTests(short[-i * 5], short[i * 5]): success [8ms]
test Short512VectorTests.subShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.subShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.subShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[-i * 5]): success [3ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[i * 5]): success [2ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [8ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[-i * 5]): success [3ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[i * 5]): success [26ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[i + 1]): success [2ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [16ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[-i * 5]): success [12ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[i * 5]): success [14ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[i + 1]): success [12ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.unsliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i * 5]): success [637ms]
test Short512VectorTests.unsliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i + 1]): success [3151ms]
test Short512VectorTests.unsliceBinaryShort512VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [565ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [1208ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [9935ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1184ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [1198ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [16772ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1175ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1191ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1196ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1357ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[-i * 5]): success [556ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[i * 5]): success [2099ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[i + 1]): success [587ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[cornerCaseValue(i)]): success [530ms]
test Short512VectorTests.viewAsFloatingLanesTest(): success [22ms]
test Short512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Short512VectorTests.withShort512VectorTests(short[-i * 5], short[i * 5]): success [11ms]
test Short512VectorTests.withShort512VectorTests(short[-i * 5], short[i + 1]): success [10ms]
test Short512VectorTests.withShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [10ms]

===============================================
jdk/incubator/vector/Short512VectorTests.java
Total tests run: 3598, Passes: 3597, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Short512VectorTests.d/testng.0.jta jdk/incubator/vector/Short512VectorTests.java false Short512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Vector256ConversionTests.java
Passed: jdk/incubator/vector/Byte512VectorTests.java
TEST: jdk/incubator/vector/VectorReshapeTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.503 seconds
messages:
command: build VectorReshapeTests
reason: Named class compiled on demand
started: Wed Apr 16 23:57:50 IST 2025
Test directory:
  compile: VectorReshapeTests
finished: Wed Apr 16 23:57:51 IST 2025
elapsed time (seconds): 0.503

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.503 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 23:57:50 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 5
Process id: 1859771
finished: Wed Apr 16 23:57:51 IST 2025
elapsed time (seconds): 0.503
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 7
REASON: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
TIME:   589.116 seconds
messages:
command: testng --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests
reason: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
started: Wed Apr 16 23:57:51 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1886073
finished: Thu Apr 17 00:07:40 IST 2025
elapsed time (seconds): 589.116
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorReshapeTests.testCastFromByte(byte(i)): success [50407ms]
test VectorReshapeTests.testCastFromDouble(double(i)): success [3434ms]
test VectorReshapeTests.testCastFromFloat(float(i)): success [4231ms]
test VectorReshapeTests.testCastFromInt(int(i)): success [4279ms]
test VectorReshapeTests.testCastFromLong(long(i)): success [3206ms]
test VectorReshapeTests.testCastFromShort(short(i)): success [4691ms]
test VectorReshapeTests.testRebracket128(byte(i)): success [26350ms]
test VectorReshapeTests.testRebracket256(byte(i)): success [122041ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64]
Failing with Species[int, 16, S_512_BIT]->Species[byte, 64, S_512_BIT] (lanewise), partLimit=-4, block=16, part=-2, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket512(byte(i)): failure [83843ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket512(VectorReshapeTests.java:1011)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testRebracket64(byte(i)): success [16241ms]
test VectorReshapeTests.testRebracketMax(byte(i)): success [21317ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[byte, 8, S_64_BIT]->Species[byte, 64, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-7, origin=56
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeByte(byte(i)): failure [61439ms]
java.lang.AssertionError: arrays differ firstly at element [56]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeByte(VectorReshapeTests.java:441)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[double, 1, S_64_BIT]->Species[double, 8, S_512_BIT] (reinterpret), partLimit=-8, block=8, part=-4, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeDouble(byte(i)): failure [10240ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeDouble(VectorReshapeTests.java:671)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[float, 4, S_128_BIT]->Species[float, 16, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-2, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeFloat(byte(i)): failure [32073ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeFloat(VectorReshapeTests.java:631)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[int, 2, S_64_BIT]->Species[int, 16, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-1, origin=8
expect: [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeInt(byte(i)): failure [71805ms]
java.lang.AssertionError: arrays differ firstly at element [8]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeInt(VectorReshapeTests.java:533)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[long, 2, S_128_BIT]->Species[long, 8, S_512_BIT] (lanewise), partLimit=-4, block=16, part=-2, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeLong(byte(i)): failure [17429ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeLong(VectorReshapeTests.java:585)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[short, 4, S_64_BIT]->Species[short, 16, S_256_BIT] (lanewise), partLimit=-4, block=8, part=-2, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeShort(byte(i)): failure [14429ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeShort(VectorReshapeTests.java:486)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testUCastFromByte(byte(i)): success [23950ms]
test VectorReshapeTests.testUCastFromInt(int(i)): success [1ms]
test VectorReshapeTests.testUCastFromShort(short(i)): success [11968ms]

===============================================
jdk/incubator/vector/VectorReshapeTests.java
Total tests run: 20, Passes: 13, Failures: 7, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 7
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 7
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 7
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/VectorReshapeTests.d/testng.0.jta jdk/incubator/vector/VectorReshapeTests.java false VectorReshapeTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 7
--------------------------------------------------
Passed: jdk/incubator/vector/Vector128ConversionTests.java
TEST: jdk/incubator/vector/VectorMaxConversionTests.java#id0
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.831 seconds
messages:
command: build VectorMaxConversionTests
reason: Named class compiled on demand
started: Wed Apr 16 23:55:10 IST 2025
Test directory:
  compile: VectorMaxConversionTests
finished: Wed Apr 16 23:55:10 IST 2025
elapsed time (seconds): 0.831

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.831 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 23:55:10 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 11
Process id: 1860517
finished: Wed Apr 16 23:55:10 IST 2025
elapsed time (seconds): 0.831
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_id0.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/4 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorMaxConversionTests.java#id0 \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_id0.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_id0.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_id0.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_id0.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED VectorMaxConversionTests 
TIME:   842.667 seconds
messages:
command: testng -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED VectorMaxConversionTests
reason: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED VectorMaxConversionTests 
started: Wed Apr 16 23:55:10 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1870909
finished: Thu Apr 17 00:09:13 IST 2025
elapsed time (seconds): 842.667
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 8, S_64_BIT], byte(i)): success [725ms]
castShape took 721 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cab41a5): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 4, S_64_BIT], byte(i)): success [1387ms]
castShape took 1387 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c8e097): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 2, S_64_BIT], byte(i)): success [1167ms]
castShape took 1167 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5261d331): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 1, S_64_BIT], byte(i)): success [395ms]
castShape took 395 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b024c50): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 2, S_64_BIT], byte(i)): success [130ms]
castShape took 130 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3be09a90): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 1, S_64_BIT], byte(i)): success [121ms]
castShape took 121 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@587a291b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 16, S_128_BIT], byte(i)): success [1820ms]
castShape took 1820 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f553ca0): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 8, S_128_BIT], byte(i)): success [1166ms]
castShape took 1165 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5212df12): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 4, S_128_BIT], byte(i)): success [1383ms]
castShape took 1383 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19c279d4): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 2, S_128_BIT], byte(i)): success [1198ms]
castShape took 1198 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4a894f72): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 4, S_128_BIT], byte(i)): success [246ms]
castShape took 242 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43fdb9e1): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 2, S_128_BIT], byte(i)): success [179ms]
castShape took 179 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2ebfb027): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 32, S_256_BIT], byte(i)): success [7381ms]
castShape took 7382 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6f0bebeb): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 16, S_256_BIT], byte(i)): success [591ms]
castShape took 591 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45fe649f): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 8, S_256_BIT], byte(i)): success [1960ms]
castShape took 1960 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b5d7f8): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 4, S_256_BIT], byte(i)): success [182ms]
castShape took 182 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2fb6b370): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 8, S_256_BIT], byte(i)): success [194ms]
castShape took 194 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10a5cbc2): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 4, S_256_BIT], byte(i)): success [893ms]
castShape took 893 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@11fcafb7): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 64, S_512_BIT], byte(i)): success [30129ms]
castShape took 30129 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@72677220): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 32, S_512_BIT], byte(i)): success [5602ms]
castShape took 5602 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21f40c58): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 16, S_512_BIT], byte(i)): success [965ms]
castShape took 965 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1a234fa0): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 8, S_512_BIT], byte(i)): success [143ms]
castShape took 144 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@150f656): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 16, S_512_BIT], byte(i)): success [260ms]
castShape took 260 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13f0799c): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 8, S_512_BIT], byte(i)): success [263ms]
castShape took 263 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2708bbf): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 16, S_Max_BIT], byte(i)): success [447ms]
castShape took 448 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4636b97e): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 8, S_Max_BIT], byte(i)): success [137ms]
castShape took 136 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6ec78b92): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 4, S_Max_BIT], byte(i)): success [227ms]
castShape took 227 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7514785e): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 2, S_Max_BIT], byte(i)): success [203ms]
castShape took 203 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1cd890db): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 4, S_Max_BIT], byte(i)): success [138ms]
castShape took 138 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d2edfc): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 2, S_Max_BIT], byte(i)): success [185ms]
castShape took 186 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25c43ebb): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 8, S_64_BIT], short(i)): success [3595ms]
castShape took 3594 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c8f70a7): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 4, S_64_BIT], short(i)): success [6090ms]
castShape took 6089 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@269d30e): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 2, S_64_BIT], short(i)): success [1893ms]
castShape took 1893 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@24836f52): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 1, S_64_BIT], short(i)): success [85ms]
castShape took 85 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65e87916): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 2, S_64_BIT], short(i)): success [15ms]
castShape took 15 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@769c5c70): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 1, S_64_BIT], short(i)): success [22ms]
castShape took 22 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3702b375): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 16, S_128_BIT], short(i)): success [4052ms]
castShape took 4051 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3837a5b7): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 8, S_128_BIT], short(i)): success [465ms]
castShape took 465 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@606c340d): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 4, S_128_BIT], short(i)): success [89ms]
castShape took 89 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@630bd20e): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 2, S_128_BIT], short(i)): success [26ms]
castShape took 26 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12ed57a7): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 4, S_128_BIT], short(i)): success [26ms]
castShape took 27 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f2d24f6): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 2, S_128_BIT], short(i)): success [25ms]
castShape took 23 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37603231): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 32, S_256_BIT], short(i)): success [5973ms]
castShape took 5973 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bc54142): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 16, S_256_BIT], short(i)): success [8335ms]
castShape took 8335 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e567a1): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 8, S_256_BIT], short(i)): success [129ms]
castShape took 129 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19dc3e28): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 4, S_256_BIT], short(i)): success [88ms]
castShape took 87 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3de2e4ff): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 8, S_256_BIT], short(i)): success [99ms]
castShape took 98 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@40d0b25): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 4, S_256_BIT], short(i)): success [94ms]
castShape took 78 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@377723a8): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 64, S_512_BIT], short(i)): success [16487ms]
castShape took 16487 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6516338a): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 32, S_512_BIT], short(i)): success [5884ms]
castShape took 5884 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@31ffcfc1): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 16, S_512_BIT], short(i)): success [5856ms]
castShape took 5855 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7fac3958): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 8, S_512_BIT], short(i)): success [1722ms]
castShape took 1722 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12aa0499): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 16, S_512_BIT], short(i)): success [6396ms]
castShape took 6395 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@acc04f5): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 8, S_512_BIT], short(i)): success [97ms]
castShape took 98 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15e41f09): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 16, S_Max_BIT], short(i)): success [1402ms]
castShape took 1403 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c73d6bf): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 8, S_Max_BIT], short(i)): success [481ms]
castShape took 481 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@86b636b): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 4, S_Max_BIT], short(i)): success [63ms]
castShape took 64 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1cc95e51): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 2, S_Max_BIT], short(i)): success [25ms]
castShape took 25 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@69062f41): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 4, S_Max_BIT], short(i)): success [27ms]
castShape took 28 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b0797d8): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 2, S_Max_BIT], short(i)): success [25ms]
castShape took 25 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1fde55c6): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 8, S_64_BIT], int(i)): success [3797ms]
castShape took 3798 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@263b3e17): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 4, S_64_BIT], int(i)): success [1461ms]
castShape took 1461 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19d63f56): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 2, S_64_BIT], int(i)): success [1436ms]
castShape took 1435 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44b0a7f2): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 1, S_64_BIT], int(i)): success [258ms]
castShape took 258 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@24106675): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 2, S_64_BIT], int(i)): success [12ms]
castShape took 13 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@236f95aa): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 1, S_64_BIT], int(i)): success [12ms]
castShape took 12 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5efab149): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 16, S_128_BIT], int(i)): success [677ms]
castShape took 676 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3fd3b325): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 8, S_128_BIT], int(i)): success [3949ms]
castShape took 3948 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3f43f08e): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 4, S_128_BIT], int(i)): success [1459ms]
castShape took 1459 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5fe72406): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 2, S_128_BIT], int(i)): success [14ms]
castShape took 15 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21f61f55): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 4, S_128_BIT], int(i)): success [20ms]
castShape took 20 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3325e54b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 2, S_128_BIT], int(i)): success [14ms]
castShape took 14 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b339f99): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 32, S_256_BIT], int(i)): success [4856ms]
castShape took 4856 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18cb82df): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 16, S_256_BIT], int(i)): success [3466ms]
castShape took 3466 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@643f070d): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 8, S_256_BIT], int(i)): success [4909ms]
castShape took 4909 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@653e4509): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 4, S_256_BIT], int(i)): success [110ms]
castShape took 110 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2839d331): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 8, S_256_BIT], int(i)): success [2845ms]
castShape took 2845 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37078c85): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 4, S_256_BIT], int(i)): success [176ms]
castShape took 177 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76efca29): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 64, S_512_BIT], int(i)): success [7245ms]
castShape took 7245 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b5f7bb5): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 32, S_512_BIT], int(i)): success [5025ms]
castShape took 5026 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f9918c7): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 16, S_512_BIT], int(i)): success [3019ms]
castShape took 3020 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19345d92): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 8, S_512_BIT], int(i)): success [4698ms]
castShape took 4697 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49d8e1d8): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 16, S_512_BIT], int(i)): success [3310ms]
castShape took 3310 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29a2fa79): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 8, S_512_BIT], int(i)): success [3589ms]
castShape took 3589 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2659de2b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 16, S_Max_BIT], int(i)): success [385ms]
castShape took 386 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5675465e): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 8, S_Max_BIT], int(i)): success [1285ms]
castShape took 1286 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b2a4a82): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 4, S_Max_BIT], int(i)): success [261ms]
castShape took 261 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@38212d6d): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 2, S_Max_BIT], int(i)): success [9ms]
castShape took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5e3358da): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 4, S_Max_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1127a9e1): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43ace159): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 8, S_64_BIT], long(i)): success [798ms]
castShape took 798 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6371010b): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 4, S_64_BIT], long(i)): success [1442ms]
castShape took 1442 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f1a9567): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 2, S_64_BIT], long(i)): success [1178ms]
castShape took 1178 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@170549c7): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 1, S_64_BIT], long(i)): success [1832ms]
castShape took 1832 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@124d2b42): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 2, S_64_BIT], long(i)): success [20ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75b96cb8): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 1, S_64_BIT], long(i)): success [42ms]
castShape took 42 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e6da30a): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 16, S_128_BIT], long(i)): success [886ms]
castShape took 887 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e481f14): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 8, S_128_BIT], long(i)): success [529ms]
castShape took 529 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34ac9d6d): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 4, S_128_BIT], long(i)): success [2601ms]
castShape took 2602 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19137dfa): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 2, S_128_BIT], long(i)): success [2940ms]
castShape took 2940 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4068a139): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 4, S_128_BIT], long(i)): success [1463ms]
castShape took 1463 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5d2ea27e): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 2, S_128_BIT], long(i)): success [18ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42642d30): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 32, S_256_BIT], long(i)): success [8757ms]
castShape took 8757 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@41f2d159): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 16, S_256_BIT], long(i)): success [4584ms]
castShape took 4585 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8040dfb): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 8, S_256_BIT], long(i)): success [3491ms]
castShape took 3491 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2dd5b0c1): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 4, S_256_BIT], long(i)): success [5348ms]
castShape took 5348 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bc29b56): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 8, S_256_BIT], long(i)): success [3911ms]
castShape took 3910 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3da5771b): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 4, S_256_BIT], long(i)): success [4451ms]
castShape took 4450 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b928f24): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 64, S_512_BIT], long(i)): success [17364ms]
castShape took 17363 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@53d438dd): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 32, S_512_BIT], long(i)): success [8472ms]
castShape took 8473 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e9e124f): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 16, S_512_BIT], long(i)): success [4802ms]
castShape took 4807 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3767d1fe): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 8, S_512_BIT], long(i)): success [3657ms]
castShape took 3638 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16658144): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 16, S_512_BIT], long(i)): success [5224ms]
castShape took 5224 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e488490): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 8, S_512_BIT], long(i)): success [3228ms]
castShape took 3229 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@207051a): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 16, S_Max_BIT], long(i)): success [759ms]
castShape took 759 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1684bed8): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 8, S_Max_BIT], long(i)): success [462ms]
castShape took 462 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6c6e507c): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 4, S_Max_BIT], long(i)): success [998ms]
castShape took 999 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1529045f): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 2, S_Max_BIT], long(i)): success [308ms]
castShape took 309 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b90aeb7): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 4, S_Max_BIT], long(i)): success [1101ms]
castShape took 1102 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d930031): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 2, S_Max_BIT], long(i)): success [18ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@838508): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[byte, 8, S_64_BIT], float(i)): success [1646ms]
castShape took 1647 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1d21acd5): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[short, 4, S_64_BIT], float(i)): success [2091ms]
castShape took 2092 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c17510f): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[int, 2, S_64_BIT], float(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13587957): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[long, 1, S_64_BIT], float(i)): success [1170ms]
castShape took 1170 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4fa6b2a5): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[float, 2, S_64_BIT], float(i)): success [643ms]
castShape took 643 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@79362e86): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[double, 1, S_64_BIT], float(i)): success [7ms]
castShape took 7 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d200a30): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[byte, 16, S_128_BIT], float(i)): success [385ms]
castShape took 386 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@571838c): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[short, 8, S_128_BIT], float(i)): success [350ms]
castShape took 351 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b89077f): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[int, 4, S_128_BIT], float(i)): success [8ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@265bfffc): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[long, 2, S_128_BIT], float(i)): success [2511ms]
castShape took 2512 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b94a991): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[float, 4, S_128_BIT], float(i)): success [292ms]
castShape took 293 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5235bec2): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[double, 2, S_128_BIT], float(i)): success [8ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d2cf589): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[byte, 32, S_256_BIT], float(i)): success [4414ms]
castShape took 4415 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@62f11d82): success [0ms]
test VectorMaxConversionTests.castShape(Species[floa

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

, S_Max_BIT]): success [1ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ef944f8): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[float, 4, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bc51306): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[int, 2, S_64_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49fd216e): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[float, 2, S_64_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1384eb87): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[long, 2, S_128_BIT]): success [2ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15c672de): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[double, 2, S_128_BIT]): success [2ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55b9f94e): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [3ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4076fced): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [3ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14f5c5a9): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e77565): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5103825a): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@167a7081): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 1, S_64_BIT]): success [1ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e72c4eb): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@198647f7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@361e5553): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2fd76e9b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@693954e1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50a63192): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 6 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17f0e87c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b06ce01): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76d7bdef): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4ba2a3c4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@463142d5): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16da3050): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4219c83b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d863fcd): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1f18e4b1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27321f76): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@99a4da7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14a4f797): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@666c1382): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@224314a2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1dfb4134): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7496b2ca): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45563d04): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@188caa7b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77ca5b48): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@390db554): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18fd0f5e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@701bc385): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7d444216): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34c85df8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f3cb131): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e8d1c80): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c93a156): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@67821d4e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12d3c83): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 28 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c820ef5): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@491d4183): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46df943c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21550842): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77aa4c20): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@466dc5c5): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5cacb27e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25fea54b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7403ac38): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e150e1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b496a1d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a208eb4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b0a79e4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29812350): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25838d8c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@86a45d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@74779344): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dd24a2a): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d369f8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e80a3ef): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5c7cbdb6): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@277354b5): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@219fe42e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@389fdeba): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45b7e819): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@216f5222): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e9e4164): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5bd5a86d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f7104ce): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39c11e76): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7af8d8a7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e165d44): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48e07e11): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65977dc6): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@573ae6a8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6f12f8f8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bf63723): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ca34cbb): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61e2481c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7652041a): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@171dcd5c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13b8c413): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@68a34a82): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2bb7efc2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@207054d6): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b5a9bf3): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44bcaa50): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39229018): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3aa271dc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21b29cc2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e9a9a6f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2cd91c5f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2865f6ed): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13e4446c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@246e3c69): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e214d63): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1319af93): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@157c2890): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b8ae83): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43daa5ab): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@47292319): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57438fd4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6628a0cd): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78c44a0e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8b487c6): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@739d3d0b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3f47c415): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10fe1ffa): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dbd1524): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6fb99235): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5eb9a353): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@30c81a1d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5c663160): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@279510cc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@303e321a): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7612d72): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6cb56024): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@508fb1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b4e64be): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10d15b43): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48a586d9): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5809466): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@520d679c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42d3e00a): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18a4ca36): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d6e637d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@718b30d4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f66a0b7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d7a71f2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 16, S_256_BIT]): success [10ms]
shuffleCastNeg took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c0607e5): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15ce859f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@529cf764): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e239d9b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e80c493): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@438e98dd): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61b0eeb1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7ff46da2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2028cad4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e946b66): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@151408c8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66b68443): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@405e2a9f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@198ffaff): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@144407fa): success [0ms]

===============================================
jdk/incubator/vector/VectorMaxConversionTests.java#id0
Total tests run: 936, Passes: 935, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/4 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorMaxConversionTests.java#id0 \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_id0.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_id0.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -XX:-TieredCompilation \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/VectorMaxConversionTests_id0.d/testng.0.jta jdk/incubator/vector/VectorMaxConversionTests.java#id0 false VectorMaxConversionTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#Z
Passed: jdk/incubator/vector/Vector64ConversionTests.java#id0
Test results: passed: 73; failed: 7; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_incubator_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector
Finished running test 'jtreg:test/jdk/jdk/incubator/vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_incubator_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk/jdk/incubator/vector                  83    73     7     0     3 <<
==============================
TEST FAILURE

