Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=3 -XX:+UseKNLSetting  -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_1', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_1
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_1

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Passed: compiler/codegen/LoadWithMask.java
Passed: compiler/codegen/Test6797305.java
Passed: compiler/codegen/ClearArrayTest.java
Passed: compiler/codegen/Test6814842.java
Passed: compiler/codegen/LoadWithMask2.java
Passed: compiler/codegen/C1NullCheckOfNullStore.java
Passed: compiler/codegen/BadLogicCode.java
Passed: compiler/codegen/BMI1.java
Passed: compiler/codegen/CRCTest.java
Passed: compiler/codegen/BMI2.java
Passed: compiler/codegen/ShiftByZero.java
Passed: compiler/codegen/ShiftTest.java
Passed: compiler/codegen/Test6378821.java
Passed: compiler/codegen/IntRotateWithImmediate.java
Passed: compiler/codegen/BitTests.java
Passed: compiler/codegen/Test8005033.java
Passed: compiler/codegen/Test7009231.java
Passed: compiler/codegen/TestByteIntVect.java
Passed: compiler/codegen/Test6431242.java
Passed: compiler/codegen/Test6909839.java
Passed: compiler/codegen/Test8011901.java
Passed: compiler/codegen/Test6879902.java
Passed: compiler/codegen/TestBooleanVect.java
Passed: compiler/codegen/TestConvertImplicitNullCheck.java
Passed: compiler/codegen/TestCharShortVect.java
Passed: compiler/codegen/TestByteShortVect.java
Passed: compiler/codegen/TestByteVect.java
Passed: compiler/codegen/Test6823354.java
Passed: compiler/codegen/TestCharVect.java
Passed: compiler/codegen/TestByteDoubleVect.java
Passed: compiler/codegen/Test6942326.java
Passed: compiler/codegen/TestDoubleVect.java
Passed: compiler/codegen/TestByteLongVect.java
Passed: compiler/codegen/TestCharVect2.java#id0
Passed: compiler/codegen/TestByteFloatVect.java
Passed: compiler/codegen/TestGCMLoadPlacement.java
Passed: compiler/codegen/Test7100757.java
Passed: compiler/codegen/TestFloatVect.java
Passed: compiler/codegen/TestMultiMemInstructionMatching.java
Passed: compiler/codegen/TestLongDoubleVect.java
Passed: compiler/codegen/TestIntFloatVect.java
Passed: compiler/codegen/TestOopCmp.java
Passed: compiler/codegen/TestIntVect.java
Passed: compiler/codegen/TestLongVect.java
Passed: compiler/codegen/TestIntLongVect.java
Passed: compiler/loopopts/superword/AlignmentOnePack.java
Passed: compiler/loopopts/superword/CoLocatePack.java
Passed: compiler/loopopts/superword/CoLocatePackMemoryState.java
Passed: compiler/codegen/TestShortIntVect.java
Passed: compiler/codegen/TestFloatDoubleVect.java
Passed: compiler/codegen/TestShortFloatVect.java
Passed: compiler/codegen/TestShortVect.java
Passed: compiler/codegen/TestCharVect2.java#id1
Passed: compiler/codegen/TestLongFloatVect.java
Passed: compiler/codegen/TestShortDoubleVect.java
Passed: compiler/codegen/TestIntDoubleVect.java
Passed: compiler/codegen/TestShortLongVect.java
Passed: compiler/loopopts/superword/ReductionPerf.java
Passed: compiler/loopopts/superword/MinMaxRed_Int.java
Passed: compiler/loopopts/superword/MinMaxRed_Long.java
Passed: compiler/loopopts/superword/SuperWordIntermediateUse.java
Passed: compiler/codegen/TestSignedMultiplyLong.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage.java
Passed: compiler/loopopts/superword/TestAlignVector.java#AlignVector
Passed: compiler/loopopts/superword/TestAlignVector.java#NoAlignVector
Passed: compiler/loopopts/superword/RedTest_long.java
Passed: compiler/loopopts/superword/RedTest_int.java
Passed: compiler/loopopts/superword/SumRed_Long.java
Passed: compiler/loopopts/superword/TestBestAlign.java
Passed: compiler/loopopts/superword/TestCmpInvar.java
Passed: compiler/loopopts/superword/TestAlignVector.java#VerifyAlignVector
Passed: compiler/loopopts/superword/TestCompatibleUseDefTypeSize.java
Passed: compiler/loopopts/superword/TestCyclicDependency.java
Passed: compiler/loopopts/superword/SumRed_Int.java
Passed: compiler/loopopts/superword/SumRed_Float.java
Passed: compiler/loopopts/superword/ProdRed_Float.java
Passed: compiler/loopopts/superword/ProdRed_Double.java
Passed: compiler/loopopts/superword/ProdRed_Int.java
Passed: compiler/loopopts/superword/SumRed_Double.java
Passed: compiler/loopopts/superword/SumRedAbsNeg_Float.java
Passed: compiler/loopopts/superword/SumRedAbsNeg_Double.java
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-NoTieredCompilation-Xbatch
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#Vanilla
Passed: compiler/loopopts/superword/SumRedSqrt_Double.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx1-v016-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx1-v016-U
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-Align16
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx1-v032-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx1-v032-U
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx2-v016-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx2-v016-U
Passed: compiler/loopopts/superword/TestEliminateAllocationWithCastP2XUse.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx2-v032-A
Passed: compiler/loopopts/superword/TestFuzzPreLoop.java
Passed: compiler/loopopts/superword/TestGeneralizedReductions.java
Passed: compiler/loopopts/superword/TestHoistedReductionNode.java
Passed: compiler/loopopts/superword/TestIndependentPacksWithCyclicDependency2.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx512-v032-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx2-v032-U
Passed: compiler/loopopts/superword/TestLargeCompilation.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx512-v032-U
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx512-v064-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v004-U
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v004-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx512-v064-U
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestMemorySegment.java#char-array
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v008-A
Passed: compiler/loopopts/superword/TestMemorySegment.java#double-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#float-array
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v008-U
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array
Passed: compiler/loopopts/superword/TestMemorySegmentMainLoopAlignment.java
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestMemorySegment.java#native
Passed: compiler/loopopts/superword/TestMemorySegment.java#native-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#short-array
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-VerifyAlignVector
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native
Passed: compiler/loopopts/superword/TestNegBaseOffset.java
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#Vanilla
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v016-A
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithMoreFlags
Passed: compiler/loopopts/superword/TestMultiversionRemoveUselessSlowLoop.java
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-AlignVector
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v016-U
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithFlags
Passed: compiler/loopopts/superword/TestSearchAlignment.java
Passed: compiler/loopopts/superword/TestReductionWithLoopVariantUse.java
Passed: compiler/loopopts/superword/TestPeeledReductionNode.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-U
Passed: compiler/loopopts/superword/TestParallelReduction.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-A
Passed: compiler/loopopts/superword/TestVectorizationWithInvariant.java
Passed: compiler/loopopts/superword/TestPickFirstMemoryState.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize16-Unaligned
Passed: compiler/loopopts/superword/TestWronglyMarkedReduction.java
Passed: compiler/loopopts/superword/TestPickLastMemoryState.java
Passed: compiler/loopopts/superword/TestVectorizeTypeConversionWithUnsafe.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Aligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Unaligned
Passed: compiler/vectorapi/Test8303508.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize32-Aligned
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-VerifyAlignVector
Passed: compiler/loopopts/superword/TestVectorFPReduction.java
Passed: compiler/vectorapi/TestIsLoadVector.java
Passed: compiler/vectorapi/Test8259353.java
Passed: compiler/vectorapi/TestBiMorphicMismatchedMemSegment.java
Passed: compiler/vectorapi/TestLongVectorNeg.java
Passed: compiler/vectorapi/TestNoInline.java
Passed: compiler/vectorapi/TestLoopStoreVector.java#id0
Passed: compiler/vectorapi/TestLoopStoreVector.java#id1
Passed: compiler/vectorapi/TestIntrinsicBailOut.java#id0
Passed: compiler/vectorapi/TestReverseByteTransforms.java
Passed: compiler/vectorapi/TestIntrinsicBailOut.java#id1
Passed: compiler/vectorapi/TestVectorErgonomics.java
Passed: compiler/vectorapi/Test8278948.java
Passed: compiler/vectorapi/VectorBoxExpandTest.java
Passed: compiler/vectorapi/TestVectorShuffleIota.java
Passed: compiler/vectorapi/TestVectorTest.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#AlignVector
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#StoreToLoadForwardingFailureDetection
Passed: compiler/vectorapi/TestVectorAddMulReduction.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#vanilla
Passed: compiler/vectorapi/TestVectorShiftImm.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage2.java
Passed: compiler/vectorapi/VectorFPtoIntCastTest.java
Passed: compiler/loopopts/superword/TestMovingLoadBeforeStore.java
Passed: compiler/vectorapi/VectorCommutativeOperSharingTest.java
Passed: compiler/vectorapi/VectorMemoryAlias.java
Passed: compiler/vectorapi/TestVectorShuffleIotaByte.java
Passed: compiler/vectorapi/VectorReverseBytesTest.java
Passed: compiler/vectorapi/VectorMaskCastTest.java
Passed: compiler/vectorapi/TestTwoVectorPermute.java
Passed: compiler/loopopts/superword/TestEquivalentInvariants.java
Passed: compiler/c2/cr6340864/TestDoubleVect.java
Passed: compiler/c2/cr6340864/TestFloatVect.java
Passed: compiler/vectorapi/TestMaskedMacroLogicVector.java
Passed: compiler/vectorapi/TestRawOopAtSafepoint.java
Passed: compiler/c2/irTests/blackhole/BlackholeStoreStoreEATest.java
Passed: compiler/c2/cr6340864/TestByteVect.java
Passed: compiler/c2/irTests/blackhole/BlackholeHotInlineTest.java
Passed: compiler/c2/cr6340864/TestIntVect.java
Passed: compiler/c2/irTests/blackhole/BlackholeLoadOptoTest.java
Passed: compiler/c2/irTests/blackhole/BlackholeSyncEATest.java
Passed: compiler/c2/cr6340864/TestLongVectRotate.java
Passed: compiler/c2/cr6340864/TestIntVectRotate.java
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id0
Passed: compiler/c2/irTests/igvn/TestCombineAddPWithConstantOffsets.java
Passed: compiler/c2/irTests/igvn/TestLoadNIdeal.java
Passed: compiler/c2/irTests/igvn/TestIntegerMulRing.java
Passed: compiler/c2/cr6340864/TestShortVect.java
Passed: compiler/c2/irTests/igvn/TestCleanMemPhi.java
Passed: compiler/c2/cr6340864/TestLongVect.java
Passed: compiler/c2/irTests/loopOpts/LoopIdealizationTests.java
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id1
Passed: compiler/vectorapi/VectorGatherMaskFoldingTest.java
Passed: compiler/c2/irTests/scalarReplacement/ScalarReplacementTests.java
Passed: compiler/vectorapi/VectorCastShape128Test.java
Passed: compiler/c2/irTests/AddINodeIdealizationTests.java
Passed: compiler/vectorapi/VectorSaturatedOperationsTest.java
Passed: compiler/c2/irTests/stringopts/TestNegativeArraySize.java
Passed: compiler/c2/irTests/AddLNodeIdealizationTests.java
Passed: compiler/c2/irTests/AndINodeIdealizationTests.java
Passed: compiler/c2/irTests/CMoveLConstants.java
Passed: compiler/c2/irTests/CmpUWithZero.java
Passed: compiler/c2/irTests/AndLNodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StablePrimArrayTest.java
Passed: compiler/c2/irTests/stable/StablePrimFinalTest.java
Passed: compiler/c2/irTests/DeMorganLawLongTests.java
Passed: compiler/c2/irTests/DeMorganLawIntTests.java
Passed: compiler/c2/irTests/stable/StableRefFinalTest.java
Passed: compiler/vectorapi/VectorCastShape64Test.java
Passed: compiler/c2/irTests/stable/StablePrimVolatileTest.java
Passed: compiler/c2/irTests/ConstructorBarriers.java
Passed: compiler/c2/irTests/stable/StableRefArrayTest.java
Passed: compiler/c2/irTests/stable/StablePrimPlainTest.java
Passed: compiler/c2/irTests/DivINodeIdealizationTests.java
Passed: compiler/c2/irTests/DivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/LShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/LShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/MaxMinINodeIdealizationTests.java
Passed: compiler/c2/irTests/ModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/ModFNodeTests.java
Passed: compiler/c2/irTests/ModINodeIdealizationTests.java
Passed: compiler/c2/irTests/MulINodeIdealizationTests.java
Passed: compiler/vectorapi/VectorMultiplyOpt.java
Passed: compiler/c2/irTests/OrINodeIdealizationTests.java
Passed: compiler/c2/irTests/ModDNodeTests.java
Passed: compiler/c2/irTests/OrLNodeIdealizationTests.java
Passed: compiler/c2/irTests/MulLNodeIdealizationTests.java
Passed: compiler/c2/irTests/MulHFNodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StableRefVolatileTest.java
Passed: compiler/c2/irTests/stable/StableRefPlainTest.java
Passed: compiler/c2/irTests/RShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/RShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestAutoVecCountingDownLoop.java
Passed: compiler/c2/irTests/SubLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestBackToBackIfs.java
Passed: compiler/c2/irTests/SubINodeIdealizationTests.java
Passed: compiler/c2/irTests/TestAutoVectorization2DArray.java
Passed: compiler/c2/irTests/TestBackToBackMustBeNotNull.java
Passed: compiler/c2/irTests/TestCMoveCCP.java
Passed: compiler/c2/irTests/TestArrayElementTypeLoad.java
Passed: compiler/c2/irTests/TestConv2BExpansion.java
Passed: compiler/c2/irTests/TestEnumFinalFold.java
Passed: compiler/c2/irTests/TestConvI2LCastLongLoop.java
Passed: compiler/c2/irTests/TestDebugInfo.java
Passed: compiler/c2/irTests/TestFPConversion.java
Passed: compiler/c2/irTests/TestCountedLoopPhiValue.java
Passed: compiler/c2/irTests/TestGetAndAdd.java
Passed: compiler/c2/irTests/TestFPComparison.java
Passed: compiler/c2/irTests/TestFewIterationsCountedLoop.java
Passed: compiler/c2/irTests/TestIRFma.java
Passed: compiler/c2/irTests/TestCountedLoopSafepoint.java
Passed: compiler/c2/irTests/TestIRLShiftIdeal_XPlusX_LShiftC.java
Passed: compiler/c2/irTests/TestIterativeEA.java
Passed: compiler/c2/irTests/TestMulNodeIdealization.java
Passed: compiler/c2/irTests/TestIRAbs.java
Passed: compiler/c2/irTests/TestMinMaxIdentities.java
Passed: compiler/c2/irTests/TestOptimizeUnstableIf.java
Passed: compiler/c2/irTests/TestPadding.java
Passed: compiler/c2/irTests/TestPushAddThruCast.java
Passed: compiler/c2/irTests/TestPhiDuplicatedConversion.java
Passed: compiler/c2/irTests/TestIfMinMax.java
Passed: compiler/c2/irTests/TestScalarReplacement.java
Passed: compiler/c2/irTests/TestRemixAddressExpressions.java
Passed: compiler/c2/irTests/TestPostParseCallDevirtualization.java
Passed: compiler/c2/irTests/TestScheduleSmallMethod.java
Passed: compiler/c2/irTests/TestLongRangeChecks.java
Passed: compiler/c2/irTests/TestSpecialCasesOf_AMinusB_Plus_CMinusD_InAddIdeal.java
Passed: compiler/c2/irTests/TestShiftAndMask.java
Passed: compiler/c2/irTests/TestLSMMissedEmptyLoop.java
Passed: compiler/c2/irTests/TestSkeletonPredicates.java
Passed: compiler/c2/irTests/TestTypeSpeculation.java
Passed: compiler/c2/irTests/TestStripMiningDropsSafepoint.java
Passed: compiler/c2/irTests/TestTestRemovalPeephole.java
Passed: compiler/c2/irTests/ConvF2HFIdealizationTests.java
Passed: compiler/c2/irTests/TestVectorizeTypeConversion.java
Passed: compiler/c2/irTests/TestUnsignedComparison.java
Passed: compiler/c2/irTests/TestSuperwordFailsUnrolling.java
Passed: compiler/c2/irTests/TestVectorizeURShiftSubword.java
Passed: compiler/c2/irTests/UDivINodeIdealizationTests.java
Passed: compiler/c2/irTests/UDivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/UModINodeIdealizationTests.java
Passed: compiler/c2/irTests/URShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/URShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/UModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestVectorizationMultiInvar.java
Passed: compiler/c2/irTests/XorINodeIdealizationTests.java
Passed: compiler/c2/irTests/TestFloat16ScalarOperations.java
Passed: compiler/c2/irTests/XorLNodeIdealizationTests.java
Passed: compiler/c2/irTests/gc/ReferenceClearTests.java
Passed: compiler/c2/irTests/gc/ReferenceRefersToTests.java
Passed: compiler/vectorization/runner/ArrayIndexFillTest.java
Passed: compiler/vectorization/runner/ArrayCopyTest.java
Passed: compiler/vectorization/runner/BasicBooleanOpTest.java
Passed: compiler/vectorization/runner/ArrayUnsafeOpTest.java
Passed: compiler/vectorization/runner/ArrayShiftOpTest.java
Passed: compiler/vectorization/runner/BasicByteOpTest.java
Passed: compiler/vectorization/runner/BasicCharOpTest.java
Passed: compiler/vectorization/runner/BasicDoubleOpTest.java
Passed: compiler/vectorization/runner/BasicIntOpTest.java
Passed: compiler/vectorization/runner/BasicFloatOpTest.java
Passed: compiler/vectorization/TestAbsCharVector.java
Passed: compiler/vectorization/runner/ArrayInvariantFillTest.java
Passed: compiler/vectorization/runner/BasicLongOpTest.java
Passed: compiler/vectorization/TestAutoVecIntMinMax.java
Passed: compiler/vectorization/TestCMoveWithoutBoolPack.java
Passed: compiler/vectorization/runner/LoopReductionOpTest.java
Passed: compiler/c2/irTests/ProfileAtTypeCheck.java
Passed: compiler/vectorization/runner/BasicShortOpTest.java
Passed: compiler/vectorization/runner/LoopRangeStrideTest.java
Passed: compiler/vectorization/runner/LoopLiveOutNodesTest.java
Passed: compiler/vectorization/runner/LoopControlFlowTest.java
Passed: compiler/vectorization/TestNarrowedIntegerReverseBytes.java
Passed: compiler/vectorization/TestMemoryVectorMismatched.java
Passed: compiler/vectorization/runner/MultipleLoopsTest.java
Passed: compiler/vectorization/runner/StripMinedLoopTest.java
Passed: compiler/vectorization/TestOptionVectorize.java
Passed: compiler/vectorization/TestMacroLogicVector.java
Passed: compiler/vectorization/TestMaskedVectors.java
Passed: compiler/vectorization/TestNaNVector.java
Passed: compiler/vectorization/runner/LoopArrayIndexComputeTest.java
Passed: compiler/vectorization/TestFloat16VectorConvChain.java
Passed: compiler/vectorization/TestComplexAddrExpr.java
Passed: compiler/vectorization/TestReplicateLoopIV.java
Passed: compiler/vectorization/TestOverlappingMismatchedAccesses.java
Passed: compiler/vectorization/TestReplicateAtConv.java
Passed: compiler/vectorization/TestFloat16ToFloatConv.java
Passed: compiler/vectorization/TestPopCountVector.java
Passed: compiler/vectorization/TestOffsetSorting.java
Passed: compiler/vectorization/TestSmallVectorPopIndex.java
Passed: compiler/vectorization/TestRotateByteAndShortVector.java
Passed: compiler/vectorization/TestUnexpectedLoadOrdering.java
Passed: compiler/vectorization/TestReverseBitsVector.java
Passed: compiler/vectorization/TestVectorUnalignedOffset.java
Passed: compiler/vectorization/TestReverseBytes.java
Passed: compiler/vectorization/TestPopulateIndex.java
Passed: compiler/vectorization/TestRoundVectFloat.java
Passed: compiler/vectorization/TestSignumVector.java
Passed: compiler/vectorization/TestOptionVectorizeIR.java
Passed: compiler/vectorization/TestVectorizationNegativeScale.java
Passed: compiler/vectorization/TestForEachRem.java
Passed: compiler/vectorization/TestBufferVectorization.java
Passed: compiler/vectorization/TestSubwordReverseBytes.java
Passed: compiler/vectorization/TestVectorsNotSavedAtSafepoint.java
Passed: compiler/vectorization/TestNumberOfContinuousZeros.java
Passed: compiler/vectorapi/reshape/TestVectorCastAVX1.java
Passed: compiler/vectorapi/reshape/TestVectorCastAVX512.java
Passed: compiler/vectorapi/reshape/TestVectorCastAVX2.java
Passed: compiler/vectorization/TestVectorZeroCount.java
Test results: passed: 360; excluded: 18; did not meet platform requirements: 48
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
   jtreg:test/hotspot/jtreg:hotspot_vector_1           426   360     0     0    66   
==============================
TEST SUCCESS

Finished building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_2', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_2
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_2

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Passed: compiler/intrinsics/string/TestStringEqualsBadLength.java
Passed: compiler/intrinsics/string/TestStringConstruction.java
Passed: compiler/intrinsics/string/TestCopyValueOf.java
Passed: compiler/intrinsics/string/TestStringIndexOfCharIntrinsics.java
Passed: compiler/intrinsics/string/TestStringIntrinsicMemoryFlow.java
Passed: compiler/intrinsics/IntrinsicDisabledTest.java
Passed: compiler/intrinsics/string/TestStringIntrinsicRangeChecks.java
Passed: compiler/intrinsics/string/TestStringConstructionIntrinsics.java#id0
Passed: compiler/intrinsics/IntrinsicAvailableTest.java
Passed: compiler/intrinsics/Test8005419.java
Passed: compiler/intrinsics/Test6982370.java
Passed: compiler/intrinsics/Test8215792.java
Passed: compiler/intrinsics/Test8237524.java
Passed: compiler/intrinsics/string/TestStringIntrinsics2.java
Passed: compiler/intrinsics/TestArrayGuardWithInterfaces.java
Passed: compiler/intrinsics/TestArraysHashCode.java
Passed: compiler/intrinsics/string/TestHasNegatives.java#id0
Passed: compiler/intrinsics/TestCheckIndex.java
Passed: compiler/codegen/Test6935535.java#id0
Passed: compiler/intrinsics/TestContinuationPinningAndEA.java
Passed: compiler/intrinsics/string/TestCountPositives.java#id0
Passed: compiler/intrinsics/TestReferenceRefersTo.java
Passed: compiler/intrinsics/string/TestStringUTF16IntrinsicRangeChecks.java
Passed: compiler/intrinsics/TestReferenceGetWithNull.java
Passed: compiler/intrinsics/VectorizedMismatchTest.java
Passed: compiler/intrinsics/string/TestStringConstructionIntrinsics.java#id1
Passed: compiler/intrinsics/TestRotate.java
Passed: compiler/intrinsics/TestCompareUnsigned.java
Passed: compiler/intrinsics/string/TestEncodeIntrinsics.java
Passed: compiler/intrinsics/TestIntegerUnsignedDivMod.java
Passed: compiler/codegen/aes/Test8299817.java
Passed: compiler/codegen/aes/Test8292158.java
Passed: compiler/codegen/Test6875866.java
Passed: compiler/intrinsics/bigInteger/TestMulAdd.java
Passed: compiler/intrinsics/string/TestCountPositives.java#id1
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLenReturnProfile.java
Passed: compiler/codegen/Test6935535.java#id1
Passed: compiler/intrinsics/string/TestHasNegatives.java#id1
Passed: compiler/intrinsics/bigInteger/TestSquareToLen.java
Passed: compiler/intrinsics/bmi/verifycode/AndnTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestL.java
Passed: compiler/intrinsics/string/TestStringIntrinsics.java
Passed: compiler/intrinsics/bmi/verifycode/AndnTestI.java
Passed: compiler/intrinsics/TestLongUnsignedDivMod.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestI.java
Passed: compiler/intrinsics/bmi/verifycode/BzhiTestI2L.java
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestI.java
Passed: compiler/intrinsics/bigInteger/MontgomeryMultiplyTest.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestI.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestL.java
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLen.java
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestI.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestL.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestI.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestL.java
Passed: compiler/intrinsics/bigInteger/TestShift.java
Passed: compiler/intrinsics/bmi/TestBlsiI.java
Passed: compiler/intrinsics/bmi/TestBlsiL.java
Passed: compiler/intrinsics/bmi/TestBlsmskI.java
Passed: compiler/intrinsics/bmi/TestBlsrI.java
Passed: compiler/intrinsics/bmi/TestBlsmskL.java
Passed: compiler/intrinsics/bmi/TestBlsrL.java
Passed: compiler/intrinsics/TestBitShuffleOpers.java
Passed: compiler/intrinsics/float16/Binary16ConversionNaN.java
Passed: compiler/intrinsics/bmi/TestLzcntI.java
Passed: compiler/intrinsics/bmi/TestAndnI.java
Passed: compiler/intrinsics/bmi/TestTzcntI.java
Passed: compiler/intrinsics/bmi/TestLzcntL.java
Passed: compiler/intrinsics/bmi/TestTzcntL.java
Passed: compiler/intrinsics/bmi/TestAndnL.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id0
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id1
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id2
Passed: compiler/intrinsics/chacha/TestChaCha20.java
Passed: compiler/intrinsics/float16/TestAllFloat16ToFloat.java
Passed: compiler/intrinsics/math/Test8210461.java
Passed: compiler/intrinsics/float16/TestConstFloat16ToFloat.java
Passed: compiler/intrinsics/math/TestMinMaxIntrinsics.java
Passed: compiler/intrinsics/math/TestFpMinMaxReductions.java
Passed: compiler/intrinsics/math/TestPow0Dot5Opt.java
Passed: compiler/intrinsics/bmi/TestBzhiI2L.java
Passed: compiler/intrinsics/math/TestFpMinMaxIntrinsics.java
Passed: compiler/intrinsics/math/TestPow2Opt.java
Passed: compiler/intrinsics/klass/TestIsPrimitive.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactIntTest.java
Passed: compiler/intrinsics/math/TestMinMaxInlining.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactIntTest.java
Passed: compiler/intrinsics/math/TestMinMaxOpt.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactLongTest.java
Passed: compiler/intrinsics/mathexact/AddExactICondTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactIntTest.java
Passed: compiler/intrinsics/float16/Binary16Conversion.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactLongTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoopDependentTest.java
Passed: compiler/intrinsics/klass/CastNullCheckDroppingsTest.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactLongTest.java
Passed: compiler/intrinsics/mathexact/CompareTest.java
Passed: compiler/intrinsics/mathexact/GVNTest.java
Passed: compiler/intrinsics/mathexact/AddExactINonConstantTest.java
Passed: compiler/intrinsics/math/MaxMinOptimizeTest.java
Passed: compiler/intrinsics/mathexact/AddExactIConstantTest.java
Passed: compiler/codegen/aes/TestCipherBlockChainingEncrypt.java
Passed: compiler/intrinsics/mathexact/MulExactICondTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoadTest.java
Passed: compiler/intrinsics/mathexact/DecExactLTest.java
Passed: compiler/intrinsics/mathexact/IncExactITest.java
Passed: compiler/intrinsics/mathexact/DecExactITest.java
Passed: compiler/intrinsics/mathexact/IncExactLTest.java
Passed: compiler/intrinsics/mathexact/AddExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/AddExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/AddExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/NegExactILoadTest.java
Passed: compiler/intrinsics/mathexact/NegExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/NestedMathExactTest.java
Passed: compiler/intrinsics/mathexact/SplitThruPhiTest.java
Passed: compiler/intrinsics/mathexact/SubExactICondTest.java
Passed: compiler/intrinsics/mathexact/NegExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoadTest.java
Passed: compiler/intrinsics/mathexact/MulExactILoadTest.java
Passed: compiler/intrinsics/mathexact/MulExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactLConstantTest.java
Passed: compiler/intrinsics/object/TestHashCode.java
Passed: compiler/intrinsics/SortingDeoptimizationTest.java
Passed: compiler/intrinsics/mathexact/MulExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/MulExactINonConstantTest.java
Passed: compiler/loopopts/superword/Vec_MulAddS2I.java
Passed: compiler/intrinsics/mathexact/SubExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/LongMulOverflowTest.java
Passed: compiler/intrinsics/mathexact/SubExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/SubExactLConstantTest.java
Passed: compiler/intrinsics/base64/TestBase64.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestMD5Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1MultiBlockIntrinsics.java
Passed: compiler/intrinsics/mathexact/MulExactLNonConstantTest.java
Passed: compiler/intrinsics/unsafe/TestCAEAntiDep.java
Passed: compiler/intrinsics/unsafe/TestUnsafeMismatchedArrayFieldAccess.java
Passed: compiler/intrinsics/unsafe/TestUnsafeUnalignedMismatchedAccesses.java
Passed: compiler/intrinsics/unsafe/UnsafeGetAddressTest.java
Passed: compiler/intrinsics/object/TestClone.java
Passed: compiler/intrinsics/sha/sanity/TestSHA256Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestMD5MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512Intrinsics.java
Passed: compiler/intrinsics/math/TestSignumIntrinsic.java
Passed: compiler/intrinsics/zip/TestCRC32C.java
Passed: compiler/intrinsics/unsafe/UnsafeTwoCASLong.java
Passed: compiler/intrinsics/zip/TestCRC32.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3Intrinsics.java
Passed: compiler/intrinsics/zip/TestAdler32.java
Passed: compiler/intrinsics/zip/TestFpRegsABI.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/AllocateUninitializedArray.java
Passed: compiler/intrinsics/sha/sanity/TestSHA256MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id0
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id1
Passed: compiler/intrinsics/unsafe/DirectByteBufferTest.java
Passed: compiler/intrinsics/sha/TestDigest.java
Passed: compiler/codegen/aes/TestAESMain.java
Test results: passed: 173; excluded: 1; did not meet platform requirements: 18
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_2
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
   jtreg:test/hotspot/jtreg:hotspot_vector_2           192   173     0     0    19   
==============================
TEST SUCCESS

Finished building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/:jdk_vector', will run:
* jtreg:test/jdk:jdk_vector
Clean up dirs for jtreg_test_jdk_jdk_vector

Running test 'jtreg:test/jdk:jdk_vector'
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/AddTest.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorTests.java
--------------------------------------------------
TEST: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   16.692 seconds
messages:
command: build Byte512VectorLoadStoreTests
reason: Named class compiled on demand
started: Thu Apr 17 04:25:59 IST 2025
Test directory:
  compile: Byte512VectorLoadStoreTests
finished: Thu Apr 17 04:26:15 IST 2025
elapsed time (seconds): 16.692

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   16.688 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorLoadStoreTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 04:25:59 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 6
Process id: 2257099
finished: Thu Apr 17 04:26:15 IST 2025
elapsed time (seconds): 16.688
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Byte512VectorLoadStoreTests.d 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/7 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Byte512VectorLoadStoreTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorLoadStoreTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Byte512VectorLoadStoreTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Byte512VectorLoadStoreTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Byte512VectorLoadStoreTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Byte512VectorLoadStoreTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Byte512VectorLoadStoreTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorLoadStoreTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm -XX:-TieredCompilation Byte512VectorLoadStoreTests 
TIME:   59.219 seconds
messages:
command: testng -XX:-TieredCompilation Byte512VectorLoadStoreTests
reason: User specified action: run testng/othervm -XX:-TieredCompilation Byte512VectorLoadStoreTests 
started: Thu Apr 17 04:26:15 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 2258256
finished: Thu Apr 17 04:27:15 IST 2025
elapsed time (seconds): 59.219
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED

STDOUT:
For random generator using seed: 3325450789410045642
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=3325450789410045642" to command line.
test Byte512VectorLoadStoreTests.booleanGather(byte[i * 5], index[random]): success [1074ms]
test Byte512VectorLoadStoreTests.booleanGather(byte[i + 1], index[random]): success [2441ms]
test Byte512VectorLoadStoreTests.booleanGatherMask(byte[i * 5], index[random], mask[i % 2]): success [466ms]
test Byte512VectorLoadStoreTests.booleanGatherMask(byte[i + 1], index[random], mask[i % 2]): success [297ms]
test Byte512VectorLoadStoreTests.booleanGatherMask(byte[i * 5], index[random], mask[true]): success [304ms]
test Byte512VectorLoadStoreTests.booleanGatherMask(byte[i + 1], index[random], mask[true]): success [345ms]
test Byte512VectorLoadStoreTests.booleanGatherMask(byte[i * 5], index[random], mask[false]): success [425ms]
test Byte512VectorLoadStoreTests.booleanGatherMask(byte[i + 1], index[random], mask[false]): success [280ms]
test Byte512VectorLoadStoreTests.booleanScatter(byte[i * 5], index[random]): success [209ms]
test Byte512VectorLoadStoreTests.booleanScatter(byte[i + 1], index[random]): success [226ms]
test Byte512VectorLoadStoreTests.booleanScatterMask(byte[i * 5], index[random], mask[i % 2]): success [134ms]
test Byte512VectorLoadStoreTests.booleanScatterMask(byte[i + 1], index[random], mask[i % 2]): success [152ms]
test Byte512VectorLoadStoreTests.booleanScatterMask(byte[i * 5], index[random], mask[true]): success [3ms]
test Byte512VectorLoadStoreTests.booleanScatterMask(byte[i + 1], index[random], mask[true]): success [243ms]
test Byte512VectorLoadStoreTests.booleanScatterMask(byte[i * 5], index[random], mask[false]): success [639ms]
test Byte512VectorLoadStoreTests.booleanScatterMask(byte[i + 1], index[random], mask[false]): success [2ms]
test Byte512VectorLoadStoreTests.gather(byte[i * 5], index[random]): success [1750ms]
test Byte512VectorLoadStoreTests.gather(byte[i + 1], index[random]): success [217ms]
test Byte512VectorLoadStoreTests.gatherMask(byte[i * 5], index[random], mask[i % 2]): success [403ms]
test Byte512VectorLoadStoreTests.gatherMask(byte[i + 1], index[random], mask[i % 2]): success [451ms]
test Byte512VectorLoadStoreTests.gatherMask(byte[i * 5], index[random], mask[true]): success [141ms]
test Byte512VectorLoadStoreTests.gatherMask(byte[i + 1], index[random], mask[true]): success [278ms]
test Byte512VectorLoadStoreTests.gatherMask(byte[i * 5], index[random], mask[false]): success [594ms]
test Byte512VectorLoadStoreTests.gatherMask(byte[i + 1], index[random], mask[false]): success [170ms]
test Byte512VectorLoadStoreTests.loadArrayIOOBE(byte[i * 5], -1): success [391ms]
test Byte512VectorLoadStoreTests.loadArrayIOOBE(byte[i * 5], l): success [299ms]
test Byte512VectorLoadStoreTests.loadArrayIOOBE(byte[i * 5], l - 1): success [4ms]
test Byte512VectorLoadStoreTests.loadArrayIOOBE(byte[i * 5], l + 1): success [11ms]
test Byte512VectorLoadStoreTests.loadArrayIOOBE(byte[i * 5], l - speciesl + 1): success [89ms]
test Byte512VectorLoadStoreTests.loadArrayIOOBE(byte[i * 5], l + speciesl - 1): success [3ms]
test Byte512VectorLoadStoreTests.loadArrayIOOBE(byte[i * 5], l + speciesl): success [3ms]
test Byte512VectorLoadStoreTests.loadArrayIOOBE(byte[i * 5], l + speciesl + 1): success [3ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], -1, mask[i % 2]): success [185ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l, mask[i % 2]): success [702ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l - 1, mask[i % 2]): success [7ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + 1, mask[i % 2]): success [123ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l - speciesl + 1, mask[i % 2]): success [145ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + speciesl - 1, mask[i % 2]): success [18ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + speciesl, mask[i % 2]): success [5ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + speciesl + 1, mask[i % 2]): success [5ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], -1, mask[true]): success [17ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l, mask[true]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l - 1, mask[true]): success [5ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + 1, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l - speciesl + 1, mask[true]): success [3ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + speciesl - 1, mask[true]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + speciesl, mask[true]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + speciesl + 1, mask[true]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], -1, mask[false]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l, mask[false]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l - 1, mask[false]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + 1, mask[false]): success [5ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l - speciesl + 1, mask[false]): success [6ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + speciesl - 1, mask[false]): success [106ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + speciesl, mask[false]): success [3ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + speciesl + 1, mask[false]): success [2ms]
test Byte512VectorLoadStoreTests.loadByteStoreBooleanArray(byte[i * 5]): success [566ms]
test Byte512VectorLoadStoreTests.loadByteStoreBooleanArray(byte[i + 1]): success [125ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentIOOBE(byte[i * 5], -1): success [516ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentIOOBE(byte[i * 5], l): success [866ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentIOOBE(byte[i * 5], l - 1): success [6ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentIOOBE(byte[i * 5], l + 1): success [19ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentIOOBE(byte[i * 5], l - speciesl*ebsize + 1): success [116ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentIOOBE(byte[i * 5], l + speciesl*ebsize - 1): success [5ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentIOOBE(byte[i * 5], l + speciesl*ebsize): success [4ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentIOOBE(byte[i * 5], l + speciesl*ebsize + 1): success [3ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], -1, mask[i % 2]): success [230ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l, mask[i % 2]): success [614ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l - 1, mask[i % 2]): success [5ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + 1, mask[i % 2]): success [5ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l - speciesl*ebsize + 1, mask[i % 2]): success [146ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize - 1, mask[i % 2]): success [58ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize, mask[i % 2]): success [4ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize + 1, mask[i % 2]): success [9ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], -1, mask[true]): success [6ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l - 1, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + 1, mask[true]): success [5ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l - speciesl*ebsize + 1, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize - 1, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize + 1, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], -1, mask[false]): success [51ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l, mask[false]): success [4ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l - 1, mask[false]): success [18ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + 1, mask[false]): success [5ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l - speciesl*ebsize + 1, mask[false]): success [5ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize - 1, mask[false]): success [5ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize, mask[false]): success [5ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize + 1, mask[false]): success [5ms]
test Byte512VectorLoadStoreTests.loadStoreArray(byte[i * 5]): success [4ms]
test Byte512VectorLoadStoreTests.loadStoreArray(byte[i + 1]): success [5ms]
test Byte512VectorLoadStoreTests.loadStoreBooleanArray(byte[i * 5]): success [241ms]
test Byte512VectorLoadStoreTests.loadStoreBooleanArray(byte[i + 1]): success [127ms]
test Byte512VectorLoadStoreTests.loadStoreMask(mask[i % 2]): success [9ms]
test Byte512VectorLoadStoreTests.loadStoreMask(mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.loadStoreMask(mask[false]): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMask(byte[i * 5], mask[i % 2]): success [2ms]
test Byte512VectorLoadStoreTests.loadStoreMask(byte[i + 1], mask[i % 2]): success [2ms]
test Byte512VectorLoadStoreTests.loadStoreMask(byte[i * 5], mask[true]): success [2ms]
test Byte512VectorLoadStoreTests.loadStoreMask(byte[i + 1], mask[true]): success [5ms]
test Byte512VectorLoadStoreTests.loadStoreMask(byte[i * 5], mask[false]): success [2ms]
test Byte512VectorLoadStoreTests.loadStoreMask(byte[i + 1], mask[false]): success [2ms]
test Byte512VectorLoadStoreTests.loadStoreMaskArray(byte[i * 5], mask[i % 2]): success [193ms]
test Byte512VectorLoadStoreTests.loadStoreMaskArray(byte[i + 1], mask[i % 2]): success [481ms]
test Byte512VectorLoadStoreTests.loadStoreMaskArray(byte[i * 5], mask[true]): success [644ms]
test Byte512VectorLoadStoreTests.loadStoreMaskArray(byte[i + 1], mask[true]): success [8ms]
test Byte512VectorLoadStoreTests.loadStoreMaskArray(byte[i * 5], mask[false]): success [11ms]
test Byte512VectorLoadStoreTests.loadStoreMaskArray(byte[i + 1], mask[false]): success [10ms]
test Byte512VectorLoadStoreTests.loadStoreMaskBooleanArray(byte[i * 5], mask[i % 2]): success [679ms]
test Byte512VectorLoadStoreTests.loadStoreMaskBooleanArray(byte[i + 1], mask[i % 2]): success [864ms]
test Byte512VectorLoadStoreTests.loadStoreMaskBooleanArray(byte[i * 5], mask[true]): success [1354ms]
test Byte512VectorLoadStoreTests.loadStoreMaskBooleanArray(byte[i + 1], mask[true]): success [465ms]
test Byte512VectorLoadStoreTests.loadStoreMaskBooleanArray(byte[i * 5], mask[false]): success [270ms]
test Byte512VectorLoadStoreTests.loadStoreMaskBooleanArray(byte[i + 1], mask[false]): success [249ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], DMS, BIG_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], DMS, LITTLE_ENDIAN): success [4ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:byte[], BIG_ENDIAN): success [1022ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:byte[], LITTLE_ENDIAN): success [74ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:short[], BIG_ENDIAN): success [1863ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:short[], LITTLE_ENDIAN): success [98ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:int[], BIG_ENDIAN): success [63ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:int[], LITTLE_ENDIAN): success [31ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:float[], BIG_ENDIAN): success [451ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:float[], LITTLE_ENDIAN): success [735ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:long[], BIG_ENDIAN): success [45ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:long[], LITTLE_ENDIAN): success [71ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:double[], BIG_ENDIAN): success [689ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:double[], LITTLE_ENDIAN): success [52ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:ByteBuffer.wrap, BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:ByteBuffer.wrap, LITTLE_ENDIAN): success [31ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:IntBuffer.wrap, BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:IntBuffer.wrap, LITTLE_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:ByteBuffer.allocate, BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:ByteBuffer.allocate, LITTLE_ENDIAN): success [76ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:IntBuffer.allocate, BIG_ENDIAN): success [31ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:IntBuffer.allocate, LITTLE_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:long[].asSlice, BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:long[].asSlice, LITTLE_ENDIAN): success [44ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], DMS, BIG_ENDIAN): success [9ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], DMS, LITTLE_ENDIAN): success [9ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:byte[], BIG_ENDIAN): success [65ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:byte[], LITTLE_ENDIAN): success [43ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:short[], BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:short[], LITTLE_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:int[], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:int[], LITTLE_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:float[], BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:float[], LITTLE_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:long[], BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:long[], LITTLE_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:double[], BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:double[], LITTLE_ENDIAN): success [54ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:ByteBuffer.wrap, BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:ByteBuffer.wrap, LITTLE_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:IntBuffer.wrap, BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:IntBuffer.wrap, LITTLE_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:ByteBuffer.allocate, BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:ByteBuffer.allocate, LITTLE_ENDIAN): success [31ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:IntBuffer.allocate, BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:IntBuffer.allocate, LITTLE_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:long[].asSlice, BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:long[].asSlice, LITTLE_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], DMS, mask[i % 2], BIG_ENDIAN): success [1403ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], DMS, mask[i % 2], LITTLE_ENDIAN): success [348ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:byte[], mask[i % 2], BIG_ENDIAN): success [3037ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:byte[], mask[i % 2], LITTLE_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:short[], mask[i % 2], BIG_ENDIAN): failure [54ms]
java.lang.IndexOutOfBoundsException: Masked range check failed: vector mask Mask[T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.] out of bounds at index 281479271743489+0 for length 3072
	at jdk.incubator.vector/jdk.incubator.vector.AbstractMask.checkIndexFailed(AbstractMask.java:510)
	at jdk.incubator.vector/jdk.incubator.vector.AbstractMask.checkIndexByLane(AbstractMask.java:464)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.intoMemorySegment(ByteVector.java:3888)
	at Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(Byte512VectorLoadStoreTests.java:572)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:short[], mask[i % 2], LITTLE_ENDIAN): success [272ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:int[], mask[i % 2], BIG_ENDIAN): success [421ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:int[], mask[i % 2], LITTLE_ENDIAN): success [1550ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:float[], mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:float[], mask[i % 2], LITTLE_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[], mask[i % 2], BIG_ENDIAN): success [58ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[], mask[i % 2], LITTLE_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:double[], mask[i % 2], BIG_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:double[], mask[i % 2], LITTLE_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.wrap, mask[i % 2], BIG_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.wrap, mask[i % 2], LITTLE_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.wrap, mask[i % 2], BIG_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.wrap, mask[i % 2], LITTLE_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.allocate, mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.allocate, mask[i % 2], LITTLE_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.allocate, mask[i % 2], BIG_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.allocate, mask[i % 2], LITTLE_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[].asSlice, mask[i % 2], BIG_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[].asSlice, mask[i % 2], LITTLE_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], DMS, mask[i % 2], BIG_ENDIAN): success [12ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], DMS, mask[i % 2], LITTLE_ENDIAN): success [11ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:byte[], mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:byte[], mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:short[], mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:short[], mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:int[], mask[i % 2], BIG_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:int[], mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:float[], mask[i % 2], BIG_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:float[], mask[i % 2], LITTLE_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[], mask[i % 2], BIG_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[], mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:double[], mask[i % 2], BIG_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:double[], mask[i % 2], LITTLE_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.wrap, mask[i % 2], BIG_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.wrap, mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.wrap, mask[i % 2], BIG_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.wrap, mask[i % 2], LITTLE_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.allocate, mask[i % 2], BIG_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.allocate, mask[i % 2], LITTLE_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.allocate, mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.allocate, mask[i % 2], LITTLE_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[].asSlice, mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[].asSlice, mask[i % 2], LITTLE_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], DMS, mask[true], BIG_ENDIAN): success [14ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], DMS, mask[true], LITTLE_ENDIAN): success [14ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:byte[], mask[true], BIG_ENDIAN): success [319ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:byte[], mask[true], LITTLE_ENDIAN): success [2246ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:short[], mask[true], BIG_ENDIAN): success [1186ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:short[], mask[true], LITTLE_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:int[], mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:int[], mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:float[], mask[true], BIG_ENDIAN): success [64ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:float[], mask[true], LITTLE_ENDIAN): success [59ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[], mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[], mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:double[], mask[true], BIG_ENDIAN): success [55ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:double[], mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.wrap, mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.wrap, mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.wrap, mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.wrap, mask[true], LITTLE_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.allocate, mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.allocate, mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.allocate, mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.allocate, mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[].asSlice, mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[].asSlice, mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], DMS, mask[true], BIG_ENDIAN): success [13ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], DMS, mask[true], LITTLE_ENDIAN): success [13ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:byte[], mask[true], BIG_ENDIAN): success [55ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:byte[], mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:short[], mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:short[], mask[true], LITTLE_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:int[], mask[true], BIG_ENDIAN): success [60ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:int[], mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:float[], mask[true], BIG_ENDIAN): success [55ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:float[], mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[], mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[], mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:double[], mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:double[], mask[true], LITTLE_ENDIAN): success [55ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.wrap, mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.wrap, mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.wrap, mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.wrap, mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.allocate, mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.allocate, mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.allocate, mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.allocate, mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[].asSlice, mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[].asSlice, mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], DMS, mask[false], BIG_ENDIAN): success [10ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], DMS, mask[false], LITTLE_ENDIAN): success [9ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:byte[], mask[false], BIG_ENDIAN): success [35ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:byte[], mask[false], LITTLE_ENDIAN): success [35ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:short[], mask[false], BIG_ENDIAN): success [36ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:short[], mask[false], LITTLE_ENDIAN): success [35ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:int[], mask[false], BIG_ENDIAN): success [35ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:int[], mask[false], LITTLE_ENDIAN): success [35ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:float[], mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:float[], mask[false], LITTLE_ENDIAN): success [59ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[], mask[false], BIG_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[], mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:double[], mask[false], BIG_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:double[], mask[false], LITTLE_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.wrap, mask[false], BIG_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.wrap, mask[false], LITTLE_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.wrap, mask[false], BIG_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.wrap, mask[false], LITTLE_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.allocate, mask[false], BIG_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.allocate, mask[false], LITTLE_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.allocate, mask[false], BIG_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.allocate, mask[false], LITTLE_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[].asSlice, mask[false], BIG_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[].asSlice, mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], DMS, mask[false], BIG_ENDIAN): success [8ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], DMS, mask[false], LITTLE_ENDIAN): success [8ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:byte[], mask[false], BIG_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:byte[], mask[false], LITTLE_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:short[], mask[false], BIG_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:short[], mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:int[], mask[false], BIG_ENDIAN): success [48ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:int[], mask[false], LITTLE_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:float[], mask[false], BIG_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:float[], mask[false], LITTLE_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[], mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[], mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:double[], mask[false], BIG_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:double[], mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.wrap, mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.wrap, mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.wrap, mask[false], BIG_ENDIAN): success [38ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.wrap, mask[false], LITTLE_ENDIAN): success [35ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.allocate, mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.allocate, mask[false], LITTLE_ENDIAN): success [35ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.allocate, mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.allocate, mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[].asSlice, mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[].asSlice, mask[false], LITTLE_ENDIAN): success [35ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], DMS, BIG_ENDIAN): success [51ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], DMS, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:byte[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:byte[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:short[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:short[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:int[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:int[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:float[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:float[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:long[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:long[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:double[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:double[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:ByteBuffer.wrap, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:ByteBuffer.wrap, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:IntBuffer.wrap, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:IntBuffer.wrap, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:ByteBuffer.allocate, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:ByteBuffer.allocate, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:IntBuffer.allocate, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:IntBuffer.allocate, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:long[].asSlice, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:long[].asSlice, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], DMS, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], DMS, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:byte[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:byte[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:short[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:short[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:int[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:int[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:float[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:float[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:long[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:long[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:double[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:double[], LITTLE_ENDIAN): success [7ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:ByteBuffer.wrap, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:ByteBuffer.wrap, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:IntBuffer.wrap, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:IntBuffer.wrap, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:ByteBuffer.allocate, BIG_ENDIAN): success [4ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:ByteBuffer.allocate, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:IntBuffer.allocate, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:IntBuffer.allocate, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:long[].asSlice, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:long[].asSlice, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreShuffle(): success [5675ms]
test Byte512VectorLoadStoreTests.scatter(byte[i * 5], index[random]): success [18ms]
test Byte512VectorLoadStoreTests.scatter(byte[i + 1], index[random]): success [103ms]
test Byte512VectorLoadStoreTests.scatterMask(byte[i * 5], index[random], mask[i % 2]): success [18ms]
test Byte512VectorLoadStoreTests.scatterMask(byte[i + 1], index[random], mask[i % 2]): success [73ms]
test Byte512VectorLoadStoreTests.scatterMask(byte[i * 5], index[random], mask[true]): success [65ms]
test Byte512VectorLoadStoreTests.scatterMask(byte[i + 1], index[random], mask[true]): success [3ms]
test Byte512VectorLoadStoreTests.scatterMask(byte[i * 5], index[random], mask[false]): success [305ms]
test Byte512VectorLoadStoreTests.scatterMask(byte[i + 1], index[random], mask[false]): success [3ms]
test Byte512VectorLoadStoreTests.storeArrayIOOBE(byte[i * 5], -1): success [3ms]
test Byte512VectorLoadStoreTests.storeArrayIOOBE(byte[i * 5], l): success [35ms]
test Byte512VectorLoadStoreTests.storeArrayIOOBE(byte[i * 5], l - 1): success [2ms]
test Byte512VectorLoadStoreTests.storeArrayIOOBE(byte[i * 5], l + 1): success [3ms]
test Byte512VectorLoadStoreTests.storeArrayIOOBE(byte[i * 5], l - speciesl + 1): success [86ms]
test Byte512VectorLoadStoreTests.storeArrayIOOBE(byte[i * 5], l + speciesl - 1): success [2ms]
test Byte512VectorLoadStoreTests.storeArrayIOOBE(byte[i * 5], l + speciesl): success [2ms]
test Byte512VectorLoadStoreTests.storeArrayIOOBE(byte[i * 5], l + speciesl + 1): success [2ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], -1, mask[i % 2]): success [43ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l, mask[i % 2]): success [207ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l - 1, mask[i % 2]): success [8ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + 1, mask[i % 2]): success [6ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l - speciesl + 1, mask[i % 2]): success [109ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + speciesl - 1, mask[i % 2]): success [7ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + speciesl, mask[i % 2]): success [7ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + speciesl + 1, mask[i % 2]): success [7ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], -1, mask[true]): success [5ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l, mask[true]): success [6ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l - 1, mask[true]): success [6ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + 1, mask[true]): success [5ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l - speciesl + 1, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + speciesl - 1, mask[true]): success [3ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + speciesl, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + speciesl + 1, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], -1, mask[false]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l, mask[false]): success [3ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l - 1, mask[false]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + 1, mask[false]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l - speciesl + 1, mask[false]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + speciesl - 1, mask[false]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + speciesl, mask[false]): success [3ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + speciesl + 1, mask[false]): success [4ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentIOOBE(byte[i * 5], -1): success [13ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentIOOBE(byte[i * 5], l): success [104ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentIOOBE(byte[i * 5], l - 1): success [6ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentIOOBE(byte[i * 5], l + 1): success [8ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentIOOBE(byte[i * 5], l - speciesl*ebsize + 1): success [115ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentIOOBE(byte[i * 5], l + speciesl*ebsize - 1): success [6ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentIOOBE(byte[i * 5], l + speciesl*ebsize): success [5ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentIOOBE(byte[i * 5], l + speciesl*ebsize + 1): success [6ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], -1, mask[i % 2]): success [13ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l, mask[i % 2]): success [571ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l - 1, mask[i % 2]): success [8ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + 1, mask[i % 2]): success [9ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l - speciesl*ebsize + 1, mask[i % 2]): success [155ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize - 1, mask[i % 2]): success [7ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize, mask[i % 2]): success [6ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize + 1, mask[i % 2]): success [7ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], -1, mask[true]): success [7ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l, mask[true]): success [11ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l - 1, mask[true]): success [12ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + 1, mask[true]): success [11ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l - speciesl*ebsize + 1, mask[true]): success [12ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize - 1, mask[true]): success [12ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize, mask[true]): success [12ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize + 1, mask[true]): success [11ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], -1, mask[false]): success [6ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l, mask[false]): success [7ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l - 1, mask[false]): success [5ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + 1, mask[false]): success [6ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l - speciesl*ebsize + 1, mask[false]): success [6ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize - 1, mask[false]): success [8ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize, mask[false]): success [8ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize + 1, mask[false]): success [8ms]

===============================================
jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Total tests run: 428, Passes: 427, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/7 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Byte512VectorLoadStoreTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Byte512VectorLoadStoreTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorLoadStoreTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Byte512VectorLoadStoreTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Byte512VectorLoadStoreTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Byte512VectorLoadStoreTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=3 \
        -XX:+UseKNLSetting \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Byte512VectorLoadStoreTests.d/testng.0.jta jdk/incubator/vector/Byte512VectorLoadStoreTests.java false Byte512VectorLoadStoreTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorTests.java
Passed: jdk/incubator/vector/Byte128VectorTests.java
Passed: jdk/incubator/vector/Byte256VectorTests.java
Passed: jdk/incubator/vector/ByteMaxVectorTests.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorTests.java
Passed: jdk/incubator/vector/Float128VectorTests.java
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorTests.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float512VectorTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/FloatMaxVectorTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int128VectorTests.java
Passed: jdk/incubator/vector/Int256VectorTests.java
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int512VectorTests.java
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorTests.java
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/MethodOverideTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long256VectorTests.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
TEST: jdk/incubator/vector/Long512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.911 seconds
messages:
command: build Long512VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 04:28:27 IST 2025
Test directory:
  compile: Long512VectorTests
finished: Thu Apr 17 04:28:28 IST 2025
elapsed time (seconds): 0.911

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.91 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long512VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 04:28:27 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 14
Process id: 2257823
finished: Thu Apr 17 04:28:28 IST 2025
elapsed time (seconds): 0.91
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Long512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/9 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Long512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Long512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long512VectorTests 
TIME:   43.086 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long512VectorTests 
started: Thu Apr 17 04:28:28 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2260830
finished: Thu Apr 17 04:29:11 IST 2025
elapsed time (seconds): 43.086
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -634950888485809111
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-634950888485809111" to command line.
test Long512VectorTests.ABSLong512VectorTests(long[-i * 5]): success [340ms]
test Long512VectorTests.ABSLong512VectorTests(long[i * 5]): success [280ms]
test Long512VectorTests.ABSLong512VectorTests(long[i + 1]): success [13ms]
test Long512VectorTests.ABSLong512VectorTests(long[cornerCaseValue(i)]): success [5ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[-i * 5], mask[i % 2]): success [144ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i * 5], mask[i % 2]): success [97ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i + 1], mask[i % 2]): success [2ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[-i * 5], mask[true]): success [74ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.ADDLong512VectorTests(long[-i * 5], long[i * 5]): success [97ms]
test Long512VectorTests.ADDLong512VectorTests(long[-i * 5], long[i + 1]): success [200ms]
test Long512VectorTests.ADDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [6ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [20ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [110ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [45ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [9ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [67ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [4ms]
test Long512VectorTests.ADDReduceLong512VectorTests(long[-i * 5]): success [95ms]
test Long512VectorTests.ADDReduceLong512VectorTests(long[i * 5]): success [1ms]
test Long512VectorTests.ADDReduceLong512VectorTests(long[i + 1]): success [83ms]
test Long512VectorTests.ADDReduceLong512VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[-i * 5], mask[i % 2]): success [66ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i * 5], mask[i % 2]): success [2ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i + 1], mask[i % 2]): success [96ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTests(long[-i * 5]): success [5ms]
test Long512VectorTests.ADDReduceLongLong512VectorTests(long[i * 5]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTests(long[i + 1]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [16ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.ANDLong512VectorTests(long[-i * 5], long[i * 5]): success [189ms]
test Long512VectorTests.ANDLong512VectorTests(long[-i * 5], long[i + 1]): success [35ms]
test Long512VectorTests.ANDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [15ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [3ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [4ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [67ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.ANDReduceLong512VectorTests(long[-i * 5]): success [130ms]
test Long512VectorTests.ANDReduceLong512VectorTests(long[i * 5]): success [2ms]
test Long512VectorTests.ANDReduceLong512VectorTests(long[i + 1]): success [84ms]
test Long512VectorTests.ANDReduceLong512VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[-i * 5], mask[i % 2]): success [19ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i * 5], mask[i % 2]): success [2ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i + 1], mask[i % 2]): success [95ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.AND_NOTLong512VectorTests(long[-i * 5], long[i * 5]): success [161ms]
test Long512VectorTests.AND_NOTLong512VectorTests(long[-i * 5], long[i + 1]): success [6ms]
test Long512VectorTests.AND_NOTLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [58ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [29ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [76ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.ASHRLong512VectorTests(long[-i * 5], long[i * 5]): success [104ms]
test Long512VectorTests.ASHRLong512VectorTests(long[-i * 5], long[i + 1]): success [80ms]
test Long512VectorTests.ASHRLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [51ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [34ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [77ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [97ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [159ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftConst(long[-i * 5]): success [8ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftConst(long[i * 5]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftConst(long[i + 1]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [16ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [22ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [61ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [11ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [50ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [77ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [47ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [1ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [95ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [593ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [4ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [5ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [4ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [2ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i 

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

0ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.divLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long512VectorTests.divLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.divLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [17ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [86ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [114ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[i]): success [111ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[i + 1]): success [1ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.expandLong512VectorTests(long[-i * 5], mask[i % 2]): success [98ms]
test Long512VectorTests.expandLong512VectorTests(long[i * 5], mask[i % 2]): success [20ms]
test Long512VectorTests.expandLong512VectorTests(long[i + 1], mask[i % 2]): success [1ms]
test Long512VectorTests.expandLong512VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long512VectorTests.expandLong512VectorTests(long[-i * 5], mask[true]): success [72ms]
test Long512VectorTests.expandLong512VectorTests(long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.expandLong512VectorTests(long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.expandLong512VectorTests(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.expandLong512VectorTests(long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.expandLong512VectorTests(long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.expandLong512VectorTests(long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.expandLong512VectorTests(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.getLong512VectorTests(long[-i * 5]): success [2ms]
test Long512VectorTests.getLong512VectorTests(long[i * 5]): success [2ms]
test Long512VectorTests.getLong512VectorTests(long[i + 1]): success [2ms]
test Long512VectorTests.getLong512VectorTests(long[cornerCaseValue(i)]): success [2ms]
test Long512VectorTests.hashCodeLong512VectorTestsSmokeTest(long[-i * 5]): success [32ms]
test Long512VectorTests.hashCodeLong512VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long512VectorTests.hashCodeLong512VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long512VectorTests.hashCodeLong512VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(0): success [63ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(-1): success [1ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(1): success [15ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(2): success [1ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(-2): success [1ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(0): success [1ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(-1): success [1ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(1): success [1ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(2): success [2ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(-2): success [1ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(0): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(1): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(32): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(37): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(1024): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(1025): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(1029): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(0): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(1): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(32): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(37): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(1024): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(1025): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(1029): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[i]): success [111ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[i - 2]): success [1ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[zigZag(i)]): success [1ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.maskAndLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Long512VectorTests.maskAndLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskAndNotLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Long512VectorTests.maskAndNotLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskCompressLong512VectorTestsSmokeTest(mask[i % 2]): success [288ms]
test Long512VectorTests.maskCompressLong512VectorTestsSmokeTest(mask[true]): success [0ms]
test Long512VectorTests.maskCompressLong512VectorTestsSmokeTest(mask[false]): success [4ms]
test Long512VectorTests.maskEqLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long512VectorTests.maskEqLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskEqualsLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long512VectorTests.maskEqualsLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskFirstTrueLong512VectorTestsSmokeTest(mask[i % 2]): success [75ms]
test Long512VectorTests.maskFirstTrueLong512VectorTestsSmokeTest(mask[true]): success [34ms]
test Long512VectorTests.maskFirstTrueLong512VectorTestsSmokeTest(mask[false]): success [0ms]
test Long512VectorTests.maskFromToLongLong512VectorTestsSmokeTest(-1): success [54ms]
test Long512VectorTests.maskFromToLongLong512VectorTestsSmokeTest(0): success [0ms]
test Long512VectorTests.maskFromToLongLong512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long512VectorTests.maskFromToLongLong512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long512VectorTests.maskHashCodeLong512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long512VectorTests.maskHashCodeLong512VectorTestsSmokeTest(mask[true]): success [0ms]
test Long512VectorTests.maskHashCodeLong512VectorTestsSmokeTest(mask[false]): success [0ms]
test Long512VectorTests.maskLastTrueLong512VectorTestsSmokeTest(mask[i % 2]): success [88ms]
test Long512VectorTests.maskLastTrueLong512VectorTestsSmokeTest(mask[true]): success [34ms]
test Long512VectorTests.maskLastTrueLong512VectorTestsSmokeTest(mask[false]): success [0ms]
test Long512VectorTests.maskOrLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [16ms]
test Long512VectorTests.maskOrLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskTrueCountLong512VectorTestsSmokeTest(mask[i % 2]): success [48ms]
test Long512VectorTests.maskTrueCountLong512VectorTestsSmokeTest(mask[true]): success [34ms]
test Long512VectorTests.maskTrueCountLong512VectorTestsSmokeTest(mask[false]): success [0ms]
test Long512VectorTests.maskXorLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test Long512VectorTests.maskXorLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maxLong512VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.maxLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.maxLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.maxLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [4ms]
test Long512VectorTests.maxLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.maxLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.minLong512VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.minLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.minLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.minLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [4ms]
test Long512VectorTests.minLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.minLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.mulLong512VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.mulLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.mulLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [4ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): failure [76ms]
java.lang.AssertionError: at index #24, input1 = -120, input2 = 120, mask = false expected [-120] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:797)
	at Long512VectorTests.assertBroadcastArraysEquals(Long512VectorTests.java:427)
	at Long512VectorTests.assertBroadcastArraysEquals(Long512VectorTests.java:417)
	at Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(Long512VectorTests.java:2202)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [7ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.negLong512VectorTests(long[-i * 5]): success [7ms]
test Long512VectorTests.negLong512VectorTests(long[i * 5]): success [7ms]
test Long512VectorTests.negLong512VectorTests(long[i + 1]): success [1ms]
test Long512VectorTests.negLong512VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long512VectorTests.notLong512VectorTests(long[-i * 5]): success [8ms]
test Long512VectorTests.notLong512VectorTests(long[i * 5]): success [9ms]
test Long512VectorTests.notLong512VectorTests(long[i + 1]): success [1ms]
test Long512VectorTests.notLong512VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long512VectorTests.orLong512VectorTests(long[-i * 5], long[i * 5]): success [7ms]
test Long512VectorTests.orLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.orLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.orLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [36ms]
test Long512VectorTests.orLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.orLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.shuffleEqualsLong512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [408ms]
test Long512VectorTests.shuffleEqualsLong512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [29ms]
test Long512VectorTests.shuffleMiscellaneousLong512VectorTestsSmokeTest(shuffle[random]): success [7ms]
test Long512VectorTests.shuffleTest(): success [339ms]
test Long512VectorTests.shuffleToStringLong512VectorTestsSmokeTest(shuffle[random]): success [39ms]
test Long512VectorTests.sliceBinaryLong512VectorTestsBinary(long[-i * 5], long[i * 5]): success [194ms]
test Long512VectorTests.sliceBinaryLong512VectorTestsBinary(long[-i * 5], long[i + 1]): success [289ms]
test Long512VectorTests.sliceBinaryLong512VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [16ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [43ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [155ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.sliceUnaryLong512VectorTests(long[-i * 5]): success [71ms]
test Long512VectorTests.sliceUnaryLong512VectorTests(long[i * 5]): success [118ms]
test Long512VectorTests.sliceUnaryLong512VectorTests(long[i + 1]): success [1ms]
test Long512VectorTests.sliceUnaryLong512VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long512VectorTests.smokeTest1(): success [0ms]
test Long512VectorTests.smokeTest2(): success [40ms]
test Long512VectorTests.subLong512VectorTests(long[-i * 5], long[i * 5]): success [4ms]
test Long512VectorTests.subLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.subLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [4ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.subLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.toDoubleArrayLong512VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long512VectorTests.toDoubleArrayLong512VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long512VectorTests.toDoubleArrayLong512VectorTestsSmokeTest(long[i + 1]): success [5ms]
test Long512VectorTests.toDoubleArrayLong512VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.toIntArrayLong512VectorTestsSmokeTest(long[-i * 5]): success [5ms]
test Long512VectorTests.toIntArrayLong512VectorTestsSmokeTest(long[i * 5]): success [7ms]
test Long512VectorTests.toIntArrayLong512VectorTestsSmokeTest(long[i + 1]): success [4ms]
test Long512VectorTests.toIntArrayLong512VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [4ms]
test Long512VectorTests.toLongArrayLong512VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long512VectorTests.toLongArrayLong512VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long512VectorTests.toLongArrayLong512VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long512VectorTests.toLongArrayLong512VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.toStringLong512VectorTestsSmokeTest(long[-i * 5]): success [1ms]
test Long512VectorTests.toStringLong512VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long512VectorTests.toStringLong512VectorTestsSmokeTest(long[i + 1]): success [50ms]
test Long512VectorTests.toStringLong512VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.unsliceBinaryLong512VectorTestsBinary(long[-i * 5], long[i * 5]): success [58ms]
test Long512VectorTests.unsliceBinaryLong512VectorTestsBinary(long[-i * 5], long[i + 1]): success [170ms]
test Long512VectorTests.unsliceBinaryLong512VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [62ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [297ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [39ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [39ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [269ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [46ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [38ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [38ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [38ms]
test Long512VectorTests.unsliceUnaryLong512VectorTests(long[-i * 5]): success [49ms]
test Long512VectorTests.unsliceUnaryLong512VectorTests(long[i * 5]): success [158ms]
test Long512VectorTests.unsliceUnaryLong512VectorTests(long[i + 1]): success [1ms]
test Long512VectorTests.unsliceUnaryLong512VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long512VectorTests.viewAsFloatingLanesTest(): success [201ms]
test Long512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long512VectorTests.withLong512VectorTests(long[-i * 5], long[i * 5]): success [10ms]
test Long512VectorTests.withLong512VectorTests(long[-i * 5], long[i + 1]): success [19ms]
test Long512VectorTests.withLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]

===============================================
jdk/incubator/vector/Long512VectorTests.java
Total tests run: 3321, Passes: 3320, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/9 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Long512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=3 \
        -XX:+UseKNLSetting \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Long512VectorTests.d/testng.0.jta jdk/incubator/vector/Long512VectorTests.java false Long512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/LongMaxVectorTests.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorTests.java
Passed: jdk/incubator/vector/UnalignedHeapTest.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short128VectorTests.java
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
TEST: jdk/incubator/vector/Short256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.543 seconds
messages:
command: build Short256VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 04:29:09 IST 2025
Test directory:
  compile: Short256VectorTests
finished: Thu Apr 17 04:29:10 IST 2025
elapsed time (seconds): 1.543

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.542 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short256VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 04:29:09 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 4
Process id: 2256963
finished: Thu Apr 17 04:29:10 IST 2025
elapsed time (seconds): 1.542
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Short256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/8 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Short256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Short256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short256VectorTests 
TIME:   50.752 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short256VectorTests 
started: Thu Apr 17 04:29:10 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2261485
finished: Thu Apr 17 04:30:01 IST 2025
elapsed time (seconds): 50.752
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -8774127326813700299
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-8774127326813700299" to command line.
test Short256VectorTests.ABSMaskedShort256VectorTests(short[-i * 5], mask[i % 2]): success [631ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i * 5], mask[i % 2]): success [7ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i + 1], mask[i % 2]): success [80ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[-i * 5], mask[true]): success [27ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[-i * 5], mask[false]): success [0ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.ABSShort256VectorTests(short[-i * 5]): success [105ms]
test Short256VectorTests.ABSShort256VectorTests(short[i * 5]): success [10ms]
test Short256VectorTests.ABSShort256VectorTests(short[i + 1]): success [47ms]
test Short256VectorTests.ABSShort256VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.ADDReduceLongShort256VectorTests(short[-i * 5]): success [64ms]
test Short256VectorTests.ADDReduceLongShort256VectorTests(short[i * 5]): success [21ms]
test Short256VectorTests.ADDReduceLongShort256VectorTests(short[i + 1]): success [2ms]
test Short256VectorTests.ADDReduceLongShort256VectorTests(short[cornerCaseValue(i)]): success [4ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[-i * 5], mask[i % 2]): success [12ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[-i * 5], mask[true]): success [14ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[-i * 5], mask[false]): success [13ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short256VectorTests.ADDReduceShort256VectorTests(short[-i * 5]): success [129ms]
test Short256VectorTests.ADDReduceShort256VectorTests(short[i * 5]): success [84ms]
test Short256VectorTests.ADDReduceShort256VectorTests(short[i + 1]): success [1ms]
test Short256VectorTests.ADDReduceShort256VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[-i * 5], mask[i % 2]): success [72ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i * 5], mask[i % 2]): success [116ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[-i * 5], mask[true]): success [13ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[-i * 5], mask[false]): success [0ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.ADDShort256VectorTests(short[-i * 5], short[i * 5]): success [214ms]
test Short256VectorTests.ADDShort256VectorTests(short[-i * 5], short[i + 1]): success [3ms]
test Short256VectorTests.ADDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [67ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [16ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [23ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [7ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [42ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [105ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [68ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.ANDReduceShort256VectorTests(short[-i * 5]): success [95ms]
test Short256VectorTests.ANDReduceShort256VectorTests(short[i * 5]): success [88ms]
test Short256VectorTests.ANDReduceShort256VectorTests(short[i + 1]): success [0ms]
test Short256VectorTests.ANDReduceShort256VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[-i * 5], mask[i % 2]): success [21ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i * 5], mask[i % 2]): success [116ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[-i * 5], mask[true]): success [12ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[-i * 5], mask[false]): success [0ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.ANDShort256VectorTests(short[-i * 5], short[i * 5]): success [218ms]
test Short256VectorTests.ANDShort256VectorTests(short[-i * 5], short[i + 1]): success [3ms]
test Short256VectorTests.ANDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [63ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [16ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [4ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [68ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [37ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.AND_NOTShort256VectorTests(short[-i * 5], short[i * 5]): success [180ms]
test Short256VectorTests.AND_NOTShort256VectorTests(short[-i * 5], short[i + 1]): success [5ms]
test Short256VectorTests.AND_NOTShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [92ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [181ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [7ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [78ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.ASHRShort256VectorTests(short[-i * 5], short[i * 5]): success [143ms]
test Short256VectorTests.ASHRShort256VectorTests(short[-i * 5], short[i + 1]): success [7ms]
test Short256VectorTests.ASHRShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [94ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [140ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [83ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [241ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [64ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftConst(short[-i * 5]): success [45ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftConst(short[i * 5]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftConst(short[i + 1]): success [54ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [118ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [76ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [10ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [3ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [54ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [0ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [120ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [3ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [100ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [413ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [4ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): failure [70ms]
java.lang.AssertionError: at index #1057, input1 = -5285, input2 = 1057, input3 = -32768, mask = false expected [-5285] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:885)
	at Short256VectorTests.assertAltBroadcastArraysEquals(Short256VectorTests.java:671)
	at Short256VectorTests.assertAltBroadcastArraysEquals(Short256VectorTests.java:659)
	at Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(Short256VectorTests.java:5580)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [11ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [158ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [4ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [82ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [17ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [58ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

10ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [69ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[-i * 5], mask[i % 2]): success [133ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i + 1], mask[i % 2]): success [71ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[-i * 5], mask[true]): success [0ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[-i * 5], mask[false]): success [0ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.ZOMOShort256VectorTests(short[-i * 5]): success [149ms]
test Short256VectorTests.ZOMOShort256VectorTests(short[i * 5]): success [1ms]
test Short256VectorTests.ZOMOShort256VectorTests(short[i + 1]): success [51ms]
test Short256VectorTests.ZOMOShort256VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.ZeroShort256VectorTests(short[-i * 5]): success [91ms]
test Short256VectorTests.ZeroShort256VectorTests(short[i * 5]): success [78ms]
test Short256VectorTests.ZeroShort256VectorTests(short[i + 1]): success [36ms]
test Short256VectorTests.ZeroShort256VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.absShort256VectorTests(short[-i * 5]): success [23ms]
test Short256VectorTests.absShort256VectorTests(short[i * 5]): success [1ms]
test Short256VectorTests.absShort256VectorTests(short[i + 1]): success [38ms]
test Short256VectorTests.absShort256VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.addShort256VectorTests(short[-i * 5], short[i * 5]): success [39ms]
test Short256VectorTests.addShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.addShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.addShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [76ms]
test Short256VectorTests.addShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [42ms]
test Short256VectorTests.addShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [8ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.allTrueShort256VectorTests(boolean[i % 2]): success [20ms]
test Short256VectorTests.allTrueShort256VectorTests(boolean[i % 5]): success [23ms]
test Short256VectorTests.andShort256VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short256VectorTests.andShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.andShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.andShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.andShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.andShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.anyTrueShort256VectorTests(boolean[i % 2]): success [6ms]
test Short256VectorTests.anyTrueShort256VectorTests(boolean[i % 5]): success [3ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [6ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [46ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [58ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [8ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [73ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [73ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [78ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseDivByZeroSmokeTest(): success [19ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [33ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [2ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [44ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [60ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.compressShort256VectorTests(short[-i * 5], mask[i % 2]): success [162ms]
test Short256VectorTests.compressShort256VectorTests(short[i * 5], mask[i % 2]): success [3ms]
test Short256VectorTests.compressShort256VectorTests(short[i + 1], mask[i % 2]): success [78ms]
test Short256VectorTests.compressShort256VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.compressShort256VectorTests(short[-i * 5], mask[true]): success [73ms]
test Short256VectorTests.compressShort256VectorTests(short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.compressShort256VectorTests(short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.compressShort256VectorTests(short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.compressShort256VectorTests(short[-i * 5], mask[false]): success [0ms]
test Short256VectorTests.compressShort256VectorTests(short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.compressShort256VectorTests(short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.compressShort256VectorTests(short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.divShort256VectorTests(short[-i * 5], short[i * 5]): success [74ms]
test Short256VectorTests.divShort256VectorTests(short[-i * 5], short[i + 1]): success [3ms]
test Short256VectorTests.divShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [77ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [8ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [95ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [16ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.divShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [9ms]
test Short256VectorTests.divShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.divShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [105ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [116ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[i]): success [101ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[i - length / 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[i + 1]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[i - 2]): success [39ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[zigZag(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[i]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[i - length / 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[i + 1]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[i - 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[zigZag(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[i]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[i - length / 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[i + 1]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[i - 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[zigZag(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[i]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[i - length / 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[i + 1]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[i - 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[zigZag(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[i]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[i - length / 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[i + 1]): success [2ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[i - 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[zigZag(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[i]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [64ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [8ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [0ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.expandShort256VectorTests(short[-i * 5], mask[i % 2]): success [159ms]
test Short256VectorTests.expandShort256VectorTests(short[i * 5], mask[i % 2]): success [3ms]
test Short256VectorTests.expandShort256VectorTests(short[i + 1], mask[i % 2]): success [81ms]
test Short256VectorTests.expandShort256VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.expandShort256VectorTests(short[-i * 5], mask[true]): success [51ms]
test Short256VectorTests.expandShort256VectorTests(short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.expandShort256VectorTests(short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.expandShort256VectorTests(short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.expandShort256VectorTests(short[-i * 5], mask[false]): success [0ms]
test Short256VectorTests.expandShort256VectorTests(short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.expandShort256VectorTests(short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.expandShort256VectorTests(short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.getShort256VectorTests(short[-i * 5]): success [7ms]
test Short256VectorTests.getShort256VectorTests(short[i * 5]): success [6ms]
test Short256VectorTests.getShort256VectorTests(short[i + 1]): success [105ms]
test Short256VectorTests.getShort256VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.hashCodeShort256VectorTestsSmokeTest(short[-i * 5]): success [35ms]
test Short256VectorTests.hashCodeShort256VectorTestsSmokeTest(short[i * 5]): success [1ms]
test Short256VectorTests.hashCodeShort256VectorTestsSmokeTest(short[i + 1]): success [1ms]
test Short256VectorTests.hashCodeShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(0): success [68ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(-1): success [3ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(1): success [19ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(2): success [3ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(-2): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(0): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(-1): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(1): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(2): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(-2): success [3ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(0): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(1): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(32): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(37): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(1024): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(1025): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(1029): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(0): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(1): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(32): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(37): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(1024): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(1025): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(1029): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[i]): success [119ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[i - length / 2]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[i + 1]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[i - 2]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[zigZag(i)]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[i]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[i - length / 2]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[i + 1]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[i - 2]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[zigZag(i)]): success [39ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[i]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[i - length / 2]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[i + 1]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[i - 2]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[zigZag(i)]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[i]): success [4ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[i - length / 2]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[i + 1]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[zigZag(i)]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[i]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[i + 1]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[i - 2]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[zigZag(i)]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[i]): success [31ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[i]): success [1ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [1ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [1ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [1ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [1ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [1ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [1ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [1ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [1ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [1ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [65ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [1ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [0ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [1ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.maskAndNotShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Short256VectorTests.maskAndNotShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskAndShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Short256VectorTests.maskAndShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskCompressShort256VectorTestsSmokeTest(mask[i % 2]): success [296ms]
test Short256VectorTests.maskCompressShort256VectorTestsSmokeTest(mask[true]): success [1ms]
test Short256VectorTests.maskCompressShort256VectorTestsSmokeTest(mask[false]): success [71ms]
test Short256VectorTests.maskEqShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short256VectorTests.maskEqShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskEqualsShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short256VectorTests.maskEqualsShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskFirstTrueShort256VectorTestsSmokeTest(mask[i % 2]): success [79ms]
test Short256VectorTests.maskFirstTrueShort256VectorTestsSmokeTest(mask[true]): success [41ms]
test Short256VectorTests.maskFirstTrueShort256VectorTestsSmokeTest(mask[false]): success [0ms]
test Short256VectorTests.maskFromToLongShort256VectorTestsSmokeTest(-1): success [66ms]
test Short256VectorTests.maskFromToLongShort256VectorTestsSmokeTest(0): success [0ms]
test Short256VectorTests.maskFromToLongShort256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short256VectorTests.maskFromToLongShort256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short256VectorTests.maskHashCodeShort256VectorTestsSmokeTest(mask[i % 2]): success [5ms]
test Short256VectorTests.maskHashCodeShort256VectorTestsSmokeTest(mask[true]): success [0ms]
test Short256VectorTests.maskHashCodeShort256VectorTestsSmokeTest(mask[false]): success [0ms]
test Short256VectorTests.maskLastTrueShort256VectorTestsSmokeTest(mask[i % 2]): success [115ms]
test Short256VectorTests.maskLastTrueShort256VectorTestsSmokeTest(mask[true]): success [34ms]
test Short256VectorTests.maskLastTrueShort256VectorTestsSmokeTest(mask[false]): success [0ms]
test Short256VectorTests.maskOrShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Short256VectorTests.maskOrShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskTrueCountShort256VectorTestsSmokeTest(mask[i % 2]): success [71ms]
test Short256VectorTests.maskTrueCountShort256VectorTestsSmokeTest(mask[true]): success [33ms]
test Short256VectorTests.maskTrueCountShort256VectorTestsSmokeTest(mask[false]): success [0ms]
test Short256VectorTests.maskXorShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Short256VectorTests.maskXorShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maxShort256VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.maxShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.maxShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.maxShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short256VectorTests.maxShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.maxShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.minShort256VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short256VectorTests.minShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.minShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.minShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short256VectorTests.minShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.minShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.mulShort256VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short256VectorTests.mulShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.mulShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.negShort256VectorTests(short[-i * 5]): success [13ms]
test Short256VectorTests.negShort256VectorTests(short[i * 5]): success [1ms]
test Short256VectorTests.negShort256VectorTests(short[i + 1]): success [38ms]
test Short256VectorTests.negShort256VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.notShort256VectorTests(short[-i * 5]): success [17ms]
test Short256VectorTests.notShort256VectorTests(short[i * 5]): success [1ms]
test Short256VectorTests.notShort256VectorTests(short[i + 1]): success [43ms]
test Short256VectorTests.notShort256VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.orShort256VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short256VectorTests.orShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.orShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.orShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short256VectorTests.orShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.orShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.shuffleEqualsShort256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [479ms]
test Short256VectorTests.shuffleEqualsShort256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [106ms]
test Short256VectorTests.shuffleMiscellaneousShort256VectorTestsSmokeTest(shuffle[random]): success [197ms]
test Short256VectorTests.shuffleTest(): success [393ms]
test Short256VectorTests.shuffleToStringShort256VectorTestsSmokeTest(shuffle[random]): success [49ms]
test Short256VectorTests.sliceBinaryShort256VectorTestsBinary(short[-i * 5], short[i * 5]): success [545ms]
test Short256VectorTests.sliceBinaryShort256VectorTestsBinary(short[-i * 5], short[i + 1]): success [3ms]
test Short256VectorTests.sliceBinaryShort256VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [131ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [64ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [152ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [41ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.sliceUnaryShort256VectorTests(short[-i * 5]): success [244ms]
test Short256VectorTests.sliceUnaryShort256VectorTests(short[i * 5]): success [2ms]
test Short256VectorTests.sliceUnaryShort256VectorTests(short[i + 1]): success [106ms]
test Short256VectorTests.sliceUnaryShort256VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.smokeTest1(): success [0ms]
test Short256VectorTests.smokeTest2(): success [60ms]
test Short256VectorTests.subShort256VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.subShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.subShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.subShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short256VectorTests.subShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.subShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.toDoubleArrayShort256VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short256VectorTests.toDoubleArrayShort256VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short256VectorTests.toDoubleArrayShort256VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short256VectorTests.toDoubleArrayShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.toIntArrayShort256VectorTestsSmokeTest(short[-i * 5]): success [1ms]
test Short256VectorTests.toIntArrayShort256VectorTestsSmokeTest(short[i * 5]): success [2ms]
test Short256VectorTests.toIntArrayShort256VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short256VectorTests.toIntArrayShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [8ms]
test Short256VectorTests.toLongArrayShort256VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short256VectorTests.toLongArrayShort256VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short256VectorTests.toLongArrayShort256VectorTestsSmokeTest(short[i + 1]): success [2ms]
test Short256VectorTests.toLongArrayShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [16ms]
test Short256VectorTests.toStringShort256VectorTestsSmokeTest(short[-i * 5]): success [1ms]
test Short256VectorTests.toStringShort256VectorTestsSmokeTest(short[i * 5]): success [1ms]
test Short256VectorTests.toStringShort256VectorTestsSmokeTest(short[i + 1]): success [1ms]
test Short256VectorTests.toStringShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [20ms]
test Short256VectorTests.unsliceBinaryShort256VectorTestsBinary(short[-i * 5], short[i * 5]): success [225ms]
test Short256VectorTests.unsliceBinaryShort256VectorTestsBinary(short[-i * 5], short[i + 1]): success [2ms]
test Short256VectorTests.unsliceBinaryShort256VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [468ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [466ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [137ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [392ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [135ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [290ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [263ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [244ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [135ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [135ms]
test Short256VectorTests.unsliceUnaryShort256VectorTests(short[-i * 5]): success [236ms]
test Short256VectorTests.unsliceUnaryShort256VectorTests(short[i * 5]): success [2ms]
test Short256VectorTests.unsliceUnaryShort256VectorTests(short[i + 1]): success [106ms]
test Short256VectorTests.unsliceUnaryShort256VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.viewAsFloatingLanesTest(): success [23ms]
test Short256VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Short256VectorTests.withShort256VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short256VectorTests.withShort256VectorTests(short[-i * 5], short[i + 1]): success [7ms]
test Short256VectorTests.withShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [159ms]

===============================================
jdk/incubator/vector/Short256VectorTests.java
Total tests run: 3598, Passes: 3597, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/8 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Short256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=3 \
        -XX:+UseKNLSetting \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Short256VectorTests.d/testng.0.jta jdk/incubator/vector/Short256VectorTests.java false Short256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/VectorMathTest.java
Passed: jdk/incubator/vector/ShortMaxVectorTests.java
TEST: jdk/incubator/vector/Short64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.815 seconds
messages:
command: build Short64VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 04:29:24 IST 2025
Test directory:
  compile: Short64VectorTests
finished: Thu Apr 17 04:29:25 IST 2025
elapsed time (seconds): 0.815

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.814 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 04:29:24 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 2
Process id: 2256905
finished: Thu Apr 17 04:29:25 IST 2025
elapsed time (seconds): 0.814
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Short64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/1 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Short64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Short64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short64VectorTests 
TIME:   64.102 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short64VectorTests 
started: Thu Apr 17 04:29:25 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2261728
finished: Thu Apr 17 04:30:29 IST 2025
elapsed time (seconds): 64.102
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 9184391119979509857
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=9184391119979509857" to command line.
test Short64VectorTests.ABSMaskedShort64VectorTests(short[-i * 5], mask[i % 2]): success [652ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i * 5], mask[i % 2]): success [30ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i + 1], mask[i % 2]): success [42ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[-i * 5], mask[true]): success [27ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.ABSShort64VectorTests(short[-i * 5]): success [130ms]
test Short64VectorTests.ABSShort64VectorTests(short[i * 5]): success [27ms]
test Short64VectorTests.ABSShort64VectorTests(short[i + 1]): success [1ms]
test Short64VectorTests.ABSShort64VectorTests(short[cornerCaseValue(i)]): success [53ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[-i * 5]): success [85ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[i * 5]): success [3ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[i + 1]): success [3ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[cornerCaseValue(i)]): success [12ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[-i * 5], mask[i % 2]): success [17ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i * 5], mask[i % 2]): success [2ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i + 1], mask[i % 2]): success [2ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [15ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[-i * 5], mask[true]): success [4ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i * 5], mask[true]): success [13ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i + 1], mask[true]): success [1ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[-i * 5], mask[false]): success [2ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i * 5], mask[false]): success [11ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i + 1], mask[false]): success [78ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[-i * 5]): success [183ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[i * 5]): success [0ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[i + 1]): success [52ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[cornerCaseValue(i)]): success [78ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[-i * 5], mask[i % 2]): success [122ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i + 1], mask[i % 2]): success [75ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [100ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i + 1], mask[true]): success [1ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.ADDShort64VectorTests(short[-i * 5], short[i * 5]): success [273ms]
test Short64VectorTests.ADDShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ADDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [55ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [17ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [26ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [6ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [6ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [15ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [37ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [9ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [192ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [72ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [72ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[-i * 5]): success [176ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[i * 5]): success [0ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[i + 1]): success [53ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[cornerCaseValue(i)]): success [84ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[-i * 5], mask[i % 2]): success [108ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i + 1], mask[i % 2]): success [74ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [116ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.ANDShort64VectorTests(short[-i * 5], short[i * 5]): success [169ms]
test Short64VectorTests.ANDShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ANDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [55ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [21ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [2ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [39ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [21ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [74ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [34ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [73ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [37ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short64VectorTests.AND_NOTShort64VectorTests(short[-i * 5], short[i * 5]): success [232ms]
test Short64VectorTests.AND_NOTShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.AND_NOTShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [65ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [153ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [85ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [83ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTests(short[-i * 5], short[i * 5]): success [176ms]
test Short64VectorTests.ASHRShort64VectorTests(short[-i * 5], short[i + 1]): success [33ms]
test Short64VectorTests.ASHRShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [189ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [85ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [84ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [287ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [54ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[-i * 5]): success [90ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[i * 5]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[i + 1]): success [49ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [150ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [78ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [89ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [124ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [61ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [63ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [1ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [42ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [21ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [209ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [86ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [104ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [427ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [5ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [109ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [73ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [46ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [19ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [67ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [24ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [4ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

ccess [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [16ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [9ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [76ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [16ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [9ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [76ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [15ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseDivByZeroSmokeTest(): success [15ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [90ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i + 1], mask[true]): success [66ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [101ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [65ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [69ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.compressShort64VectorTests(short[-i * 5], mask[i % 2]): success [158ms]
test Short64VectorTests.compressShort64VectorTests(short[i * 5], mask[i % 2]): success [3ms]
test Short64VectorTests.compressShort64VectorTests(short[i + 1], mask[i % 2]): success [2ms]
test Short64VectorTests.compressShort64VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short64VectorTests.compressShort64VectorTests(short[-i * 5], mask[true]): success [58ms]
test Short64VectorTests.compressShort64VectorTests(short[i * 5], mask[true]): success [1ms]
test Short64VectorTests.compressShort64VectorTests(short[i + 1], mask[true]): success [1ms]
test Short64VectorTests.compressShort64VectorTests(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.compressShort64VectorTests(short[-i * 5], mask[false]): success [71ms]
test Short64VectorTests.compressShort64VectorTests(short[i * 5], mask[false]): success [1ms]
test Short64VectorTests.compressShort64VectorTests(short[i + 1], mask[false]): success [1ms]
test Short64VectorTests.compressShort64VectorTests(short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short64VectorTests.divShort64VectorTests(short[-i * 5], short[i * 5]): success [143ms]
test Short64VectorTests.divShort64VectorTests(short[-i * 5], short[i + 1]): success [36ms]
test Short64VectorTests.divShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [100ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [16ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.divShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.divShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.divShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [207ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [118ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [147ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [4ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i]): success [109ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i - length / 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i + 1]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i - 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[zigZag(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i - length / 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i + 1]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i - 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[zigZag(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i - length / 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i - 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[zigZag(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i - length / 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i + 1]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i - 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[zigZag(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i - length / 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i + 1]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i - 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[zigZag(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [79ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [8ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [0ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.expandShort64VectorTests(short[-i * 5], mask[i % 2]): success [137ms]
test Short64VectorTests.expandShort64VectorTests(short[i * 5], mask[i % 2]): success [3ms]
test Short64VectorTests.expandShort64VectorTests(short[i + 1], mask[i % 2]): success [3ms]
test Short64VectorTests.expandShort64VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short64VectorTests.expandShort64VectorTests(short[-i * 5], mask[true]): success [24ms]
test Short64VectorTests.expandShort64VectorTests(short[i * 5], mask[true]): success [2ms]
test Short64VectorTests.expandShort64VectorTests(short[i + 1], mask[true]): success [2ms]
test Short64VectorTests.expandShort64VectorTests(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short64VectorTests.expandShort64VectorTests(short[-i * 5], mask[false]): success [2ms]
test Short64VectorTests.expandShort64VectorTests(short[i * 5], mask[false]): success [2ms]
test Short64VectorTests.expandShort64VectorTests(short[i + 1], mask[false]): success [55ms]
test Short64VectorTests.expandShort64VectorTests(short[cornerCaseValue(i)], mask[false]): success [38ms]
test Short64VectorTests.getShort64VectorTests(short[-i * 5]): success [64ms]
test Short64VectorTests.getShort64VectorTests(short[i * 5]): success [0ms]
test Short64VectorTests.getShort64VectorTests(short[i + 1]): success [0ms]
test Short64VectorTests.getShort64VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[-i * 5]): success [53ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[i * 5]): success [11ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[i + 1]): success [13ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [10ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(0): success [91ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(-1): success [6ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(1): success [27ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(2): success [6ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(-2): success [6ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(0): success [6ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(-1): success [6ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(1): success [6ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(2): success [15ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(-2): success [1ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(0): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(32): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(37): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1024): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1025): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1029): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(0): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(32): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(37): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1024): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1025): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1029): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i]): success [109ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i - length / 2]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i + 1]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i - 2]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[zigZag(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i - length / 2]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i + 1]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i - 2]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[zigZag(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i - length / 2]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i - 2]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[zigZag(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i]): success [4ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i - length / 2]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i + 1]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i - 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[zigZag(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i + 1]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i - 2]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[zigZag(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i]): success [31ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [79ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [32ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [0ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.maskAndNotShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [20ms]
test Short64VectorTests.maskAndNotShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskAndShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Short64VectorTests.maskAndShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskCompressShort64VectorTestsSmokeTest(mask[i % 2]): success [259ms]
test Short64VectorTests.maskCompressShort64VectorTestsSmokeTest(mask[true]): success [45ms]
test Short64VectorTests.maskCompressShort64VectorTestsSmokeTest(mask[false]): success [0ms]
test Short64VectorTests.maskEqShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Short64VectorTests.maskEqShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskEqualsShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short64VectorTests.maskEqualsShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskFirstTrueShort64VectorTestsSmokeTest(mask[i % 2]): success [40ms]
test Short64VectorTests.maskFirstTrueShort64VectorTestsSmokeTest(mask[true]): success [33ms]
test Short64VectorTests.maskFirstTrueShort64VectorTestsSmokeTest(mask[false]): success [0ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(-1): success [96ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(0): success [0ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short64VectorTests.maskHashCodeShort64VectorTestsSmokeTest(mask[i % 2]): success [5ms]
test Short64VectorTests.maskHashCodeShort64VectorTestsSmokeTest(mask[true]): success [0ms]
test Short64VectorTests.maskHashCodeShort64VectorTestsSmokeTest(mask[false]): success [0ms]
test Short64VectorTests.maskLastTrueShort64VectorTestsSmokeTest(mask[i % 2]): success [75ms]
test Short64VectorTests.maskLastTrueShort64VectorTestsSmokeTest(mask[true]): success [33ms]
test Short64VectorTests.maskLastTrueShort64VectorTestsSmokeTest(mask[false]): success [0ms]
test Short64VectorTests.maskOrShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [24ms]
test Short64VectorTests.maskOrShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskTrueCountShort64VectorTestsSmokeTest(mask[i % 2]): success [36ms]
test Short64VectorTests.maskTrueCountShort64VectorTestsSmokeTest(mask[true]): success [33ms]
test Short64VectorTests.maskTrueCountShort64VectorTestsSmokeTest(mask[false]): success [0ms]
test Short64VectorTests.maskXorShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short64VectorTests.maskXorShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maxShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.maxShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.maxShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.maxShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.maxShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short64VectorTests.maxShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.minShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.minShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.minShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.minShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.minShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short64VectorTests.minShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.mulShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.mulShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.mulShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.negShort64VectorTests(short[-i * 5]): success [57ms]
test Short64VectorTests.negShort64VectorTests(short[i * 5]): success [0ms]
test Short64VectorTests.negShort64VectorTests(short[i + 1]): success [41ms]
test Short64VectorTests.negShort64VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.notShort64VectorTests(short[-i * 5]): success [65ms]
test Short64VectorTests.notShort64VectorTests(short[i * 5]): success [0ms]
test Short64VectorTests.notShort64VectorTests(short[i + 1]): success [47ms]
test Short64VectorTests.notShort64VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.orShort64VectorTests(short[-i * 5], short[i * 5]): success [9ms]
test Short64VectorTests.orShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.orShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.orShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.orShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short64VectorTests.orShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.shuffleEqualsShort64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [725ms]
test Short64VectorTests.shuffleEqualsShort64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [182ms]
test Short64VectorTests.shuffleMiscellaneousShort64VectorTestsSmokeTest(shuffle[random]): success [283ms]
test Short64VectorTests.shuffleTest(): success [266ms]
test Short64VectorTests.shuffleToStringShort64VectorTestsSmokeTest(shuffle[random]): success [192ms]
test Short64VectorTests.sliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i * 5]): success [506ms]
test Short64VectorTests.sliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i + 1]): success [1ms]
test Short64VectorTests.sliceBinaryShort64VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [112ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [198ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [42ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [144ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [187ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [17ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[-i * 5]): success [248ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[i * 5]): success [8ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[i + 1]): success [96ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.smokeTest1(): success [0ms]
test Short64VectorTests.smokeTest2(): success [107ms]
test Short64VectorTests.subShort64VectorTests(short[-i * 5], short[i * 5]): success [9ms]
test Short64VectorTests.subShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.subShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [8ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.subShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): failure [111ms]
java.lang.AssertionError: at index #1469, input1 = -7345, input2 = 1470, mask = false expected [-7345] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:885)
	at Short64VectorTests.assertArraysEquals(Short64VectorTests.java:455)
	at Short64VectorTests.assertArraysEquals(Short64VectorTests.java:445)
	at Short64VectorTests.subShort64VectorTestsMasked(Short64VectorTests.java:1623)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[-i * 5]): success [1ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[-i * 5]): success [8ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[-i * 5]): success [23ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[-i * 5]): success [10ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[i * 5]): success [28ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[i + 1]): success [48ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.unsliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i * 5]): success [277ms]
test Short64VectorTests.unsliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i + 1]): success [405ms]
test Short64VectorTests.unsliceBinaryShort64VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [289ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [782ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [326ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [237ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [198ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [234ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [199ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [198ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [198ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [199ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[-i * 5]): success [250ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[i * 5]): success [0ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[i + 1]): success [95ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.viewAsFloatingLanesTest(): success [29ms]
test Short64VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Short64VectorTests.withShort64VectorTests(short[-i * 5], short[i * 5]): success [70ms]
test Short64VectorTests.withShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.withShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]

===============================================
jdk/incubator/vector/Short64VectorTests.java
Total tests run: 3598, Passes: 3597, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/1 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Short64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=3 \
        -XX:+UseKNLSetting \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Short64VectorTests.d/testng.0.jta jdk/incubator/vector/Short64VectorTests.java false Short64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long128VectorTests.java
Passed: jdk/incubator/vector/Float64VectorTests.java
Passed: jdk/incubator/vector/Double64VectorTests.java
Passed: jdk/incubator/vector/Vector512ConversionTests.java
Passed: jdk/incubator/vector/Vector256ConversionTests.java
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#id0
TEST: jdk/incubator/vector/Int64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.897 seconds
messages:
command: build Int64VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 04:27:54 IST 2025
Test directory:
  compile: Int64VectorTests
finished: Thu Apr 17 04:27:55 IST 2025
elapsed time (seconds): 0.897

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.896 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 04:27:54 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 1
Process id: 2256877
finished: Thu Apr 17 04:27:55 IST 2025
elapsed time (seconds): 0.896
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Int64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/2 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Int64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Int64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests 
TIME:   463.849 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests 
started: Thu Apr 17 04:27:55 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2260415
finished: Thu Apr 17 04:35:39 IST 2025
elapsed time (seconds): 463.849
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -3879407779148290860
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-3879407779148290860" to command line.
test Int64VectorTests.ABSInt64VectorTests(int[-i * 5]): success [588ms]
test Int64VectorTests.ABSInt64VectorTests(int[i * 5]): success [23ms]
test Int64VectorTests.ABSInt64VectorTests(int[i + 1]): success [28ms]
test Int64VectorTests.ABSInt64VectorTests(int[cornerCaseValue(i)]): success [6ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[i % 2]): success [253ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[i % 2]): success [5ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[i % 2]): success [60ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[true]): success [29ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[false]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[i * 5]): success [303ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[i + 1]): success [34ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [17ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [9ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [26ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [10ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [6ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [6ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [49ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [157ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [79ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [31ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [49ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [6ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [16ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[-i * 5]): success [150ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[i + 1]): success [55ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[cornerCaseValue(i)]): success [71ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [125ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [64ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [79ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [4ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[-i * 5]): success [20ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [9ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[true]): success [9ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[i * 5]): success [155ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [55ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [21ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [38ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [22ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [4ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [71ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [66ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [37ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [6ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [6ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [6ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [6ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[-i * 5]): success [158ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[i + 1]): success [53ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[cornerCaseValue(i)]): success [75ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [85ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [66ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [46ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [80ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [14ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [17ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[i * 5]): success [183ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [64ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [138ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [76ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [82ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [40ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[i * 5]): success [169ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [63ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [153ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [75ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [37ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [231ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [53ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[-i * 5]): success [45ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[i * 5]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[i + 1]): success [40ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [123ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [57ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [29ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [61ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [55ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [57ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [7ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [192ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [83ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [103ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [363ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [88ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [106ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [24ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [74ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [46ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

], int[i + 1], mask[false]): success [280ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[i - 2], mask[false]): success [281ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[zigZag(i)], mask[false]): success [280ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[cornerCaseValue(i)], mask[false]): success [293ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i], mask[false]): success [280ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i - length / 2], mask[false]): success [280ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i + 1], mask[false]): success [280ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i - 2], mask[false]): success [280ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[zigZag(i)], mask[false]): success [280ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [280ms]
test Int64VectorTests.UMAXInt64VectorTests(int[-i * 5], int[i * 5]): success [143ms]
test Int64VectorTests.UMAXInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.UMAXInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [55ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [84ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [33ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [72ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[-i * 5]): success [105ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[i * 5]): success [53ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[i + 1]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[cornerCaseValue(i)]): success [121ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [83ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [43ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [149ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [13ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[i * 5]): success [152ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [86ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [78ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [34ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [72ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[-i * 5]): success [105ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[i * 5]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[i + 1]): success [48ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[cornerCaseValue(i)]): success [115ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [84ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [44ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [151ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [4ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [13ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [65ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.VectorShapeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.VectorTypeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.WithLanesInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.WithShapeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[i * 5]): success [65ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [56ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [78ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [33ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [72ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [21ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[-i * 5]): success [130ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[i + 1]): success [53ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[cornerCaseValue(i)]): success [132ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [83ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [66ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [135ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [73ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[-i * 5]): success [238ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[i * 5]): success [140ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[i + 1]): success [167ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[cornerCaseValue(i)]): success [141ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[i % 2]): success [409ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[i % 2]): success [277ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[i % 2]): success [276ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [332ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[true]): success [330ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[true]): success [277ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[true]): success [278ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [278ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[false]): success [276ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[false]): success [277ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[false]): success [276ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [277ms]
test Int64VectorTests.ZeroInt64VectorTests(int[-i * 5]): success [128ms]
test Int64VectorTests.ZeroInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ZeroInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.ZeroInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.absInt64VectorTests(int[-i * 5]): success [53ms]
test Int64VectorTests.absInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.absInt64VectorTests(int[i + 1]): success [39ms]
test Int64VectorTests.absInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[i * 5]): success [13ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [53ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.allTrueInt64VectorTests(boolean[i % 2]): success [25ms]
test Int64VectorTests.allTrueInt64VectorTests(boolean[i % 5]): success [20ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.anyTrueInt64VectorTests(boolean[i % 2]): success [7ms]
test Int64VectorTests.anyTrueInt64VectorTests(boolean[i % 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [16ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [16ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [15ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseDivByZeroSmokeTest(): success [13ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[i % 2]): success [98ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [62ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[true]): success [68ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [85ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [68ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [127ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[i % 2]): success [193ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[i % 2]): success [14ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[i % 2]): success [14ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[true]): success [77ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[true]): success [11ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[true]): success [11ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [25ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[false]): success [13ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[false]): success [14ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[false]): success [14ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [14ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[i * 5]): success [316ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[i + 1]): success [154ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [190ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [123ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [10ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [547ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [295ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [354ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): failure [270ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.lambda$binaryOperationsMF$7(IntVector.java:956)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.bOpTemplateMF(IntVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Int64Vector.bOpMF(Int64Vector.java:209)
	at jdk.incubator.vector/jdk.incubator.vector.Int64Vector.bOpMF(Int64Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.lambda$binaryOperationsMF$6(IntVector.java:956)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.lanewiseTemplate(IntVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Int64Vector.lanewise(Int64Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Int64Vector.lanewise(Int64Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.div(IntVector.java:1732)
	at Int64VectorTests.divInt64VectorTestsMasked(Int64VectorTests.java:1758)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [296ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [296ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [294ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [294ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [350ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i]): success [243ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i - length / 2]): success [174ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i + 1]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i - 2]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[zigZag(i)]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i - length / 2]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i + 1]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i - 2]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[zigZag(i)]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i - length / 2]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i + 1]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i - 2]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[zigZag(i)]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i - length / 2]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i + 1]): success [153ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i - 2]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[zigZag(i)]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i]): success [143ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i - length / 2]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i + 1]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i - 2]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[zigZag(i)]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [10ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [62ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[i % 2]): success [142ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[i % 2]): success [15ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[i % 2]): success [15ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[true]): success [31ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[true]): success [12ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [12ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [14ms]
test Int64VectorTests.getInt64VectorTests(int[-i * 5]): success [54ms]
test Int64VectorTests.getInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.getInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.getInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[-i * 5]): success [48ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[i * 5]): success [10ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[i + 1]): success [3ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [3ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(0): success [90ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(-1): success [5ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(1): success [25ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(2): success [5ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(-2): success [9ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(0): success [7ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(-1): success [7ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(1): success [8ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(2): success [19ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(-2): success [5ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(32): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(37): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1024): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1025): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1029): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1): success [4ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(32): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(37): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1024): success [1ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1025): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1029): success [0ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i]): success [244ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i - length / 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i + 1]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i - 2]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[zigZag(i)]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i]): success [187ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i - length / 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i + 1]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i - 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[zigZag(i)]): success [143ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i - length / 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i + 1]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i - 2]): success [172ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[zigZag(i)]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i - length / 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i + 1]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i - 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[zigZag(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i - length / 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i + 1]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i - 2]): success [152ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[zigZag(i)]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i]): success [2ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [7ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [71ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.maskAndInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test Int64VectorTests.maskAndInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskAndNotInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int64VectorTests.maskAndNotInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[i % 2]): success [232ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[true]): success [79ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[false]): success [60ms]
test Int64VectorTests.maskEqInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Int64VectorTests.maskEqInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskEqualsInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int64VectorTests.maskEqualsInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[i % 2]): success [36ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[true]): success [54ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[false]): success [21ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(-1): success [79ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[true]): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[false]): success [0ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[i % 2]): success [65ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[true]): success [54ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[false]): success [34ms]
test Int64VectorTests.maskOrInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [22ms]
test Int64VectorTests.maskOrInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[i % 2]): success [29ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[true]): success [54ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[false]): success [21ms]
test Int64VectorTests.maskXorInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Int64VectorTests.maskXorInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [41ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.negInt64VectorTests(int[-i * 5]): success [53ms]
test Int64VectorTests.negInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.negInt64VectorTests(int[i + 1]): success [44ms]
test Int64VectorTests.negInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.notInt64VectorTests(int[-i * 5]): success [67ms]
test Int64VectorTests.notInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.notInt64VectorTests(int[i + 1]): success [45ms]
test Int64VectorTests.notInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[i * 5]): success [9ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.shuffleEqualsInt64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [17ms]
test Int64VectorTests.shuffleEqualsInt64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [13ms]
test Int64VectorTests.shuffleMiscellaneousInt64VectorTestsSmokeTest(shuffle[random]): success [10ms]
test Int64VectorTests.shuffleTest(): success [283ms]
test Int64VectorTests.shuffleToStringInt64VectorTestsSmokeTest(shuffle[random]): success [66ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i * 5]): success [823ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i + 1]): success [224ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [237ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [445ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [254ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [151ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [150ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [266ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [150ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [183ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [150ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [158ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[-i * 5]): success [409ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[i * 5]): success [216ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[i + 1]): success [215ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[cornerCaseValue(i)]): success [160ms]
test Int64VectorTests.smokeTest1(): success [0ms]
test Int64VectorTests.smokeTest2(): success [90ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [23ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[-i * 5]): success [8ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[i * 5]): success [17ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[i + 1]): success [6ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [2ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i * 5]): success [440ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i + 1]): success [382ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [146ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [1055ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [477ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [289ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [290ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [289ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [312ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [290ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [478ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [289ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[-i * 5]): success [382ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[i * 5]): success [142ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[i + 1]): success [158ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[cornerCaseValue(i)]): success [143ms]
test Int64VectorTests.viewAsFloatingLanesTest(): success [544ms]
test Int64VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[i * 5]): success [65ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]

===============================================
jdk/incubator/vector/Int64VectorTests.java
Total tests run: 3622, Passes: 3620, Failures: 2, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/2 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Int64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=3 \
        -XX:+UseKNLSetting \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Int64VectorTests.d/testng.0.jta jdk/incubator/vector/Int64VectorTests.java false Int64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
--------------------------------------------------
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#Z
Passed: jdk/incubator/vector/Vector128ConversionTests.java
Passed: jdk/incubator/vector/Long64VectorTests.java
Passed: jdk/incubator/vector/Short512VectorTests.java
TEST: jdk/incubator/vector/VectorReshapeTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.431 seconds
messages:
command: build VectorReshapeTests
reason: Named class compiled on demand
started: Thu Apr 17 04:30:27 IST 2025
Test directory:
  compile: VectorReshapeTests
finished: Thu Apr 17 04:30:28 IST 2025
elapsed time (seconds): 0.431

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.43 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 04:30:27 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 13
Process id: 2257733
finished: Thu Apr 17 04:30:28 IST 2025
elapsed time (seconds): 0.43
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/VectorReshapeTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/10 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/VectorReshapeTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
REASON: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
TIME:   546.114 seconds
messages:
command: testng --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests
reason: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
started: Thu Apr 17 04:30:28 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 2262286
finished: Thu Apr 17 04:39:34 IST 2025
elapsed time (seconds): 546.114
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorReshapeTests.testCastFromByte(byte(i)): success [30143ms]
test VectorReshapeTests.testCastFromDouble(double(i)): success [2320ms]
test VectorReshapeTests.testCastFromFloat(float(i)): success [2194ms]
test VectorReshapeTests.testCastFromInt(int(i)): success [2336ms]
test VectorReshapeTests.testCastFromLong(long(i)): success [1915ms]
test VectorReshapeTests.testCastFromShort(short(i)): success [2336ms]
test VectorReshapeTests.testRebracket128(byte(i)): success [12661ms]
test VectorReshapeTests.testRebracket256(byte(i)): success [17821ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64]
Failing with Species[long, 8, S_512_BIT]->Species[int, 16, S_512_BIT] (lanewise), partLimit=-2, block=32, part=-1, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 9, 10, 11, 12, 17, 18, 19, 20, 25, 26, 27, 28, 33, 34, 35, 36, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 60]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket512(byte(i)): failure [33730ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket512(VectorReshapeTests.java:1020)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testRebracket64(byte(i)): success [11298ms]
test VectorReshapeTests.testRebracketMax(byte(i)): success [18287ms]
test VectorReshapeTests.testReshapeByte(byte(i)): success [272326ms]
test VectorReshapeTests.testReshapeDouble(byte(i)): success [26525ms]
test VectorReshapeTests.testReshapeFloat(byte(i)): success [28558ms]
test VectorReshapeTests.testReshapeInt(byte(i)): success [23760ms]
test VectorReshapeTests.testReshapeLong(byte(i)): success [20089ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[short, 4, S_64_BIT]->Species[short, 32, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-7, origin=56
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeShort(byte(i)): failure [6424ms]
java.lang.AssertionError: arrays differ firstly at element [56]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeShort(VectorReshapeTests.java:487)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testUCastFromByte(byte(i)): success [18177ms]
test VectorReshapeTests.testUCastFromInt(int(i)): success [1ms]
test VectorReshapeTests.testUCastFromShort(short(i)): success [9432ms]

===============================================
jdk/incubator/vector/VectorReshapeTests.java
Total tests run: 20, Passes: 18, Failures: 2, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/10 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=3 \
        -XX:+UseKNLSetting \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/VectorReshapeTests.d/testng.0.jta jdk/incubator/vector/VectorReshapeTests.java false VectorReshapeTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
--------------------------------------------------
Passed: jdk/incubator/vector/Vector64ConversionTests.java#id0
Passed: jdk/incubator/vector/Byte512VectorTests.java
Test results: passed: 74; failed: 6; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector
Finished running test 'jtreg:test/jdk:jdk_vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk:jdk_vector                            83    74     6     0     3 <<
==============================
TEST FAILURE

