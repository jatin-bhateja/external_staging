Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/jdk/incubator/vector/', will run:
* jtreg:test/jdk/jdk/incubator/vector
Clean up dirs for jtreg_test_jdk_jdk_incubator_vector

Running test 'jtreg:test/jdk/jdk/incubator/vector'
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ByteMaxVectorTests.java
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte128VectorTests.java
Passed: jdk/incubator/vector/Byte64VectorTests.java
Passed: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorTests.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/FloatMaxVectorTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorTests.java
Passed: jdk/incubator/vector/Double256VectorTests.java
Passed: jdk/incubator/vector/Double512VectorTests.java
Passed: jdk/incubator/vector/Int128VectorTests.java
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorTests.java
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorTests.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorTests.java
Passed: jdk/incubator/vector/Float512VectorTests.java
Passed: jdk/incubator/vector/MethodOverideTest.java
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short128VectorTests.java
Passed: jdk/incubator/vector/Long512VectorTests.java
Passed: jdk/incubator/vector/Float64VectorTests.java
--------------------------------------------------
TEST: jdk/incubator/vector/Int512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.063 seconds
messages:
command: build Int512VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 01:13:42 IST 2025
Test directory:
  compile: Int512VectorTests
finished: Thu Apr 17 01:13:43 IST 2025
elapsed time (seconds): 1.063

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.063 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 01:13:42 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 3
Process id: 2010453
finished: Thu Apr 17 01:13:43 IST 2025
elapsed time (seconds): 1.063
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Int512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/2 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Int512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Int512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int512VectorTests 
TIME:   280.635 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int512VectorTests 
started: Thu Apr 17 01:13:43 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2013823
finished: Thu Apr 17 01:18:24 IST 2025
elapsed time (seconds): 280.635
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 5817479462549469839
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=5817479462549469839" to command line.
test Int512VectorTests.ABSInt512VectorTests(int[-i * 5]): success [348ms]
test Int512VectorTests.ABSInt512VectorTests(int[i * 5]): success [414ms]
test Int512VectorTests.ABSInt512VectorTests(int[i + 1]): success [11ms]
test Int512VectorTests.ABSInt512VectorTests(int[cornerCaseValue(i)]): success [5ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[-i * 5], mask[i % 2]): success [145ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i * 5], mask[i % 2]): success [128ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i + 1], mask[i % 2]): success [109ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[-i * 5], mask[true]): success [119ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i * 5], mask[true]): success [2ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[-i * 5], mask[false]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i * 5], mask[false]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.ADDInt512VectorTests(int[-i * 5], int[i * 5]): success [141ms]
test Int512VectorTests.ADDInt512VectorTests(int[-i * 5], int[i + 1]): success [337ms]
test Int512VectorTests.ADDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [15ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [8ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [22ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [8ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [240ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [70ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [6ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [90ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [6ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[-i * 5]): success [141ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[i * 5]): success [5ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[i + 1]): success [70ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[cornerCaseValue(i)]): success [25ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[-i * 5], mask[i % 2]): success [88ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i * 5], mask[i % 2]): success [6ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i + 1], mask[i % 2]): success [91ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[-i * 5], mask[true]): success [4ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i * 5], mask[true]): success [4ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i + 1], mask[true]): success [43ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[-i * 5], mask[false]): success [14ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i * 5], mask[false]): success [15ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [30ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[-i * 5]): success [12ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[i * 5]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[i + 1]): success [11ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[-i * 5], mask[i % 2]): success [9ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i * 5], mask[false]): success [12ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.ANDInt512VectorTests(int[-i * 5], int[i * 5]): success [446ms]
test Int512VectorTests.ANDInt512VectorTests(int[-i * 5], int[i + 1]): success [110ms]
test Int512VectorTests.ANDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [3ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [4ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [18ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [9ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [4ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [87ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[-i * 5]): success [178ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[i * 5]): success [2ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[i + 1]): success [67ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[-i * 5], mask[i % 2]): success [32ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i + 1], mask[i % 2]): success [88ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [29ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[-i * 5], mask[false]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i * 5], mask[false]): success [13ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int512VectorTests.AND_NOTInt512VectorTests(int[-i * 5], int[i * 5]): success [385ms]
test Int512VectorTests.AND_NOTInt512VectorTests(int[-i * 5], int[i + 1]): success [257ms]
test Int512VectorTests.AND_NOTInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [49ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [81ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [95ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [52ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [50ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [175ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [49ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [50ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [50ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [87ms]
test Int512VectorTests.ASHRInt512VectorTests(int[-i * 5], int[i * 5]): success [141ms]
test Int512VectorTests.ASHRInt512VectorTests(int[-i * 5], int[i + 1]): success [237ms]
test Int512VectorTests.ASHRInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [46ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [120ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [110ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [46ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [46ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [174ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [48ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [48ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [48ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [48ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [112ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [309ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[-i * 5]): success [6ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[i * 5]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[i + 1]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [16ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [27ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [68ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [9ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [59ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [5ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [12ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [121ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [173ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [5ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [5ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [5ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [7ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [327ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [107ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [7ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [66ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [46ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [4ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [4ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseVa

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

lue(i)], mask[true]): success [443ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [236ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [236ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [233ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i]): success [144ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i - length / 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i + 1]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i - 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[zigZag(i)]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[cornerCaseValue(i)]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i - length / 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i + 1]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i - 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[zigZag(i)]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i - length / 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i + 1]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i - 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[zigZag(i)]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i - length / 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i + 1]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i - 2]): success [78ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[zigZag(i)]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i - length / 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i + 1]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i - 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[zigZag(i)]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [66ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [67ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [67ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [9ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [73ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.expandInt512VectorTests(int[-i * 5], mask[i % 2]): success [364ms]
test Int512VectorTests.expandInt512VectorTests(int[i * 5], mask[i % 2]): success [93ms]
test Int512VectorTests.expandInt512VectorTests(int[i + 1], mask[i % 2]): success [71ms]
test Int512VectorTests.expandInt512VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [71ms]
test Int512VectorTests.expandInt512VectorTests(int[-i * 5], mask[true]): success [83ms]
test Int512VectorTests.expandInt512VectorTests(int[i * 5], mask[true]): success [215ms]
test Int512VectorTests.expandInt512VectorTests(int[i + 1], mask[true]): success [2ms]
test Int512VectorTests.expandInt512VectorTests(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.expandInt512VectorTests(int[-i * 5], mask[false]): success [4ms]
test Int512VectorTests.expandInt512VectorTests(int[i * 5], mask[false]): success [4ms]
test Int512VectorTests.expandInt512VectorTests(int[i + 1], mask[false]): success [4ms]
test Int512VectorTests.expandInt512VectorTests(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int512VectorTests.getInt512VectorTests(int[-i * 5]): success [8ms]
test Int512VectorTests.getInt512VectorTests(int[i * 5]): success [8ms]
test Int512VectorTests.getInt512VectorTests(int[i + 1]): success [7ms]
test Int512VectorTests.getInt512VectorTests(int[cornerCaseValue(i)]): success [7ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[-i * 5]): success [34ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(0): success [64ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(-1): success [2ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(1): success [16ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(2): success [2ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(-2): success [3ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(0): success [2ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(-1): success [1ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(1): success [1ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(2): success [1ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(-2): success [1ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(0): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(32): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(37): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1024): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1025): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1029): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(0): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1): success [4ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(32): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(37): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1024): success [1ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1025): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1029): success [0ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i]): success [144ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i - length / 2]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i + 1]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i - 2]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[zigZag(i)]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[cornerCaseValue(i)]): success [84ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i]): success [114ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i - length / 2]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i + 1]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i - 2]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[zigZag(i)]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i - length / 2]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i + 1]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i - 2]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[zigZag(i)]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i - length / 2]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i + 1]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i - 2]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[zigZag(i)]): success [78ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i - length / 2]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i + 1]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i - 2]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[zigZag(i)]): success [103ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i]): success [67ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [67ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [6ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [73ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.maskAndInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Int512VectorTests.maskAndInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskAndNotInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Int512VectorTests.maskAndNotInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskCompressInt512VectorTestsSmokeTest(mask[i % 2]): success [505ms]
test Int512VectorTests.maskCompressInt512VectorTestsSmokeTest(mask[true]): success [323ms]
test Int512VectorTests.maskCompressInt512VectorTestsSmokeTest(mask[false]): success [323ms]
test Int512VectorTests.maskEqInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int512VectorTests.maskEqInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskEqualsInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int512VectorTests.maskEqualsInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskFirstTrueInt512VectorTestsSmokeTest(mask[i % 2]): success [70ms]
test Int512VectorTests.maskFirstTrueInt512VectorTestsSmokeTest(mask[true]): success [92ms]
test Int512VectorTests.maskFirstTrueInt512VectorTestsSmokeTest(mask[false]): success [60ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(-1): success [57ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(0): success [0ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int512VectorTests.maskHashCodeInt512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int512VectorTests.maskHashCodeInt512VectorTestsSmokeTest(mask[true]): success [0ms]
test Int512VectorTests.maskHashCodeInt512VectorTestsSmokeTest(mask[false]): success [0ms]
test Int512VectorTests.maskLastTrueInt512VectorTestsSmokeTest(mask[i % 2]): success [111ms]
test Int512VectorTests.maskLastTrueInt512VectorTestsSmokeTest(mask[true]): success [93ms]
test Int512VectorTests.maskLastTrueInt512VectorTestsSmokeTest(mask[false]): success [79ms]
test Int512VectorTests.maskOrInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [18ms]
test Int512VectorTests.maskOrInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskTrueCountInt512VectorTestsSmokeTest(mask[i % 2]): success [68ms]
test Int512VectorTests.maskTrueCountInt512VectorTestsSmokeTest(mask[true]): success [93ms]
test Int512VectorTests.maskTrueCountInt512VectorTestsSmokeTest(mask[false]): success [60ms]
test Int512VectorTests.maskXorInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int512VectorTests.maskXorInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maxInt512VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.maxInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.maxInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [5ms]
test Int512VectorTests.maxInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.maxInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.maxInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.minInt512VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.minInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.minInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.minInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.minInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.minInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [31ms]
test Int512VectorTests.mulInt512VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.mulInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.mulInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.negInt512VectorTests(int[-i * 5]): success [7ms]
test Int512VectorTests.negInt512VectorTests(int[i * 5]): success [8ms]
test Int512VectorTests.negInt512VectorTests(int[i + 1]): success [2ms]
test Int512VectorTests.negInt512VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int512VectorTests.notInt512VectorTests(int[-i * 5]): success [50ms]
test Int512VectorTests.notInt512VectorTests(int[i * 5]): success [57ms]
test Int512VectorTests.notInt512VectorTests(int[i + 1]): success [44ms]
test Int512VectorTests.notInt512VectorTests(int[cornerCaseValue(i)]): success [44ms]
test Int512VectorTests.orInt512VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int512VectorTests.orInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.orInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.orInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int512VectorTests.orInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.orInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.shuffleEqualsInt512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [11ms]
test Int512VectorTests.shuffleEqualsInt512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [7ms]
test Int512VectorTests.shuffleMiscellaneousInt512VectorTestsSmokeTest(shuffle[random]): success [1ms]
test Int512VectorTests.shuffleTest(): success [594ms]
test Int512VectorTests.shuffleToStringInt512VectorTestsSmokeTest(shuffle[random]): success [33ms]
test Int512VectorTests.sliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i * 5]): success [626ms]
test Int512VectorTests.sliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i + 1]): success [1211ms]
test Int512VectorTests.sliceBinaryInt512VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [348ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [391ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [789ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [380ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [379ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1056ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [649ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [396ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [381ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [379ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[-i * 5]): success [325ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[i * 5]): success [752ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[i + 1]): success [313ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[cornerCaseValue(i)]): success [348ms]
test Int512VectorTests.smokeTest1(): success [0ms]
test Int512VectorTests.smokeTest2(): success [72ms]
test Int512VectorTests.subInt512VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.subInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.subInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.subInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.subInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[-i * 5]): success [3ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[-i * 5]): success [4ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[i * 5]): success [7ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[i + 1]): success [13ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.unsliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i * 5]): success [347ms]
test Int512VectorTests.unsliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i + 1]): success [922ms]
test Int512VectorTests.unsliceBinaryInt512VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [326ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [957ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [2832ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [670ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [668ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [4264ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [669ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [669ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [665ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [780ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[-i * 5]): success [329ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[i * 5]): success [750ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[i + 1]): success [321ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[cornerCaseValue(i)]): success [325ms]
test Int512VectorTests.viewAsFloatingLanesTest(): success [391ms]
test Int512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int512VectorTests.withInt512VectorTests(int[-i * 5], int[i * 5]): success [18ms]
test Int512VectorTests.withInt512VectorTests(int[-i * 5], int[i + 1]): success [10ms]
test Int512VectorTests.withInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [10ms]

===============================================
jdk/incubator/vector/Int512VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/2 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Int512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Int512VectorTests.d/testng.0.jta jdk/incubator/vector/Int512VectorTests.java false Int512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorTests.java
Passed: jdk/incubator/vector/Long256VectorTests.java
Passed: jdk/incubator/vector/LongMaxVectorTests.java
Passed: jdk/incubator/vector/UnalignedHeapTest.java
TEST: jdk/incubator/vector/Long128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.004 seconds
messages:
command: build Long128VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 01:14:30 IST 2025
Test directory:
  compile: Long128VectorTests
finished: Thu Apr 17 01:14:31 IST 2025
elapsed time (seconds): 1.004

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.004 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 01:14:30 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 1
Process id: 2010397
finished: Thu Apr 17 01:14:31 IST 2025
elapsed time (seconds): 1.004
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Long128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/0 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Long128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Long128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests 
TIME:   251.827 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests 
started: Thu Apr 17 01:14:31 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2014166
finished: Thu Apr 17 01:18:43 IST 2025
elapsed time (seconds): 251.827
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 2642743108217961659
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=2642743108217961659" to command line.
test Long128VectorTests.ABSLong128VectorTests(long[-i * 5]): success [588ms]
test Long128VectorTests.ABSLong128VectorTests(long[i * 5]): success [57ms]
test Long128VectorTests.ABSLong128VectorTests(long[i + 1]): success [6ms]
test Long128VectorTests.ABSLong128VectorTests(long[cornerCaseValue(i)]): success [5ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[i % 2]): success [226ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[i % 2]): success [122ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[true]): success [6ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[false]): success [6ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[i * 5]): success [208ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[i + 1]): success [103ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [8ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [125ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [74ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [10ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[-i * 5]): success [131ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[i * 5]): success [48ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[i + 1]): success [1ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [107ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [87ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[true]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[true]): success [14ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[true]): success [29ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [22ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[-i * 5]): success [5ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[i * 5]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[i * 5]): success [158ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[i + 1]): success [68ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [3ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [6ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [8ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [66ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[-i * 5]): success [134ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[i * 5]): success [0ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[i + 1]): success [83ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [76ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [85ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[true]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[true]): success [28ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[false]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [12ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[i * 5]): success [223ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[i + 1]): success [72ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [63ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [77ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[i * 5]): success [110ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[i + 1]): success [77ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [81ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [76ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [15ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [192ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [57ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[-i * 5]): success [8ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[i * 5]): success [55ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[i + 1]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [60ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [57ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [13ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [55ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [111ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [88ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [452ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [4ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [86ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [72ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [7ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [24ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [3ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

ss [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [5ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseDivByZeroSmokeTest(): success [11ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[i % 2]): success [16ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[i % 2]): success [85ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[i % 2]): success [153ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[i % 2]): success [90ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[i % 2]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[true]): success [79ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[true]): success [5ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[true]): success [5ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [5ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[i * 5]): success [183ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[i + 1]): success [196ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [78ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [134ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [7ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [350ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [298ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [213ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [164ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [153ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [154ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [150ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [146ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [147ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i]): success [185ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i - length / 2]): success [85ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i - 2]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[cornerCaseValue(i)]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i - length / 2]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i - 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i - length / 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i - 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[zigZag(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i - length / 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i - 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i - length / 2]): success [77ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i + 1]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i - 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [88ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [105ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[i % 2]): success [94ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[i % 2]): success [79ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[i % 2]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[true]): success [25ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[true]): success [5ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [5ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[false]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[false]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[false]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.getLong128VectorTests(long[-i * 5]): success [4ms]
test Long128VectorTests.getLong128VectorTests(long[i * 5]): success [66ms]
test Long128VectorTests.getLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.getLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[-i * 5]): success [39ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[i * 5]): success [2ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[i + 1]): success [4ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(0): success [76ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(-1): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(1): success [18ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(2): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(-2): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(0): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(-1): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(1): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(2): success [5ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(-2): success [3ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(32): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(37): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1024): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1025): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1029): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(32): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(37): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1024): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1025): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1029): success [0ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i]): success [173ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i - 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[zigZag(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i - length / 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i - 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[zigZag(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i - 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[zigZag(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i - length / 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i + 1]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i - 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[zigZag(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i - 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[zigZag(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [10ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [66ms]
test Long128VectorTests.maskAndLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Long128VectorTests.maskAndLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskAndNotLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Long128VectorTests.maskAndNotLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[i % 2]): success [231ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[true]): success [80ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[false]): success [60ms]
test Long128VectorTests.maskEqLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Long128VectorTests.maskEqLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskEqualsLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long128VectorTests.maskEqualsLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[i % 2]): success [34ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[true]): success [54ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[false]): success [21ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(-1): success [64ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[true]): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[false]): success [0ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[i % 2]): success [63ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[true]): success [54ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[false]): success [33ms]
test Long128VectorTests.maskOrLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Long128VectorTests.maskOrLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[i % 2]): success [28ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[true]): success [53ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[false]): success [21ms]
test Long128VectorTests.maskXorLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long128VectorTests.maskXorLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.negLong128VectorTests(long[-i * 5]): success [14ms]
test Long128VectorTests.negLong128VectorTests(long[i * 5]): success [48ms]
test Long128VectorTests.negLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.negLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.notLong128VectorTests(long[-i * 5]): success [19ms]
test Long128VectorTests.notLong128VectorTests(long[i * 5]): success [53ms]
test Long128VectorTests.notLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.notLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[i * 5]): success [10ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.shuffleEqualsLong128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [471ms]
test Long128VectorTests.shuffleEqualsLong128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [50ms]
test Long128VectorTests.shuffleMiscellaneousLong128VectorTestsSmokeTest(shuffle[random]): success [24ms]
test Long128VectorTests.shuffleTest(): success [358ms]
test Long128VectorTests.shuffleToStringLong128VectorTestsSmokeTest(shuffle[random]): success [51ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i * 5]): success [601ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i + 1]): success [270ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [76ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [159ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [450ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [76ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [76ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [76ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [77ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [76ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [76ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [94ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[-i * 5]): success [227ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[i * 5]): success [225ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[i + 1]): success [72ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[cornerCaseValue(i)]): success [75ms]
test Long128VectorTests.smokeTest1(): success [0ms]
test Long128VectorTests.smokeTest2(): success [50ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[i + 1]): success [14ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [22ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[i + 1]): success [5ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [8ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[i * 5]): success [5ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[i + 1]): success [5ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [5ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[-i * 5]): success [2ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[i * 5]): success [7ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[i + 1]): success [44ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i * 5]): success [237ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i + 1]): success [300ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [73ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [539ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [510ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [147ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [147ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [147ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [155ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [148ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [154ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [147ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[-i * 5]): success [213ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[i * 5]): success [201ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[i + 1]): success [72ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[cornerCaseValue(i)]): success [73ms]
test Long128VectorTests.viewAsFloatingLanesTest(): success [238ms]
test Long128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[i * 5]): success [19ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[i + 1]): success [79ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]

===============================================
jdk/incubator/vector/Long128VectorTests.java
Total tests run: 3321, Passes: 3320, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/0 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Long128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Long128VectorTests.d/testng.0.jta jdk/incubator/vector/Long128VectorTests.java false Long128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorTests.java
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/VectorMathTest.java
Passed: jdk/incubator/vector/ShortMaxVectorTests.java
Passed: jdk/incubator/vector/Short64VectorTests.java
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
TEST: jdk/incubator/vector/Int64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.169 seconds
messages:
command: build Int64VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 01:13:59 IST 2025
Test directory:
  compile: Int64VectorTests
finished: Thu Apr 17 01:14:00 IST 2025
elapsed time (seconds): 1.169

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.169 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 01:13:59 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 4
Process id: 2010482
finished: Thu Apr 17 01:14:00 IST 2025
elapsed time (seconds): 1.169
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Int64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Int64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Int64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests 
TIME:   461.271 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests 
started: Thu Apr 17 01:14:00 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2013931
finished: Thu Apr 17 01:21:42 IST 2025
elapsed time (seconds): 461.271
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -7152632043184228224
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-7152632043184228224" to command line.
test Int64VectorTests.ABSInt64VectorTests(int[-i * 5]): success [601ms]
test Int64VectorTests.ABSInt64VectorTests(int[i * 5]): success [24ms]
test Int64VectorTests.ABSInt64VectorTests(int[i + 1]): success [29ms]
test Int64VectorTests.ABSInt64VectorTests(int[cornerCaseValue(i)]): success [4ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[i % 2]): success [233ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[i % 2]): success [27ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[i % 2]): success [83ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[true]): success [30ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[false]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[i * 5]): success [320ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [57ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [18ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [10ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [25ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [11ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [4ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [6ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [49ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [166ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [69ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [36ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [16ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[-i * 5]): success [147ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[i + 1]): success [54ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[cornerCaseValue(i)]): success [66ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [122ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [62ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [76ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [4ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [11ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[-i * 5]): success [20ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [9ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[true]): success [9ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[i * 5]): success [206ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [54ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [20ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [37ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [20ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [70ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [7ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [36ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [6ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [6ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [6ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[-i * 5]): success [160ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[i + 1]): success [57ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[cornerCaseValue(i)]): success [69ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [83ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [64ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [79ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [43ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [30ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [30ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [5ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[i * 5]): success [191ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [63ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [133ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [37ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [80ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [40ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[i * 5]): success [164ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[i + 1]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [59ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [149ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [6ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [35ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [225ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [50ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[-i * 5]): success [43ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[i * 5]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[i + 1]): success [39ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [118ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [6ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [62ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [60ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [53ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [27ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [8ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [7ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [182ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [79ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [92ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [361ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [87ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [105ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [7ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [24ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [66ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [45ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [2ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(i

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

success [278ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[i - 2], int[cornerCaseValue(i)], mask[false]): success [278ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[i], mask[false]): success [278ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[i - length / 2], mask[false]): success [277ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[i + 1], mask[false]): success [278ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[i - 2], mask[false]): success [277ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[zigZag(i)], mask[false]): success [276ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[cornerCaseValue(i)], mask[false]): success [278ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i], mask[false]): success [277ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i - length / 2], mask[false]): success [278ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i + 1], mask[false]): success [278ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i - 2], mask[false]): success [279ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[zigZag(i)], mask[false]): success [278ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [278ms]
test Int64VectorTests.UMAXInt64VectorTests(int[-i * 5], int[i * 5]): success [149ms]
test Int64VectorTests.UMAXInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.UMAXInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [53ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [76ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [32ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [70ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[-i * 5]): success [111ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[i * 5]): success [32ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[i + 1]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[cornerCaseValue(i)]): success [143ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [81ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [65ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [116ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [4ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[i * 5]): success [143ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [83ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [75ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [32ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [69ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[-i * 5]): success [103ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[i * 5]): success [33ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[i + 1]): success [46ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [95ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [66ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [55ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [64ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [13ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.VectorShapeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.VectorTypeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.WithLanesInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.WithShapeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[i * 5]): success [63ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [54ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [75ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [70ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[-i * 5]): success [132ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[i + 1]): success [52ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[cornerCaseValue(i)]): success [101ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [80ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [62ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [65ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [113ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [11ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[-i * 5]): success [231ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[i * 5]): success [164ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[i + 1]): success [138ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[i % 2]): success [400ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[i % 2]): success [305ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[i % 2]): success [277ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [273ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[true]): success [273ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[true]): success [273ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[true]): success [274ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [282ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[false]): success [308ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[false]): success [275ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[false]): success [274ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [275ms]
test Int64VectorTests.ZeroInt64VectorTests(int[-i * 5]): success [118ms]
test Int64VectorTests.ZeroInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ZeroInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.ZeroInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.absInt64VectorTests(int[-i * 5]): success [51ms]
test Int64VectorTests.absInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.absInt64VectorTests(int[i + 1]): success [36ms]
test Int64VectorTests.absInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[i * 5]): success [32ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [38ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.allTrueInt64VectorTests(boolean[i % 2]): success [26ms]
test Int64VectorTests.allTrueInt64VectorTests(boolean[i % 5]): success [19ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.anyTrueInt64VectorTests(boolean[i % 2]): success [7ms]
test Int64VectorTests.anyTrueInt64VectorTests(boolean[i % 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [12ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [15ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [7ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [15ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [7ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [15ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseDivByZeroSmokeTest(): success [14ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[i % 2]): success [90ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[i % 2]): success [16ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [60ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[true]): success [64ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [80ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [77ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [204ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[i % 2]): success [192ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[i % 2]): success [14ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[i % 2]): success [14ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[true]): success [76ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[true]): success [11ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[true]): success [11ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [11ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[false]): success [13ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[false]): success [13ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[false]): success [13ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [13ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[i * 5]): success [316ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[i + 1]): success [186ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [208ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [120ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [10ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [2ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [537ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [402ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [350ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [294ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [293ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [303ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [294ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [293ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [294ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i]): success [240ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i - length / 2]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i + 1]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i - 2]): success [141ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[zigZag(i)]): success [142ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[cornerCaseValue(i)]): success [185ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i - length / 2]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i + 1]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i - 2]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[zigZag(i)]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i - length / 2]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i + 1]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i - 2]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[zigZag(i)]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i - length / 2]): success [155ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i + 1]): success [155ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i - 2]): success [155ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[zigZag(i)]): success [156ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [155ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i]): success [156ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i - length / 2]): success [155ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i + 1]): success [155ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i - 2]): success [155ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[zigZag(i)]): success [155ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [3ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [9ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [58ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[i % 2]): success [138ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[i % 2]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[i % 2]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[true]): success [30ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[true]): success [11ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[true]): success [11ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [11ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[false]): success [13ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[false]): success [13ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[false]): success [13ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [13ms]
test Int64VectorTests.getInt64VectorTests(int[-i * 5]): success [45ms]
test Int64VectorTests.getInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.getInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.getInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[-i * 5]): success [49ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[i * 5]): success [21ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[i + 1]): success [3ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [3ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(0): success [93ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(-1): success [6ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(1): success [25ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(2): success [6ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(-2): success [9ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(0): success [7ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(-1): success [7ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(1): success [8ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(2): success [19ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(-2): success [5ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(32): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(37): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1024): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1025): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1029): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1): success [4ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(32): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(37): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1024): success [1ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1025): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1029): success [0ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i]): success [238ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i - length / 2]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i + 1]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i - 2]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[zigZag(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i]): success [169ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i - length / 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i + 1]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i - 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[zigZag(i)]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i - length / 2]): success [171ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i + 1]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i - 2]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[zigZag(i)]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i - length / 2]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i + 1]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i - 2]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[zigZag(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [144ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i]): success [142ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i - length / 2]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i + 1]): success [141ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i - 2]): success [142ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[zigZag(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i]): success [141ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [141ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [144ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [141ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [143ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i]): success [2ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [7ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [69ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.maskAndInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Int64VectorTests.maskAndInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskAndNotInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int64VectorTests.maskAndNotInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[i % 2]): success [232ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[true]): success [80ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[false]): success [60ms]
test Int64VectorTests.maskEqInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Int64VectorTests.maskEqInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskEqualsInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int64VectorTests.maskEqualsInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[i % 2]): success [35ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[true]): success [54ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[false]): success [20ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(-1): success [80ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[true]): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[false]): success [0ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[i % 2]): success [65ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[true]): success [53ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[false]): success [34ms]
test Int64VectorTests.maskOrInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [24ms]
test Int64VectorTests.maskOrInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[i % 2]): success [29ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[true]): success [53ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[false]): success [20ms]
test Int64VectorTests.maskXorInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Int64VectorTests.maskXorInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [31ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.negInt64VectorTests(int[-i * 5]): success [53ms]
test Int64VectorTests.negInt64VectorTests(int[i * 5]): success [18ms]
test Int64VectorTests.negInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.negInt64VectorTests(int[cornerCaseValue(i)]): success [67ms]
test Int64VectorTests.notInt64VectorTests(int[-i * 5]): success [60ms]
test Int64VectorTests.notInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.notInt64VectorTests(int[i + 1]): success [42ms]
test Int64VectorTests.notInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.shuffleEqualsInt64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [17ms]
test Int64VectorTests.shuffleEqualsInt64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [13ms]
test Int64VectorTests.shuffleMiscellaneousInt64VectorTestsSmokeTest(shuffle[random]): success [10ms]
test Int64VectorTests.shuffleTest(): success [281ms]
test Int64VectorTests.shuffleToStringInt64VectorTestsSmokeTest(shuffle[random]): success [65ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i * 5]): success [873ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i + 1]): success [151ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [238ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [441ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [255ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [153ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [153ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [269ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [284ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [171ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [182ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [157ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[-i * 5]): success [480ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[i * 5]): success [203ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[i + 1]): success [142ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[cornerCaseValue(i)]): success [213ms]
test Int64VectorTests.smokeTest1(): success [0ms]
test Int64VectorTests.smokeTest2(): success [98ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [8ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [9ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [9ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [18ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[-i * 5]): success [15ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[i * 5]): success [16ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[i + 1]): success [18ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i * 5]): success [441ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i + 1]): success [150ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [291ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [1047ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [475ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [290ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [290ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [288ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [310ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [302ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [288ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [296ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[-i * 5]): success [384ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[i * 5]): success [143ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[i + 1]): success [142ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[cornerCaseValue(i)]): success [142ms]
test Int64VectorTests.viewAsFloatingLanesTest(): success [544ms]
test Int64VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[i * 5]): success [71ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]

===============================================
jdk/incubator/vector/Int64VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Int64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/0/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Int64VectorTests.d/testng.0.jta jdk/incubator/vector/Int64VectorTests.java false Int64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Vector512ConversionTests.java
Passed: jdk/incubator/vector/Long64VectorTests.java
Passed: jdk/incubator/vector/Short256VectorTests.java
Passed: jdk/incubator/vector/AddTest.java
TEST: jdk/incubator/vector/Short512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.864 seconds
messages:
command: build Short512VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 01:18:02 IST 2025
Test directory:
  compile: Short512VectorTests
finished: Thu Apr 17 01:18:02 IST 2025
elapsed time (seconds): 0.864

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.864 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 01:18:02 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 2
Process id: 2010424
finished: Thu Apr 17 01:18:02 IST 2025
elapsed time (seconds): 0.864
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Short512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/14 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Short512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Short512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short512VectorTests 
TIME:   542.607 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short512VectorTests 
started: Thu Apr 17 01:18:02 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2015173
finished: Thu Apr 17 01:27:05 IST 2025
elapsed time (seconds): 542.607
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 2749806601680948955
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=2749806601680948955" to command line.
test Short512VectorTests.ABSMaskedShort512VectorTests(short[-i * 5], mask[i % 2]): success [546ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i * 5], mask[i % 2]): success [759ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i + 1], mask[i % 2]): success [12ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[-i * 5], mask[true]): success [169ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i + 1], mask[true]): success [138ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[-i * 5], mask[false]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.ABSShort512VectorTests(short[-i * 5]): success [268ms]
test Short512VectorTests.ABSShort512VectorTests(short[i * 5]): success [47ms]
test Short512VectorTests.ABSShort512VectorTests(short[i + 1]): success [3ms]
test Short512VectorTests.ABSShort512VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[-i * 5]): success [67ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[i * 5]): success [2ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[i + 1]): success [22ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[cornerCaseValue(i)]): success [4ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [12ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i + 1], mask[true]): success [25ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [50ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[-i * 5]): success [264ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[i * 5]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[i + 1]): success [78ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[cornerCaseValue(i)]): success [26ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [107ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [124ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[-i * 5], mask[true]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i + 1], mask[true]): success [30ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short512VectorTests.ADDShort512VectorTests(short[-i * 5], short[i * 5]): success [127ms]
test Short512VectorTests.ADDShort512VectorTests(short[-i * 5], short[i + 1]): success [1048ms]
test Short512VectorTests.ADDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [5ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [15ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [22ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [6ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [610ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [178ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [6ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [160ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [18ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[-i * 5]): success [180ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[i * 5]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[i + 1]): success [77ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [34ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [4ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [123ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[-i * 5], mask[true]): success [38ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i + 1], mask[true]): success [27ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[-i * 5], mask[false]): success [2ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.ANDShort512VectorTests(short[-i * 5], short[i * 5]): success [934ms]
test Short512VectorTests.ANDShort512VectorTests(short[-i * 5], short[i + 1]): success [203ms]
test Short512VectorTests.ANDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [7ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [39ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [12ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [3ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [190ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short512VectorTests.AND_NOTShort512VectorTests(short[-i * 5], short[i * 5]): success [812ms]
test Short512VectorTests.AND_NOTShort512VectorTests(short[-i * 5], short[i + 1]): success [526ms]
test Short512VectorTests.AND_NOTShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [74ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [111ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [192ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [76ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [75ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [453ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [76ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [75ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [75ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [75ms]
test Short512VectorTests.ASHRShort512VectorTests(short[-i * 5], short[i * 5]): success [193ms]
test Short512VectorTests.ASHRShort512VectorTests(short[-i * 5], short[i + 1]): success [496ms]
test Short512VectorTests.ASHRShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [72ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [351ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [254ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [77ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [77ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [333ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [78ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [77ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [77ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [77ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [188ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [571ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[-i * 5]): success [161ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[i * 5]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[i + 1]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [18ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [95ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [110ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [5ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [14ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [120ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [15ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [240ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [293ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [7ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [7ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [8ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [8ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [8ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [8ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [329ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [106ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [7ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [47ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [74ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITW

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

rCaseValue(i)]): success [4ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [12ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [152ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.VectorShapeShort512VectorTestsSmokeTest(): success [0ms]
test Short512VectorTests.VectorTypeShort512VectorTestsSmokeTest(): success [0ms]
test Short512VectorTests.WithLanesShort512VectorTestsSmokeTest(): success [0ms]
test Short512VectorTests.WithShapeShort512VectorTestsSmokeTest(): success [0ms]
test Short512VectorTests.XORReduceShort512VectorTests(short[-i * 5]): success [123ms]
test Short512VectorTests.XORReduceShort512VectorTests(short[i * 5]): success [12ms]
test Short512VectorTests.XORReduceShort512VectorTests(short[i + 1]): success [77ms]
test Short512VectorTests.XORReduceShort512VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [16ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [4ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [122ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[-i * 5], mask[true]): success [3ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[i + 1], mask[true]): success [27ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[-i * 5], mask[false]): success [2ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.XORShort512VectorTests(short[-i * 5], short[i * 5]): success [11ms]
test Short512VectorTests.XORShort512VectorTests(short[-i * 5], short[i + 1]): success [4ms]
test Short512VectorTests.XORShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [10ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [151ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[-i * 5], mask[i % 2]): success [468ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i * 5], mask[i % 2]): success [493ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i + 1], mask[i % 2]): success [389ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [388ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[-i * 5], mask[true]): success [626ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i * 5], mask[true]): success [389ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i + 1], mask[true]): success [390ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [389ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[-i * 5], mask[false]): success [388ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i * 5], mask[false]): success [388ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i + 1], mask[false]): success [391ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [383ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[-i * 5]): success [351ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[i * 5]): success [323ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[i + 1]): success [255ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[cornerCaseValue(i)]): success [255ms]
test Short512VectorTests.ZeroShort512VectorTests(short[-i * 5]): success [63ms]
test Short512VectorTests.ZeroShort512VectorTests(short[i * 5]): success [79ms]
test Short512VectorTests.ZeroShort512VectorTests(short[i + 1]): success [62ms]
test Short512VectorTests.ZeroShort512VectorTests(short[cornerCaseValue(i)]): success [63ms]
test Short512VectorTests.absShort512VectorTests(short[-i * 5]): success [18ms]
test Short512VectorTests.absShort512VectorTests(short[i * 5]): success [21ms]
test Short512VectorTests.absShort512VectorTests(short[i + 1]): success [3ms]
test Short512VectorTests.absShort512VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.addShort512VectorTests(short[-i * 5], short[i * 5]): success [224ms]
test Short512VectorTests.addShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.addShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [411ms]
test Short512VectorTests.addShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [32ms]
test Short512VectorTests.addShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.allTrueShort512VectorTests(boolean[i % 2]): success [23ms]
test Short512VectorTests.allTrueShort512VectorTests(boolean[i % 5]): success [15ms]
test Short512VectorTests.andShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.andShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.andShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.andShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.andShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.andShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.anyTrueShort512VectorTests(boolean[i % 2]): success [11ms]
test Short512VectorTests.anyTrueShort512VectorTests(boolean[i % 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [5ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [54ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [78ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [8ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [73ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [8ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [72ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [9ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [74ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.bitwiseDivByZeroSmokeTest(): success [13ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [29ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i + 1], mask[true]): success [145ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [95ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [105ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [67ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [68ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [202ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [68ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [69ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [67ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [67ms]
test Short512VectorTests.compressShort512VectorTests(short[-i * 5], mask[i % 2]): success [2533ms]
test Short512VectorTests.compressShort512VectorTests(short[i * 5], mask[i % 2]): success [239ms]
test Short512VectorTests.compressShort512VectorTests(short[i + 1], mask[i % 2]): success [147ms]
test Short512VectorTests.compressShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [150ms]
test Short512VectorTests.compressShort512VectorTests(short[-i * 5], mask[true]): success [249ms]
test Short512VectorTests.compressShort512VectorTests(short[i * 5], mask[true]): success [1340ms]
test Short512VectorTests.compressShort512VectorTests(short[i + 1], mask[true]): success [3ms]
test Short512VectorTests.compressShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.compressShort512VectorTests(short[-i * 5], mask[false]): success [11ms]
test Short512VectorTests.compressShort512VectorTests(short[i * 5], mask[false]): success [11ms]
test Short512VectorTests.compressShort512VectorTests(short[i + 1], mask[false]): success [11ms]
test Short512VectorTests.compressShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [11ms]
test Short512VectorTests.divShort512VectorTests(short[-i * 5], short[i * 5]): success [235ms]
test Short512VectorTests.divShort512VectorTests(short[-i * 5], short[i + 1]): success [476ms]
test Short512VectorTests.divShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [198ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [16ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [854ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [20ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short512VectorTests.divShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [11ms]
test Short512VectorTests.divShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [2ms]
test Short512VectorTests.divShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [423ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [1221ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [397ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [398ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [950ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [399ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [397ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [397ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [396ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i]): success [318ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i - length / 2]): success [132ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i + 1]): success [132ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i - 2]): success [132ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[zigZag(i)]): success [141ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i - length / 2]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i + 1]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i - 2]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[zigZag(i)]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i - length / 2]): success [138ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i + 1]): success [136ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i - 2]): success [134ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[zigZag(i)]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i]): success [131ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i - length / 2]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i + 1]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i - 2]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[zigZag(i)]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [142ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i]): success [131ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i - length / 2]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i + 1]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i - 2]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[zigZag(i)]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [150ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [129ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [118ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [10ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.expandShort512VectorTests(short[-i * 5], mask[i % 2]): success [5551ms]
test Short512VectorTests.expandShort512VectorTests(short[i * 5], mask[i % 2]): success [207ms]
test Short512VectorTests.expandShort512VectorTests(short[i + 1], mask[i % 2]): success [151ms]
test Short512VectorTests.expandShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [151ms]
test Short512VectorTests.expandShort512VectorTests(short[-i * 5], mask[true]): success [134ms]
test Short512VectorTests.expandShort512VectorTests(short[i * 5], mask[true]): success [2405ms]
test Short512VectorTests.expandShort512VectorTests(short[i + 1], mask[true]): success [3ms]
test Short512VectorTests.expandShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.expandShort512VectorTests(short[-i * 5], mask[false]): success [13ms]
test Short512VectorTests.expandShort512VectorTests(short[i * 5], mask[false]): success [13ms]
test Short512VectorTests.expandShort512VectorTests(short[i + 1], mask[false]): success [13ms]
test Short512VectorTests.expandShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [13ms]
test Short512VectorTests.getShort512VectorTests(short[-i * 5]): success [22ms]
test Short512VectorTests.getShort512VectorTests(short[i * 5]): success [22ms]
test Short512VectorTests.getShort512VectorTests(short[i + 1]): success [21ms]
test Short512VectorTests.getShort512VectorTests(short[cornerCaseValue(i)]): success [21ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[-i * 5]): success [45ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(0): success [67ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(-1): success [3ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(1): success [19ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(2): success [3ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(-2): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(0): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(-1): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(1): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(2): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(-2): success [3ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(0): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(32): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(37): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1024): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1025): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1029): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(0): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(32): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(37): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1024): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1025): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1029): success [0ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i]): success [317ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i - length / 2]): success [132ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i + 1]): success [132ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i - 2]): success [145ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[zigZag(i)]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i - length / 2]): success [132ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i + 1]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i - 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[zigZag(i)]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i - length / 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i + 1]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i - 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[zigZag(i)]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i]): success [137ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i - length / 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i + 1]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i - 2]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[zigZag(i)]): success [141ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i - length / 2]): success [133ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i + 1]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i - 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[zigZag(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i]): success [162ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [151ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [129ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [116ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.maskAndNotShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Short512VectorTests.maskAndNotShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskAndShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Short512VectorTests.maskAndShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskCompressShort512VectorTestsSmokeTest(mask[i % 2]): success [839ms]
test Short512VectorTests.maskCompressShort512VectorTestsSmokeTest(mask[true]): success [616ms]
test Short512VectorTests.maskCompressShort512VectorTestsSmokeTest(mask[false]): success [577ms]
test Short512VectorTests.maskEqShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short512VectorTests.maskEqShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskEqualsShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short512VectorTests.maskEqualsShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskFirstTrueShort512VectorTestsSmokeTest(mask[i % 2]): success [118ms]
test Short512VectorTests.maskFirstTrueShort512VectorTestsSmokeTest(mask[true]): success [146ms]
test Short512VectorTests.maskFirstTrueShort512VectorTestsSmokeTest(mask[false]): success [106ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(-1): success [61ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(0): success [0ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short512VectorTests.maskHashCodeShort512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Short512VectorTests.maskHashCodeShort512VectorTestsSmokeTest(mask[true]): success [5ms]
test Short512VectorTests.maskHashCodeShort512VectorTestsSmokeTest(mask[false]): success [0ms]
test Short512VectorTests.maskLastTrueShort512VectorTestsSmokeTest(mask[i % 2]): success [163ms]
test Short512VectorTests.maskLastTrueShort512VectorTestsSmokeTest(mask[true]): success [146ms]
test Short512VectorTests.maskLastTrueShort512VectorTestsSmokeTest(mask[false]): success [131ms]
test Short512VectorTests.maskOrShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [20ms]
test Short512VectorTests.maskOrShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskTrueCountShort512VectorTestsSmokeTest(mask[i % 2]): success [115ms]
test Short512VectorTests.maskTrueCountShort512VectorTestsSmokeTest(mask[true]): success [146ms]
test Short512VectorTests.maskTrueCountShort512VectorTestsSmokeTest(mask[false]): success [106ms]
test Short512VectorTests.maskXorShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short512VectorTests.maskXorShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maxShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.maxShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.maxShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [5ms]
test Short512VectorTests.maxShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.maxShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.maxShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.minShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.minShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.minShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.minShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.minShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.minShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.mulShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.mulShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.mulShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.negShort512VectorTests(short[-i * 5]): success [9ms]
test Short512VectorTests.negShort512VectorTests(short[i * 5]): success [12ms]
test Short512VectorTests.negShort512VectorTests(short[i + 1]): success [3ms]
test Short512VectorTests.negShort512VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.notShort512VectorTests(short[-i * 5]): success [76ms]
test Short512VectorTests.notShort512VectorTests(short[i * 5]): success [90ms]
test Short512VectorTests.notShort512VectorTests(short[i + 1]): success [68ms]
test Short512VectorTests.notShort512VectorTests(short[cornerCaseValue(i)]): success [68ms]
test Short512VectorTests.orShort512VectorTests(short[-i * 5], short[i * 5]): success [8ms]
test Short512VectorTests.orShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.orShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.orShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.orShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.orShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.shuffleEqualsShort512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [446ms]
test Short512VectorTests.shuffleEqualsShort512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [88ms]
test Short512VectorTests.shuffleMiscellaneousShort512VectorTestsSmokeTest(shuffle[random]): success [189ms]
test Short512VectorTests.shuffleTest(): success [1057ms]
test Short512VectorTests.shuffleToStringShort512VectorTestsSmokeTest(shuffle[random]): success [70ms]
test Short512VectorTests.sliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i * 5]): success [914ms]
test Short512VectorTests.sliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i + 1]): success [3836ms]
test Short512VectorTests.sliceBinaryShort512VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [615ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [720ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [2295ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [701ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [689ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [5127ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [657ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [720ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [2247ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [676ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[-i * 5]): success [575ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[i * 5]): success [2048ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[i + 1]): success [557ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[cornerCaseValue(i)]): success [557ms]
test Short512VectorTests.smokeTest1(): success [0ms]
test Short512VectorTests.smokeTest2(): success [108ms]
test Short512VectorTests.subShort512VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.subShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.subShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.subShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[-i * 5]): success [3ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[i * 5]): success [2ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [8ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[-i * 5]): success [3ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[i * 5]): success [27ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[i + 1]): success [2ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [16ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[-i * 5]): success [12ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[i * 5]): success [13ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.unsliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i * 5]): success [560ms]
test Short512VectorTests.unsliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i + 1]): success [2988ms]
test Short512VectorTests.unsliceBinaryShort512VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [555ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [1195ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [9867ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1199ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [1204ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [16990ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1202ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1194ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1198ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1225ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[-i * 5]): success [552ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[i * 5]): success [1995ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[i + 1]): success [561ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[cornerCaseValue(i)]): success [546ms]
test Short512VectorTests.viewAsFloatingLanesTest(): success [22ms]
test Short512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Short512VectorTests.withShort512VectorTests(short[-i * 5], short[i * 5]): success [10ms]
test Short512VectorTests.withShort512VectorTests(short[-i * 5], short[i + 1]): success [10ms]
test Short512VectorTests.withShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [10ms]

===============================================
jdk/incubator/vector/Short512VectorTests.java
Total tests run: 3598, Passes: 3597, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/14 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Short512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Short512VectorTests.d/testng.0.jta jdk/incubator/vector/Short512VectorTests.java false Short512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Byte256VectorTests.java
Passed: jdk/incubator/vector/Vector256ConversionTests.java
Passed: jdk/incubator/vector/Vector128ConversionTests.java
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#id0
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#Z
Passed: jdk/incubator/vector/Byte512VectorTests.java
TEST: jdk/incubator/vector/VectorReshapeTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.477 seconds
messages:
command: build VectorReshapeTests
reason: Named class compiled on demand
started: Thu Apr 17 01:19:18 IST 2025
Test directory:
  compile: VectorReshapeTests
finished: Thu Apr 17 01:19:18 IST 2025
elapsed time (seconds): 0.477

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.477 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 01:19:18 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 10
Process id: 2010977
finished: Thu Apr 17 01:19:18 IST 2025
elapsed time (seconds): 0.477
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
REASON: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
TIME:   784.574 seconds
messages:
command: testng --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests
reason: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
started: Thu Apr 17 01:19:18 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 2015925
finished: Thu Apr 17 01:32:23 IST 2025
elapsed time (seconds): 784.574
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorReshapeTests.testCastFromByte(byte(i)): success [39155ms]
test VectorReshapeTests.testCastFromDouble(double(i)): success [2949ms]
test VectorReshapeTests.testCastFromFloat(float(i)): success [3450ms]
test VectorReshapeTests.testCastFromInt(int(i)): success [4017ms]
test VectorReshapeTests.testCastFromLong(long(i)): success [2969ms]
test VectorReshapeTests.testCastFromShort(short(i)): success [3743ms]
test VectorReshapeTests.testRebracket128(byte(i)): success [12444ms]
test VectorReshapeTests.testRebracket256(byte(i)): success [106103ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64]
Failing with Species[int, 16, S_512_BIT]->Species[short, 32, S_512_BIT] (lanewise), partLimit=-2, block=32, part=-1, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 5, 6, 9, 10, 13, 14, 17, 18, 21, 22, 25, 26, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 49, 50, 53, 54, 57, 58, 61, 62]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket512(byte(i)): failure [101963ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket512(VectorReshapeTests.java:1012)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testRebracket64(byte(i)): success [11203ms]
test VectorReshapeTests.testRebracketMax(byte(i)): success [13659ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[byte, 8, S_64_BIT]->Species[byte, 64, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-4, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeByte(byte(i)): failure [24474ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeByte(VectorReshapeTests.java:441)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[double, 1, S_64_BIT]->Species[double, 8, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-3, origin=24
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeDouble(byte(i)): failure [102099ms]
java.lang.AssertionError: arrays differ firstly at element [24]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeDouble(VectorReshapeTests.java:671)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[float, 2, S_64_BIT]->Species[float, 16, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-3, origin=24
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeFloat(byte(i)): failure [146271ms]
java.lang.AssertionError: arrays differ firstly at element [24]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeFloat(VectorReshapeTests.java:625)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testReshapeInt(byte(i)): success [136893ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[long, 2, S_128_BIT]->Species[long, 8, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-2, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeLong(byte(i)): failure [22468ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeLong(VectorReshapeTests.java:585)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[short, 4, S_64_BIT]->Species[short, 32, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-3, origin=24
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeShort(byte(i)): failure [9066ms]
java.lang.AssertionError: arrays differ firstly at element [24]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeShort(VectorReshapeTests.java:487)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testUCastFromByte(byte(i)): success [24113ms]
test VectorReshapeTests.testUCastFromInt(int(i)): success [1ms]
test VectorReshapeTests.testUCastFromShort(short(i)): success [11872ms]

===============================================
jdk/incubator/vector/VectorReshapeTests.java
Total tests run: 20, Passes: 14, Failures: 6, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 6
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 6
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/VectorReshapeTests.d/testng.0.jta jdk/incubator/vector/VectorReshapeTests.java false VectorReshapeTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
--------------------------------------------------
Passed: jdk/incubator/vector/Vector64ConversionTests.java#id0
Test results: passed: 75; failed: 5; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_incubator_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector
Finished running test 'jtreg:test/jdk/jdk/incubator/vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_incubator_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk/jdk/incubator/vector                  83    75     5     0     3 <<
==============================
TEST FAILURE

