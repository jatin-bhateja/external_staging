Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_1', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_1
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_1

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Passed: compiler/codegen/BMI2.java
Passed: compiler/codegen/Test6378821.java
Passed: compiler/codegen/ClearArrayTest.java
Passed: compiler/codegen/BMI1.java
Passed: compiler/codegen/Test6814842.java
Passed: compiler/codegen/IntRotateWithImmediate.java
Passed: compiler/codegen/ShiftByZero.java
Passed: compiler/codegen/C1NullCheckOfNullStore.java
Passed: compiler/codegen/LoadWithMask.java
Passed: compiler/codegen/LoadWithMask2.java
Passed: compiler/codegen/Test6797305.java
Passed: compiler/codegen/BitTests.java
Passed: compiler/codegen/Test8011901.java
Passed: compiler/codegen/CRCTest.java
Passed: compiler/codegen/Test8005033.java
Passed: compiler/codegen/BadLogicCode.java
Passed: compiler/codegen/Test7009231.java
Passed: compiler/codegen/Test6909839.java
Passed: compiler/codegen/ShiftTest.java
Passed: compiler/codegen/Test6431242.java
Passed: compiler/codegen/Test6879902.java
Passed: compiler/codegen/Test6823354.java
Passed: compiler/codegen/TestConvertImplicitNullCheck.java
Passed: compiler/codegen/Test7100757.java
Passed: compiler/codegen/TestBooleanVect.java
Passed: compiler/codegen/TestByteIntVect.java
Passed: compiler/codegen/TestCharShortVect.java
Passed: compiler/codegen/TestByteShortVect.java
Passed: compiler/codegen/TestDoubleVect.java
Passed: compiler/codegen/TestCharVect.java
Passed: compiler/codegen/TestCharVect2.java#id0
Passed: compiler/codegen/TestByteVect.java
Passed: compiler/codegen/TestFloatDoubleVect.java
Passed: compiler/codegen/TestFloatVect.java
Passed: compiler/codegen/TestGCMLoadPlacement.java
Passed: compiler/codegen/TestIntFloatVect.java
Passed: compiler/codegen/TestByteDoubleVect.java
Passed: compiler/codegen/TestMultiMemInstructionMatching.java
Passed: compiler/codegen/TestLongDoubleVect.java
Passed: compiler/codegen/TestByteFloatVect.java
Passed: compiler/codegen/TestIntLongVect.java
Passed: compiler/codegen/TestByteLongVect.java
Passed: compiler/codegen/TestShortIntVect.java
Passed: compiler/codegen/TestShortFloatVect.java
Passed: compiler/loopopts/superword/CoLocatePack.java
Passed: compiler/codegen/Test6942326.java
Passed: compiler/loopopts/superword/AlignmentOnePack.java
Passed: compiler/codegen/TestLongVect.java
Passed: compiler/codegen/TestIntVect.java
Passed: compiler/loopopts/superword/CoLocatePackMemoryState.java
Passed: compiler/codegen/TestOopCmp.java
Passed: compiler/codegen/TestIntDoubleVect.java
Passed: compiler/codegen/TestShortVect.java
Passed: compiler/codegen/TestCharVect2.java#id1
Passed: compiler/codegen/TestLongFloatVect.java
Passed: compiler/codegen/TestShortDoubleVect.java
Passed: compiler/loopopts/superword/ReductionPerf.java
Passed: compiler/codegen/TestShortLongVect.java
Passed: compiler/codegen/TestSignedMultiplyLong.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage.java
Passed: compiler/loopopts/superword/MinMaxRed_Long.java
Passed: compiler/loopopts/superword/SuperWordIntermediateUse.java
Passed: compiler/loopopts/superword/MinMaxRed_Int.java
Passed: compiler/loopopts/superword/TestAlignVector.java#AlignVector
Passed: compiler/loopopts/superword/TestAlignVector.java#VerifyAlignVector
Passed: compiler/loopopts/superword/RedTest_int.java
Passed: compiler/loopopts/superword/RedTest_long.java
Passed: compiler/loopopts/superword/SumRed_Long.java
Passed: compiler/loopopts/superword/TestAlignVector.java#NoAlignVector
Passed: compiler/loopopts/superword/TestBestAlign.java
Passed: compiler/loopopts/superword/TestCmpInvar.java
Passed: compiler/loopopts/superword/TestCompatibleUseDefTypeSize.java
Passed: compiler/loopopts/superword/TestCyclicDependency.java
Passed: compiler/loopopts/superword/ProdRed_Int.java
Passed: compiler/loopopts/superword/ProdRed_Float.java
Passed: compiler/loopopts/superword/TestEliminateAllocationWithCastP2XUse.java
Passed: compiler/loopopts/superword/TestFuzzPreLoop.java
Passed: compiler/loopopts/superword/SumRed_Int.java
Passed: compiler/loopopts/superword/TestHoistedReductionNode.java
Passed: compiler/loopopts/superword/ProdRed_Double.java
Passed: compiler/loopopts/superword/TestIndependentPacksWithCyclicDependency2.java
Passed: compiler/loopopts/superword/SumRed_Float.java
Passed: compiler/loopopts/superword/TestLargeCompilation.java
Passed: compiler/loopopts/superword/TestGeneralizedReductions.java
Passed: compiler/loopopts/superword/SumRedAbsNeg_Double.java
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#Vanilla
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-Align16
Passed: compiler/loopopts/superword/SumRed_Double.java
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array-AlignVector
Passed: compiler/loopopts/superword/SumRedAbsNeg_Float.java
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestMemorySegment.java#double-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#char-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#float-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegmentMainLoopAlignment.java
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-A
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#native
Passed: compiler/loopopts/superword/TestMemorySegment.java#native-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#short-array
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-U
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-AlignVector
Passed: compiler/loopopts/superword/TestNegBaseOffset.java
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#Vanilla
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithFlags
Passed: compiler/loopopts/superword/TestMultiversionRemoveUselessSlowLoop.java
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithMoreFlags
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-VerifyAlignVector
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-VerifyAlignVector
Passed: compiler/loopopts/superword/TestSearchAlignment.java
Passed: compiler/loopopts/superword/TestParallelReduction.java
Passed: compiler/loopopts/superword/TestPeeledReductionNode.java
Passed: compiler/loopopts/superword/TestReductionWithLoopVariantUse.java
Passed: compiler/loopopts/superword/TestPickFirstMemoryState.java
Passed: compiler/loopopts/superword/TestPickLastMemoryState.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize16-Unaligned
Passed: compiler/loopopts/superword/TestWronglyMarkedReduction.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Unaligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize32-Aligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Aligned
Passed: compiler/loopopts/superword/TestVectorizeTypeConversionWithUnsafe.java
Passed: compiler/loopopts/superword/TestVectorizationWithInvariant.java
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector
Passed: compiler/vectorapi/TestIsLoadVector.java
Passed: compiler/loopopts/superword/TestVectorFPReduction.java
Passed: compiler/vectorapi/Test8303508.java
Passed: compiler/vectorapi/TestLongVectorNeg.java
Passed: compiler/vectorapi/TestBiMorphicMismatchedMemSegment.java
Passed: compiler/vectorapi/Test8259353.java
Passed: compiler/loopopts/superword/SumRedSqrt_Double.java
Passed: compiler/vectorapi/TestLoopStoreVector.java#id0
Passed: compiler/vectorapi/TestNoInline.java
Passed: compiler/vectorapi/TestLoopStoreVector.java#id1
Passed: compiler/vectorapi/TestIntrinsicBailOut.java#id0
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-NoTieredCompilation-Xbatch
Passed: compiler/vectorapi/Test8278948.java
Passed: compiler/vectorapi/TestVectorErgonomics.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#AlignVector
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#StoreToLoadForwardingFailureDetection
Passed: compiler/vectorapi/VectorBoxExpandTest.java
Passed: compiler/vectorapi/TestVectorShuffleIota.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#vanilla
Passed: compiler/vectorapi/TestVectorAddMulReduction.java
Passed: compiler/loopopts/superword/TestMovingLoadBeforeStore.java
Passed: compiler/vectorapi/TestVectorShiftImm.java
Passed: compiler/vectorapi/VectorFPtoIntCastTest.java
Passed: compiler/vectorapi/TestVectorShuffleIotaByte.java
Passed: compiler/vectorapi/TestReverseByteTransforms.java
Passed: compiler/vectorapi/VectorCommutativeOperSharingTest.java
Passed: compiler/vectorapi/VectorMaskCastTest.java
Passed: compiler/vectorapi/VectorMemoryAlias.java
Passed: compiler/loopopts/superword/TestEquivalentInvariants.java
Passed: compiler/vectorapi/TestTwoVectorPermute.java
Passed: compiler/c2/cr6340864/TestDoubleVect.java
Passed: compiler/c2/cr6340864/TestFloatVect.java
Passed: compiler/vectorapi/TestRawOopAtSafepoint.java
Passed: compiler/c2/cr6340864/TestByteVect.java
Passed: compiler/c2/cr6340864/TestIntVectRotate.java
Passed: compiler/c2/irTests/blackhole/BlackholeHotInlineTest.java
Passed: compiler/c2/cr6340864/TestLongVectRotate.java
Passed: compiler/c2/irTests/blackhole/BlackholeStoreStoreEATest.java
Passed: compiler/c2/cr6340864/TestIntVect.java
Passed: compiler/c2/irTests/blackhole/BlackholeLoadOptoTest.java
Passed: compiler/c2/irTests/blackhole/BlackholeSyncEATest.java
Passed: compiler/c2/cr6340864/TestShortVect.java
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id0
Passed: compiler/c2/irTests/igvn/TestCombineAddPWithConstantOffsets.java
Passed: compiler/c2/cr6340864/TestLongVect.java
Passed: compiler/c2/irTests/igvn/TestCleanMemPhi.java
Passed: compiler/vectorapi/VectorGatherMaskFoldingTest.java
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id1
Passed: compiler/c2/irTests/igvn/TestLoadNIdeal.java
Passed: compiler/c2/irTests/loopOpts/LoopIdealizationTests.java
Passed: compiler/c2/irTests/igvn/TestIntegerMulRing.java
Passed: compiler/c2/irTests/scalarReplacement/ScalarReplacementTests.java
Passed: compiler/vectorapi/VectorCastShape128Test.java
Passed: compiler/c2/irTests/stringopts/TestNegativeArraySize.java
Passed: compiler/vectorapi/VectorCastShape64Test.java
Passed: compiler/c2/irTests/AddINodeIdealizationTests.java
Passed: compiler/vectorapi/VectorSaturatedOperationsTest.java
Passed: compiler/c2/irTests/stable/StablePrimFinalTest.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage2.java
Passed: compiler/vectorapi/VectorMultiplyOpt.java
Passed: compiler/c2/irTests/AddLNodeIdealizationTests.java
Passed: compiler/c2/irTests/AndLNodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StableRefFinalTest.java
Passed: compiler/c2/irTests/AndINodeIdealizationTests.java
Passed: compiler/c2/irTests/CMoveLConstants.java
Passed: compiler/c2/irTests/stable/StableRefPlainTest.java
Passed: compiler/c2/irTests/stable/StablePrimPlainTest.java
Passed: compiler/c2/irTests/DeMorganLawLongTests.java
Passed: compiler/c2/irTests/DeMorganLawIntTests.java
Passed: compiler/c2/irTests/DivINodeIdealizationTests.java
Passed: compiler/c2/irTests/DivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/LShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/ConstructorBarriers.java
Passed: compiler/c2/irTests/LShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StableRefArrayTest.java
Passed: compiler/c2/irTests/MaxMinINodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StablePrimArrayTest.java
Passed: compiler/c2/irTests/ModFNodeTests.java
Passed: compiler/c2/irTests/ModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/ModDNodeTests.java
Passed: compiler/c2/irTests/ModINodeIdealizationTests.java
Passed: compiler/c2/irTests/MulINodeIdealizationTests.java
Passed: compiler/c2/irTests/MulHFNodeIdealizationTests.java
Passed: compiler/c2/irTests/MulLNodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StableRefVolatileTest.java
Passed: compiler/c2/irTests/RShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/RShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/CmpUWithZero.java
Passed: compiler/c2/irTests/OrINodeIdealizationTests.java
Passed: compiler/c2/irTests/OrLNodeIdealizationTests.java
Passed: compiler/c2/irTests/SubINodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StablePrimVolatileTest.java
Passed: compiler/c2/irTests/SubLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestAutoVecCountingDownLoop.java
Passed: compiler/c2/irTests/TestAutoVectorization2DArray.java
Passed: compiler/c2/irTests/TestArrayElementTypeLoad.java
Passed: compiler/c2/irTests/TestBackToBackIfs.java
Passed: compiler/c2/irTests/TestBackToBackMustBeNotNull.java
Passed: compiler/c2/irTests/TestConv2BExpansion.java
Passed: compiler/c2/irTests/TestConvI2LCastLongLoop.java
Passed: compiler/c2/irTests/TestCMoveCCP.java
Passed: compiler/c2/irTests/TestCountedLoopPhiValue.java
Passed: compiler/c2/irTests/TestDebugInfo.java
Passed: compiler/c2/irTests/TestEnumFinalFold.java
Passed: compiler/c2/irTests/TestGetAndAdd.java
Passed: compiler/c2/irTests/TestFPConversion.java
Passed: compiler/c2/irTests/TestFewIterationsCountedLoop.java
Passed: compiler/c2/irTests/TestFPComparison.java
Passed: compiler/c2/irTests/TestIRLShiftIdeal_XPlusX_LShiftC.java
Passed: compiler/c2/irTests/TestCountedLoopSafepoint.java
Passed: compiler/c2/irTests/TestIterativeEA.java
Passed: compiler/c2/irTests/TestIRAbs.java
Passed: compiler/c2/irTests/TestMulNodeIdealization.java
Passed: compiler/c2/irTests/TestMinMaxIdentities.java
Passed: compiler/c2/irTests/TestPadding.java
Passed: compiler/c2/irTests/TestOptimizeUnstableIf.java
Passed: compiler/c2/irTests/TestIfMinMax.java
Passed: compiler/c2/irTests/TestPhiDuplicatedConversion.java
Passed: compiler/c2/irTests/TestIRFma.java
Passed: compiler/c2/irTests/TestPushAddThruCast.java
Passed: compiler/c2/irTests/TestScalarReplacement.java
Passed: compiler/c2/irTests/TestRemixAddressExpressions.java
Passed: compiler/c2/irTests/TestPostParseCallDevirtualization.java
Passed: compiler/c2/irTests/TestLongRangeChecks.java
Passed: compiler/c2/irTests/gc/ReferenceClearTests.java
Passed: compiler/c2/irTests/TestScheduleSmallMethod.java
Passed: compiler/c2/irTests/gc/ReferenceRefersToTests.java
Passed: compiler/c2/irTests/TestShiftAndMask.java
Passed: compiler/c2/irTests/TestSkeletonPredicates.java
Passed: compiler/c2/irTests/TestLSMMissedEmptyLoop.java
Passed: compiler/c2/irTests/TestSpecialCasesOf_AMinusB_Plus_CMinusD_InAddIdeal.java
Passed: compiler/c2/irTests/TestVectorizationMultiInvar.java
Passed: compiler/c2/irTests/TestTestRemovalPeephole.java
Passed: compiler/c2/irTests/TestStripMiningDropsSafepoint.java
Passed: compiler/c2/irTests/UDivINodeIdealizationTests.java
Passed: compiler/c2/irTests/TestTypeSpeculation.java
Passed: compiler/c2/irTests/ConvF2HFIdealizationTests.java
Passed: compiler/c2/irTests/TestSuperwordFailsUnrolling.java
Passed: compiler/c2/irTests/UModINodeIdealizationTests.java
Passed: compiler/c2/irTests/UModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/UDivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestUnsignedComparison.java
Passed: compiler/c2/irTests/URShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/TestFloat16ScalarOperations.java
Passed: compiler/c2/irTests/URShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/XorINodeIdealizationTests.java
Passed: compiler/c2/irTests/XorLNodeIdealizationTests.java
Passed: compiler/vectorization/runner/ArrayCopyTest.java
Passed: compiler/vectorization/runner/ArrayIndexFillTest.java
Passed: compiler/vectorization/runner/BasicBooleanOpTest.java
Passed: compiler/vectorization/runner/ArrayUnsafeOpTest.java
Passed: compiler/vectorization/runner/BasicByteOpTest.java
Passed: compiler/vectorization/runner/BasicCharOpTest.java
Passed: compiler/vectorization/runner/ArrayShiftOpTest.java
Passed: compiler/vectorization/runner/BasicIntOpTest.java
Passed: compiler/vectorization/runner/BasicLongOpTest.java
Passed: compiler/vectorization/TestAbsCharVector.java
Passed: compiler/vectorization/TestCMoveWithoutBoolPack.java
Passed: compiler/vectorization/runner/BasicShortOpTest.java
Passed: compiler/c2/irTests/ProfileAtTypeCheck.java
Passed: compiler/vectorization/runner/LoopControlFlowTest.java
Passed: compiler/vectorization/runner/LoopArrayIndexComputeTest.java
Passed: compiler/vectorization/runner/LoopLiveOutNodesTest.java
Passed: compiler/vectorization/TestMemoryVectorMismatched.java
Passed: compiler/vectorization/runner/ArrayInvariantFillTest.java
Passed: compiler/vectorization/TestNarrowedIntegerReverseBytes.java
Passed: compiler/vectorization/runner/StripMinedLoopTest.java
Passed: compiler/vectorization/TestNaNVector.java
Passed: compiler/vectorization/runner/LoopRangeStrideTest.java
Passed: compiler/vectorization/TestMaskedVectors.java
Passed: compiler/vectorization/TestOptionVectorize.java
Passed: compiler/vectorization/TestMacroLogicVector.java
Passed: compiler/vectorization/TestPopCountVector.java
Passed: compiler/vectorization/TestOverlappingMismatchedAccesses.java
Passed: compiler/vectorization/TestReplicateAtConv.java
Passed: compiler/vectorization/runner/LoopReductionOpTest.java
Passed: compiler/vectorization/runner/MultipleLoopsTest.java
Passed: compiler/vectorization/TestFloat16ToFloatConv.java
Passed: compiler/vectorization/TestComplexAddrExpr.java
Passed: compiler/vectorization/TestSmallVectorPopIndex.java
Passed: compiler/vectorization/TestUnexpectedLoadOrdering.java
Passed: compiler/vectorization/TestReplicateLoopIV.java
Passed: compiler/vectorization/TestVectorUnalignedOffset.java
Passed: compiler/vectorization/TestRotateByteAndShortVector.java
Passed: compiler/vectorization/TestOffsetSorting.java
Passed: compiler/vectorization/TestVectorizationNegativeScale.java
Passed: compiler/vectorization/runner/BasicFloatOpTest.java
Passed: compiler/vectorization/TestOptionVectorizeIR.java
Passed: compiler/vectorization/TestForEachRem.java
Passed: compiler/vectorization/TestSubwordReverseBytes.java
Passed: compiler/vectorization/TestVectorsNotSavedAtSafepoint.java
Passed: compiler/vectorization/TestBufferVectorization.java
Passed: compiler/vectorization/runner/BasicDoubleOpTest.java
Passed: compiler/vectorization/TestVectorZeroCount.java
--------------------------------------------------
TEST: compiler/vectorapi/TestMaskedMacroLogicVector.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.857 seconds
messages:
command: build compiler.vectorapi.TestMaskedMacroLogicVector
reason: Named class compiled on demand
started: Wed Apr 16 18:42:55 IST 2025
Test directory:
  compile: compiler.vectorapi.TestMaskedMacroLogicVector
finished: Wed Apr 16 18:42:56 IST 2025
elapsed time (seconds): 0.857

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.856 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java
reason: .class file out of date or does not exist
started: Wed Apr 16 18:42:55 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 8
Process id: 1485395
finished: Wed Apr 16 18:42:56 IST 2025
elapsed time (seconds): 0.856
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/vectorapi/TestMaskedMacroLogicVector.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/test/lib
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/scratch/6 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp \
        -J-Dtest.vm.opts='-XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -J-Dtest.tool.vm.opts='-J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -J-Dtest.name=compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/vectorapi/TestMaskedMacroLogicVector.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2 \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2 \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/vectorapi/TestMaskedMacroLogicVector.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2 \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 warning

ACTION: driver -- Failed. Execution failed: `main' threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
REASON: User specified action: run driver compiler.vectorapi.TestMaskedMacroLogicVector 
TIME:   273.945 seconds
messages:
command: driver compiler.vectorapi.TestMaskedMacroLogicVector
reason: User specified action: run driver compiler.vectorapi.TestMaskedMacroLogicVector 
started: Wed Apr 16 18:42:56 IST 2025
Mode: othervm [test requires --enable-preview, test requires non-default system module]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1495867
finished: Wed Apr 16 18:47:30 IST 2025
elapsed time (seconds): 273.945
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -2814324458067769449
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-2814324458067769449" to command line.
IR verification disabled due to the following reason(s):
- Using non-whitelisted JTreg VM or Javaoptions flag(s):
  - DeoptimizeALot
  - SafepointALot

Skip Flag VM due to not performing IR verification.
Run Test VM - [-XX:-TieredCompilation, -XX:UseAVX=3, --add-modules=jdk.incubator.vector, -XX:CompileThresholdScaling=0.3]:
Command line: [/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -cp /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp -XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot -Dir.framework.server.port=39527 -XX:-TieredCompilation -XX:UseAVX=3 --add-modules=jdk.incubator.vector -XX:CompileThresholdScaling=0.3 -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.vectorapi.TestMaskedMacroLogicVector ]
[2025-04-16T13:12:57.322712220Z] Gathering output for process 1495933
[2025-04-16T13:12:57.406189123Z] Waiting for completion for process 1495933
[2025-04-16T13:17:30.049494155Z] Waiting for completion finished for process 1495933
Output and diagnostic info for process 1495933 was saved into 'pid-1495933-output.log'

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector

TestFramework test VM exited with code 1

Command Line:
/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -DReproduce=true -cp /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp -XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot -Dir.framework.server.port=39527 -XX:-TieredCompilation -XX:UseAVX=3 --add-modules=jdk.incubator.vector -XX:CompileThresholdScaling=0.3 -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.vectorapi.TestMaskedMacroLogicVector


Error Output
------------
OpenJDK 64-Bit Server VM warning: UseAVX=3 requires UseSSE=4, setting it to UseAVX=0
WARNING: Using incubator modules: jdk.incubator.vector
Exception in thread "main" compiler.lib.ir_framework.shared.TestRunException: 

Test Failures (5)
-----------------
Custom Run Test: @Run: kernel_testInt5_Int512 - @Test: testInt5_Int512:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public void compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt5_Int512()
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:87)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:867)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 4 more
Caused by: java.lang.AssertionError: testInt5: at #48: r=0, expected = -1005530615 = intFunc5(-463931895,-971648081,-1950393372,false)
	at compiler.vectorapi.TestMaskedMacroLogicVector.verifyInt5(TestMaskedMacroLogicVector.java:358)
	at compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt5_Int512(TestMaskedMacroLogicVector.java:732)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 6 more


Custom Run Test: @Run: kernel_testInt6_Int256 - @Test: testInt6_Int256:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public void compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt6_Int256()
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:87)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:867)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 4 more
Caused by: java.lang.AssertionError: testInt6: at #115: r=0, expected = 167917568 = intFunc6(193132650,1044593553,-1215846776,false)
	at compiler.vectorapi.TestMaskedMacroLogicVector.verifyInt6(TestMaskedMacroLogicVector.java:406)
	at compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt6_Int256(TestMaskedMacroLogicVector.java:747)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 6 more


Custom Run Test: @Run: kernel_testInt6_Int128 - @Test: testInt6_Int128:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public void compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt6_Int128()
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:87)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:867)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 4 more
Caused by: java.lang.AssertionError: testInt6: at #154: r=0, expected = 671290704 = intFunc6(1059552766,1753454416,1690677169,false)
	at compiler.vectorapi.TestMaskedMacroLogicVector.verifyInt6(TestMaskedMacroLogicVector.java:406)
	at compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt6_Int128(TestMaskedMacroLogicVector.java:740)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 6 more


Custom Run Test: @Run: kernel_testInt2_Int128 - @Test: testInt2_Int128:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public void compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt2_Int128()
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:87)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:867)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 4 more
Caused by: java.lang.AssertionError: testInt2: at #20: r=1149551672, expected = 571605506 = intFunc2(1721157178,-995242755,1374588751,false)
	at compiler.vectorapi.TestMaskedMacroLogicVector.verifyInt2(TestMaskedMacroLogicVector.java:205)
	at compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt2_Int128(TestMaskedMacroLogicVector.java:674)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 6 more


Custom Run Test: @Run: kernel_testInt7_Int512 - @Test: testInt7_Int512:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public void compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt7_Int512()
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:87)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:867)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 4 more
Caused by: java.lang.AssertionError: testInt7: at #161: r=0, expected = 1171719798 = intFunc7(1171719798,-886376636,-691661982,false)
	at compiler.vectorapi.TestMaskedMacroLogicVector.verifyInt7(TestMaskedMacroLogicVector.java:454)
	at compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt7_Int512(TestMaskedMacroLogicVector.java:776)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 6 more



	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:903)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.TestVMProcess.throwTestVMException(TestVMProcess.java:245)
	at compiler.lib.ir_framework.driver.TestVMProcess.checkTestVMExitCode(TestVMProcess.java:226)
	at compiler.lib.ir_framework.driver.TestVMProcess.<init>(TestVMProcess.java:76)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:787)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:758)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:351)
	at compiler.lib.ir_framework.TestFramework.runWithFlags(TestFramework.java:248)
	at compiler.vectorapi.TestMaskedMacroLogicVector.main(TestMaskedMacroLogicVector.java:843)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/scratch/6 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -Dtest.tool.vm.opts='-J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -Dtest.name=compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/vectorapi/TestMaskedMacroLogicVector.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2 \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/2 \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/compiler/vectorapi/TestMaskedMacroLogicVector.d/driver.0.jta

TEST RESULT: Failed. Execution failed: `main' threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
--------------------------------------------------
Test results: passed: 325; failed: 1; excluded: 18; did not meet platform requirements: 82
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/hotspot/jtreg:hotspot_vector_1           426   325     1     0   100 <<
==============================
TEST FAILURE

Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_2', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_2
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_2

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Passed: compiler/intrinsics/string/TestStringIndexOfCharIntrinsics.java
Passed: compiler/intrinsics/string/TestStringConstruction.java
Passed: compiler/intrinsics/string/TestStringEqualsBadLength.java
Passed: compiler/intrinsics/string/TestCopyValueOf.java
Passed: compiler/intrinsics/string/TestStringIntrinsicMemoryFlow.java
Passed: compiler/intrinsics/Test6982370.java
Passed: compiler/intrinsics/Test8215792.java
Passed: compiler/intrinsics/IntrinsicDisabledTest.java
Passed: compiler/intrinsics/Test8005419.java
Passed: compiler/intrinsics/string/TestStringIntrinsicRangeChecks.java
Passed: compiler/intrinsics/TestArrayGuardWithInterfaces.java
Passed: compiler/intrinsics/IntrinsicAvailableTest.java
Passed: compiler/intrinsics/TestArraysHashCode.java
Passed: compiler/intrinsics/TestContinuationPinningAndEA.java
Passed: compiler/intrinsics/Test8237524.java
Passed: compiler/intrinsics/TestCheckIndex.java
Passed: compiler/intrinsics/string/TestStringIntrinsics2.java
Passed: compiler/intrinsics/TestReferenceGetWithNull.java
Passed: compiler/intrinsics/string/TestStringConstructionIntrinsics.java#id0
Passed: compiler/intrinsics/TestReferenceRefersTo.java
Passed: compiler/intrinsics/string/TestHasNegatives.java#id0
Passed: compiler/intrinsics/TestCompareUnsigned.java
Passed: compiler/intrinsics/string/TestStringUTF16IntrinsicRangeChecks.java
Passed: compiler/codegen/Test6935535.java#id1
Passed: compiler/codegen/aes/Test8292158.java
Passed: compiler/intrinsics/string/TestCountPositives.java#id0
Passed: compiler/intrinsics/TestRotate.java
Passed: compiler/intrinsics/TestIntegerUnsignedDivMod.java
Passed: compiler/codegen/aes/Test8299817.java
Passed: compiler/intrinsics/bigInteger/TestMulAdd.java
Passed: compiler/intrinsics/string/TestEncodeIntrinsics.java
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLenReturnProfile.java
Passed: compiler/codegen/Test6875866.java
Passed: compiler/intrinsics/bigInteger/TestSquareToLen.java
Passed: compiler/codegen/aes/TestCipherBlockChainingEncrypt.java
Passed: compiler/intrinsics/base64/TestBase64.java
Passed: compiler/codegen/Test6935535.java#id0
Passed: compiler/intrinsics/bigInteger/MontgomeryMultiplyTest.java
Passed: compiler/intrinsics/bmi/verifycode/AndnTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BzhiTestI2L.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestI.java
Passed: compiler/intrinsics/bmi/verifycode/AndnTestI.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestL.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestI.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestI.java
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestL.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestL.java
Passed: compiler/intrinsics/bigInteger/TestShift.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestL.java
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLen.java
Passed: compiler/intrinsics/string/TestStringIntrinsics.java
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestI.java
Passed: compiler/intrinsics/TestLongUnsignedDivMod.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestI.java
Passed: compiler/intrinsics/bmi/TestBlsiI.java
Passed: compiler/intrinsics/bmi/TestBlsmskI.java
Passed: compiler/intrinsics/bmi/TestLzcntI.java
Passed: compiler/intrinsics/bmi/TestBlsiL.java
Passed: compiler/intrinsics/bmi/TestBlsrI.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id0
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id1
Passed: compiler/intrinsics/bmi/TestLzcntL.java
Passed: compiler/intrinsics/bmi/TestBlsmskL.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id2
Passed: compiler/intrinsics/math/Test8210461.java
Passed: compiler/intrinsics/bmi/TestTzcntI.java
Passed: compiler/intrinsics/bmi/TestBlsrL.java
Passed: compiler/intrinsics/bmi/TestTzcntL.java
Passed: compiler/intrinsics/math/TestMinMaxIntrinsics.java
Passed: compiler/intrinsics/bmi/TestAndnI.java
Passed: compiler/intrinsics/bmi/TestAndnL.java
Passed: compiler/intrinsics/math/TestPow2Opt.java
Passed: compiler/intrinsics/math/TestPow0Dot5Opt.java
Passed: compiler/intrinsics/math/TestFpMinMaxIntrinsics.java
Passed: compiler/intrinsics/TestBitShuffleOpers.java
Passed: compiler/intrinsics/klass/TestIsPrimitive.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactLongTest.java
Passed: compiler/intrinsics/math/TestMinMaxOpt.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactIntTest.java
Passed: compiler/intrinsics/math/TestMinMaxInlining.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactIntTest.java
Passed: compiler/intrinsics/mathexact/AddExactICondTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoadTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/AddExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/AddExactLNonConstantTest.java
Passed: compiler/intrinsics/math/MaxMinOptimizeTest.java
Passed: compiler/intrinsics/mathexact/CompareTest.java
Passed: compiler/intrinsics/klass/CastNullCheckDroppingsTest.java
Passed: compiler/intrinsics/bmi/TestBzhiI2L.java
Passed: compiler/codegen/aes/TestAESMain.java
Passed: compiler/intrinsics/mathexact/MulExactICondTest.java
Passed: compiler/intrinsics/mathexact/GVNTest.java
Passed: compiler/intrinsics/mathexact/AddExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/AddExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/IncExactITest.java
Passed: compiler/intrinsics/mathexact/IncExactLTest.java
Passed: compiler/intrinsics/mathexact/AddExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactILoadTest.java
Passed: compiler/intrinsics/mathexact/NegExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/DecExactITest.java
Passed: compiler/intrinsics/mathexact/NegExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/NestedMathExactTest.java
Passed: compiler/intrinsics/mathexact/SplitThruPhiTest.java
Passed: compiler/intrinsics/mathexact/SubExactICondTest.java
Passed: compiler/intrinsics/mathexact/DecExactLTest.java
Passed: compiler/intrinsics/mathexact/MulExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoadTest.java
Passed: compiler/intrinsics/mathexact/NegExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/LongMulOverflowTest.java
Passed: compiler/intrinsics/mathexact/SubExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactILoadTest.java
Passed: compiler/intrinsics/mathexact/MulExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactLConstantTest.java
Passed: compiler/intrinsics/object/TestHashCode.java
Passed: compiler/intrinsics/mathexact/SubExactIRepeatTest.java
Passed: compiler/intrinsics/SortingDeoptimizationTest.java
Passed: compiler/intrinsics/math/TestSignumIntrinsic.java
Passed: compiler/intrinsics/mathexact/SubExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactILoopDependentTest.java
Passed: compiler/intrinsics/object/TestClone.java
Passed: compiler/intrinsics/mathexact/MulExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoopDependentTest.java
Passed: compiler/loopopts/superword/Vec_MulAddS2I.java
Passed: compiler/intrinsics/unsafe/TestCAEAntiDep.java
Passed: compiler/intrinsics/unsafe/TestUnsafeMismatchedArrayFieldAccess.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1Intrinsics.java
Passed: compiler/intrinsics/unsafe/UnsafeGetAddressTest.java
Passed: compiler/intrinsics/sha/sanity/TestMD5Intrinsics.java
Passed: compiler/intrinsics/unsafe/TestUnsafeUnalignedMismatchedAccesses.java
Passed: compiler/intrinsics/sha/sanity/TestMD5MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA256Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/UnsafeTwoCASLong.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3Intrinsics.java
Passed: compiler/intrinsics/zip/TestFpRegsABI.java
Passed: compiler/intrinsics/unsafe/AllocateUninitializedArray.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3MultiBlockIntrinsics.java
Passed: compiler/intrinsics/zip/TestAdler32.java
Passed: compiler/intrinsics/zip/TestCRC32C.java
Passed: compiler/intrinsics/zip/TestCRC32.java
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id1
Passed: compiler/intrinsics/unsafe/DirectByteBufferTest.java
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id0
Passed: compiler/intrinsics/sha/sanity/TestSHA256MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/TestDigest.java
Test results: passed: 163; skipped: 5; excluded: 1; did not meet platform requirements: 28
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_2
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
   jtreg:test/hotspot/jtreg:hotspot_vector_2           192   158     0     0    34   
==============================
TEST SUCCESS

Finished building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/:jdk_vector', will run:
* jtreg:test/jdk:jdk_vector
Clean up dirs for jtreg_test_jdk_jdk_vector

Running test 'jtreg:test/jdk:jdk_vector'
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
--------------------------------------------------
TEST: jdk/incubator/vector/DoubleMaxVectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   2.043 seconds
messages:
command: build DoubleMaxVectorTests
reason: Named class compiled on demand
started: Wed Apr 16 18:53:42 IST 2025
Test directory:
  compile: DoubleMaxVectorTests
finished: Wed Apr 16 18:53:44 IST 2025
elapsed time (seconds): 2.043

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   2.042 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/DoubleMaxVectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 18:53:42 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 4
Process id: 1528820
finished: Wed Apr 16 18:53:44 IST 2025
elapsed time (seconds): 2.042
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/DoubleMaxVectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/4 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/DoubleMaxVectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/DoubleMaxVectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/DoubleMaxVectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/DoubleMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/DoubleMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/DoubleMaxVectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/DoubleMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/DoubleMaxVectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation DoubleMaxVectorTests 
TIME:   123.424 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation DoubleMaxVectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation DoubleMaxVectorTests 
started: Wed Apr 16 18:53:44 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1531354
finished: Wed Apr 16 18:55:47 IST 2025
elapsed time (seconds): 123.424
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 7827135535102336540
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=7827135535102336540" to command line.
test DoubleMaxVectorTests.ABSDoubleMaxVectorTests(double[-i * 5]): success [606ms]
test DoubleMaxVectorTests.ABSDoubleMaxVectorTests(double[i * 5]): success [4ms]
test DoubleMaxVectorTests.ABSDoubleMaxVectorTests(double[i + 1]): success [48ms]
test DoubleMaxVectorTests.ABSDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [3ms]
test DoubleMaxVectorTests.ABSDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [2ms]
test DoubleMaxVectorTests.ABSDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [2ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[-i * 5], mask[i % 2]): success [217ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[i * 5], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[i + 1], mask[i % 2]): success [67ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(AbstractVectorTest$1@27211610, mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[-i * 5], mask[true]): success [1ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[i * 5], mask[true]): success [1ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[i + 1], mask[true]): success [1ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(AbstractVectorTest$1@27211610, mask[true]): success [46ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[cornerCaseValue(i)], mask[true]): success [1ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[-i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[i + 1], mask[false]): success [0ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(AbstractVectorTest$1@27211610, mask[false]): success [0ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[cornerCaseValue(i)], mask[false]): success [0ms]
test DoubleMaxVectorTests.ACOSDoubleMaxVectorTests(double[-i * 5]): success [120ms]
test DoubleMaxVectorTests.ACOSDoubleMaxVectorTests(double[i * 5]): success [2ms]
test DoubleMaxVectorTests.ACOSDoubleMaxVectorTests(double[i + 1]): success [65ms]
test DoubleMaxVectorTests.ACOSDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test DoubleMaxVectorTests.ACOSDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [2ms]
test DoubleMaxVectorTests.ACOSDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [6ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTests(double[-i * 5], double[i * 5]): success [221ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTests(double[-i * 5], double[i + 1]): success [3ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [60ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTests(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5]): success [16ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [26ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610, mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610, mask[true]): success [7ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610, mask[false]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [134ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [82ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[true]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [12ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[false]): success [2ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [2ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTests(double[-i * 5]): success [85ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTests(double[i * 5]): success [82ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTests(double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[-i * 5], mask[i % 2]): success [71ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[i * 5], mask[i % 2]): success [84ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[i + 1], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(AbstractVectorTest$1@27211610, mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[-i * 5], mask[true]): success [1ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[i * 5], mask[true]): success [1ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[i + 1], mask[true]): success [1ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(AbstractVectorTest$1@27211610, mask[true]): success [1ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [1ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[-i * 5], mask[false]): success [2ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[i * 5], mask[false]): success [1ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[i + 1], mask[false]): success [1ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(AbstractVectorTest$1@27211610, mask[false]): success [1ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [29ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTests(double[-i * 5]): success [10ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTests(double[i * 5]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTests(double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[-i * 5], mask[i % 2]): success [9ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[i * 5], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[i + 1], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(AbstractVectorTest$1@27211610, mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[-i * 5], mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[i * 5], mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[i + 1], mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(AbstractVectorTest$1@27211610, mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[-i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[i + 1], mask[false]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(AbstractVectorTest$1@27211610, mask[false]): success [1ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [0ms]
test DoubleMaxVectorTests.ASINDoubleMaxVectorTests(double[-i * 5]): success [122ms]
test DoubleMaxVectorTests.ASINDoubleMaxVectorTests(double[i * 5]): success [3ms]
test DoubleMaxVectorTests.ASINDoubleMaxVectorTests(double[i + 1]): success [66ms]
test DoubleMaxVectorTests.ASINDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.ASINDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.ASINDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ATAN2DoubleMaxVectorTests(double[-i * 5], double[i * 5]): success [180ms]
test DoubleMaxVectorTests.ATAN2DoubleMaxVectorTests(double[-i * 5], double[i + 1]): success [30ms]
test DoubleMaxVectorTests.ATAN2DoubleMaxVectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [74ms]
test DoubleMaxVectorTests.ATAN2DoubleMaxVectorTests(double[-i * 5], AbstractVectorTest$1@27211610): success [3ms]
test DoubleMaxVectorTests.ATAN2DoubleMaxVectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [2ms]
test DoubleMaxVectorTests.ATANDoubleMaxVectorTests(double[-i * 5]): success [68ms]
test DoubleMaxVectorTests.ATANDoubleMaxVectorTests(double[i * 5]): success [2ms]
test DoubleMaxVectorTests.ATANDoubleMaxVectorTests(double[i + 1]): success [67ms]
test DoubleMaxVectorTests.ATANDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.ATANDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.ATANDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [1ms]
test DoubleMaxVectorTests.BroadcastDoubleMaxVectorTests(double[-i * 5]): success [81ms]
test DoubleMaxVectorTests.BroadcastDoubleMaxVectorTests(double[i * 5]): success [37ms]
test DoubleMaxVectorTests.BroadcastDoubleMaxVectorTests(double[i + 1]): success [77ms]
test DoubleMaxVectorTests.BroadcastDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.BroadcastDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.BroadcastDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [4ms]
test DoubleMaxVectorTests.BroadcastLongDoubleMaxVectorTestsSmokeTest(double[-i * 5]): success [3ms]
test DoubleMaxVectorTests.BroadcastLongDoubleMaxVectorTestsSmokeTest(double[i * 5]): success [2ms]
test DoubleMaxVectorTests.BroadcastLongDoubleMaxVectorTestsSmokeTest(double[i + 1]): success [2ms]
test DoubleMaxVectorTests.BroadcastLongDoubleMaxVectorTestsSmokeTest(double[cornerCaseValue(i)]): success [2ms]
test DoubleMaxVectorTests.CBRTDoubleMaxVectorTests(double[-i * 5]): success [105ms]
test DoubleMaxVectorTests.CBRTDoubleMaxVectorTests(double[i * 5]): success [56ms]
test DoubleMaxVectorTests.CBRTDoubleMaxVectorTests(double[i + 1]): success [65ms]
test DoubleMaxVectorTests.CBRTDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.CBRTDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [2ms]
test DoubleMaxVectorTests.CBRTDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.COSDoubleMaxVectorTests(double[-i * 5]): success [58ms]
test DoubleMaxVectorTests.COSDoubleMaxVectorTests(double[i * 5]): success [2ms]
test DoubleMaxVectorTests.COSDoubleMaxVectorTests(double[i + 1]): success [57ms]
test DoubleMaxVectorTests.COSDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.COSDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [2ms]
test DoubleMaxVectorTests.COSDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [2ms]
test DoubleMaxVectorTests.COSHDoubleMaxVectorTests(double[-i * 5]): success [120ms]
test DoubleMaxVectorTests.COSHDoubleMaxVectorTests(double[i * 5]): success [2ms]
test DoubleMaxVectorTests.COSHDoubleMaxVectorTests(double[i + 1]): success [66ms]
test DoubleMaxVectorTests.COSHDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.COSHDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [3ms]
test DoubleMaxVectorTests.COSHDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTests(double[-i * 5], double[i * 5]): success [166ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTests(double[-i * 5], double[i + 1]): success [2ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [60ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTests(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [38ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [72ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [1ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[true]): success [1ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[false]): success [1ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i], double[i]): success [319ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i], double[i - length / 2]): success [139ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i], double[i + 1]): success [38ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i], double[i - 2]): success [38ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i], double[zigZag(i)]): success [38ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i], double[cornerCaseValue(i)]): success [40ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - length / 2], double[i]): success [40ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - length / 2], double[i - length / 2]): success [42ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - length / 2], double[i + 1]): success [68ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - length / 2], double[i - 2]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - length / 2], double[zigZag(i)]): success [34ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i + 1], double[i]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i + 1], double[i - length / 2]): success [34ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i + 1], double[i + 1]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i + 1], double[i - 2]): success [42ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i + 1], double[zigZag(i)]): success [42ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i + 1], double[cornerCaseValue(i)]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - 2], double[i]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - 2], double[i - length / 2]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - 2], double[i + 1]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - 2], double[i - 2]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - 2], double[zigZag(i)]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - 2], double[cornerCaseValue(i)]): success [65ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[zigZag(i)], double[i]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[zigZag(i)], double[i - length / 2]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[zigZag(i)], double[i + 1]): success [42ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[zigZag(i)], double[i - 2]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[zigZag(i)], double[zigZag(i)]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[cornerCaseValue(i)], double[i]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [42ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[cornerCaseValue(i)], double[i + 1]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[cornerCaseValue(i)], double[i - 2]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [35ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[i % 2]): success [15ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[i % 2]): success [62ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)], mask[i % 2]): success [5ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[true]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[true]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[true]): success [8ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[true]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[true]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[true]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[true]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[true]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[true]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[true]): success [10ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[true]): success [1ms]
test DoubleMaxVectorTests.EQDou

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

nerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.getDoubleMaxVectorTests(double[-i * 5]): success [3ms]
test DoubleMaxVectorTests.getDoubleMaxVectorTests(double[i * 5]): success [2ms]
test DoubleMaxVectorTests.getDoubleMaxVectorTests(double[i + 1]): success [63ms]
test DoubleMaxVectorTests.getDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.getDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.getDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.hashCodeDoubleMaxVectorTestsSmokeTest(double[-i * 5]): success [36ms]
test DoubleMaxVectorTests.hashCodeDoubleMaxVectorTestsSmokeTest(double[i * 5]): success [1ms]
test DoubleMaxVectorTests.hashCodeDoubleMaxVectorTestsSmokeTest(double[i + 1]): success [1ms]
test DoubleMaxVectorTests.hashCodeDoubleMaxVectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [1ms]
test DoubleMaxVectorTests.hashCodeDoubleMaxVectorTestsSmokeTest(AbstractVectorTest$1@27211610): success [1ms]
test DoubleMaxVectorTests.hashCodeDoubleMaxVectorTestsSmokeTest(double[cornerCaseValue(i)]): success [4ms]
test DoubleMaxVectorTests.indexInRangeDoubleMaxVectorTestsSmokeTest(0): success [68ms]
test DoubleMaxVectorTests.indexInRangeDoubleMaxVectorTestsSmokeTest(-1): success [17ms]
test DoubleMaxVectorTests.indexInRangeDoubleMaxVectorTestsSmokeTest(1): success [16ms]
test DoubleMaxVectorTests.indexInRangeDoubleMaxVectorTestsSmokeTest(2): success [1ms]
test DoubleMaxVectorTests.indexInRangeDoubleMaxVectorTestsSmokeTest(-2): success [1ms]
test DoubleMaxVectorTests.indexInRangeLongDoubleMaxVectorTestsSmokeTest(0): success [1ms]
test DoubleMaxVectorTests.indexInRangeLongDoubleMaxVectorTestsSmokeTest(-1): success [1ms]
test DoubleMaxVectorTests.indexInRangeLongDoubleMaxVectorTestsSmokeTest(1): success [1ms]
test DoubleMaxVectorTests.indexInRangeLongDoubleMaxVectorTestsSmokeTest(2): success [1ms]
test DoubleMaxVectorTests.indexInRangeLongDoubleMaxVectorTestsSmokeTest(-2): success [1ms]
test DoubleMaxVectorTests.loopBoundDoubleMaxVectorTestsSmokeTest(0): success [0ms]
test DoubleMaxVectorTests.loopBoundDoubleMaxVectorTestsSmokeTest(1): success [0ms]
test DoubleMaxVectorTests.loopBoundDoubleMaxVectorTestsSmokeTest(32): success [0ms]
test DoubleMaxVectorTests.loopBoundDoubleMaxVectorTestsSmokeTest(37): success [0ms]
test DoubleMaxVectorTests.loopBoundDoubleMaxVectorTestsSmokeTest(1024): success [0ms]
test DoubleMaxVectorTests.loopBoundDoubleMaxVectorTestsSmokeTest(1025): success [0ms]
test DoubleMaxVectorTests.loopBoundDoubleMaxVectorTestsSmokeTest(1029): success [0ms]
test DoubleMaxVectorTests.loopBoundLongDoubleMaxVectorTestsSmokeTest(0): success [0ms]
test DoubleMaxVectorTests.loopBoundLongDoubleMaxVectorTestsSmokeTest(1): success [0ms]
test DoubleMaxVectorTests.loopBoundLongDoubleMaxVectorTestsSmokeTest(32): success [0ms]
test DoubleMaxVectorTests.loopBoundLongDoubleMaxVectorTestsSmokeTest(37): success [0ms]
test DoubleMaxVectorTests.loopBoundLongDoubleMaxVectorTestsSmokeTest(1024): success [0ms]
test DoubleMaxVectorTests.loopBoundLongDoubleMaxVectorTestsSmokeTest(1025): success [0ms]
test DoubleMaxVectorTests.loopBoundLongDoubleMaxVectorTestsSmokeTest(1029): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i], double[i]): success [132ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i], double[i - length / 2]): success [35ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i], double[i + 1]): success [68ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i], double[i - 2]): success [61ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i], double[zigZag(i)]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i], double[cornerCaseValue(i)]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - length / 2], double[i]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - length / 2], double[i - length / 2]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - length / 2], double[i + 1]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - length / 2], double[i - 2]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - length / 2], double[zigZag(i)]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i + 1], double[i]): success [35ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i + 1], double[i - length / 2]): success [35ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i + 1], double[i + 1]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i + 1], double[i - 2]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i + 1], double[zigZag(i)]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i + 1], double[cornerCaseValue(i)]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - 2], double[i]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - 2], double[i - length / 2]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - 2], double[i + 1]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - 2], double[i - 2]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - 2], double[zigZag(i)]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - 2], double[cornerCaseValue(i)]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[zigZag(i)], double[i]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[zigZag(i)], double[i - length / 2]): success [35ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[zigZag(i)], double[i + 1]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[zigZag(i)], double[i - 2]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[zigZag(i)], double[zigZag(i)]): success [64ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[cornerCaseValue(i)], double[i]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[cornerCaseValue(i)], double[i + 1]): success [35ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[cornerCaseValue(i)], double[i - 2]): success [35ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [34ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [35ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i], double[i]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i], double[i - length / 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i], double[i - 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i], double[zigZag(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - length / 2], double[i]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - length / 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - length / 2], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - length / 2], double[zigZag(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - length / 2], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i + 1], double[i]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i + 1], double[i - length / 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i + 1], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i + 1], double[i - 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i + 1], double[zigZag(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i + 1], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - 2], double[i]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - 2], double[i - length / 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - 2], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - 2], double[i - 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - 2], double[zigZag(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - 2], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - length / 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[zigZag(i)], double[zigZag(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - length / 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.maskAndDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test DoubleMaxVectorTests.maskAndDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test DoubleMaxVectorTests.maskAndNotDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test DoubleMaxVectorTests.maskAndNotDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test DoubleMaxVectorTests.maskCompressDoubleMaxVectorTestsSmokeTest(mask[i % 2]): success [202ms]
test DoubleMaxVectorTests.maskCompressDoubleMaxVectorTestsSmokeTest(mask[true]): success [84ms]
test DoubleMaxVectorTests.maskCompressDoubleMaxVectorTestsSmokeTest(mask[false]): success [64ms]
test DoubleMaxVectorTests.maskEqDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test DoubleMaxVectorTests.maskEqDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test DoubleMaxVectorTests.maskEqualsDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test DoubleMaxVectorTests.maskEqualsDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test DoubleMaxVectorTests.maskFirstTrueDoubleMaxVectorTestsSmokeTest(mask[i % 2]): success [108ms]
test DoubleMaxVectorTests.maskFirstTrueDoubleMaxVectorTestsSmokeTest(mask[true]): success [75ms]
test DoubleMaxVectorTests.maskFirstTrueDoubleMaxVectorTestsSmokeTest(mask[false]): success [24ms]
test DoubleMaxVectorTests.maskHashCodeDoubleMaxVectorTestsSmokeTest(mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.maskHashCodeDoubleMaxVectorTestsSmokeTest(mask[true]): success [0ms]
test DoubleMaxVectorTests.maskHashCodeDoubleMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test DoubleMaxVectorTests.maskLastTrueDoubleMaxVectorTestsSmokeTest(mask[i % 2]): success [70ms]
test DoubleMaxVectorTests.maskLastTrueDoubleMaxVectorTestsSmokeTest(mask[true]): success [55ms]
test DoubleMaxVectorTests.maskLastTrueDoubleMaxVectorTestsSmokeTest(mask[false]): success [41ms]
test DoubleMaxVectorTests.maskOrDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [57ms]
test DoubleMaxVectorTests.maskOrDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test DoubleMaxVectorTests.maskTrueCountDoubleMaxVectorTestsSmokeTest(mask[i % 2]): success [33ms]
test DoubleMaxVectorTests.maskTrueCountDoubleMaxVectorTestsSmokeTest(mask[true]): success [55ms]
test DoubleMaxVectorTests.maskTrueCountDoubleMaxVectorTestsSmokeTest(mask[false]): success [23ms]
test DoubleMaxVectorTests.maskXorDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test DoubleMaxVectorTests.maskXorDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTests(double[-i * 5], double[i * 5]): success [6ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTests(double[-i * 5], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTests(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [5ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTests(double[-i * 5], double[i * 5]): success [5ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTests(double[-i * 5], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTests(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [5ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTests(double[-i * 5], double[i * 5]): success [5ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTests(double[-i * 5], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTests(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [5ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610, mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610, mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610, mask[false]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [5ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [7ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[false]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test DoubleMaxVectorTests.negDoubleMaxVectorTests(double[-i * 5]): success [13ms]
test DoubleMaxVectorTests.negDoubleMaxVectorTests(double[i * 5]): success [1ms]
test DoubleMaxVectorTests.negDoubleMaxVectorTests(double[i + 1]): success [46ms]
test DoubleMaxVectorTests.negDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.negDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.negDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTests(double[-i * 5], double[i * 5]): success [23ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTests(double[-i * 5], double[i + 1]): success [3ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [70ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTests(double[-i * 5], AbstractVectorTest$1@27211610): success [1ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [13ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.shuffleEqualsDoubleMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [268ms]
test DoubleMaxVectorTests.shuffleEqualsDoubleMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [21ms]
test DoubleMaxVectorTests.shuffleMiscellaneousDoubleMaxVectorTestsSmokeTest(shuffle[random]): success [8ms]
test DoubleMaxVectorTests.shuffleTest(): success [799ms]
test DoubleMaxVectorTests.shuffleToStringDoubleMaxVectorTestsSmokeTest(shuffle[random]): success [38ms]
test DoubleMaxVectorTests.sliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], double[i * 5]): success [889ms]
test DoubleMaxVectorTests.sliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], double[i + 1]): success [248ms]
test DoubleMaxVectorTests.sliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [277ms]
test DoubleMaxVectorTests.sliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], AbstractVectorTest$1@27211610): success [79ms]
test DoubleMaxVectorTests.sliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [99ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [175ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [78ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [327ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[i % 2]): success [79ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [77ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [77ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [128ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [90ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[true]): success [94ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [76ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [76ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [75ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [76ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[false]): success [76ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [76ms]
test DoubleMaxVectorTests.sliceUnaryDoubleMaxVectorTests(double[-i * 5]): success [271ms]
test DoubleMaxVectorTests.sliceUnaryDoubleMaxVectorTests(double[i * 5]): success [74ms]
test DoubleMaxVectorTests.sliceUnaryDoubleMaxVectorTests(double[i + 1]): success [227ms]
test DoubleMaxVectorTests.sliceUnaryDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [73ms]
test DoubleMaxVectorTests.sliceUnaryDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [80ms]
test DoubleMaxVectorTests.sliceUnaryDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [73ms]
test DoubleMaxVectorTests.smokeTest1(): success [0ms]
test DoubleMaxVectorTests.smokeTest2(): success [65ms]
test DoubleMaxVectorTests.sqrtDoubleMaxVectorTests(double[-i * 5]): success [13ms]
test DoubleMaxVectorTests.sqrtDoubleMaxVectorTests(double[i * 5]): success [2ms]
test DoubleMaxVectorTests.sqrtDoubleMaxVectorTests(double[i + 1]): success [44ms]
test DoubleMaxVectorTests.sqrtDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.sqrtDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.sqrtDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTests(double[-i * 5], double[i * 5]): success [8ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTests(double[-i * 5], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTests(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610, mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610, mask[true]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [45ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610, mask[false]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [8ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[true]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[false]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test DoubleMaxVectorTests.toIntArrayDoubleMaxVectorTestsSmokeTest(double[-i * 5]): success [6ms]
test DoubleMaxVectorTests.toIntArrayDoubleMaxVectorTestsSmokeTest(double[i * 5]): success [6ms]
test DoubleMaxVectorTests.toIntArrayDoubleMaxVectorTestsSmokeTest(double[i + 1]): success [6ms]
test DoubleMaxVectorTests.toIntArrayDoubleMaxVectorTestsSmokeTest(double[intCornerCaseValue(i)]): success [8ms]
test DoubleMaxVectorTests.toLongArrayDoubleMaxVectorTestsSmokeTest(double[-i * 5]): success [0ms]
test DoubleMaxVectorTests.toLongArrayDoubleMaxVectorTestsSmokeTest(double[i * 5]): success [0ms]
test DoubleMaxVectorTests.toLongArrayDoubleMaxVectorTestsSmokeTest(double[i + 1]): success [0ms]
test DoubleMaxVectorTests.toLongArrayDoubleMaxVectorTestsSmokeTest(double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.toStringDoubleMaxVectorTestsSmokeTest(double[-i * 5]): success [3ms]
test DoubleMaxVectorTests.toStringDoubleMaxVectorTestsSmokeTest(double[i * 5]): success [3ms]
test DoubleMaxVectorTests.toStringDoubleMaxVectorTestsSmokeTest(double[i + 1]): success [2ms]
test DoubleMaxVectorTests.toStringDoubleMaxVectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [2ms]
test DoubleMaxVectorTests.toStringDoubleMaxVectorTestsSmokeTest(AbstractVectorTest$1@27211610): success [8ms]
test DoubleMaxVectorTests.toStringDoubleMaxVectorTestsSmokeTest(double[cornerCaseValue(i)]): success [1ms]
test DoubleMaxVectorTests.unsliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], double[i * 5]): success [293ms]
test DoubleMaxVectorTests.unsliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], double[i + 1]): success [146ms]
test DoubleMaxVectorTests.unsliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [360ms]
test DoubleMaxVectorTests.unsliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], AbstractVectorTest$1@27211610): success [72ms]
test DoubleMaxVectorTests.unsliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [71ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [576ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [120ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [505ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[i % 2]): success [149ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [144ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [144ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [126ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [144ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[true]): success [162ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [121ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [121ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [144ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [210ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[false]): success [144ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [144ms]
test DoubleMaxVectorTests.unsliceUnaryDoubleMaxVectorTests(double[-i * 5]): success [265ms]
test DoubleMaxVectorTests.unsliceUnaryDoubleMaxVectorTests(double[i * 5]): success [71ms]
test DoubleMaxVectorTests.unsliceUnaryDoubleMaxVectorTests(double[i + 1]): success [215ms]
test DoubleMaxVectorTests.unsliceUnaryDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [78ms]
test DoubleMaxVectorTests.unsliceUnaryDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [70ms]
test DoubleMaxVectorTests.unsliceUnaryDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [70ms]
test DoubleMaxVectorTests.viewAsFloatingLanesTest(): success [22ms]
test DoubleMaxVectorTests.viewAsIntegeralLanesTest(): success [24ms]
test DoubleMaxVectorTests.withDoubleMaxVectorTests(double[-i * 5], double[i * 5]): success [18ms]
test DoubleMaxVectorTests.withDoubleMaxVectorTests(double[-i * 5], double[i + 1]): success [18ms]
test DoubleMaxVectorTests.withDoubleMaxVectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [88ms]
test DoubleMaxVectorTests.withDoubleMaxVectorTests(double[-i * 5], AbstractVectorTest$1@27211610): success [17ms]
test DoubleMaxVectorTests.withDoubleMaxVectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [17ms]

===============================================
jdk/incubator/vector/DoubleMaxVectorTests.java
Total tests run: 3205, Passes: 3204, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/4 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/DoubleMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/DoubleMaxVectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/DoubleMaxVectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/DoubleMaxVectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/DoubleMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/jdk/incubator/vector/DoubleMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/6/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/DoubleMaxVectorTests.d/testng.0.jta jdk/incubator/vector/DoubleMaxVectorTests.java false DoubleMaxVectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Double512VectorTests.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorTests.java
Passed: jdk/incubator/vector/Double256VectorTests.java
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorTests.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float512VectorTests.java
Passed: jdk/incubator/vector/FloatMaxVectorTests.java
Passed: jdk/incubator/vector/Float256VectorTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ByteMaxVectorTests.java
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorTests.java
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorTests.java
Passed: jdk/incubator/vector/Float64VectorTests.java
Passed: jdk/incubator/vector/Int256VectorTests.java
TEST: jdk/incubator/vector/Int128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.19 seconds
messages:
command: build Int128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 18:56:27 IST 2025
Test directory:
  compile: Int128VectorTests
finished: Wed Apr 16 18:56:28 IST 2025
elapsed time (seconds): 1.19

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.19 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 18:56:27 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 1
Process id: 1528731
finished: Wed Apr 16 18:56:28 IST 2025
elapsed time (seconds): 1.19
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests 
TIME:   336.756 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests 
started: Wed Apr 16 18:56:28 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1532115
finished: Wed Apr 16 19:02:05 IST 2025
elapsed time (seconds): 336.756
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -3685787960386749455
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-3685787960386749455" to command line.
test Int128VectorTests.ABSInt128VectorTests(int[-i * 5]): success [547ms]
test Int128VectorTests.ABSInt128VectorTests(int[i * 5]): success [49ms]
test Int128VectorTests.ABSInt128VectorTests(int[i + 1]): success [7ms]
test Int128VectorTests.ABSInt128VectorTests(int[cornerCaseValue(i)]): success [5ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[i % 2]): success [191ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[i % 2]): success [113ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[i % 2]): success [2ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[true]): success [27ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[false]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[i * 5]): success [253ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[i + 1]): success [59ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [16ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [8ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [23ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [9ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [120ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [64ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [30ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[-i * 5]): success [118ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[i * 5]): success [3ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[i + 1]): success [66ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [108ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [92ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[true]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[true]): success [15ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [13ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[false]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[false]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [28ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[-i * 5]): success [20ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[i * 5]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [8ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [12ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[i * 5]): success [107ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[i + 1]): success [60ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [22ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [8ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [8ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [9ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [64ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[-i * 5]): success [138ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[i * 5]): success [2ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[i + 1]): success [63ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[cornerCaseValue(i)]): success [22ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [83ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [2ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [84ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[true]): success [29ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [15ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[i * 5]): success [197ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[i + 1]): success [69ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [60ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [74ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [52ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[i * 5]): success [105ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[i + 1]): success [66ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [77ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [72ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [192ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [60ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[-i * 5]): success [8ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[i * 5]): success [54ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[i + 1]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [57ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [54ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [11ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [49ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [4ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [109ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [90ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [328ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [20ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [102ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [77ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [69ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [44ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [22ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [3ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [3ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): suc

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

k.incubator.vector.IntVector.lanewiseTemplate(IntVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Int128Vector.lanewise(Int128Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Int128Vector.lanewise(Int128Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.div(IntVector.java:1732)
	at Int128VectorTests.divInt128VectorTestsMasked(Int128VectorTests.java:1758)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [204ms]
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [204ms]
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [204ms]
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [214ms]
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [204ms]
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [204ms]
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [204ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i]): success [196ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i - length / 2]): success [105ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i + 1]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i - 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[zigZag(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i - length / 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i + 1]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i - 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[zigZag(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i - length / 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i + 1]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i - 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[zigZag(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i - length / 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i + 1]): success [108ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i - 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[zigZag(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [107ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i - length / 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i + 1]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i - 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[zigZag(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [109ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [9ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [53ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [37ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[i % 2]): success [156ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[i % 2]): success [143ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[i % 2]): success [74ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [74ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[true]): success [29ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[true]): success [6ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[true]): success [37ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[true]): success [6ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[false]): success [8ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[false]): success [8ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[false]): success [8ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[false]): success [8ms]
test Int128VectorTests.getInt128VectorTests(int[-i * 5]): success [8ms]
test Int128VectorTests.getInt128VectorTests(int[i * 5]): success [66ms]
test Int128VectorTests.getInt128VectorTests(int[i + 1]): success [2ms]
test Int128VectorTests.getInt128VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[-i * 5]): success [14ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[i * 5]): success [2ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[i + 1]): success [19ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(0): success [77ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(-1): success [3ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(1): success [21ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(2): success [3ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(-2): success [4ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(0): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(-1): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(1): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(2): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(-2): success [3ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(0): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(32): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(37): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1024): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1025): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1029): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(0): success [4ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(32): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(37): success [1ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1024): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1025): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1029): success [0ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i]): success [203ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i - length / 2]): success [127ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i + 1]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i - 2]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[zigZag(i)]): success [116ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i]): success [130ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i - length / 2]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i + 1]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i - 2]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[zigZag(i)]): success [109ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i - length / 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i + 1]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i - 2]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[zigZag(i)]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i - length / 2]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i + 1]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i - 2]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[zigZag(i)]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i - length / 2]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i + 1]): success [106ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i - 2]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[zigZag(i)]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [6ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [53ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [0ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.maskAndInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Int128VectorTests.maskAndInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskAndNotInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test Int128VectorTests.maskAndNotInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[i % 2]): success [251ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[true]): success [120ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[false]): success [82ms]
test Int128VectorTests.maskEqInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Int128VectorTests.maskEqInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskEqualsInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int128VectorTests.maskEqualsInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[i % 2]): success [38ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[true]): success [59ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[false]): success [27ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(-1): success [66ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(0): success [0ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[true]): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[false]): success [0ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[i % 2]): success [74ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[true]): success [59ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[false]): success [41ms]
test Int128VectorTests.maskOrInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [20ms]
test Int128VectorTests.maskOrInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[i % 2]): success [35ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[true]): success [63ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[false]): success [27ms]
test Int128VectorTests.maskXorInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Int128VectorTests.maskXorInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [39ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.negInt128VectorTests(int[-i * 5]): success [15ms]
test Int128VectorTests.negInt128VectorTests(int[i * 5]): success [73ms]
test Int128VectorTests.negInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.negInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.notInt128VectorTests(int[-i * 5]): success [19ms]
test Int128VectorTests.notInt128VectorTests(int[i * 5]): success [84ms]
test Int128VectorTests.notInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.notInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.shuffleEqualsInt128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [13ms]
test Int128VectorTests.shuffleEqualsInt128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [9ms]
test Int128VectorTests.shuffleMiscellaneousInt128VectorTestsSmokeTest(shuffle[random]): success [9ms]
test Int128VectorTests.shuffleTest(): success [314ms]
test Int128VectorTests.shuffleToStringInt128VectorTestsSmokeTest(shuffle[random]): success [40ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i * 5]): success [650ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i + 1]): success [279ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [120ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [195ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [325ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [142ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [122ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [121ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [122ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [122ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [122ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [154ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[-i * 5]): success [262ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[i * 5]): success [239ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[i + 1]): success [112ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[cornerCaseValue(i)]): success [111ms]
test Int128VectorTests.smokeTest1(): success [0ms]
test Int128VectorTests.smokeTest2(): success [81ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[-i * 5]): success [5ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[i * 5]): success [1ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[i + 1]): success [13ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [13ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i * 5]): success [268ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i + 1]): success [356ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [113ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [617ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [566ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [230ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [231ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [231ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [268ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [229ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [231ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [246ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[-i * 5]): success [243ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[i * 5]): success [241ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[i + 1]): success [112ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[cornerCaseValue(i)]): success [112ms]
test Int128VectorTests.viewAsFloatingLanesTest(): success [466ms]
test Int128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[i * 5]): success [43ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[i + 1]): success [122ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [33ms]

===============================================
jdk/incubator/vector/Int128VectorTests.java
Total tests run: 3622, Passes: 3620, Failures: 2, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Int128VectorTests.d/testng.0.jta jdk/incubator/vector/Int128VectorTests.java false Int128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
--------------------------------------------------
Passed: jdk/incubator/vector/MethodOverideTest.java
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int512VectorTests.java
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
TEST: jdk/incubator/vector/Long256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.789 seconds
messages:
command: build Long256VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 18:59:30 IST 2025
Test directory:
  compile: Long256VectorTests
finished: Wed Apr 16 18:59:31 IST 2025
elapsed time (seconds): 0.789

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.789 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 18:59:30 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 13
Process id: 1529595
finished: Wed Apr 16 18:59:31 IST 2025
elapsed time (seconds): 0.789
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Long256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/1 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Long256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Long256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long256VectorTests 
TIME:   217.95 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long256VectorTests 
started: Wed Apr 16 18:59:31 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1532790
finished: Wed Apr 16 19:03:09 IST 2025
elapsed time (seconds): 217.95
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 136585610186042375
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=136585610186042375" to command line.
test Long256VectorTests.ABSLong256VectorTests(long[-i * 5]): success [583ms]
test Long256VectorTests.ABSLong256VectorTests(long[i * 5]): success [6ms]
test Long256VectorTests.ABSLong256VectorTests(long[i + 1]): success [48ms]
test Long256VectorTests.ABSLong256VectorTests(long[cornerCaseValue(i)]): success [6ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[-i * 5], mask[i % 2]): success [242ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i * 5], mask[i % 2]): success [46ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i + 1], mask[i % 2]): success [75ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[-i * 5], mask[true]): success [6ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[-i * 5], mask[false]): success [1ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i * 5], mask[false]): success [6ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.ADDLong256VectorTests(long[-i * 5], long[i * 5]): success [241ms]
test Long256VectorTests.ADDLong256VectorTests(long[-i * 5], long[i + 1]): success [32ms]
test Long256VectorTests.ADDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [64ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [20ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [137ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [6ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [68ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [11ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [4ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [4ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [4ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [8ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[-i * 5]): success [90ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[i * 5]): success [72ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[i + 1]): success [3ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[-i * 5], mask[i % 2]): success [61ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i * 5], mask[i % 2]): success [81ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [27ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[-i * 5], mask[true]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[-i * 5], mask[false]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[-i * 5]): success [4ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[i * 5]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[i + 1]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i + 1], mask[i % 2]): success [14ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.ANDLong256VectorTests(long[-i * 5], long[i * 5]): success [211ms]
test Long256VectorTests.ANDLong256VectorTests(long[-i * 5], long[i + 1]): success [4ms]
test Long256VectorTests.ANDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [63ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [15ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [3ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [4ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [67ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[-i * 5]): success [102ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[i * 5]): success [61ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[i + 1]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[cornerCaseValue(i)]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[-i * 5], mask[i % 2]): success [22ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i * 5], mask[i % 2]): success [79ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i + 1], mask[i % 2]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[-i * 5], mask[true]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i * 5], mask[true]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i + 1], mask[true]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[-i * 5], mask[false]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i * 5], mask[false]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i + 1], mask[false]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [4ms]
test Long256VectorTests.AND_NOTLong256VectorTests(long[-i * 5], long[i * 5]): success [307ms]
test Long256VectorTests.AND_NOTLong256VectorTests(long[-i * 5], long[i + 1]): success [65ms]
test Long256VectorTests.AND_NOTLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [151ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [127ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [55ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [141ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [55ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [55ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [55ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [55ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [55ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [55ms]
test Long256VectorTests.ASHRLong256VectorTests(long[-i * 5], long[i * 5]): success [172ms]
test Long256VectorTests.ASHRLong256VectorTests(long[-i * 5], long[i + 1]): success [54ms]
test Long256VectorTests.ASHRLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [134ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [135ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [54ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [145ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [54ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [54ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [54ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [54ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [54ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [54ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [246ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [59ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[-i * 5]): success [8ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[i * 5]): success [4ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[i + 1]): success [50ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [60ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [4ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [58ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [13ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [4ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [51ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [76ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [10ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [116ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [504ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [4ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [6ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [71ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [4ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadc

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

2]): success [114ms]
test Long256VectorTests.compressLong256VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [39ms]
test Long256VectorTests.compressLong256VectorTests(long[-i * 5], mask[true]): success [80ms]
test Long256VectorTests.compressLong256VectorTests(long[i * 5], mask[true]): success [4ms]
test Long256VectorTests.compressLong256VectorTests(long[i + 1], mask[true]): success [4ms]
test Long256VectorTests.compressLong256VectorTests(long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long256VectorTests.compressLong256VectorTests(long[-i * 5], mask[false]): success [5ms]
test Long256VectorTests.compressLong256VectorTests(long[i * 5], mask[false]): success [5ms]
test Long256VectorTests.compressLong256VectorTests(long[i + 1], mask[false]): success [5ms]
test Long256VectorTests.compressLong256VectorTests(long[cornerCaseValue(i)], mask[false]): success [5ms]
test Long256VectorTests.divLong256VectorTests(long[-i * 5], long[i * 5]): success [188ms]
test Long256VectorTests.divLong256VectorTests(long[-i * 5], long[i + 1]): success [110ms]
test Long256VectorTests.divLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [197ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [11ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [97ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long256VectorTests.divLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long256VectorTests.divLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [326ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [212ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): failure [383ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$7(LongVector.java:914)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.bOpTemplateMF(LongVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Long256Vector.bOpMF(Long256Vector.java:204)
	at jdk.incubator.vector/jdk.incubator.vector.Long256Vector.bOpMF(Long256Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$6(LongVector.java:914)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lanewiseTemplate(LongVector.java:895)
	at jdk.incubator.vector/jdk.incubator.vector.Long256Vector.lanewise(Long256Vector.java:281)
	at jdk.incubator.vector/jdk.incubator.vector.Long256Vector.lanewise(Long256Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.div(LongVector.java:1645)
	at Long256VectorTests.divLong256VectorTestsMasked(Long256VectorTests.java:1780)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [213ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [213ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [213ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [212ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [212ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [212ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i]): success [114ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i - length / 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i + 1]): success [55ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i - 2]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[zigZag(i)]): success [68ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[cornerCaseValue(i)]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i - length / 2]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i + 1]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i - 2]): success [56ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[zigZag(i)]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i - length / 2]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i + 1]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i - 2]): success [67ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[zigZag(i)]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i - length / 2]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i + 1]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i - 2]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[zigZag(i)]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i - length / 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i + 1]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i - 2]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[zigZag(i)]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [49ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [49ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.expandLong256VectorTests(long[-i * 5], mask[i % 2]): success [120ms]
test Long256VectorTests.expandLong256VectorTests(long[i * 5], mask[i % 2]): success [38ms]
test Long256VectorTests.expandLong256VectorTests(long[i + 1], mask[i % 2]): success [107ms]
test Long256VectorTests.expandLong256VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [38ms]
test Long256VectorTests.expandLong256VectorTests(long[-i * 5], mask[true]): success [27ms]
test Long256VectorTests.expandLong256VectorTests(long[i * 5], mask[true]): success [4ms]
test Long256VectorTests.expandLong256VectorTests(long[i + 1], mask[true]): success [4ms]
test Long256VectorTests.expandLong256VectorTests(long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long256VectorTests.expandLong256VectorTests(long[-i * 5], mask[false]): success [5ms]
test Long256VectorTests.expandLong256VectorTests(long[i * 5], mask[false]): success [5ms]
test Long256VectorTests.expandLong256VectorTests(long[i + 1], mask[false]): success [5ms]
test Long256VectorTests.expandLong256VectorTests(long[cornerCaseValue(i)], mask[false]): success [5ms]
test Long256VectorTests.getLong256VectorTests(long[-i * 5]): success [4ms]
test Long256VectorTests.getLong256VectorTests(long[i * 5]): success [4ms]
test Long256VectorTests.getLong256VectorTests(long[i + 1]): success [64ms]
test Long256VectorTests.getLong256VectorTests(long[cornerCaseValue(i)]): success [2ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[-i * 5]): success [35ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[i * 5]): success [1ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[i + 1]): success [1ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(0): success [68ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(-1): success [2ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(1): success [16ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(2): success [1ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(-2): success [1ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(0): success [2ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(-1): success [1ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(1): success [1ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(2): success [3ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(-2): success [1ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(0): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(32): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(37): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1024): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1025): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1029): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(0): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(32): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(37): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1024): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1025): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1029): success [0ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i]): success [115ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i - length / 2]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i + 1]): success [83ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i - 2]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[zigZag(i)]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[cornerCaseValue(i)]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i - length / 2]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i + 1]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i - 2]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[zigZag(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i - length / 2]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i + 1]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i - 2]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[zigZag(i)]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i - length / 2]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i + 1]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i - 2]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[zigZag(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i - length / 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i + 1]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i - 2]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[zigZag(i)]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [49ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.maskAndLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Long256VectorTests.maskAndLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskAndNotLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Long256VectorTests.maskAndNotLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskCompressLong256VectorTestsSmokeTest(mask[i % 2]): success [324ms]
test Long256VectorTests.maskCompressLong256VectorTestsSmokeTest(mask[true]): success [149ms]
test Long256VectorTests.maskCompressLong256VectorTestsSmokeTest(mask[false]): success [149ms]
test Long256VectorTests.maskEqLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long256VectorTests.maskEqLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskEqualsLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long256VectorTests.maskEqualsLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskFirstTrueLong256VectorTestsSmokeTest(mask[i % 2]): success [36ms]
test Long256VectorTests.maskFirstTrueLong256VectorTestsSmokeTest(mask[true]): success [59ms]
test Long256VectorTests.maskFirstTrueLong256VectorTestsSmokeTest(mask[false]): success [26ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(-1): success [59ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(0): success [0ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long256VectorTests.maskHashCodeLong256VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long256VectorTests.maskHashCodeLong256VectorTestsSmokeTest(mask[true]): success [0ms]
test Long256VectorTests.maskHashCodeLong256VectorTestsSmokeTest(mask[false]): success [0ms]
test Long256VectorTests.maskLastTrueLong256VectorTestsSmokeTest(mask[i % 2]): success [69ms]
test Long256VectorTests.maskLastTrueLong256VectorTestsSmokeTest(mask[true]): success [58ms]
test Long256VectorTests.maskLastTrueLong256VectorTestsSmokeTest(mask[false]): success [41ms]
test Long256VectorTests.maskOrLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test Long256VectorTests.maskOrLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskTrueCountLong256VectorTestsSmokeTest(mask[i % 2]): success [33ms]
test Long256VectorTests.maskTrueCountLong256VectorTestsSmokeTest(mask[true]): success [59ms]
test Long256VectorTests.maskTrueCountLong256VectorTestsSmokeTest(mask[false]): success [27ms]
test Long256VectorTests.maskXorLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test Long256VectorTests.maskXorLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maxLong256VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.maxLong256VectorTests(long[-i * 5], long[i + 1]): success [16ms]
test Long256VectorTests.maxLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.maxLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.maxLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.maxLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.minLong256VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.minLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.minLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.minLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.minLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.minLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.mulLong256VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.mulLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.mulLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.negLong256VectorTests(long[-i * 5]): success [13ms]
test Long256VectorTests.negLong256VectorTests(long[i * 5]): success [2ms]
test Long256VectorTests.negLong256VectorTests(long[i + 1]): success [67ms]
test Long256VectorTests.negLong256VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.notLong256VectorTests(long[-i * 5]): success [68ms]
test Long256VectorTests.notLong256VectorTests(long[i * 5]): success [51ms]
test Long256VectorTests.notLong256VectorTests(long[i + 1]): success [125ms]
test Long256VectorTests.notLong256VectorTests(long[cornerCaseValue(i)]): success [51ms]
test Long256VectorTests.orLong256VectorTests(long[-i * 5], long[i * 5]): success [8ms]
test Long256VectorTests.orLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.orLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.orLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long256VectorTests.orLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.orLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.shuffleEqualsLong256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [401ms]
test Long256VectorTests.shuffleEqualsLong256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [27ms]
test Long256VectorTests.shuffleMiscellaneousLong256VectorTestsSmokeTest(shuffle[random]): success [15ms]
test Long256VectorTests.shuffleTest(): success [386ms]
test Long256VectorTests.shuffleToStringLong256VectorTestsSmokeTest(shuffle[random]): success [77ms]
test Long256VectorTests.sliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i * 5]): success [823ms]
test Long256VectorTests.sliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i + 1]): success [349ms]
test Long256VectorTests.sliceBinaryLong256VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [572ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [500ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [406ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [694ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [416ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [415ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [405ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [534ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [421ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [404ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[-i * 5]): success [515ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[i * 5]): success [338ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[i + 1]): success [503ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[cornerCaseValue(i)]): success [338ms]
test Long256VectorTests.smokeTest1(): success [0ms]
test Long256VectorTests.smokeTest2(): success [46ms]
test Long256VectorTests.subLong256VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.subLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.subLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [40ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long256VectorTests.subLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[-i * 5]): success [5ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[i * 5]): success [5ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[i + 1]): success [12ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [5ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[-i * 5]): success [1ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[i * 5]): success [6ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[i + 1]): success [42ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.unsliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i * 5]): success [539ms]
test Long256VectorTests.unsliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i + 1]): success [407ms]
test Long256VectorTests.unsliceBinaryLong256VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [717ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [1213ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [710ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1337ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [711ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [965ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [708ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [742ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [715ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [722ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[-i * 5]): success [501ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[i * 5]): success [338ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[i + 1]): success [519ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[cornerCaseValue(i)]): success [340ms]
test Long256VectorTests.viewAsFloatingLanesTest(): success [228ms]
test Long256VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long256VectorTests.withLong256VectorTests(long[-i * 5], long[i * 5]): success [27ms]
test Long256VectorTests.withLong256VectorTests(long[-i * 5], long[i + 1]): success [18ms]
test Long256VectorTests.withLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [108ms]

===============================================
jdk/incubator/vector/Long256VectorTests.java
Total tests run: 3321, Passes: 3320, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/1 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Long256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Long256VectorTests.d/testng.0.jta jdk/incubator/vector/Long256VectorTests.java false Long256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Long512VectorTests.java
TEST: jdk/incubator/vector/Long128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.908 seconds
messages:
command: build Long128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 18:59:16 IST 2025
Test directory:
  compile: Long128VectorTests
finished: Wed Apr 16 18:59:17 IST 2025
elapsed time (seconds): 0.908

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.907 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 18:59:16 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 7
Process id: 1529036
finished: Wed Apr 16 18:59:17 IST 2025
elapsed time (seconds): 0.907
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests 
TIME:   252.572 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests 
started: Wed Apr 16 18:59:17 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1532688
finished: Wed Apr 16 19:03:30 IST 2025
elapsed time (seconds): 252.572
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -2737244963762614849
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-2737244963762614849" to command line.
test Long128VectorTests.ABSLong128VectorTests(long[-i * 5]): success [544ms]
test Long128VectorTests.ABSLong128VectorTests(long[i * 5]): success [47ms]
test Long128VectorTests.ABSLong128VectorTests(long[i + 1]): success [6ms]
test Long128VectorTests.ABSLong128VectorTests(long[cornerCaseValue(i)]): success [5ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[i % 2]): success [213ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[i % 2]): success [110ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[true]): success [6ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[false]): success [6ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[i * 5]): success [199ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[i + 1]): success [87ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [8ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [119ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [63ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [10ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [26ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[-i * 5]): success [124ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[i * 5]): success [41ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[i + 1]): success [1ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [104ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [82ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[true]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[true]): success [40ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [10ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[-i * 5]): success [5ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[i * 5]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[i * 5]): success [96ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[i + 1]): success [60ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [20ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [3ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [5ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [7ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [64ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[-i * 5]): success [128ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[i * 5]): success [1ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[i + 1]): success [61ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [66ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [80ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[true]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [28ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [12ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[i * 5]): success [165ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[i + 1]): success [71ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [61ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [74ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[i * 5]): success [103ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[i + 1]): success [68ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [14ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [77ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [72ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [170ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [56ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[-i * 5]): success [8ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[i * 5]): success [54ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[i + 1]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [57ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [54ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [13ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [49ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [6ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [107ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [87ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [480ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): failure [36ms]
java.lang.AssertionError: at index #373, input1 = -1865, input2 = 1860, input3 = 9223372036854775807, mask = false expected [-1865] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:797)
	at Long128VectorTests.assertAltBroadcastArraysEquals(Long128VectorTests.java:628)
	at Long128VectorTests.assertAltBroadcastArraysEquals(Long128VectorTests.java:616)
	at Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(Long128VectorTests.java:5585)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [15ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [84ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [3ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [11ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long128Vec

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

seBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [5ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseDivByZeroSmokeTest(): success [11ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[i % 2]): success [15ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[i % 2]): success [68ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[i % 2]): success [158ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[i % 2]): success [114ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[i % 2]): success [42ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [42ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[true]): success [67ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[true]): success [6ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[true]): success [6ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [5ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[i * 5]): success [159ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[i + 1]): success [177ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [79ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [106ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [7ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [286ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [280ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [150ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [150ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [151ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [159ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [147ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [163ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [147ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i]): success [167ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i - length / 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i - 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[zigZag(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i - length / 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i + 1]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i - 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[zigZag(i)]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i - length / 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i + 1]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i - 2]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[zigZag(i)]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i - length / 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i + 1]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i - 2]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[zigZag(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i - length / 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i + 1]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i - 2]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[zigZag(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [56ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[i % 2]): success [111ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[i % 2]): success [121ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[i % 2]): success [43ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [42ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[true]): success [23ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[false]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[false]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[false]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.getLong128VectorTests(long[-i * 5]): success [5ms]
test Long128VectorTests.getLong128VectorTests(long[i * 5]): success [59ms]
test Long128VectorTests.getLong128VectorTests(long[i + 1]): success [1ms]
test Long128VectorTests.getLong128VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[-i * 5]): success [38ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[i * 5]): success [2ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[i + 1]): success [4ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(0): success [83ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(-1): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(1): success [18ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(2): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(-2): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(0): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(-1): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(1): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(2): success [5ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(-2): success [4ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(32): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(37): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1024): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1025): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1029): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(32): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(37): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1024): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1025): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1029): success [0ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i]): success [167ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i - length / 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i - 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[zigZag(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[cornerCaseValue(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i - length / 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i + 1]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i - 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[zigZag(i)]): success [74ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i - length / 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i - 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[zigZag(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i + 1]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i - 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[zigZag(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i + 1]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i - 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[zigZag(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [8ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [55ms]
test Long128VectorTests.maskAndLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Long128VectorTests.maskAndLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskAndNotLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Long128VectorTests.maskAndNotLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[i % 2]): success [231ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[true]): success [80ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[false]): success [82ms]
test Long128VectorTests.maskEqLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long128VectorTests.maskEqLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskEqualsLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long128VectorTests.maskEqualsLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[i % 2]): success [34ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[true]): success [53ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[false]): success [22ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(-1): success [62ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[true]): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[false]): success [0ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[i % 2]): success [62ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[true]): success [54ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[false]): success [34ms]
test Long128VectorTests.maskOrLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [18ms]
test Long128VectorTests.maskOrLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[i % 2]): success [30ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[true]): success [54ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[false]): success [22ms]
test Long128VectorTests.maskXorLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long128VectorTests.maskXorLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.negLong128VectorTests(long[-i * 5]): success [14ms]
test Long128VectorTests.negLong128VectorTests(long[i * 5]): success [53ms]
test Long128VectorTests.negLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.negLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.notLong128VectorTests(long[-i * 5]): success [18ms]
test Long128VectorTests.notLong128VectorTests(long[i * 5]): success [51ms]
test Long128VectorTests.notLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.notLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[i * 5]): success [8ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [7ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.shuffleEqualsLong128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [469ms]
test Long128VectorTests.shuffleEqualsLong128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [48ms]
test Long128VectorTests.shuffleMiscellaneousLong128VectorTestsSmokeTest(shuffle[random]): success [23ms]
test Long128VectorTests.shuffleTest(): success [351ms]
test Long128VectorTests.shuffleToStringLong128VectorTestsSmokeTest(shuffle[random]): success [48ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i * 5]): success [602ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i + 1]): success [263ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [84ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [167ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [354ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [94ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [118ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [89ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [85ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [85ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [201ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [86ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[-i * 5]): success [235ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[i * 5]): success [227ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[i + 1]): success [80ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[cornerCaseValue(i)]): success [79ms]
test Long128VectorTests.smokeTest1(): success [0ms]
test Long128VectorTests.smokeTest2(): success [47ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[i + 1]): success [14ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [21ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[i + 1]): success [4ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [8ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[i * 5]): success [5ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[i + 1]): success [5ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [5ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[-i * 5]): success [2ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[i * 5]): success [6ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[i + 1]): success [43ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i * 5]): success [266ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i + 1]): success [240ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [212ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [552ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [549ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [165ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [197ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [194ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [189ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [190ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [173ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [322ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[-i * 5]): success [237ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[i * 5]): success [227ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[i + 1]): success [79ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[cornerCaseValue(i)]): success [80ms]
test Long128VectorTests.viewAsFloatingLanesTest(): success [240ms]
test Long128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[i * 5]): success [41ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[i + 1]): success [112ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [32ms]

===============================================
jdk/incubator/vector/Long128VectorTests.java
Total tests run: 3321, Passes: 3320, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Long128VectorTests.d/testng.0.jta jdk/incubator/vector/Long128VectorTests.java false Long128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/UnalignedHeapTest.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/LongMaxVectorTests.java
Passed: jdk/incubator/vector/Int64VectorTests.java
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/VectorMathTest.java
Passed: jdk/incubator/vector/Byte128VectorTests.java
Passed: jdk/incubator/vector/Vector512ConversionTests.java
Passed: jdk/incubator/vector/ShortMaxVectorTests.java
Passed: jdk/incubator/vector/Byte256VectorTests.java
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/AddTest.java
Passed: jdk/incubator/vector/Byte64VectorTests.java
TEST: jdk/incubator/vector/Byte512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   18.252 seconds
messages:
command: build Byte512VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 18:52:33 IST 2025
Test directory:
  compile: Byte512VectorTests
finished: Wed Apr 16 18:52:51 IST 2025
elapsed time (seconds): 18.252

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   18.244 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 18:52:33 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 5
Process id: 1528889
finished: Wed Apr 16 18:52:51 IST 2025
elapsed time (seconds): 18.244
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Byte512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Byte512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Byte512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Byte512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte512VectorTests 
TIME:   993.115 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Byte512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte512VectorTests 
started: Wed Apr 16 18:52:51 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1530252
finished: Wed Apr 16 19:09:24 IST 2025
elapsed time (seconds): 993.115
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 924477120183614671
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=924477120183614671" to command line.
test Byte512VectorTests.ABSByte512VectorTests(byte[-i * 5]): success [540ms]
test Byte512VectorTests.ABSByte512VectorTests(byte[i * 5]): success [1291ms]
test Byte512VectorTests.ABSByte512VectorTests(byte[i + 1]): success [35ms]
test Byte512VectorTests.ABSByte512VectorTests(byte[cornerCaseValue(i)]): success [9ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[-i * 5], mask[i % 2]): success [377ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i * 5], mask[i % 2]): success [359ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i + 1], mask[i % 2]): success [256ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[-i * 5], mask[true]): success [394ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i * 5], mask[true]): success [9ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i + 1], mask[true]): success [8ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[cornerCaseValue(i)], mask[true]): success [10ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[-i * 5], mask[false]): success [5ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i * 5], mask[false]): success [5ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i + 1], mask[false]): success [5ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte512VectorTests.ADDByte512VectorTests(byte[-i * 5], byte[i * 5]): success [204ms]
test Byte512VectorTests.ADDByte512VectorTests(byte[-i * 5], byte[i + 1]): success [1754ms]
test Byte512VectorTests.ADDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [14ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5]): success [66ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1]): success [3ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [5ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [29ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [7ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [11ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [19ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [11ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [9ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [60ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [4ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [4ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [676ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [202ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [10ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [10ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [345ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [12ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [66ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [9ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [9ms]
test Byte512VectorTests.ADDReduceByte512VectorTests(byte[-i * 5]): success [272ms]
test Byte512VectorTests.ADDReduceByte512VectorTests(byte[i * 5]): success [5ms]
test Byte512VectorTests.ADDReduceByte512VectorTests(byte[i + 1]): success [106ms]
test Byte512VectorTests.ADDReduceByte512VectorTests(byte[cornerCaseValue(i)]): success [19ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [194ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i * 5], mask[i % 2]): success [6ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i + 1], mask[i % 2]): success [199ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [33ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[-i * 5], mask[true]): success [5ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i * 5], mask[true]): success [5ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i + 1], mask[true]): success [5ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[-i * 5], mask[false]): success [4ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i * 5], mask[false]): success [6ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i + 1], mask[false]): success [5ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [52ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTests(byte[-i * 5]): success [10ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTests(byte[i * 5]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTests(byte[i + 1]): success [11ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTests(byte[cornerCaseValue(i)]): success [16ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [10ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i * 5], mask[i % 2]): success [1ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i + 1], mask[i % 2]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [25ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[-i * 5], mask[true]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i * 5], mask[true]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i + 1], mask[true]): success [106ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[-i * 5], mask[false]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.ANDByte512VectorTests(byte[-i * 5], byte[i * 5]): success [1020ms]
test Byte512VectorTests.ANDByte512VectorTests(byte[-i * 5], byte[i + 1]): success [279ms]
test Byte512VectorTests.ANDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [7ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [6ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [3ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [76ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [3ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [2ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [30ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [2ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [13ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [36ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [8ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [336ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [7ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [7ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [7ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte512VectorTests.ANDReduceByte512VectorTests(byte[-i * 5]): success [427ms]
test Byte512VectorTests.ANDReduceByte512VectorTests(byte[i * 5]): success [5ms]
test Byte512VectorTests.ANDReduceByte512VectorTests(byte[i + 1]): success [132ms]
test Byte512VectorTests.ANDReduceByte512VectorTests(byte[cornerCaseValue(i)]): success [20ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [41ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i * 5], mask[i % 2]): success [7ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i + 1], mask[i % 2]): success [194ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [29ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[-i * 5], mask[true]): success [6ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i * 5], mask[true]): success [5ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i + 1], mask[true]): success [5ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[-i * 5], mask[false]): success [28ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i * 5], mask[false]): success [4ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i + 1], mask[false]): success [4ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte512VectorTests.AND_NOTByte512VectorTests(byte[-i * 5], byte[i * 5]): success [942ms]
test Byte512VectorTests.AND_NOTByte512VectorTests(byte[-i * 5], byte[i + 1]): success [758ms]
test Byte512VectorTests.AND_NOTByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [129ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [167ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [256ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [130ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [128ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [769ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [132ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [131ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [131ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [130ms]
test Byte512VectorTests.ASHRByte512VectorTests(byte[-i * 5], byte[i * 5]): success [266ms]
test Byte512VectorTests.ASHRByte512VectorTests(byte[-i * 5], byte[i + 1]): success [677ms]
test Byte512VectorTests.ASHRByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [238ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [442ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [311ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [128ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [132ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [766ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [356ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [130ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [143ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [132ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShift(byte[-i * 5], byte[i * 5]): success [292ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShift(byte[-i * 5], byte[i + 1]): success [910ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShift(byte[-i * 5], byte[cornerCaseValue(i)]): success [6ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftConst(byte[-i * 5]): success [170ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftConst(byte[i * 5]): success [5ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftConst(byte[i + 1]): success [6ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftConst(byte[cornerCaseValue(i)]): success [5ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [22ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [106ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[true]): success [9ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[true]): success [208ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[false]): success [39ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[false]): success [4ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[i % 2]): success [13ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[i % 2]): success [6ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[i % 2]): success [9ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[true]): success [192ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[true]): success [5ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[true]): success [68ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[false]): success [4ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[false]): success [4ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[false]): success [4ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[false]): success [4ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [21ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i * 5], byte[i * 5]): success [351ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i * 5], byte[i + 1]): success [21ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [21ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [894ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i + 1], byte[i * 5]): success [13ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i + 1], byte[i + 1]): success [13ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [12ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [12ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [13ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [12ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [12ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [342ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [6ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [70ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [8ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [46ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [9ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [37ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [71ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [9ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [4ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [49ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

lue(i)]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [25ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.bitwiseDivByZeroSmokeTest(): success [18ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[i * 5], mask[i % 2]): success [27ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[i + 1], mask[i % 2]): success [6ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[i * 5], mask[true]): success [6ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[i + 1], mask[true]): success [314ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[i * 5], mask[false]): success [4ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[i + 1], mask[false]): success [4ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [4ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [147ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [172ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [122ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [122ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [407ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [123ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [227ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [122ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [122ms]
test Byte512VectorTests.compressByte512VectorTests(byte[-i * 5], mask[i % 2]): success [5277ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i * 5], mask[i % 2]): success [515ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i + 1], mask[i % 2]): success [361ms]
test Byte512VectorTests.compressByte512VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [366ms]
test Byte512VectorTests.compressByte512VectorTests(byte[-i * 5], mask[true]): success [559ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i * 5], mask[true]): success [4263ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i + 1], mask[true]): success [4ms]
test Byte512VectorTests.compressByte512VectorTests(byte[cornerCaseValue(i)], mask[true]): success [4ms]
test Byte512VectorTests.compressByte512VectorTests(byte[-i * 5], mask[false]): success [39ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i * 5], mask[false]): success [39ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i + 1], mask[false]): success [39ms]
test Byte512VectorTests.compressByte512VectorTests(byte[cornerCaseValue(i)], mask[false]): success [38ms]
test Byte512VectorTests.divByte512VectorTests(byte[-i * 5], byte[i * 5]): success [396ms]
test Byte512VectorTests.divByte512VectorTests(byte[-i * 5], byte[i + 1]): success [641ms]
test Byte512VectorTests.divByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [359ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [36ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [8ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [654ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [9ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [8ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [8ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [8ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [8ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [8ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [13ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [5ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [6ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [738ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1357ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [733ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [734ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [2216ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [725ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [719ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [713ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [715ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[i]): success [453ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[i - length / 2]): success [268ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[i + 1]): success [268ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[i - 2]): success [268ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[zigZag(i)]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[cornerCaseValue(i)]): success [277ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[i]): success [274ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[i - length / 2]): success [268ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[i + 1]): success [269ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[i - 2]): success [268ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [275ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[i]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[i - length / 2]): success [276ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[i + 1]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[i - 2]): success [274ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[zigZag(i)]): success [276ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [278ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[i]): success [282ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[i - length / 2]): success [300ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[i + 1]): success [288ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[i - 2]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[zigZag(i)]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [272ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[i]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[i + 1]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[i - 2]): success [278ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [279ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[i]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [269ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [269ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [283ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i]): success [5ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - length / 2]): success [5ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i + 1]): success [8ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i]): success [184ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i + 1]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i + 1]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i + 1]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - 2]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i + 1]): success [12ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - 2]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.expandByte512VectorTests(byte[-i * 5], mask[i % 2]): success [8561ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i * 5], mask[i % 2]): success [424ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i + 1], mask[i % 2]): success [361ms]
test Byte512VectorTests.expandByte512VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [351ms]
test Byte512VectorTests.expandByte512VectorTests(byte[-i * 5], mask[true]): success [283ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i * 5], mask[true]): success [7997ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i + 1], mask[true]): success [4ms]
test Byte512VectorTests.expandByte512VectorTests(byte[cornerCaseValue(i)], mask[true]): success [4ms]
test Byte512VectorTests.expandByte512VectorTests(byte[-i * 5], mask[false]): success [45ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i * 5], mask[false]): success [37ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i + 1], mask[false]): success [38ms]
test Byte512VectorTests.expandByte512VectorTests(byte[cornerCaseValue(i)], mask[false]): success [47ms]
test Byte512VectorTests.getByte512VectorTests(byte[-i * 5]): success [44ms]
test Byte512VectorTests.getByte512VectorTests(byte[i * 5]): success [45ms]
test Byte512VectorTests.getByte512VectorTests(byte[i + 1]): success [45ms]
test Byte512VectorTests.getByte512VectorTests(byte[cornerCaseValue(i)]): success [45ms]
test Byte512VectorTests.hashCodeByte512VectorTestsSmokeTest(byte[-i * 5]): success [37ms]
test Byte512VectorTests.hashCodeByte512VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte512VectorTests.hashCodeByte512VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte512VectorTests.hashCodeByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [17ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(0): success [72ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(-1): success [7ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(1): success [21ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(2): success [6ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(-2): success [6ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(0): success [6ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(-1): success [6ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(1): success [6ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(2): success [6ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(-2): success [6ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(0): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(1): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(32): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(37): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(1024): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(1025): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(1029): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(0): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(1): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(32): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(37): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(1024): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(1025): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(1029): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[i]): success [453ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[i - length / 2]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[i + 1]): success [269ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[i - 2]): success [279ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[zigZag(i)]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[cornerCaseValue(i)]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[i]): success [268ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[i - length / 2]): success [269ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[i + 1]): success [269ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[i - 2]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [280ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[i]): success [269ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[i - length / 2]): success [269ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[i + 1]): success [277ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[i - 2]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[zigZag(i)]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [277ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[i]): success [280ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[i - length / 2]): success [272ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[i + 1]): success [273ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[i - 2]): success [275ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[zigZag(i)]): success [273ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [272ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[i]): success [271ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [283ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[i + 1]): success [272ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[i - 2]): success [271ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [271ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [276ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[i]): success [300ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [269ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [280ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [269ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [268ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[i]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[i + 1]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[i - 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i]): success [188ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i + 1]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i + 1]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i + 1]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i + 1]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.maskAndByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Byte512VectorTests.maskAndByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskAndNotByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Byte512VectorTests.maskAndNotByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskCompressByte512VectorTestsSmokeTest(mask[i % 2]): success [1483ms]
test Byte512VectorTests.maskCompressByte512VectorTestsSmokeTest(mask[true]): success [1063ms]
test Byte512VectorTests.maskCompressByte512VectorTestsSmokeTest(mask[false]): success [1064ms]
test Byte512VectorTests.maskEqByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Byte512VectorTests.maskEqByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskEqualsByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Byte512VectorTests.maskEqualsByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskFirstTrueByte512VectorTestsSmokeTest(mask[i % 2]): success [209ms]
test Byte512VectorTests.maskFirstTrueByte512VectorTestsSmokeTest(mask[true]): success [249ms]
test Byte512VectorTests.maskFirstTrueByte512VectorTestsSmokeTest(mask[false]): success [198ms]
test Byte512VectorTests.maskFromToLongByte512VectorTestsSmokeTest(-1): success [60ms]
test Byte512VectorTests.maskFromToLongByte512VectorTestsSmokeTest(0): success [0ms]
test Byte512VectorTests.maskFromToLongByte512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Byte512VectorTests.maskFromToLongByte512VectorTestsSmokeTest(81985529216486895): success [5ms]
test Byte512VectorTests.maskHashCodeByte512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Byte512VectorTests.maskHashCodeByte512VectorTestsSmokeTest(mask[true]): success [0ms]
test Byte512VectorTests.maskHashCodeByte512VectorTestsSmokeTest(mask[false]): success [0ms]
test Byte512VectorTests.maskLastTrueByte512VectorTestsSmokeTest(mask[i % 2]): success [269ms]
test Byte512VectorTests.maskLastTrueByte512VectorTestsSmokeTest(mask[true]): success [250ms]
test Byte512VectorTests.maskLastTrueByte512VectorTestsSmokeTest(mask[false]): success [228ms]
test Byte512VectorTests.maskOrByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Byte512VectorTests.maskOrByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskTrueCountByte512VectorTestsSmokeTest(mask[i % 2]): success [207ms]
test Byte512VectorTests.maskTrueCountByte512VectorTestsSmokeTest(mask[true]): success [250ms]
test Byte512VectorTests.maskTrueCountByte512VectorTestsSmokeTest(mask[false]): success [198ms]
test Byte512VectorTests.maskXorByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Byte512VectorTests.maskXorByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maxByte512VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte512VectorTests.maxByte512VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.maxByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [6ms]
test Byte512VectorTests.maxByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte512VectorTests.maxByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.maxByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.minByte512VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte512VectorTests.minByte512VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.minByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.minByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte512VectorTests.minByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.minByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.mulByte512VectorTests(byte[-i * 5], byte[i * 5]): success [5ms]
test Byte512VectorTests.mulByte512VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.mulByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [6ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [5ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.negByte512VectorTests(byte[-i * 5]): success [9ms]
test Byte512VectorTests.negByte512VectorTests(byte[i * 5]): success [19ms]
test Byte512VectorTests.negByte512VectorTests(byte[i + 1]): success [5ms]
test Byte512VectorTests.negByte512VectorTests(byte[cornerCaseValue(i)]): success [3ms]
test Byte512VectorTests.notByte512VectorTests(byte[-i * 5]): success [123ms]
test Byte512VectorTests.notByte512VectorTests(byte[i * 5]): success [164ms]
test Byte512VectorTests.notByte512VectorTests(byte[i + 1]): success [127ms]
test Byte512VectorTests.notByte512VectorTests(byte[cornerCaseValue(i)]): success [125ms]
test Byte512VectorTests.orByte512VectorTests(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte512VectorTests.orByte512VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.orByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.orByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte512VectorTests.orByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.orByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.reinterpretAsBytesByte512VectorTestsSmokeTest(byte[-i * 5]): success [4ms]
test Byte512VectorTests.reinterpretAsBytesByte512VectorTestsSmokeTest(byte[i * 5]): success [20ms]
test Byte512VectorTests.reinterpretAsBytesByte512VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte512VectorTests.reinterpretAsBytesByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.shuffleEqualsByte512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [4356ms]
test Byte512VectorTests.shuffleEqualsByte512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [278ms]
test Byte512VectorTests.shuffleMiscellaneousByte512VectorTestsSmokeTest(shuffle[random]): success [227ms]
test Byte512VectorTests.shuffleTest(): success [1770ms]
test Byte512VectorTests.shuffleToStringByte512VectorTestsSmokeTest(shuffle[random]): success [61ms]
test Byte512VectorTests.sliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [1517ms]
test Byte512VectorTests.sliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [3101ms]
test Byte512VectorTests.sliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [1203ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [1262ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [2057ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1289ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1287ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [8776ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1293ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [1318ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [3474ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1284ms]
test Byte512VectorTests.sliceUnaryByte512VectorTests(byte[-i * 5]): success [1000ms]
test Byte512VectorTests.sliceUnaryByte512VectorTests(byte[i * 5]): success [2061ms]
test Byte512VectorTests.sliceUnaryByte512VectorTests(byte[i + 1]): success [993ms]
test Byte512VectorTests.sliceUnaryByte512VectorTests(byte[cornerCaseValue(i)]): success [1008ms]
test Byte512VectorTests.smokeTest1(): success [43ms]
test Byte512VectorTests.smokeTest2(): success [57ms]
test Byte512VectorTests.subByte512VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte512VectorTests.subByte512VectorTests(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte512VectorTests.subByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [534ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [375ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [979ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [30ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [33ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.toDoubleArrayByte512VectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test Byte512VectorTests.toDoubleArrayByte512VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte512VectorTests.toDoubleArrayByte512VectorTestsSmokeTest(byte[i + 1]): success [3ms]
test Byte512VectorTests.toDoubleArrayByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.toIntArrayByte512VectorTestsSmokeTest(byte[-i * 5]): success [5ms]
test Byte512VectorTests.toIntArrayByte512VectorTestsSmokeTest(byte[i * 5]): success [9ms]
test Byte512VectorTests.toIntArrayByte512VectorTestsSmokeTest(byte[i + 1]): success [7ms]
test Byte512VectorTests.toIntArrayByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.toLongArrayByte512VectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test Byte512VectorTests.toLongArrayByte512VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte512VectorTests.toLongArrayByte512VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte512VectorTests.toLongArrayByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.toStringByte512VectorTestsSmokeTest(byte[-i * 5]): success [24ms]
test Byte512VectorTests.toStringByte512VectorTestsSmokeTest(byte[i * 5]): success [13ms]
test Byte512VectorTests.toStringByte512VectorTestsSmokeTest(byte[i + 1]): success [60ms]
test Byte512VectorTests.toStringByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.unsliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [1024ms]
test Byte512VectorTests.unsliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [2473ms]
test Byte512VectorTests.unsliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): failure [1102ms]
java.lang.AssertionError: arrays differ firstly at element [23]; expected value is <-128> but was <0>. (ref: [-77, -82, -87, -92, -97, -102, -107, -112, -117, -122, -127, 124, 119, 114, 109, 104, 99, 94, 89, 84, 79, 74, 69, -128, 127, 0, 127, -128, -128, 127, 0, 127, -128, -128, 127, 0, 127, -128, -128, 127, 0, 127, -128, -128, 127, 0, 127, -128, -128, 127, 0, 127, -128, -128, 127, 0, 127, -128, -128, 127, 0, 127, -128, -128], res: [-77, -82, -87, -92, -97, -102, -107, -112, -117, -122, -127, 124, 119, 114, 109, 104, 99, 94, 89, 84, 79, 74, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), at index #384, at origin #23, with part #1
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at Byte512VectorTests.assertArraysEquals(Byte512VectorTests.java:868)
	at Byte512VectorTests.unsliceBinaryByte512VectorTestsBinary(Byte512VectorTests.java:5368)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [2265ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [6150ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2278ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [2179ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [12907ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2259ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [6078ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [2253ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2248ms]
test Byte512VectorTests.unsliceUnaryByte512VectorTests(byte[-i * 5]): success [1013ms]
test Byte512VectorTests.unsliceUnaryByte512VectorTests(byte[i * 5]): success [2108ms]
test Byte512VectorTests.unsliceUnaryByte512VectorTests(byte[i + 1]): success [1008ms]
test Byte512VectorTests.unsliceUnaryByte512VectorTests(byte[cornerCaseValue(i)]): success [1006ms]
test Byte512VectorTests.viewAsFloatingLanesTest(): success [14ms]
test Byte512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Byte512VectorTests.withByte512VectorTests(byte[-i * 5], byte[i * 5]): success [19ms]
test Byte512VectorTests.withByte512VectorTests(byte[-i * 5], byte[i + 1]): success [11ms]
test Byte512VectorTests.withByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [34ms]

===============================================
jdk/incubator/vector/Byte512VectorTests.java
Total tests run: 3602, Passes: 3601, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Byte512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Byte512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/14/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Byte512VectorTests.d/testng.0.jta jdk/incubator/vector/Byte512VectorTests.java false Byte512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Long64VectorTests.java
Passed: jdk/incubator/vector/Short128VectorTests.java
Passed: jdk/incubator/vector/Short256VectorTests.java
Passed: jdk/incubator/vector/Short512VectorTests.java
Passed: jdk/incubator/vector/Vector256ConversionTests.java
TEST: jdk/incubator/vector/Short64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.735 seconds
messages:
command: build Short64VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 19:03:24 IST 2025
Test directory:
  compile: Short64VectorTests
finished: Wed Apr 16 19:03:24 IST 2025
elapsed time (seconds): 0.735

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.734 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 19:03:24 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 2
Process id: 1528758
finished: Wed Apr 16 19:03:24 IST 2025
elapsed time (seconds): 0.734
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/15 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short64VectorTests 
TIME:   632.364 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short64VectorTests 
started: Wed Apr 16 19:03:24 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1533875
finished: Wed Apr 16 19:13:57 IST 2025
elapsed time (seconds): 632.364
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 826051887092022873
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=826051887092022873" to command line.
test Short64VectorTests.ABSMaskedShort64VectorTests(short[-i * 5], mask[i % 2]): success [625ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i * 5], mask[i % 2]): success [30ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i + 1], mask[i % 2]): success [43ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [30ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[-i * 5], mask[true]): success [28ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i * 5], mask[true]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i + 1], mask[true]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[-i * 5], mask[false]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i + 1], mask[false]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short64VectorTests.ABSShort64VectorTests(short[-i * 5]): success [130ms]
test Short64VectorTests.ABSShort64VectorTests(short[i * 5]): success [27ms]
test Short64VectorTests.ABSShort64VectorTests(short[i + 1]): success [4ms]
test Short64VectorTests.ABSShort64VectorTests(short[cornerCaseValue(i)]): success [26ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[-i * 5]): success [88ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[i * 5]): success [2ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[i + 1]): success [3ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[cornerCaseValue(i)]): success [11ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[-i * 5], mask[i % 2]): success [13ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i * 5], mask[i % 2]): success [2ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i + 1], mask[i % 2]): success [2ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[-i * 5], mask[true]): success [4ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i * 5], mask[true]): success [12ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i + 1], mask[true]): success [1ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[-i * 5], mask[false]): success [1ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i * 5], mask[false]): success [10ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i + 1], mask[false]): success [63ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[-i * 5]): success [147ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[i * 5]): success [23ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[i + 1]): success [9ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[cornerCaseValue(i)]): success [14ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[-i * 5], mask[i % 2]): success [131ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i * 5], mask[i % 2]): success [9ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i + 1], mask[i % 2]): success [67ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [99ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[-i * 5], mask[true]): success [44ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i * 5], mask[true]): success [3ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i + 1], mask[true]): success [4ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [40ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short64VectorTests.ADDShort64VectorTests(short[-i * 5], short[i * 5]): success [260ms]
test Short64VectorTests.ADDShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ADDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [54ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [19ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [28ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [7ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [6ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [15ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [34ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [10ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [156ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [33ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [5ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [5ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[-i * 5]): success [145ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[i * 5]): success [19ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[i + 1]): success [5ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[cornerCaseValue(i)]): success [63ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[-i * 5], mask[i % 2]): success [85ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i * 5], mask[i % 2]): success [6ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i + 1], mask[i % 2]): success [63ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [54ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[-i * 5], mask[true]): success [74ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i * 5], mask[true]): success [6ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i + 1], mask[true]): success [6ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [23ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i + 1], mask[false]): success [4ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short64VectorTests.ANDShort64VectorTests(short[-i * 5], short[i * 5]): success [234ms]
test Short64VectorTests.ANDShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ANDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [53ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [21ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [38ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [20ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [68ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [103ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short64VectorTests.AND_NOTShort64VectorTests(short[-i * 5], short[i * 5]): success [201ms]
test Short64VectorTests.AND_NOTShort64VectorTests(short[-i * 5], short[i + 1]): success [31ms]
test Short64VectorTests.AND_NOTShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [154ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [74ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [37ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short64VectorTests.ASHRShort64VectorTests(short[-i * 5], short[i * 5]): success [163ms]
test Short64VectorTests.ASHRShort64VectorTests(short[-i * 5], short[i + 1]): success [31ms]
test Short64VectorTests.ASHRShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [3ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [178ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [58ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [105ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [9ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [264ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [55ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[-i * 5]): success [95ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[i * 5]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[i + 1]): success [50ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [118ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [29ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [61ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [105ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [53ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [58ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [5ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [46ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [23ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [192ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [80ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [139ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [441ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [21ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [4ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [110ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [89ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [6ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [6ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [44ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [22ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [4ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTest

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

absShort64VectorTests(short[i + 1]): success [36ms]
test Short64VectorTests.absShort64VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.addShort64VectorTests(short[-i * 5], short[i * 5]): success [34ms]
test Short64VectorTests.addShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.addShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [73ms]
test Short64VectorTests.addShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [38ms]
test Short64VectorTests.addShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.allTrueShort64VectorTests(boolean[i % 2]): success [25ms]
test Short64VectorTests.allTrueShort64VectorTests(boolean[i % 5]): success [21ms]
test Short64VectorTests.andShort64VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short64VectorTests.andShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.andShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.andShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short64VectorTests.andShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.andShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.anyTrueShort64VectorTests(boolean[i % 2]): success [7ms]
test Short64VectorTests.anyTrueShort64VectorTests(boolean[i % 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [43ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [54ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [69ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [15ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [67ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [15ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [67ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [15ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseDivByZeroSmokeTest(): success [14ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [120ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [2ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [58ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i * 5], mask[true]): success [29ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [104ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [2ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [63ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short64VectorTests.compressShort64VectorTests(short[-i * 5], mask[i % 2]): success [309ms]
test Short64VectorTests.compressShort64VectorTests(short[i * 5], mask[i % 2]): success [179ms]
test Short64VectorTests.compressShort64VectorTests(short[i + 1], mask[i % 2]): success [146ms]
test Short64VectorTests.compressShort64VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [146ms]
test Short64VectorTests.compressShort64VectorTests(short[-i * 5], mask[true]): success [85ms]
test Short64VectorTests.compressShort64VectorTests(short[i * 5], mask[true]): success [11ms]
test Short64VectorTests.compressShort64VectorTests(short[i + 1], mask[true]): success [11ms]
test Short64VectorTests.compressShort64VectorTests(short[cornerCaseValue(i)], mask[true]): success [11ms]
test Short64VectorTests.compressShort64VectorTests(short[-i * 5], mask[false]): success [77ms]
test Short64VectorTests.compressShort64VectorTests(short[i * 5], mask[false]): success [15ms]
test Short64VectorTests.compressShort64VectorTests(short[i + 1], mask[false]): success [15ms]
test Short64VectorTests.compressShort64VectorTests(short[cornerCaseValue(i)], mask[false]): success [15ms]
test Short64VectorTests.divShort64VectorTests(short[-i * 5], short[i * 5]): success [361ms]
test Short64VectorTests.divShort64VectorTests(short[-i * 5], short[i + 1]): success [210ms]
test Short64VectorTests.divShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [265ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [108ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [19ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [11ms]
test Short64VectorTests.divShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [2ms]
test Short64VectorTests.divShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): failure [229ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.lambda$binaryOperationsMF$7(ShortVector.java:956)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.bOpTemplateMF(ShortVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Short64Vector.bOpMF(Short64Vector.java:209)
	at jdk.incubator.vector/jdk.incubator.vector.Short64Vector.bOpMF(Short64Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.lambda$binaryOperationsMF$6(ShortVector.java:956)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.lanewiseTemplate(ShortVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Short64Vector.lanewise(Short64Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Short64Vector.lanewise(Short64Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.div(ShortVector.java:1729)
	at Short64VectorTests.divShort64VectorTestsMasked(Short64VectorTests.java:1787)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [551ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [403ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [459ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [404ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [402ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [402ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [401ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [404ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i]): success [298ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i - length / 2]): success [201ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i + 1]): success [198ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i - 2]): success [198ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[zigZag(i)]): success [199ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[cornerCaseValue(i)]): success [198ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i]): success [198ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i - length / 2]): success [197ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i + 1]): success [197ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i - 2]): success [196ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[zigZag(i)]): success [196ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [197ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i]): success [197ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i - length / 2]): success [197ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i + 1]): success [196ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i - 2]): success [196ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[zigZag(i)]): success [198ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [196ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i]): success [196ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i - length / 2]): success [197ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i + 1]): success [196ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i - 2]): success [196ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[zigZag(i)]): success [197ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [196ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i]): success [197ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i - length / 2]): success [212ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i + 1]): success [197ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i - 2]): success [197ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[zigZag(i)]): success [197ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [196ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i]): success [197ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [196ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [197ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [197ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [196ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [195ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [58ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [32ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [10ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.expandShort64VectorTests(short[-i * 5], mask[i % 2]): success [266ms]
test Short64VectorTests.expandShort64VectorTests(short[i * 5], mask[i % 2]): success [148ms]
test Short64VectorTests.expandShort64VectorTests(short[i + 1], mask[i % 2]): success [147ms]
test Short64VectorTests.expandShort64VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [148ms]
test Short64VectorTests.expandShort64VectorTests(short[-i * 5], mask[true]): success [35ms]
test Short64VectorTests.expandShort64VectorTests(short[i * 5], mask[true]): success [12ms]
test Short64VectorTests.expandShort64VectorTests(short[i + 1], mask[true]): success [12ms]
test Short64VectorTests.expandShort64VectorTests(short[cornerCaseValue(i)], mask[true]): success [13ms]
test Short64VectorTests.expandShort64VectorTests(short[-i * 5], mask[false]): success [16ms]
test Short64VectorTests.expandShort64VectorTests(short[i * 5], mask[false]): success [16ms]
test Short64VectorTests.expandShort64VectorTests(short[i + 1], mask[false]): success [77ms]
test Short64VectorTests.expandShort64VectorTests(short[cornerCaseValue(i)], mask[false]): success [46ms]
test Short64VectorTests.getShort64VectorTests(short[-i * 5]): success [54ms]
test Short64VectorTests.getShort64VectorTests(short[i * 5]): success [0ms]
test Short64VectorTests.getShort64VectorTests(short[i + 1]): success [0ms]
test Short64VectorTests.getShort64VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[-i * 5]): success [48ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[i * 5]): success [11ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[i + 1]): success [23ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [10ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(0): success [89ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(-1): success [7ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(1): success [27ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(2): success [7ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(-2): success [6ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(0): success [7ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(-1): success [6ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(1): success [7ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(2): success [17ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(-2): success [6ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(0): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(32): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(37): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1024): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1025): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1029): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(0): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(32): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(37): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1024): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1025): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1029): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i]): success [298ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i - length / 2]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i + 1]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i - 2]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[zigZag(i)]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[cornerCaseValue(i)]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i - length / 2]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i + 1]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i - 2]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[zigZag(i)]): success [196ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i]): success [196ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i - length / 2]): success [196ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i + 1]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i - 2]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[zigZag(i)]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [202ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i - length / 2]): success [210ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i + 1]): success [199ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i - 2]): success [196ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[zigZag(i)]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i]): success [201ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i - length / 2]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i + 1]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i - 2]): success [197ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[zigZag(i)]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [199ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i]): success [243ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [199ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [198ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [198ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [59ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [31ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.maskAndNotShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test Short64VectorTests.maskAndNotShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskAndShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test Short64VectorTests.maskAndShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskCompressShort64VectorTestsSmokeTest(mask[i % 2]): success [255ms]
test Short64VectorTests.maskCompressShort64VectorTestsSmokeTest(mask[true]): success [82ms]
test Short64VectorTests.maskCompressShort64VectorTestsSmokeTest(mask[false]): success [119ms]
test Short64VectorTests.maskEqShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short64VectorTests.maskEqShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskEqualsShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short64VectorTests.maskEqualsShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskFirstTrueShort64VectorTestsSmokeTest(mask[i % 2]): success [38ms]
test Short64VectorTests.maskFirstTrueShort64VectorTestsSmokeTest(mask[true]): success [58ms]
test Short64VectorTests.maskFirstTrueShort64VectorTestsSmokeTest(mask[false]): success [26ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(-1): success [76ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(0): success [0ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short64VectorTests.maskHashCodeShort64VectorTestsSmokeTest(mask[i % 2]): success [5ms]
test Short64VectorTests.maskHashCodeShort64VectorTestsSmokeTest(mask[true]): success [0ms]
test Short64VectorTests.maskHashCodeShort64VectorTestsSmokeTest(mask[false]): success [0ms]
test Short64VectorTests.maskLastTrueShort64VectorTestsSmokeTest(mask[i % 2]): success [72ms]
test Short64VectorTests.maskLastTrueShort64VectorTestsSmokeTest(mask[true]): success [58ms]
test Short64VectorTests.maskLastTrueShort64VectorTestsSmokeTest(mask[false]): success [40ms]
test Short64VectorTests.maskOrShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [21ms]
test Short64VectorTests.maskOrShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskTrueCountShort64VectorTestsSmokeTest(mask[i % 2]): success [34ms]
test Short64VectorTests.maskTrueCountShort64VectorTestsSmokeTest(mask[true]): success [58ms]
test Short64VectorTests.maskTrueCountShort64VectorTestsSmokeTest(mask[false]): success [26ms]
test Short64VectorTests.maskXorShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Short64VectorTests.maskXorShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maxShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.maxShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.maxShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.maxShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.maxShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short64VectorTests.maxShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.minShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.minShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.minShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.minShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.minShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.minShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.mulShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.mulShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.mulShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.negShort64VectorTests(short[-i * 5]): success [52ms]
test Short64VectorTests.negShort64VectorTests(short[i * 5]): success [0ms]
test Short64VectorTests.negShort64VectorTests(short[i + 1]): success [39ms]
test Short64VectorTests.negShort64VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.notShort64VectorTests(short[-i * 5]): success [60ms]
test Short64VectorTests.notShort64VectorTests(short[i * 5]): success [0ms]
test Short64VectorTests.notShort64VectorTests(short[i + 1]): success [44ms]
test Short64VectorTests.notShort64VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.orShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.orShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.orShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.orShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.orShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.orShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.shuffleEqualsShort64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [714ms]
test Short64VectorTests.shuffleEqualsShort64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [175ms]
test Short64VectorTests.shuffleMiscellaneousShort64VectorTestsSmokeTest(shuffle[random]): success [273ms]
test Short64VectorTests.shuffleTest(): success [349ms]
test Short64VectorTests.shuffleToStringShort64VectorTestsSmokeTest(shuffle[random]): success [175ms]
test Short64VectorTests.sliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i * 5]): success [740ms]
test Short64VectorTests.sliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i + 1]): success [208ms]
test Short64VectorTests.sliceBinaryShort64VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [206ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [473ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [333ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [306ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [210ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [211ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [208ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [224ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [227ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [209ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[-i * 5]): success [479ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[i * 5]): success [209ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[i + 1]): success [201ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[cornerCaseValue(i)]): success [203ms]
test Short64VectorTests.smokeTest1(): success [0ms]
test Short64VectorTests.smokeTest2(): success [92ms]
test Short64VectorTests.subShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.subShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.subShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.subShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[-i * 5]): success [8ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[-i * 5]): success [22ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[-i * 5]): success [10ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[i * 5]): success [27ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[i + 1]): success [54ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.unsliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i * 5]): success [501ms]
test Short64VectorTests.unsliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i + 1]): success [418ms]
test Short64VectorTests.unsliceBinaryShort64VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [204ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [1096ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [410ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [443ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [408ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [408ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [408ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [408ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [455ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [408ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[-i * 5]): success [453ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[i * 5]): success [261ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[i + 1]): success [202ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[cornerCaseValue(i)]): success [201ms]
test Short64VectorTests.viewAsFloatingLanesTest(): success [36ms]
test Short64VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Short64VectorTests.withShort64VectorTests(short[-i * 5], short[i * 5]): success [130ms]
test Short64VectorTests.withShort64VectorTests(short[-i * 5], short[i + 1]): success [65ms]
test Short64VectorTests.withShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [65ms]

===============================================
jdk/incubator/vector/Short64VectorTests.java
Total tests run: 3598, Passes: 3596, Failures: 2, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/15 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Short64VectorTests.d/testng.0.jta jdk/incubator/vector/Short64VectorTests.java false Short64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
--------------------------------------------------
Passed: jdk/incubator/vector/Vector128ConversionTests.java
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#id0
TEST: jdk/incubator/vector/VectorMaxConversionTests.java#Z
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.02 seconds
messages:
command: build VectorMaxConversionTests
reason: Named class compiled on demand
started: Wed Apr 16 19:06:41 IST 2025
Test directory:
  compile: VectorMaxConversionTests
finished: Wed Apr 16 19:06:43 IST 2025
elapsed time (seconds): 1.02

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.019 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 19:06:41 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 12
Process id: 1529508
finished: Wed Apr 16 19:06:43 IST 2025
elapsed time (seconds): 1.019
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorMaxConversionTests_Z.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/8 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorMaxConversionTests.java#Z \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorMaxConversionTests_Z.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorMaxConversionTests_Z.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:+UseZGC -XX:+IgnoreUnrecognizedVMOptions VectorMaxConversionTests 
TIME:   736.271 seconds
messages:
command: testng -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:+UseZGC -XX:+IgnoreUnrecognizedVMOptions VectorMaxConversionTests
reason: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:+UseZGC -XX:+IgnoreUnrecognizedVMOptions VectorMaxConversionTests 
started: Wed Apr 16 19:06:43 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1534480
finished: Wed Apr 16 19:18:59 IST 2025
elapsed time (seconds): 736.271
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 8, S_64_BIT], byte(i)): success [737ms]
castShape took 735 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@546e0bd): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 4, S_64_BIT], byte(i)): success [1161ms]
castShape took 1161 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@632e496b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 2, S_64_BIT], byte(i)): success [973ms]
castShape took 974 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@51e891bf): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 1, S_64_BIT], byte(i)): success [477ms]
castShape took 477 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a5e4d08): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 2, S_64_BIT], byte(i)): success [119ms]
castShape took 120 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f6118d8): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 1, S_64_BIT], byte(i)): success [110ms]
castShape took 110 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55eeea8b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 16, S_128_BIT], byte(i)): success [1725ms]
castShape took 1724 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@528d38e7): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 8, S_128_BIT], byte(i)): success [1224ms]
castShape took 1220 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2cbe3618): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 4, S_128_BIT], byte(i)): success [992ms]
castShape took 992 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f8a8aba): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 2, S_128_BIT], byte(i)): success [973ms]
castShape took 973 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c722680): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 4, S_128_BIT], byte(i)): success [181ms]
castShape took 180 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@67c6164): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 2, S_128_BIT], byte(i)): success [346ms]
castShape took 346 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b82f96e): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 32, S_256_BIT], byte(i)): success [3986ms]
castShape took 3986 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@71fe33e2): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 16, S_256_BIT], byte(i)): success [393ms]
castShape took 393 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@aae3445): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 8, S_256_BIT], byte(i)): success [1005ms]
castShape took 1005 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6f5fc3e1): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 4, S_256_BIT], byte(i)): success [140ms]
castShape took 140 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@286ac55): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 8, S_256_BIT], byte(i)): success [765ms]
castShape took 766 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b5f9dfc): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 4, S_256_BIT], byte(i)): success [151ms]
castShape took 151 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6a61fc87): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 64, S_512_BIT], byte(i)): success [10360ms]
castShape took 10360 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@56deba7b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 32, S_512_BIT], byte(i)): success [2855ms]
castShape took 2855 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f089e5a): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 16, S_512_BIT], byte(i)): success [651ms]
castShape took 651 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@294ff63b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 8, S_512_BIT], byte(i)): success [155ms]
castShape took 156 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@79e9a6e0): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 16, S_512_BIT], byte(i)): success [190ms]
castShape took 190 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63e75858): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 8, S_512_BIT], byte(i)): success [160ms]
castShape took 160 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@693101f): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 16, S_Max_BIT], byte(i)): success [516ms]
castShape took 516 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26ddddeb): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 8, S_Max_BIT], byte(i)): success [165ms]
castShape took 164 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75f408dd): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 4, S_Max_BIT], byte(i)): success [149ms]
castShape took 149 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59d0e70b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 2, S_Max_BIT], byte(i)): success [145ms]
castShape took 145 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@499f8b43): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 4, S_Max_BIT], byte(i)): success [155ms]
castShape took 155 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7848b175): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 2, S_Max_BIT], byte(i)): success [149ms]
castShape took 150 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48926f03): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 8, S_64_BIT], short(i)): success [1894ms]
castShape took 1894 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f44746e): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 4, S_64_BIT], short(i)): success [3284ms]
castShape took 3284 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49f40d9c): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 2, S_64_BIT], short(i)): success [830ms]
castShape took 829 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@783e0a85): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 1, S_64_BIT], short(i)): success [53ms]
castShape took 53 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@682f65d6): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 2, S_64_BIT], short(i)): success [11ms]
castShape took 12 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@31a601ce): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 1, S_64_BIT], short(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c25a547): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 16, S_128_BIT], short(i)): success [2110ms]
castShape took 2109 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@36a18f0a): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 8, S_128_BIT], short(i)): success [430ms]
castShape took 430 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c351bca): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 4, S_128_BIT], short(i)): success [31ms]
castShape took 32 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2bdbaf30): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 2, S_128_BIT], short(i)): success [22ms]
castShape took 22 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3a4086a8): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 4, S_128_BIT], short(i)): success [24ms]
castShape took 24 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13ad0ef5): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 2, S_128_BIT], short(i)): success [24ms]
castShape took 23 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4278f552): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 32, S_256_BIT], short(i)): success [2646ms]
castShape took 2646 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10f3b8c6): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 16, S_256_BIT], short(i)): success [4426ms]
castShape took 4426 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@733cf401): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 8, S_256_BIT], short(i)): success [87ms]
castShape took 88 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@73d0dbaa): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 4, S_256_BIT], short(i)): success [77ms]
castShape took 77 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2427b770): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 8, S_256_BIT], short(i)): success [84ms]
castShape took 85 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dd5f6a7): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 4, S_256_BIT], short(i)): success [78ms]
castShape took 68 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6197d613): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 64, S_512_BIT], short(i)): success [5868ms]
castShape took 5868 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5017cc66): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 32, S_512_BIT], short(i)): success [2739ms]
castShape took 2740 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@64047a52): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 16, S_512_BIT], short(i)): success [3398ms]
castShape took 3398 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8f4dbee): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 8, S_512_BIT], short(i)): success [884ms]
castShape took 884 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76693731): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 16, S_512_BIT], short(i)): success [2450ms]
castShape took 2450 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2de896d8): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 8, S_512_BIT], short(i)): success [85ms]
castShape took 85 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d8aba90): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 16, S_Max_BIT], short(i)): success [1091ms]
castShape took 1092 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6a41deb9): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 8, S_Max_BIT], short(i)): success [354ms]
castShape took 355 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@138c98cb): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 4, S_Max_BIT], short(i)): success [19ms]
castShape took 20 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@196a447d): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 2, S_Max_BIT], short(i)): success [18ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e7dae31): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 4, S_Max_BIT], short(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1f9c6bb): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 2, S_Max_BIT], short(i)): success [20ms]
castShape took 20 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@58d3315b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 8, S_64_BIT], int(i)): success [2458ms]
castShape took 2458 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e9d92e): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 4, S_64_BIT], int(i)): success [848ms]
castShape took 847 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bbd5bf9): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 2, S_64_BIT], int(i)): success [804ms]
castShape took 805 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@257058f7): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 1, S_64_BIT], int(i)): success [218ms]
castShape took 218 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29f4f73e): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 2, S_64_BIT], int(i)): success [9ms]
castShape took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b6a43c1): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 1, S_64_BIT], int(i)): success [11ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@28672e5b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 16, S_128_BIT], int(i)): success [546ms]
castShape took 546 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5e78cab): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 8, S_128_BIT], int(i)): success [2496ms]
castShape took 2497 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@11c71e54): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 4, S_128_BIT], int(i)): success [679ms]
castShape took 679 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37754ff7): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 2, S_128_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1936d71f): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 4, S_128_BIT], int(i)): success [16ms]
castShape took 17 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e24b32c): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 2, S_128_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cfd144a): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 32, S_256_BIT], int(i)): success [3574ms]
castShape took 3574 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@53b9fe3b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 16, S_256_BIT], int(i)): failure [2517ms]
java.lang.AssertionError:  expected [[S@75fba675] but found [[S@b000965]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertArrayEquals(Assert.java:201)
	at org.testng.Assert.assertEquals(Assert.java:119)
	at org.testng.Assert.assertEquals(Assert.java:617)
	at AbstractVectorConversionTest.conversion_kernel(AbstractVectorConversionTest.java:456)
	at VectorMaxConversionTests.castShape(VectorMaxConversionTests.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
castShape took 2513 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7190904f): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 8, S_256_BIT], int(i)): success [3686ms]
castShape took 3687 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7cef8e51): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 4, S_256_BIT], int(i)): success [109ms]
castShape took 109 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7515d734): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 8, S_256_BIT], int(i)): success [2404ms]
castShape took 2405 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@196b41fc): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 4, S_256_BIT], int(i)): success [111ms]
castShape took 111 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10ead20c): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 64, S_512_BIT], int(i)): success [6857ms]
castShape took 6857 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6daca19a): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 32, S_512_BIT], int(i)): success [3812ms]
castShape took 3813 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6aa40896): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 16, S_512_BIT], int(i)): success [2394ms]
castShape took 2393 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15ce862a): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 8, S_512_BIT], int(i)): success [3012ms]
castShape took 3013 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1a51840f): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 16, S_512_BIT], int(i)): success [2447ms]
castShape took 2447 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4720f1d3): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 8, S_512_BIT], int(i)): success [2523ms]
castShape took 2522 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@415e8de3): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 16, S_Max_BIT], int(i)): success [509ms]
castShape took 510 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@503c10a6): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 8, S_Max_BIT], int(i)): success [1022ms]
castShape took 1022 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f3456a5): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 4, S_Max_BIT], int(i)): success [218ms]
castShape took 219 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e463262): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12c07d5f): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 4, S_Max_BIT], int(i)): success [36ms]
castShape took 36 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b35aaff): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b042ef6): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 8, S_64_BIT], long(i)): success [883ms]
castShape took 883 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f7d6acf): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 4, S_64_BIT], long(i)): success [1074ms]
castShape took 1073 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@107a9eee): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 2, S_64_BIT], long(i)): success [1026ms]
castShape took 1026 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78ca2fc0): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 1, S_64_BIT], long(i)): success [1000ms]
castShape took 1001 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@38da126b): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 2, S_64_BIT], long(i)): success [17ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@735e5bed): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 1, S_64_BIT], long(i)): success [20ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6fe0e6c2): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 16, S_128_BIT], long(i)): success [1138ms]
castShape took 1138 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7dad1ccd): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 8, S_128_BIT], long(i)): success [567ms]
castShape took 567 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1fb41b8c): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 4, S_128_BIT], long(i)): success [2145ms]
castShape took 2146 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bda1694): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 2, S_128_BIT], long(i)): success [1431ms]
castShape took 1431 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66420265): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 4, S_128_BIT], long(i)): success [1246ms]
castShape took 1246 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@41c7ef7): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 2, S_128_BIT], long(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e956543): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 32, S_256_BIT], long(i)): success [7219ms]
castShape took 7219 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@68bc8c10): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 16, S_256_BIT], long(i)): success [4301ms]
castShape took 4301 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2398b46f): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 8, S_256_BIT], long(i)): success [3211ms]
castShape took 3210 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19452e95): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 4, S_256_BIT], long(i)): success [4466ms]
castShape took 4467 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@adb7311): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 8, S_256_BIT], long(i)): success [3584ms]
castShape took 3584 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34a5450c): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 4, S_256_BIT], long(i)): success [3181ms]
castShape took 3180 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@706ca348): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 64, S_512_BIT], long(i)): success [13572ms]
castShape took 13571 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b94d56d): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 32, S_512_BIT], long(i)): success [7244ms]
castShape took 7244 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@125efa25): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 16, S_512_BIT], long(i)): success [4266ms]
castShape took 4266 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1db55109): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 8, S_512_BIT], long(i)): success [3207ms]
castShape took 3205 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@ed56302): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 16, S_512_BIT], long(i)): success [4936ms]
castShape took 4936 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16f03f18): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 8, S_512_BIT], long(i)): success [3251ms]
castShape took 3251 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8797093): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 16, S_Max_BIT], long(i)): success [1020ms]
castShape took 1020 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19c0e73): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 8, S_Max_BIT], long(i)): success [589ms]
castShape took 589 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@58e163f6): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 4, S_Max_BIT], long(i)): success [1106ms]
castShape took 1106 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@30bf99a6): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 2, S_Max_BIT], long(i)): success [333ms]
castShape took 334 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1180fd4d): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 4, S_Max_BIT], long(i)): success [1174ms]
castShape took 1175 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c2655b1): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 2, S_Max_BIT], long(i)): success [18ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5c710174): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[byte, 8, S_64_BIT], float(i)): success [1439ms]
castShape took 1439 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78f7734d): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[short, 4, S_64_BIT], float(i)): success [1912ms]
castShape took 1912 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34927e7b): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[int, 2, S_64_BIT], float(i)): success [7ms]
castShape took 7 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4ad8e152): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT],

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

nt, 4, S_Max_BIT]): success [0ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c3da006): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[float, 4, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b49dd1e): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[int, 2, S_64_BIT]): success [2ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e568605): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[float, 2, S_64_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d592542): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[long, 2, S_128_BIT]): success [2ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@9a245e9): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[double, 2, S_128_BIT]): success [3ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@284e7903): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [3ms]
shuffleCast took 4 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@541885e1): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [3ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2a0ef22b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5ff8af5): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@315ca928): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c10d27c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50deebc7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25497aa7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e312a12): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29ca0791): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34b11482): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4c8b0070): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 5 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dc2b4a3): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f32cbdf): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bd29d38): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f66f336): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@69442165): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a6b811b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16462e67): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1305d893): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@611dd57b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e10bd83): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7869de30): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21b122bc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63e67cfa): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12838755): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@520bb97d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19452de4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44a14bf9): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76807c8e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5fee6e6): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@647c6831): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29211322): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@579b4a3f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7d284e15): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c7d3ead): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@400db070): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7699a09d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@74740bab): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5fd6c0fa): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6feeb1fd): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 48 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@620f40bc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5da168a1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7232626d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@310841cb): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c2d8368): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e1c5ece): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e3a6e7c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45e78690): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2205ea40): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8a727bc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6318a5a8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4c40b2a2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14c144a2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f179f4f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@470c46ea): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6d342060): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@265b629d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15bd7f52): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@419b05f9): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5517cc1b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3eda3697): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d3e072d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f0ffaec): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77e5a132): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17949e9d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3988d3f8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b163976): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17c7e714): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3cc04052): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d89c2c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@73eeb132): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66c528f7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@383e0d5f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@9fe9a00): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59d6c46): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@22a27d28): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f535136): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6f9bfcfb): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c10253e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e668e15): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@202c21b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5004148b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7af2dadd): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@418e75b3): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65023999): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12722c53): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ea8f6be): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2d7684b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27f99e8e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3952f3fd): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@60ec4a15): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3cb7d633): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@601d418a): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50eb255c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@20b0cb6d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8599b0): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5262d71e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b4e3b02): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57fd5bc2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59ad3e2c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6afa8cf7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65531e6f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b90d7cc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b6ac88d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@58b1a220): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b49e09e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a453e23): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4be00ed8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3653f2c1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78f79419): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@170a18fe): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3685fc68): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e6656e2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2281c8fb): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@348ca2f8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@53f9aca5): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7381c21d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@959ed1e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@ffb23c1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12124d4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@197e67f1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6651c590): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e121581): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a1d2b5f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6db5cb1d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c153a5d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17611355): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b9c9f1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@35873b71): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 16, S_256_BIT]): success [1ms]
shuffleCastNeg took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2079de3c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@780b60de): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6a04c78f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ef74279): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@ad848ae): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5d56bd10): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@35359554): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@32fc0baf): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@579d7af3): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b54a684): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27631c0d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6b13352b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6237bd38): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bd5b542): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63d7d3d6): success [0ms]

===============================================
jdk/incubator/vector/VectorMaxConversionTests.java#Z
Total tests run: 936, Passes: 935, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/8 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorMaxConversionTests_Z.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorMaxConversionTests.java#Z \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorMaxConversionTests_Z.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -XX:-TieredCompilation \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:+UnlockDiagnosticVMOptions \
        -XX:+UseKNLSetting \
        -XX:+UseZGC \
        -XX:+IgnoreUnrecognizedVMOptions \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/VectorMaxConversionTests_Z.d/testng.0.jta jdk/incubator/vector/VectorMaxConversionTests.java#Z false VectorMaxConversionTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
TEST: jdk/incubator/vector/VectorReshapeTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.404 seconds
messages:
command: build VectorReshapeTests
reason: Named class compiled on demand
started: Wed Apr 16 19:07:48 IST 2025
Test directory:
  compile: VectorReshapeTests
finished: Wed Apr 16 19:07:49 IST 2025
elapsed time (seconds): 0.404

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.403 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 19:07:48 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 10
Process id: 1529337
finished: Wed Apr 16 19:07:49 IST 2025
elapsed time (seconds): 0.403
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
REASON: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
TIME:   944.092 seconds
messages:
command: testng --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests
reason: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
started: Wed Apr 16 19:07:49 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1534546
finished: Wed Apr 16 19:23:33 IST 2025
elapsed time (seconds): 944.092
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorReshapeTests.testCastFromByte(byte(i)): success [40340ms]
test VectorReshapeTests.testCastFromDouble(double(i)): success [3335ms]
test VectorReshapeTests.testCastFromFloat(float(i)): success [4215ms]
test VectorReshapeTests.testCastFromInt(int(i)): success [4167ms]
test VectorReshapeTests.testCastFromLong(long(i)): success [3208ms]
test VectorReshapeTests.testCastFromShort(short(i)): success [4051ms]
test VectorReshapeTests.testRebracket128(byte(i)): success [22049ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
Failing with Species[short, 16, S_256_BIT]->Species[byte, 32, S_256_BIT] (lanewise), partLimit=-2, block=16, part=-1, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket256(byte(i)): failure [69250ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket256(VectorReshapeTests.java:955)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testRebracket512(byte(i)): success [165896ms]
test VectorReshapeTests.testRebracket64(byte(i)): success [16887ms]
test VectorReshapeTests.testRebracketMax(byte(i)): success [22934ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[byte, 16, S_128_BIT]->Species[byte, 64, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-1, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeByte(byte(i)): failure [118997ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeByte(VectorReshapeTests.java:447)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[double, 2, S_128_BIT]->Species[double, 4, S_256_BIT] (reinterpret), partLimit=-2, block=16, part=-1, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeDouble(byte(i)): failure [10941ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeDouble(VectorReshapeTests.java:676)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testReshapeFloat(byte(i)): success [157177ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[int, 4, S_Max_BIT]->Species[int, 16, S_512_BIT] (lanewise), partLimit=-4, block=16, part=-1, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeInt(byte(i)): failure [116748ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeInt(VectorReshapeTests.java:557)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[long, 1, S_64_BIT]->Species[long, 8, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-7, origin=56
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeLong(byte(i)): failure [58022ms]
java.lang.AssertionError: arrays differ firstly at element [56]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeLong(VectorReshapeTests.java:579)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[short, 4, S_64_BIT]->Species[short, 32, S_512_BIT] (reinterpret), partLimit=-8, block=8, part=-4, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeShort(byte(i)): failure [86385ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeShort(VectorReshapeTests.java:487)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testUCastFromByte(byte(i)): success [22362ms]
test VectorReshapeTests.testUCastFromInt(int(i)): success [1ms]
test VectorReshapeTests.testUCastFromShort(short(i)): success [11392ms]

===============================================
jdk/incubator/vector/VectorReshapeTests.java
Total tests run: 20, Passes: 14, Failures: 6, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 6
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 6
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/VectorReshapeTests.d/testng.0.jta jdk/incubator/vector/VectorReshapeTests.java false VectorReshapeTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
--------------------------------------------------
Passed: jdk/incubator/vector/Vector64ConversionTests.java#id0
Test results: passed: 72; failed: 8; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector
Finished running test 'jtreg:test/jdk:jdk_vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk:jdk_vector                            83    72     8     0     3 <<
==============================
TEST FAILURE

