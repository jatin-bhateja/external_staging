Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/jdk/incubator/vector/', will run:
* jtreg:test/jdk/jdk/incubator/vector
Clean up dirs for jtreg_test_jdk_jdk_incubator_vector

Running test 'jtreg:test/jdk/jdk/incubator/vector'
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorTests.java
Passed: jdk/incubator/vector/Double512VectorTests.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorTests.java
Passed: jdk/incubator/vector/Double256VectorTests.java
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorTests.java
Passed: jdk/incubator/vector/ByteMaxVectorTests.java
Passed: jdk/incubator/vector/FloatMaxVectorTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float512VectorTests.java
Passed: jdk/incubator/vector/Int128VectorTests.java
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorTests.java
Passed: jdk/incubator/vector/Double64VectorTests.java
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/MethodOverideTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
--------------------------------------------------
TEST: jdk/incubator/vector/Byte128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   27.668 seconds
messages:
command: build Byte128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 22:14:41 IST 2025
Test directory:
  compile: Byte128VectorTests
finished: Wed Apr 16 22:15:09 IST 2025
elapsed time (seconds): 27.668

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   27.664 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 22:14:41 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 14
Process id: 1661149
finished: Wed Apr 16 22:15:09 IST 2025
elapsed time (seconds): 27.664
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Byte128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/14 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Byte128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Byte128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Byte128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Byte128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Byte128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Byte128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte128VectorTests 
TIME:   519.534 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Byte128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte128VectorTests 
started: Wed Apr 16 22:15:09 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1662146
finished: Wed Apr 16 22:23:48 IST 2025
elapsed time (seconds): 519.534
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -9157199165158395615
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-9157199165158395615" to command line.
test Byte128VectorTests.ABSByte128VectorTests(byte[-i * 5]): success [582ms]
test Byte128VectorTests.ABSByte128VectorTests(byte[i * 5]): success [58ms]
test Byte128VectorTests.ABSByte128VectorTests(byte[i + 1]): success [26ms]
test Byte128VectorTests.ABSByte128VectorTests(byte[cornerCaseValue(i)]): success [3ms]
test Byte128VectorTests.ABSMaskedByte128VectorTests(byte[-i * 5], mask[i % 2]): success [211ms]
test Byte128VectorTests.ABSMaskedByte128VectorTests(byte[i * 5], mask[i % 2]): success [75ms]
test Byte128VectorTests.ABSMaskedByte128VectorTests(byte[i + 1], mask[i % 2]): success [8ms]
test Byte128VectorTests.ABSMaskedByte128VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte128VectorTests.ABSMaskedByte128VectorTests(byte[-i * 5], mask[true]): success [1ms]
test Byte128VectorTests.ABSMaskedByte128VectorTests(byte[i * 5], mask[true]): success [1ms]
test Byte128VectorTests.ABSMaskedByte128VectorTests(byte[i + 1], mask[true]): success [1ms]
test Byte128VectorTests.ABSMaskedByte128VectorTests(byte[cornerCaseValue(i)], mask[true]): success [3ms]
test Byte128VectorTests.ABSMaskedByte128VectorTests(byte[-i * 5], mask[false]): success [0ms]
test Byte128VectorTests.ABSMaskedByte128VectorTests(byte[i * 5], mask[false]): success [0ms]
test Byte128VectorTests.ABSMaskedByte128VectorTests(byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.ABSMaskedByte128VectorTests(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.ADDByte128VectorTests(byte[-i * 5], byte[i * 5]): success [237ms]
test Byte128VectorTests.ADDByte128VectorTests(byte[-i * 5], byte[i + 1]): success [61ms]
test Byte128VectorTests.ADDByte128VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.ADDByte128VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5]): success [65ms]
test Byte128VectorTests.ADDByte128VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1]): success [3ms]
test Byte128VectorTests.ADDByte128VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [4ms]
test Byte128VectorTests.ADDByte128VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [28ms]
test Byte128VectorTests.ADDByte128VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [12ms]
test Byte128VectorTests.ADDByte128VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [9ms]
test Byte128VectorTests.ADDByte128VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [42ms]
test Byte128VectorTests.ADDByte128VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [3ms]
test Byte128VectorTests.ADDByte128VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [3ms]
test Byte128VectorTests.ADDByte128VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [56ms]
test Byte128VectorTests.ADDByte128VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [2ms]
test Byte128VectorTests.ADDByte128VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte128VectorTests.ADDByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [164ms]
test Byte128VectorTests.ADDByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [78ms]
test Byte128VectorTests.ADDByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte128VectorTests.ADDByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte128VectorTests.ADDByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.ADDByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.ADDByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [56ms]
test Byte128VectorTests.ADDByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.ADDByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.ADDReduceByte128VectorTests(byte[-i * 5]): success [149ms]
test Byte128VectorTests.ADDReduceByte128VectorTests(byte[i * 5]): success [0ms]
test Byte128VectorTests.ADDReduceByte128VectorTests(byte[i + 1]): success [98ms]
test Byte128VectorTests.ADDReduceByte128VectorTests(byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.ADDReduceByte128VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [127ms]
test Byte128VectorTests.ADDReduceByte128VectorTestsMasked(byte[i * 5], mask[i % 2]): success [0ms]
test Byte128VectorTests.ADDReduceByte128VectorTestsMasked(byte[i + 1], mask[i % 2]): success [124ms]
test Byte128VectorTests.ADDReduceByte128VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte128VectorTests.ADDReduceByte128VectorTestsMasked(byte[-i * 5], mask[true]): success [0ms]
test Byte128VectorTests.ADDReduceByte128VectorTestsMasked(byte[i * 5], mask[true]): success [0ms]
test Byte128VectorTests.ADDReduceByte128VectorTestsMasked(byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.ADDReduceByte128VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.ADDReduceByte128VectorTestsMasked(byte[-i * 5], mask[false]): success [0ms]
test Byte128VectorTests.ADDReduceByte128VectorTestsMasked(byte[i * 5], mask[false]): success [0ms]
test Byte128VectorTests.ADDReduceByte128VectorTestsMasked(byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.ADDReduceByte128VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.ADDReduceLongByte128VectorTests(byte[-i * 5]): success [19ms]
test Byte128VectorTests.ADDReduceLongByte128VectorTests(byte[i * 5]): success [0ms]
test Byte128VectorTests.ADDReduceLongByte128VectorTests(byte[i + 1]): success [7ms]
test Byte128VectorTests.ADDReduceLongByte128VectorTests(byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.ADDReduceLongByte128VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [9ms]
test Byte128VectorTests.ADDReduceLongByte128VectorTestsMasked(byte[i * 5], mask[i % 2]): success [1ms]
test Byte128VectorTests.ADDReduceLongByte128VectorTestsMasked(byte[i + 1], mask[i % 2]): success [13ms]
test Byte128VectorTests.ADDReduceLongByte128VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte128VectorTests.ADDReduceLongByte128VectorTestsMasked(byte[-i * 5], mask[true]): success [0ms]
test Byte128VectorTests.ADDReduceLongByte128VectorTestsMasked(byte[i * 5], mask[true]): success [0ms]
test Byte128VectorTests.ADDReduceLongByte128VectorTestsMasked(byte[i + 1], mask[true]): success [77ms]
test Byte128VectorTests.ADDReduceLongByte128VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.ADDReduceLongByte128VectorTestsMasked(byte[-i * 5], mask[false]): success [0ms]
test Byte128VectorTests.ADDReduceLongByte128VectorTestsMasked(byte[i * 5], mask[false]): success [0ms]
test Byte128VectorTests.ADDReduceLongByte128VectorTestsMasked(byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.ADDReduceLongByte128VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.ANDByte128VectorTests(byte[-i * 5], byte[i * 5]): success [121ms]
test Byte128VectorTests.ANDByte128VectorTests(byte[-i * 5], byte[i + 1]): success [65ms]
test Byte128VectorTests.ANDByte128VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.ANDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [21ms]
test Byte128VectorTests.ANDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [4ms]
test Byte128VectorTests.ANDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Byte128VectorTests.ANDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [3ms]
test Byte128VectorTests.ANDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [2ms]
test Byte128VectorTests.ANDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte128VectorTests.ANDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [30ms]
test Byte128VectorTests.ANDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [2ms]
test Byte128VectorTests.ANDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte128VectorTests.ANDByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [5ms]
test Byte128VectorTests.ANDByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte128VectorTests.ANDByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [3ms]
test Byte128VectorTests.ANDByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [11ms]
test Byte128VectorTests.ANDByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [106ms]
test Byte128VectorTests.ANDByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte128VectorTests.ANDByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte128VectorTests.ANDByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte128VectorTests.ANDByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.ANDByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte128VectorTests.ANDByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.ANDByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.ANDReduceByte128VectorTests(byte[-i * 5]): success [177ms]
test Byte128VectorTests.ANDReduceByte128VectorTests(byte[i * 5]): success [0ms]
test Byte128VectorTests.ANDReduceByte128VectorTests(byte[i + 1]): success [105ms]
test Byte128VectorTests.ANDReduceByte128VectorTests(byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.ANDReduceByte128VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [82ms]
test Byte128VectorTests.ANDReduceByte128VectorTestsMasked(byte[i * 5], mask[i % 2]): success [0ms]
test Byte128VectorTests.ANDReduceByte128VectorTestsMasked(byte[i + 1], mask[i % 2]): success [137ms]
test Byte128VectorTests.ANDReduceByte128VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte128VectorTests.ANDReduceByte128VectorTestsMasked(byte[-i * 5], mask[true]): success [0ms]
test Byte128VectorTests.ANDReduceByte128VectorTestsMasked(byte[i * 5], mask[true]): success [0ms]
test Byte128VectorTests.ANDReduceByte128VectorTestsMasked(byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.ANDReduceByte128VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.ANDReduceByte128VectorTestsMasked(byte[-i * 5], mask[false]): success [0ms]
test Byte128VectorTests.ANDReduceByte128VectorTestsMasked(byte[i * 5], mask[false]): success [0ms]
test Byte128VectorTests.ANDReduceByte128VectorTestsMasked(byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.ANDReduceByte128VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte128VectorTests.AND_NOTByte128VectorTests(byte[-i * 5], byte[i * 5]): success [210ms]
test Byte128VectorTests.AND_NOTByte128VectorTests(byte[-i * 5], byte[i + 1]): success [111ms]
test Byte128VectorTests.AND_NOTByte128VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.AND_NOTByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [84ms]
test Byte128VectorTests.AND_NOTByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [89ms]
test Byte128VectorTests.AND_NOTByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte128VectorTests.AND_NOTByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte128VectorTests.AND_NOTByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.AND_NOTByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.AND_NOTByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte128VectorTests.AND_NOTByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.AND_NOTByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.ASHRByte128VectorTests(byte[-i * 5], byte[i * 5]): success [150ms]
test Byte128VectorTests.ASHRByte128VectorTests(byte[-i * 5], byte[i + 1]): success [111ms]
test Byte128VectorTests.ASHRByte128VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [3ms]
test Byte128VectorTests.ASHRByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [111ms]
test Byte128VectorTests.ASHRByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [77ms]
test Byte128VectorTests.ASHRByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Byte128VectorTests.ASHRByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [4ms]
test Byte128VectorTests.ASHRByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [3ms]
test Byte128VectorTests.ASHRByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [3ms]
test Byte128VectorTests.ASHRByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [3ms]
test Byte128VectorTests.ASHRByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [3ms]
test Byte128VectorTests.ASHRByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [4ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShift(byte[-i * 5], byte[i * 5]): success [258ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShift(byte[-i * 5], byte[i + 1]): success [61ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShift(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftConst(byte[-i * 5]): success [49ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftConst(byte[i * 5]): success [60ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftConst(byte[i + 1]): success [0ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftConst(byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [113ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [74ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[false]): success [33ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[i % 2]): success [12ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[i % 2]): success [62ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[i % 2]): success [4ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[true]): success [0ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[true]): success [0ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[true]): success [59ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[false]): success [0ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[false]): success [0ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.ASHRByte128VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTests(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [119ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTests(byte[-i * 5], byte[i * 5], byte[i * 5]): success [98ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTests(byte[-i * 5], byte[i * 5], byte[i + 1]): success [1ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTests(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTests(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTests(byte[-i * 5], byte[i + 1], byte[i * 5]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTests(byte[-i * 5], byte[i + 1], byte[i + 1]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTests(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [333ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [1ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [5ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [1ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [1ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [68ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [72ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [7ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [1ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [1ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [42ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [7ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [36ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [66ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [19ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [4ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [1ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [46ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.BITWISE_BLENDByte128VectorTests

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

wiseBlendByte128VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [0ms]
test Byte128VectorTests.bitwiseBlendByte128VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.bitwiseBlendByte128VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [0ms]
test Byte128VectorTests.bitwiseBlendByte128VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [0ms]
test Byte128VectorTests.bitwiseBlendByte128VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [0ms]
test Byte128VectorTests.bitwiseBlendByte128VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.bitwiseBlendByte128VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [0ms]
test Byte128VectorTests.bitwiseBlendByte128VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [0ms]
test Byte128VectorTests.bitwiseBlendByte128VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [0ms]
test Byte128VectorTests.bitwiseBlendByte128VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.bitwiseDivByZeroSmokeTest(): success [17ms]
test Byte128VectorTests.blendByte128VectorTests(byte[-i * 5], byte[i * 5], mask[i % 2]): success [25ms]
test Byte128VectorTests.blendByte128VectorTests(byte[-i * 5], byte[i + 1], mask[i % 2]): success [60ms]
test Byte128VectorTests.blendByte128VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte128VectorTests.blendByte128VectorTests(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte128VectorTests.blendByte128VectorTests(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.blendByte128VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.blendByte128VectorTests(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte128VectorTests.blendByte128VectorTests(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.blendByte128VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.blendByte128VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [35ms]
test Byte128VectorTests.blendByte128VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [80ms]
test Byte128VectorTests.blendByte128VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte128VectorTests.blendByte128VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte128VectorTests.blendByte128VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.blendByte128VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.blendByte128VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte128VectorTests.blendByte128VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.blendByte128VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.compressByte128VectorTests(byte[-i * 5], mask[i % 2]): success [168ms]
test Byte128VectorTests.compressByte128VectorTests(byte[i * 5], mask[i % 2]): success [85ms]
test Byte128VectorTests.compressByte128VectorTests(byte[i + 1], mask[i % 2]): success [11ms]
test Byte128VectorTests.compressByte128VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [11ms]
test Byte128VectorTests.compressByte128VectorTests(byte[-i * 5], mask[true]): success [71ms]
test Byte128VectorTests.compressByte128VectorTests(byte[i * 5], mask[true]): success [0ms]
test Byte128VectorTests.compressByte128VectorTests(byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.compressByte128VectorTests(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.compressByte128VectorTests(byte[-i * 5], mask[false]): success [10ms]
test Byte128VectorTests.compressByte128VectorTests(byte[i * 5], mask[false]): success [10ms]
test Byte128VectorTests.compressByte128VectorTests(byte[i + 1], mask[false]): success [10ms]
test Byte128VectorTests.compressByte128VectorTests(byte[cornerCaseValue(i)], mask[false]): success [10ms]
test Byte128VectorTests.divByte128VectorTests(byte[-i * 5], byte[i * 5]): success [344ms]
test Byte128VectorTests.divByte128VectorTests(byte[-i * 5], byte[i + 1]): success [371ms]
test Byte128VectorTests.divByte128VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [265ms]
test Byte128VectorTests.divByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [126ms]
test Byte128VectorTests.divByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [2ms]
test Byte128VectorTests.divByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte128VectorTests.divByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [4ms]
test Byte128VectorTests.divByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [2ms]
test Byte128VectorTests.divByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte128VectorTests.divByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [2ms]
test Byte128VectorTests.divByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [3ms]
test Byte128VectorTests.divByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte128VectorTests.divByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [12ms]
test Byte128VectorTests.divByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte128VectorTests.divByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [9ms]
test Byte128VectorTests.divByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [384ms]
test Byte128VectorTests.divByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [434ms]
test Byte128VectorTests.divByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [265ms]
test Byte128VectorTests.divByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [273ms]
test Byte128VectorTests.divByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [265ms]
test Byte128VectorTests.divByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [265ms]
test Byte128VectorTests.divByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): failure [361ms]
java.lang.AssertionError: at index #2928, input1 = -48, input2 = 48, mask = false expected [-48] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:841)
	at Byte128VectorTests.assertArraysEquals(Byte128VectorTests.java:455)
	at Byte128VectorTests.assertArraysEquals(Byte128VectorTests.java:445)
	at Byte128VectorTests.divByte128VectorTestsMasked(Byte128VectorTests.java:1800)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Byte128VectorTests.divByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [281ms]
test Byte128VectorTests.divByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [265ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i], byte[i]): success [352ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i], byte[i - length / 2]): success [271ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i], byte[i + 1]): success [278ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i], byte[i - 2]): success [270ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i], byte[zigZag(i)]): success [277ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i], byte[cornerCaseValue(i)]): success [278ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i - length / 2], byte[i]): success [270ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i - length / 2], byte[i - length / 2]): success [275ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i - length / 2], byte[i + 1]): success [270ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i - length / 2], byte[i - 2]): success [276ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [270ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [270ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i + 1], byte[i]): success [276ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i + 1], byte[i - length / 2]): success [270ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i + 1], byte[i + 1]): success [311ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i + 1], byte[i - 2]): success [270ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i + 1], byte[zigZag(i)]): success [271ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [270ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i - 2], byte[i]): success [270ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i - 2], byte[i - length / 2]): success [270ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i - 2], byte[i + 1]): success [270ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i - 2], byte[i - 2]): success [372ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i - 2], byte[zigZag(i)]): success [270ms]
test Byte128VectorTests.eqByte128VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [285ms]
test Byte128VectorTests.eqByte128VectorTests(byte[zigZag(i)], byte[i]): success [278ms]
test Byte128VectorTests.eqByte128VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [283ms]
test Byte128VectorTests.eqByte128VectorTests(byte[zigZag(i)], byte[i + 1]): success [271ms]
test Byte128VectorTests.eqByte128VectorTests(byte[zigZag(i)], byte[i - 2]): success [271ms]
test Byte128VectorTests.eqByte128VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [269ms]
test Byte128VectorTests.eqByte128VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [270ms]
test Byte128VectorTests.eqByte128VectorTests(byte[cornerCaseValue(i)], byte[i]): success [270ms]
test Byte128VectorTests.eqByte128VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [278ms]
test Byte128VectorTests.eqByte128VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [276ms]
test Byte128VectorTests.eqByte128VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [270ms]
test Byte128VectorTests.eqByte128VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [270ms]
test Byte128VectorTests.eqByte128VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [269ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i]): success [3ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - length / 2]): success [3ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i + 1]): success [3ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - 2]): success [3ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[zigZag(i)]): success [3ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [3ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i]): success [64ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [3ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i + 1]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - 2]): success [3ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - length / 2]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i + 1]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - 2]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[zigZag(i)]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - length / 2]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i + 1]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - 2]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[zigZag(i)]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i]): success [3ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i + 1]): success [3ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - 2]): success [10ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [3ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [2ms]
test Byte128VectorTests.eqByte128VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [2ms]
test Byte128VectorTests.expandByte128VectorTests(byte[-i * 5], mask[i % 2]): success [161ms]
test Byte128VectorTests.expandByte128VectorTests(byte[i * 5], mask[i % 2]): success [81ms]
test Byte128VectorTests.expandByte128VectorTests(byte[i + 1], mask[i % 2]): success [11ms]
test Byte128VectorTests.expandByte128VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [11ms]
test Byte128VectorTests.expandByte128VectorTests(byte[-i * 5], mask[true]): success [53ms]
test Byte128VectorTests.expandByte128VectorTests(byte[i * 5], mask[true]): success [0ms]
test Byte128VectorTests.expandByte128VectorTests(byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.expandByte128VectorTests(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.expandByte128VectorTests(byte[-i * 5], mask[false]): success [10ms]
test Byte128VectorTests.expandByte128VectorTests(byte[i * 5], mask[false]): success [10ms]
test Byte128VectorTests.expandByte128VectorTests(byte[i + 1], mask[false]): success [10ms]
test Byte128VectorTests.expandByte128VectorTests(byte[cornerCaseValue(i)], mask[false]): success [10ms]
test Byte128VectorTests.getByte128VectorTests(byte[-i * 5]): success [13ms]
test Byte128VectorTests.getByte128VectorTests(byte[i * 5]): success [97ms]
test Byte128VectorTests.getByte128VectorTests(byte[i + 1]): success [0ms]
test Byte128VectorTests.getByte128VectorTests(byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.hashCodeByte128VectorTestsSmokeTest(byte[-i * 5]): success [38ms]
test Byte128VectorTests.hashCodeByte128VectorTestsSmokeTest(byte[i * 5]): success [2ms]
test Byte128VectorTests.hashCodeByte128VectorTestsSmokeTest(byte[i + 1]): success [12ms]
test Byte128VectorTests.hashCodeByte128VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [1ms]
test Byte128VectorTests.indexInRangeByte128VectorTestsSmokeTest(0): success [76ms]
test Byte128VectorTests.indexInRangeByte128VectorTestsSmokeTest(-1): success [8ms]
test Byte128VectorTests.indexInRangeByte128VectorTestsSmokeTest(1): success [23ms]
test Byte128VectorTests.indexInRangeByte128VectorTestsSmokeTest(2): success [7ms]
test Byte128VectorTests.indexInRangeByte128VectorTestsSmokeTest(-2): success [7ms]
test Byte128VectorTests.indexInRangeLongByte128VectorTestsSmokeTest(0): success [7ms]
test Byte128VectorTests.indexInRangeLongByte128VectorTestsSmokeTest(-1): success [7ms]
test Byte128VectorTests.indexInRangeLongByte128VectorTestsSmokeTest(1): success [7ms]
test Byte128VectorTests.indexInRangeLongByte128VectorTestsSmokeTest(2): success [7ms]
test Byte128VectorTests.indexInRangeLongByte128VectorTestsSmokeTest(-2): success [7ms]
test Byte128VectorTests.loopBoundByte128VectorTestsSmokeTest(0): success [0ms]
test Byte128VectorTests.loopBoundByte128VectorTestsSmokeTest(1): success [0ms]
test Byte128VectorTests.loopBoundByte128VectorTestsSmokeTest(32): success [0ms]
test Byte128VectorTests.loopBoundByte128VectorTestsSmokeTest(37): success [0ms]
test Byte128VectorTests.loopBoundByte128VectorTestsSmokeTest(1024): success [0ms]
test Byte128VectorTests.loopBoundByte128VectorTestsSmokeTest(1025): success [0ms]
test Byte128VectorTests.loopBoundByte128VectorTestsSmokeTest(1029): success [0ms]
test Byte128VectorTests.loopBoundLongByte128VectorTestsSmokeTest(0): success [0ms]
test Byte128VectorTests.loopBoundLongByte128VectorTestsSmokeTest(1): success [0ms]
test Byte128VectorTests.loopBoundLongByte128VectorTestsSmokeTest(32): success [0ms]
test Byte128VectorTests.loopBoundLongByte128VectorTestsSmokeTest(37): success [0ms]
test Byte128VectorTests.loopBoundLongByte128VectorTestsSmokeTest(1024): success [0ms]
test Byte128VectorTests.loopBoundLongByte128VectorTestsSmokeTest(1025): success [0ms]
test Byte128VectorTests.loopBoundLongByte128VectorTestsSmokeTest(1029): success [0ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i], byte[i]): success [335ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i], byte[i - length / 2]): success [272ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i], byte[i + 1]): success [288ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i], byte[i - 2]): success [272ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i], byte[zigZag(i)]): success [273ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i], byte[cornerCaseValue(i)]): success [280ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i - length / 2], byte[i]): success [271ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i - length / 2], byte[i - length / 2]): success [271ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i - length / 2], byte[i + 1]): success [272ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i - length / 2], byte[i - 2]): success [272ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [278ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [273ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i + 1], byte[i]): success [271ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i + 1], byte[i - length / 2]): success [272ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i + 1], byte[i + 1]): success [272ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i + 1], byte[i - 2]): success [271ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i + 1], byte[zigZag(i)]): success [278ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [273ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i - 2], byte[i]): success [278ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i - 2], byte[i - length / 2]): success [272ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i - 2], byte[i + 1]): success [271ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i - 2], byte[i - 2]): success [272ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i - 2], byte[zigZag(i)]): success [272ms]
test Byte128VectorTests.ltByte128VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [273ms]
test Byte128VectorTests.ltByte128VectorTests(byte[zigZag(i)], byte[i]): success [285ms]
test Byte128VectorTests.ltByte128VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [280ms]
test Byte128VectorTests.ltByte128VectorTests(byte[zigZag(i)], byte[i + 1]): success [285ms]
test Byte128VectorTests.ltByte128VectorTests(byte[zigZag(i)], byte[i - 2]): success [271ms]
test Byte128VectorTests.ltByte128VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [271ms]
test Byte128VectorTests.ltByte128VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [273ms]
test Byte128VectorTests.ltByte128VectorTests(byte[cornerCaseValue(i)], byte[i]): success [320ms]
test Byte128VectorTests.ltByte128VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [281ms]
test Byte128VectorTests.ltByte128VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [280ms]
test Byte128VectorTests.ltByte128VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [306ms]
test Byte128VectorTests.ltByte128VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [273ms]
test Byte128VectorTests.ltByte128VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [271ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i], byte[i]): success [3ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i], byte[i - length / 2]): success [3ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i], byte[i + 1]): success [3ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i], byte[i - 2]): success [3ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i], byte[zigZag(i)]): success [3ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [3ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i]): success [64ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i + 1]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - 2]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - length / 2]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i + 1]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - 2]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i + 1], byte[zigZag(i)]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i]): success [3ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - length / 2]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i + 1]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - 2]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i - 2], byte[zigZag(i)]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i + 1]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - 2]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [3ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [2ms]
test Byte128VectorTests.ltByte128VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [2ms]
test Byte128VectorTests.maskAndByte128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [16ms]
test Byte128VectorTests.maskAndByte128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte128VectorTests.maskAndNotByte128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Byte128VectorTests.maskAndNotByte128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte128VectorTests.maskCompressByte128VectorTestsSmokeTest(mask[i % 2]): success [344ms]
test Byte128VectorTests.maskCompressByte128VectorTestsSmokeTest(mask[true]): success [203ms]
test Byte128VectorTests.maskCompressByte128VectorTestsSmokeTest(mask[false]): success [148ms]
test Byte128VectorTests.maskEqByte128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Byte128VectorTests.maskEqByte128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte128VectorTests.maskEqualsByte128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Byte128VectorTests.maskEqualsByte128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte128VectorTests.maskFirstTrueByte128VectorTestsSmokeTest(mask[i % 2]): success [73ms]
test Byte128VectorTests.maskFirstTrueByte128VectorTestsSmokeTest(mask[true]): success [37ms]
test Byte128VectorTests.maskFirstTrueByte128VectorTestsSmokeTest(mask[false]): success [0ms]
test Byte128VectorTests.maskFromToLongByte128VectorTestsSmokeTest(-1): success [66ms]
test Byte128VectorTests.maskFromToLongByte128VectorTestsSmokeTest(0): success [0ms]
test Byte128VectorTests.maskFromToLongByte128VectorTestsSmokeTest(6148914691236517205): success [4ms]
test Byte128VectorTests.maskFromToLongByte128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Byte128VectorTests.maskHashCodeByte128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Byte128VectorTests.maskHashCodeByte128VectorTestsSmokeTest(mask[true]): success [0ms]
test Byte128VectorTests.maskHashCodeByte128VectorTestsSmokeTest(mask[false]): success [0ms]
test Byte128VectorTests.maskLastTrueByte128VectorTestsSmokeTest(mask[i % 2]): success [116ms]
test Byte128VectorTests.maskLastTrueByte128VectorTestsSmokeTest(mask[true]): success [37ms]
test Byte128VectorTests.maskLastTrueByte128VectorTestsSmokeTest(mask[false]): success [26ms]
test Byte128VectorTests.maskOrByte128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [20ms]
test Byte128VectorTests.maskOrByte128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte128VectorTests.maskTrueCountByte128VectorTestsSmokeTest(mask[i % 2]): success [71ms]
test Byte128VectorTests.maskTrueCountByte128VectorTestsSmokeTest(mask[true]): success [36ms]
test Byte128VectorTests.maskTrueCountByte128VectorTestsSmokeTest(mask[false]): success [0ms]
test Byte128VectorTests.maskXorByte128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Byte128VectorTests.maskXorByte128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte128VectorTests.maxByte128VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte128VectorTests.maxByte128VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte128VectorTests.maxByte128VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte128VectorTests.maxByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte128VectorTests.maxByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte128VectorTests.maxByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.minByte128VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte128VectorTests.minByte128VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte128VectorTests.minByte128VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte128VectorTests.minByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte128VectorTests.minByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte128VectorTests.minByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.mulByte128VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte128VectorTests.mulByte128VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte128VectorTests.mulByte128VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte128VectorTests.mulByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [5ms]
test Byte128VectorTests.mulByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte128VectorTests.mulByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte128VectorTests.mulByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte128VectorTests.mulByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.mulByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.mulByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte128VectorTests.mulByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.mulByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.mulByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte128VectorTests.mulByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte128VectorTests.mulByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.mulByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [6ms]
test Byte128VectorTests.mulByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte128VectorTests.mulByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte128VectorTests.mulByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte128VectorTests.mulByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.mulByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.mulByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte128VectorTests.mulByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.mulByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.negByte128VectorTests(byte[-i * 5]): success [15ms]
test Byte128VectorTests.negByte128VectorTests(byte[i * 5]): success [59ms]
test Byte128VectorTests.negByte128VectorTests(byte[i + 1]): success [0ms]
test Byte128VectorTests.negByte128VectorTests(byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.notByte128VectorTests(byte[-i * 5]): success [19ms]
test Byte128VectorTests.notByte128VectorTests(byte[i * 5]): success [71ms]
test Byte128VectorTests.notByte128VectorTests(byte[i + 1]): success [0ms]
test Byte128VectorTests.notByte128VectorTests(byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.orByte128VectorTests(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte128VectorTests.orByte128VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte128VectorTests.orByte128VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte128VectorTests.orByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte128VectorTests.orByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte128VectorTests.orByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.reinterpretAsBytesByte128VectorTestsSmokeTest(byte[-i * 5]): success [1ms]
test Byte128VectorTests.reinterpretAsBytesByte128VectorTestsSmokeTest(byte[i * 5]): success [18ms]
test Byte128VectorTests.reinterpretAsBytesByte128VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte128VectorTests.reinterpretAsBytesByte128VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.shuffleEqualsByte128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [1061ms]
test Byte128VectorTests.shuffleEqualsByte128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [407ms]
test Byte128VectorTests.shuffleMiscellaneousByte128VectorTestsSmokeTest(shuffle[random]): success [72ms]
test Byte128VectorTests.shuffleTest(): success [593ms]
test Byte128VectorTests.shuffleToStringByte128VectorTestsSmokeTest(shuffle[random]): success [142ms]
test Byte128VectorTests.sliceBinaryByte128VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [650ms]
test Byte128VectorTests.sliceBinaryByte128VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [393ms]
test Byte128VectorTests.sliceBinaryByte128VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [390ms]
test Byte128VectorTests.sliceByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [338ms]
test Byte128VectorTests.sliceByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [420ms]
test Byte128VectorTests.sliceByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [264ms]
test Byte128VectorTests.sliceByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [263ms]
test Byte128VectorTests.sliceByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [281ms]
test Byte128VectorTests.sliceByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [264ms]
test Byte128VectorTests.sliceByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [264ms]
test Byte128VectorTests.sliceByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [264ms]
test Byte128VectorTests.sliceByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [355ms]
test Byte128VectorTests.sliceUnaryByte128VectorTests(byte[-i * 5]): success [384ms]
test Byte128VectorTests.sliceUnaryByte128VectorTests(byte[i * 5]): success [371ms]
test Byte128VectorTests.sliceUnaryByte128VectorTests(byte[i + 1]): success [263ms]
test Byte128VectorTests.sliceUnaryByte128VectorTests(byte[cornerCaseValue(i)]): success [263ms]
test Byte128VectorTests.smokeTest1(): success [17ms]
test Byte128VectorTests.smokeTest2(): success [86ms]
test Byte128VectorTests.subByte128VectorTests(byte[-i * 5], byte[i * 5]): success [78ms]
test Byte128VectorTests.subByte128VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte128VectorTests.subByte128VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte128VectorTests.subByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [257ms]
test Byte128VectorTests.subByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte128VectorTests.subByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte128VectorTests.subByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte128VectorTests.subByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.subByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.subByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte128VectorTests.subByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.subByte128VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.subByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [29ms]
test Byte128VectorTests.subByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte128VectorTests.subByte128VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.subByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [4ms]
test Byte128VectorTests.subByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [88ms]
test Byte128VectorTests.subByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte128VectorTests.subByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte128VectorTests.subByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte128VectorTests.subByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte128VectorTests.subByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte128VectorTests.subByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte128VectorTests.subByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte128VectorTests.toDoubleArrayByte128VectorTestsSmokeTest(byte[-i * 5]): success [1ms]
test Byte128VectorTests.toDoubleArrayByte128VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte128VectorTests.toDoubleArrayByte128VectorTestsSmokeTest(byte[i + 1]): success [3ms]
test Byte128VectorTests.toDoubleArrayByte128VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.toIntArrayByte128VectorTestsSmokeTest(byte[-i * 5]): success [3ms]
test Byte128VectorTests.toIntArrayByte128VectorTestsSmokeTest(byte[i * 5]): success [9ms]
test Byte128VectorTests.toIntArrayByte128VectorTestsSmokeTest(byte[i + 1]): success [7ms]
test Byte128VectorTests.toIntArrayByte128VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.toLongArrayByte128VectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test Byte128VectorTests.toLongArrayByte128VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte128VectorTests.toLongArrayByte128VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte128VectorTests.toLongArrayByte128VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte128VectorTests.toStringByte128VectorTestsSmokeTest(byte[-i * 5]): success [15ms]
test Byte128VectorTests.toStringByte128VectorTestsSmokeTest(byte[i * 5]): success [53ms]
test Byte128VectorTests.toStringByte128VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte128VectorTests.toStringByte128VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [2ms]
test Byte128VectorTests.unsliceBinaryByte128VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [404ms]
test Byte128VectorTests.unsliceBinaryByte128VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [404ms]
test Byte128VectorTests.unsliceBinaryByte128VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [450ms]
test Byte128VectorTests.unsliceByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [822ms]
test Byte128VectorTests.unsliceByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [816ms]
test Byte128VectorTests.unsliceByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [618ms]
test Byte128VectorTests.unsliceByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [645ms]
test Byte128VectorTests.unsliceByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [534ms]
test Byte128VectorTests.unsliceByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [526ms]
test Byte128VectorTests.unsliceByte128VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [543ms]
test Byte128VectorTests.unsliceByte128VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [526ms]
test Byte128VectorTests.unsliceByte128VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [528ms]
test Byte128VectorTests.unsliceUnaryByte128VectorTests(byte[-i * 5]): success [380ms]
test Byte128VectorTests.unsliceUnaryByte128VectorTests(byte[i * 5]): success [381ms]
test Byte128VectorTests.unsliceUnaryByte128VectorTests(byte[i + 1]): success [262ms]
test Byte128VectorTests.unsliceUnaryByte128VectorTests(byte[cornerCaseValue(i)]): success [262ms]
test Byte128VectorTests.viewAsFloatingLanesTest(): success [15ms]
test Byte128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Byte128VectorTests.withByte128VectorTests(byte[-i * 5], byte[i * 5]): success [12ms]
test Byte128VectorTests.withByte128VectorTests(byte[-i * 5], byte[i + 1]): success [157ms]
test Byte128VectorTests.withByte128VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [8ms]

===============================================
jdk/incubator/vector/Byte128VectorTests.java
Total tests run: 3602, Passes: 3601, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/14 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Byte128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Byte128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Byte128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Byte128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Byte128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=4 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Byte128VectorTests.d/testng.0.jta jdk/incubator/vector/Byte128VectorTests.java false Byte128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
TEST: jdk/incubator/vector/Int512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.05 seconds
messages:
command: build Int512VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 22:19:18 IST 2025
Test directory:
  compile: Int512VectorTests
finished: Wed Apr 16 22:19:19 IST 2025
elapsed time (seconds): 1.05

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.049 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 22:19:18 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 3
Process id: 1660196
finished: Wed Apr 16 22:19:19 IST 2025
elapsed time (seconds): 1.049
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int512VectorTests 
TIME:   282.105 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int512VectorTests 
started: Wed Apr 16 22:19:19 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1663699
finished: Wed Apr 16 22:24:01 IST 2025
elapsed time (seconds): 282.105
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -8284408772459203144
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-8284408772459203144" to command line.
test Int512VectorTests.ABSInt512VectorTests(int[-i * 5]): success [343ms]
test Int512VectorTests.ABSInt512VectorTests(int[i * 5]): success [412ms]
test Int512VectorTests.ABSInt512VectorTests(int[i + 1]): success [14ms]
test Int512VectorTests.ABSInt512VectorTests(int[cornerCaseValue(i)]): success [5ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[-i * 5], mask[i % 2]): success [144ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i * 5], mask[i % 2]): success [127ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i + 1], mask[i % 2]): success [107ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[-i * 5], mask[true]): success [118ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i + 1], mask[true]): success [2ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[-i * 5], mask[false]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i * 5], mask[false]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int512VectorTests.ADDInt512VectorTests(int[-i * 5], int[i * 5]): success [134ms]
test Int512VectorTests.ADDInt512VectorTests(int[-i * 5], int[i + 1]): success [334ms]
test Int512VectorTests.ADDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [15ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [8ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [21ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [8ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [239ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [69ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [4ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [88ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [4ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[-i * 5]): success [121ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[i * 5]): success [3ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[i + 1]): success [68ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[-i * 5], mask[i % 2]): success [79ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i + 1], mask[i % 2]): success [88ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[-i * 5], mask[true]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i * 5], mask[true]): success [3ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i + 1], mask[true]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[-i * 5], mask[false]): success [14ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i * 5], mask[false]): success [14ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[-i * 5]): success [8ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[i * 5]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[i + 1]): success [10ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[-i * 5], mask[i % 2]): success [7ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i * 5], mask[false]): success [12ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.ANDInt512VectorTests(int[-i * 5], int[i * 5]): success [448ms]
test Int512VectorTests.ANDInt512VectorTests(int[-i * 5], int[i + 1]): success [103ms]
test Int512VectorTests.ANDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [3ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [4ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [18ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [9ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [4ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [4ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [86ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[-i * 5]): success [168ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[i * 5]): success [2ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[i + 1]): success [66ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[-i * 5], mask[i % 2]): success [32ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i + 1], mask[i % 2]): success [114ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i * 5], mask[true]): success [2ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[-i * 5], mask[false]): success [2ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i * 5], mask[false]): success [13ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int512VectorTests.AND_NOTInt512VectorTests(int[-i * 5], int[i * 5]): success [382ms]
test Int512VectorTests.AND_NOTInt512VectorTests(int[-i * 5], int[i + 1]): success [255ms]
test Int512VectorTests.AND_NOTInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [48ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [81ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [95ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [49ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [49ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [176ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [49ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [49ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [49ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [86ms]
test Int512VectorTests.ASHRInt512VectorTests(int[-i * 5], int[i * 5]): success [137ms]
test Int512VectorTests.ASHRInt512VectorTests(int[-i * 5], int[i + 1]): success [241ms]
test Int512VectorTests.ASHRInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [46ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [121ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [109ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [46ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [46ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [169ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [97ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [46ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [47ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [46ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [108ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [305ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[-i * 5]): success [6ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[i * 5]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[i + 1]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [15ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [26ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [66ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [8ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [4ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [60ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [4ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [11ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [115ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [5ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [5ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [169ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [4ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [4ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [5ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [7ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [319ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [105ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [66ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [45ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [4ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [4ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValu

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

i * 5], mask[true]): success [232ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [511ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [237ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [237ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [240ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [237ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i]): success [146ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i - length / 2]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i + 1]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i - 2]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[zigZag(i)]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[cornerCaseValue(i)]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i - length / 2]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i + 1]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i - 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[zigZag(i)]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i - length / 2]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i + 1]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i - 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[zigZag(i)]): success [70ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i - length / 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i + 1]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i - 2]): success [79ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[zigZag(i)]): success [80ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i - length / 2]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i + 1]): success [70ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i - 2]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[zigZag(i)]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [68ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [68ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [9ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [72ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.expandInt512VectorTests(int[-i * 5], mask[i % 2]): success [369ms]
test Int512VectorTests.expandInt512VectorTests(int[i * 5], mask[i % 2]): success [95ms]
test Int512VectorTests.expandInt512VectorTests(int[i + 1], mask[i % 2]): success [73ms]
test Int512VectorTests.expandInt512VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test Int512VectorTests.expandInt512VectorTests(int[-i * 5], mask[true]): success [84ms]
test Int512VectorTests.expandInt512VectorTests(int[i * 5], mask[true]): success [249ms]
test Int512VectorTests.expandInt512VectorTests(int[i + 1], mask[true]): success [2ms]
test Int512VectorTests.expandInt512VectorTests(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.expandInt512VectorTests(int[-i * 5], mask[false]): success [4ms]
test Int512VectorTests.expandInt512VectorTests(int[i * 5], mask[false]): success [6ms]
test Int512VectorTests.expandInt512VectorTests(int[i + 1], mask[false]): success [5ms]
test Int512VectorTests.expandInt512VectorTests(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int512VectorTests.getInt512VectorTests(int[-i * 5]): success [8ms]
test Int512VectorTests.getInt512VectorTests(int[i * 5]): success [8ms]
test Int512VectorTests.getInt512VectorTests(int[i + 1]): success [8ms]
test Int512VectorTests.getInt512VectorTests(int[cornerCaseValue(i)]): success [8ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[-i * 5]): success [35ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(0): success [65ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(-1): success [2ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(1): success [16ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(2): success [2ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(-2): success [3ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(0): success [2ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(-1): success [2ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(1): success [2ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(2): success [2ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(-2): success [2ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(0): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(32): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(37): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1024): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1025): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1029): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(0): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1): success [4ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(32): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(37): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1024): success [1ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1025): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1029): success [0ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i]): success [147ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i - length / 2]): success [73ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i + 1]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i - 2]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[zigZag(i)]): success [72ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[cornerCaseValue(i)]): success [87ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i]): success [103ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i - length / 2]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i + 1]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i - 2]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[zigZag(i)]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [73ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i]): success [72ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i - length / 2]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i + 1]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i - 2]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[zigZag(i)]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [72ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i - length / 2]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i + 1]): success [74ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i - 2]): success [72ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[zigZag(i)]): success [83ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [73ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i]): success [72ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i - length / 2]): success [72ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i + 1]): success [72ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i - 2]): success [72ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[zigZag(i)]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [72ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [72ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [72ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [71ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i]): success [2ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [6ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [74ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.maskAndInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Int512VectorTests.maskAndInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskAndNotInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Int512VectorTests.maskAndNotInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskCompressInt512VectorTestsSmokeTest(mask[i % 2]): success [534ms]
test Int512VectorTests.maskCompressInt512VectorTestsSmokeTest(mask[true]): success [348ms]
test Int512VectorTests.maskCompressInt512VectorTestsSmokeTest(mask[false]): success [329ms]
test Int512VectorTests.maskEqInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int512VectorTests.maskEqInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskEqualsInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int512VectorTests.maskEqualsInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskFirstTrueInt512VectorTestsSmokeTest(mask[i % 2]): success [71ms]
test Int512VectorTests.maskFirstTrueInt512VectorTestsSmokeTest(mask[true]): success [94ms]
test Int512VectorTests.maskFirstTrueInt512VectorTestsSmokeTest(mask[false]): success [61ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(-1): success [57ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(0): success [0ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int512VectorTests.maskHashCodeInt512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int512VectorTests.maskHashCodeInt512VectorTestsSmokeTest(mask[true]): success [0ms]
test Int512VectorTests.maskHashCodeInt512VectorTestsSmokeTest(mask[false]): success [0ms]
test Int512VectorTests.maskLastTrueInt512VectorTestsSmokeTest(mask[i % 2]): success [112ms]
test Int512VectorTests.maskLastTrueInt512VectorTestsSmokeTest(mask[true]): success [94ms]
test Int512VectorTests.maskLastTrueInt512VectorTestsSmokeTest(mask[false]): success [80ms]
test Int512VectorTests.maskOrInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [18ms]
test Int512VectorTests.maskOrInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskTrueCountInt512VectorTestsSmokeTest(mask[i % 2]): success [68ms]
test Int512VectorTests.maskTrueCountInt512VectorTestsSmokeTest(mask[true]): success [93ms]
test Int512VectorTests.maskTrueCountInt512VectorTestsSmokeTest(mask[false]): success [61ms]
test Int512VectorTests.maskXorInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int512VectorTests.maskXorInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maxInt512VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.maxInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.maxInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [5ms]
test Int512VectorTests.maxInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.maxInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.maxInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.minInt512VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.minInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.minInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.minInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.minInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.minInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [31ms]
test Int512VectorTests.mulInt512VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.mulInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.mulInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.negInt512VectorTests(int[-i * 5]): success [7ms]
test Int512VectorTests.negInt512VectorTests(int[i * 5]): success [8ms]
test Int512VectorTests.negInt512VectorTests(int[i + 1]): success [2ms]
test Int512VectorTests.negInt512VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int512VectorTests.notInt512VectorTests(int[-i * 5]): success [49ms]
test Int512VectorTests.notInt512VectorTests(int[i * 5]): success [56ms]
test Int512VectorTests.notInt512VectorTests(int[i + 1]): success [44ms]
test Int512VectorTests.notInt512VectorTests(int[cornerCaseValue(i)]): success [44ms]
test Int512VectorTests.orInt512VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int512VectorTests.orInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.orInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.orInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.orInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.orInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.shuffleEqualsInt512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [9ms]
test Int512VectorTests.shuffleEqualsInt512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [6ms]
test Int512VectorTests.shuffleMiscellaneousInt512VectorTestsSmokeTest(shuffle[random]): success [1ms]
test Int512VectorTests.shuffleTest(): success [611ms]
test Int512VectorTests.shuffleToStringInt512VectorTestsSmokeTest(shuffle[random]): success [35ms]
test Int512VectorTests.sliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i * 5]): success [630ms]
test Int512VectorTests.sliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i + 1]): success [1200ms]
test Int512VectorTests.sliceBinaryInt512VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [350ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [392ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [801ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [389ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [416ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1140ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [389ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [402ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [576ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [385ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[-i * 5]): success [326ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[i * 5]): success [748ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[i + 1]): success [314ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[cornerCaseValue(i)]): success [351ms]
test Int512VectorTests.smokeTest1(): success [0ms]
test Int512VectorTests.smokeTest2(): success [72ms]
test Int512VectorTests.subInt512VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.subInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.subInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.subInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.subInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[-i * 5]): success [3ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[-i * 5]): success [5ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[i * 5]): success [7ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[i + 1]): success [13ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [12ms]
test Int512VectorTests.unsliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i * 5]): success [346ms]
test Int512VectorTests.unsliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i + 1]): success [953ms]
test Int512VectorTests.unsliceBinaryInt512VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [335ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [682ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3061ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [670ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [671ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [4342ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [803ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [669ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [665ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [765ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[-i * 5]): success [321ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[i * 5]): success [746ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[i + 1]): success [317ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[cornerCaseValue(i)]): success [326ms]
test Int512VectorTests.viewAsFloatingLanesTest(): success [403ms]
test Int512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int512VectorTests.withInt512VectorTests(int[-i * 5], int[i * 5]): success [17ms]
test Int512VectorTests.withInt512VectorTests(int[-i * 5], int[i + 1]): success [10ms]
test Int512VectorTests.withInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [10ms]

===============================================
jdk/incubator/vector/Int512VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/3/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=4 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Int512VectorTests.d/testng.0.jta jdk/incubator/vector/Int512VectorTests.java false Int512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Float64VectorTests.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorTests.java
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long256VectorTests.java
Passed: jdk/incubator/vector/Byte64VectorTests.java
Passed: jdk/incubator/vector/Long128VectorTests.java
Passed: jdk/incubator/vector/UnalignedHeapTest.java
Passed: jdk/incubator/vector/Long512VectorTests.java
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/LongMaxVectorTests.java
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/VectorMathTest.java
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int64VectorTests.java
TEST: jdk/incubator/vector/ShortMaxVectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.352 seconds
messages:
command: build ShortMaxVectorTests
reason: Named class compiled on demand
started: Wed Apr 16 22:25:07 IST 2025
Test directory:
  compile: ShortMaxVectorTests
finished: Wed Apr 16 22:25:08 IST 2025
elapsed time (seconds): 1.352

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.351 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/ShortMaxVectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 22:25:07 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 9
Process id: 1660656
finished: Wed Apr 16 22:25:08 IST 2025
elapsed time (seconds): 1.351
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/ShortMaxVectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/ShortMaxVectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/ShortMaxVectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/ShortMaxVectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/ShortMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/ShortMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/ShortMaxVectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/ShortMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/ShortMaxVectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation ShortMaxVectorTests 
TIME:   233.651 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation ShortMaxVectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation ShortMaxVectorTests 
started: Wed Apr 16 22:25:08 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1677413
finished: Wed Apr 16 22:29:02 IST 2025
elapsed time (seconds): 233.651
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 3113589067608690640
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=3113589067608690640" to command line.
test ShortMaxVectorTests.ABSMaskedShortMaxVectorTests(short[-i * 5], mask[i % 2]): success [604ms]
test ShortMaxVectorTests.ABSMaskedShortMaxVectorTests(short[i * 5], mask[i % 2]): success [7ms]
test ShortMaxVectorTests.ABSMaskedShortMaxVectorTests(short[i + 1], mask[i % 2]): success [75ms]
test ShortMaxVectorTests.ABSMaskedShortMaxVectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test ShortMaxVectorTests.ABSMaskedShortMaxVectorTests(short[-i * 5], mask[true]): success [4ms]
test ShortMaxVectorTests.ABSMaskedShortMaxVectorTests(short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.ABSMaskedShortMaxVectorTests(short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.ABSMaskedShortMaxVectorTests(short[cornerCaseValue(i)], mask[true]): success [1ms]
test ShortMaxVectorTests.ABSMaskedShortMaxVectorTests(short[-i * 5], mask[false]): success [26ms]
test ShortMaxVectorTests.ABSMaskedShortMaxVectorTests(short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.ABSMaskedShortMaxVectorTests(short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.ABSMaskedShortMaxVectorTests(short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.ABSShortMaxVectorTests(short[-i * 5]): success [101ms]
test ShortMaxVectorTests.ABSShortMaxVectorTests(short[i * 5]): success [2ms]
test ShortMaxVectorTests.ABSShortMaxVectorTests(short[i + 1]): success [46ms]
test ShortMaxVectorTests.ABSShortMaxVectorTests(short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.ADDReduceLongShortMaxVectorTests(short[-i * 5]): success [66ms]
test ShortMaxVectorTests.ADDReduceLongShortMaxVectorTests(short[i * 5]): success [19ms]
test ShortMaxVectorTests.ADDReduceLongShortMaxVectorTests(short[i + 1]): success [0ms]
test ShortMaxVectorTests.ADDReduceLongShortMaxVectorTests(short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.ADDReduceLongShortMaxVectorTestsMasked(short[-i * 5], mask[i % 2]): success [11ms]
test ShortMaxVectorTests.ADDReduceLongShortMaxVectorTestsMasked(short[i * 5], mask[i % 2]): success [1ms]
test ShortMaxVectorTests.ADDReduceLongShortMaxVectorTestsMasked(short[i + 1], mask[i % 2]): success [1ms]
test ShortMaxVectorTests.ADDReduceLongShortMaxVectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test ShortMaxVectorTests.ADDReduceLongShortMaxVectorTestsMasked(short[-i * 5], mask[true]): success [1ms]
test ShortMaxVectorTests.ADDReduceLongShortMaxVectorTestsMasked(short[i * 5], mask[true]): success [1ms]
test ShortMaxVectorTests.ADDReduceLongShortMaxVectorTestsMasked(short[i + 1], mask[true]): success [9ms]
test ShortMaxVectorTests.ADDReduceLongShortMaxVectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [13ms]
test ShortMaxVectorTests.ADDReduceLongShortMaxVectorTestsMasked(short[-i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.ADDReduceLongShortMaxVectorTestsMasked(short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.ADDReduceLongShortMaxVectorTestsMasked(short[i + 1], mask[false]): success [1ms]
test ShortMaxVectorTests.ADDReduceLongShortMaxVectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [2ms]
test ShortMaxVectorTests.ADDReduceShortMaxVectorTests(short[-i * 5]): success [122ms]
test ShortMaxVectorTests.ADDReduceShortMaxVectorTests(short[i * 5]): success [82ms]
test ShortMaxVectorTests.ADDReduceShortMaxVectorTests(short[i + 1]): success [2ms]
test ShortMaxVectorTests.ADDReduceShortMaxVectorTests(short[cornerCaseValue(i)]): success [3ms]
test ShortMaxVectorTests.ADDReduceShortMaxVectorTestsMasked(short[-i * 5], mask[i % 2]): success [62ms]
test ShortMaxVectorTests.ADDReduceShortMaxVectorTestsMasked(short[i * 5], mask[i % 2]): success [114ms]
test ShortMaxVectorTests.ADDReduceShortMaxVectorTestsMasked(short[i + 1], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.ADDReduceShortMaxVectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.ADDReduceShortMaxVectorTestsMasked(short[-i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.ADDReduceShortMaxVectorTestsMasked(short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.ADDReduceShortMaxVectorTestsMasked(short[i + 1], mask[true]): success [1ms]
test ShortMaxVectorTests.ADDReduceShortMaxVectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [12ms]
test ShortMaxVectorTests.ADDReduceShortMaxVectorTestsMasked(short[-i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.ADDReduceShortMaxVectorTestsMasked(short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.ADDReduceShortMaxVectorTestsMasked(short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.ADDReduceShortMaxVectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.ADDShortMaxVectorTests(short[-i * 5], short[i * 5]): success [274ms]
test ShortMaxVectorTests.ADDShortMaxVectorTests(short[-i * 5], short[i + 1]): success [29ms]
test ShortMaxVectorTests.ADDShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [61ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [16ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [22ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [2ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [6ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [147ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [2ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [68ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.ADDShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.ANDReduceShortMaxVectorTests(short[-i * 5]): success [130ms]
test ShortMaxVectorTests.ANDReduceShortMaxVectorTests(short[i * 5]): success [92ms]
test ShortMaxVectorTests.ANDReduceShortMaxVectorTests(short[i + 1]): success [0ms]
test ShortMaxVectorTests.ANDReduceShortMaxVectorTests(short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.ANDReduceShortMaxVectorTestsMasked(short[-i * 5], mask[i % 2]): success [21ms]
test ShortMaxVectorTests.ANDReduceShortMaxVectorTestsMasked(short[i * 5], mask[i % 2]): success [111ms]
test ShortMaxVectorTests.ANDReduceShortMaxVectorTestsMasked(short[i + 1], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.ANDReduceShortMaxVectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.ANDReduceShortMaxVectorTestsMasked(short[-i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.ANDReduceShortMaxVectorTestsMasked(short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.ANDReduceShortMaxVectorTestsMasked(short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.ANDReduceShortMaxVectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [12ms]
test ShortMaxVectorTests.ANDReduceShortMaxVectorTestsMasked(short[-i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.ANDReduceShortMaxVectorTestsMasked(short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.ANDReduceShortMaxVectorTestsMasked(short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.ANDReduceShortMaxVectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.ANDShortMaxVectorTests(short[-i * 5], short[i * 5]): success [214ms]
test ShortMaxVectorTests.ANDShortMaxVectorTests(short[-i * 5], short[i + 1]): success [2ms]
test ShortMaxVectorTests.ANDShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [60ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): failure [35ms]
java.lang.AssertionError: at index #313, input1 = -1565, input2 = 1560, mask = false expected [-1565] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:885)
	at ShortMaxVectorTests.assertBroadcastArraysEquals(ShortMaxVectorTests.java:475)
	at ShortMaxVectorTests.assertBroadcastArraysEquals(ShortMaxVectorTests.java:465)
	at ShortMaxVectorTests.ANDShortMaxVectorTestsBroadcastMaskedSmokeTest(ShortMaxVectorTests.java:2257)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test ShortMaxVectorTests.ANDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [15ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [12ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [4ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [2ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [68ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.ANDShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test ShortMaxVectorTests.AND_NOTShortMaxVectorTests(short[-i * 5], short[i * 5]): success [180ms]
test ShortMaxVectorTests.AND_NOTShortMaxVectorTests(short[-i * 5], short[i + 1]): success [3ms]
test ShortMaxVectorTests.AND_NOTShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [74ms]
test ShortMaxVectorTests.AND_NOTShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [106ms]
test ShortMaxVectorTests.AND_NOTShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test ShortMaxVectorTests.AND_NOTShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [77ms]
test ShortMaxVectorTests.AND_NOTShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.AND_NOTShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.AND_NOTShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.AND_NOTShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.AND_NOTShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.AND_NOTShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [49ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTests(short[-i * 5], short[i * 5]): success [129ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTests(short[-i * 5], short[i + 1]): success [3ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [74ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [152ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [130ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShift(short[-i * 5], short[i * 5]): success [218ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShift(short[-i * 5], short[i + 1]): success [4ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [67ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftConst(short[-i * 5]): success [43ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftConst(short[i * 5]): success [3ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftConst(short[i + 1]): success [57ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [128ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [67ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [15ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [4ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [93ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [5ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.ASHRShortMaxVectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [178ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [3ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [111ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [392ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [5ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [64ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [8ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [81ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [1ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.BITWISE_BLENDShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [1ms]
test ShortMaxVectorTests.

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

rTestsSmokeTest(): success [0ms]
test ShortMaxVectorTests.WithLanesShortMaxVectorTestsSmokeTest(): success [0ms]
test ShortMaxVectorTests.WithShapeShortMaxVectorTestsSmokeTest(): success [0ms]
test ShortMaxVectorTests.XORReduceShortMaxVectorTests(short[-i * 5]): success [66ms]
test ShortMaxVectorTests.XORReduceShortMaxVectorTests(short[i * 5]): success [80ms]
test ShortMaxVectorTests.XORReduceShortMaxVectorTests(short[i + 1]): success [0ms]
test ShortMaxVectorTests.XORReduceShortMaxVectorTests(short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.XORReduceShortMaxVectorTestsMasked(short[-i * 5], mask[i % 2]): success [17ms]
test ShortMaxVectorTests.XORReduceShortMaxVectorTestsMasked(short[i * 5], mask[i % 2]): success [117ms]
test ShortMaxVectorTests.XORReduceShortMaxVectorTestsMasked(short[i + 1], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.XORReduceShortMaxVectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.XORReduceShortMaxVectorTestsMasked(short[-i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.XORReduceShortMaxVectorTestsMasked(short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.XORReduceShortMaxVectorTestsMasked(short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.XORReduceShortMaxVectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [12ms]
test ShortMaxVectorTests.XORReduceShortMaxVectorTestsMasked(short[-i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.XORReduceShortMaxVectorTestsMasked(short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.XORReduceShortMaxVectorTestsMasked(short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.XORReduceShortMaxVectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.XORShortMaxVectorTests(short[-i * 5], short[i * 5]): success [10ms]
test ShortMaxVectorTests.XORShortMaxVectorTests(short[-i * 5], short[i + 1]): success [3ms]
test ShortMaxVectorTests.XORShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [92ms]
test ShortMaxVectorTests.XORShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [10ms]
test ShortMaxVectorTests.XORShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test ShortMaxVectorTests.XORShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [71ms]
test ShortMaxVectorTests.XORShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.XORShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.XORShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.XORShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.XORShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.XORShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.ZOMOMaskedShortMaxVectorTests(short[-i * 5], mask[i % 2]): success [143ms]
test ShortMaxVectorTests.ZOMOMaskedShortMaxVectorTests(short[i * 5], mask[i % 2]): success [78ms]
test ShortMaxVectorTests.ZOMOMaskedShortMaxVectorTests(short[i + 1], mask[i % 2]): success [229ms]
test ShortMaxVectorTests.ZOMOMaskedShortMaxVectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [77ms]
test ShortMaxVectorTests.ZOMOMaskedShortMaxVectorTests(short[-i * 5], mask[true]): success [139ms]
test ShortMaxVectorTests.ZOMOMaskedShortMaxVectorTests(short[i * 5], mask[true]): success [121ms]
test ShortMaxVectorTests.ZOMOMaskedShortMaxVectorTests(short[i + 1], mask[true]): success [78ms]
test ShortMaxVectorTests.ZOMOMaskedShortMaxVectorTests(short[cornerCaseValue(i)], mask[true]): success [77ms]
test ShortMaxVectorTests.ZOMOMaskedShortMaxVectorTests(short[-i * 5], mask[false]): success [77ms]
test ShortMaxVectorTests.ZOMOMaskedShortMaxVectorTests(short[i * 5], mask[false]): success [76ms]
test ShortMaxVectorTests.ZOMOMaskedShortMaxVectorTests(short[i + 1], mask[false]): success [109ms]
test ShortMaxVectorTests.ZOMOMaskedShortMaxVectorTests(short[cornerCaseValue(i)], mask[false]): success [77ms]
test ShortMaxVectorTests.ZOMOShortMaxVectorTests(short[-i * 5]): success [197ms]
test ShortMaxVectorTests.ZOMOShortMaxVectorTests(short[i * 5]): success [77ms]
test ShortMaxVectorTests.ZOMOShortMaxVectorTests(short[i + 1]): success [226ms]
test ShortMaxVectorTests.ZOMOShortMaxVectorTests(short[cornerCaseValue(i)]): success [76ms]
test ShortMaxVectorTests.ZeroShortMaxVectorTests(short[-i * 5]): success [77ms]
test ShortMaxVectorTests.ZeroShortMaxVectorTests(short[i * 5]): success [55ms]
test ShortMaxVectorTests.ZeroShortMaxVectorTests(short[i + 1]): success [40ms]
test ShortMaxVectorTests.ZeroShortMaxVectorTests(short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.absShortMaxVectorTests(short[-i * 5]): success [60ms]
test ShortMaxVectorTests.absShortMaxVectorTests(short[i * 5]): success [1ms]
test ShortMaxVectorTests.absShortMaxVectorTests(short[i + 1]): success [116ms]
test ShortMaxVectorTests.absShortMaxVectorTests(short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTests(short[-i * 5], short[i * 5]): success [43ms]
test ShortMaxVectorTests.addShortMaxVectorTests(short[-i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test ShortMaxVectorTests.addShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [49ms]
test ShortMaxVectorTests.addShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [78ms]
test ShortMaxVectorTests.addShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test ShortMaxVectorTests.addShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.addShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.allTrueShortMaxVectorTests(boolean[i % 2]): success [60ms]
test ShortMaxVectorTests.allTrueShortMaxVectorTests(boolean[i % 5]): success [26ms]
test ShortMaxVectorTests.andShortMaxVectorTests(short[-i * 5], short[i * 5]): success [7ms]
test ShortMaxVectorTests.andShortMaxVectorTests(short[-i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.andShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.andShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test ShortMaxVectorTests.andShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.andShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.anyTrueShortMaxVectorTests(boolean[i % 2]): success [9ms]
test ShortMaxVectorTests.anyTrueShortMaxVectorTests(boolean[i % 5]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [5ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [6ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [6ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [5ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test ShortMaxVectorTests.bitwiseBlendShortMaxVectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.bitwiseDivByZeroSmokeTest(): success [12ms]
test ShortMaxVectorTests.blendShortMaxVectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test ShortMaxVectorTests.blendShortMaxVectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [27ms]
test ShortMaxVectorTests.blendShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [61ms]
test ShortMaxVectorTests.blendShortMaxVectorTests(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.blendShortMaxVectorTests(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.blendShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.blendShortMaxVectorTests(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.blendShortMaxVectorTests(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.blendShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.blendShortMaxVectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [18ms]
test ShortMaxVectorTests.blendShortMaxVectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test ShortMaxVectorTests.blendShortMaxVectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [114ms]
test ShortMaxVectorTests.blendShortMaxVectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.blendShortMaxVectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.blendShortMaxVectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.blendShortMaxVectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test ShortMaxVectorTests.blendShortMaxVectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.blendShortMaxVectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.compressShortMaxVectorTests(short[-i * 5], mask[i % 2]): success [229ms]
test ShortMaxVectorTests.compressShortMaxVectorTests(short[i * 5], mask[i % 2]): success [79ms]
test ShortMaxVectorTests.compressShortMaxVectorTests(short[i + 1], mask[i % 2]): success [173ms]
test ShortMaxVectorTests.compressShortMaxVectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [107ms]
test ShortMaxVectorTests.compressShortMaxVectorTests(short[-i * 5], mask[true]): success [76ms]
test ShortMaxVectorTests.compressShortMaxVectorTests(short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.compressShortMaxVectorTests(short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.compressShortMaxVectorTests(short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.compressShortMaxVectorTests(short[-i * 5], mask[false]): success [3ms]
test ShortMaxVectorTests.compressShortMaxVectorTests(short[i * 5], mask[false]): success [3ms]
test ShortMaxVectorTests.compressShortMaxVectorTests(short[i + 1], mask[false]): success [2ms]
test ShortMaxVectorTests.compressShortMaxVectorTests(short[cornerCaseValue(i)], mask[false]): success [3ms]
test ShortMaxVectorTests.divShortMaxVectorTests(short[-i * 5], short[i * 5]): success [201ms]
test ShortMaxVectorTests.divShortMaxVectorTests(short[-i * 5], short[i + 1]): success [107ms]
test ShortMaxVectorTests.divShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [206ms]
test ShortMaxVectorTests.divShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [10ms]
test ShortMaxVectorTests.divShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [100ms]
test ShortMaxVectorTests.divShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test ShortMaxVectorTests.divShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test ShortMaxVectorTests.divShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.divShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.divShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.divShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.divShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test ShortMaxVectorTests.divShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [13ms]
test ShortMaxVectorTests.divShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [2ms]
test ShortMaxVectorTests.divShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test ShortMaxVectorTests.divShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [229ms]
test ShortMaxVectorTests.divShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [83ms]
test ShortMaxVectorTests.divShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [198ms]
test ShortMaxVectorTests.divShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [122ms]
test ShortMaxVectorTests.divShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [78ms]
test ShortMaxVectorTests.divShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [157ms]
test ShortMaxVectorTests.divShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [78ms]
test ShortMaxVectorTests.divShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [78ms]
test ShortMaxVectorTests.divShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [112ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i], short[i]): success [183ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i], short[i - length / 2]): success [103ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i], short[i + 1]): success [122ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i], short[i - 2]): success [87ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i], short[zigZag(i)]): success [80ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i], short[cornerCaseValue(i)]): success [87ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i - length / 2], short[i]): success [78ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i - length / 2], short[i - length / 2]): success [108ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i - length / 2], short[i + 1]): success [78ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i - length / 2], short[i - 2]): success [80ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i - length / 2], short[zigZag(i)]): success [78ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [90ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i + 1], short[i]): success [99ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i + 1], short[i - length / 2]): success [89ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i + 1], short[i + 1]): success [78ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i + 1], short[i - 2]): success [102ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i + 1], short[zigZag(i)]): success [79ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i + 1], short[cornerCaseValue(i)]): success [116ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i - 2], short[i]): success [78ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i - 2], short[i - length / 2]): success [78ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i - 2], short[i + 1]): success [79ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i - 2], short[i - 2]): success [78ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i - 2], short[zigZag(i)]): success [112ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[i - 2], short[cornerCaseValue(i)]): success [86ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[zigZag(i)], short[i]): success [87ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[zigZag(i)], short[i - length / 2]): success [79ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[zigZag(i)], short[i + 1]): success [79ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[zigZag(i)], short[i - 2]): success [79ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[zigZag(i)], short[zigZag(i)]): success [86ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [87ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[cornerCaseValue(i)], short[i]): success [79ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [79ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[cornerCaseValue(i)], short[i + 1]): success [79ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[cornerCaseValue(i)], short[i - 2]): success [79ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [79ms]
test ShortMaxVectorTests.eqShortMaxVectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [79ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [1ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [0ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [0ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [1ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [0ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [0ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [0ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [1ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [0ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [0ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [1ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [0ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [1ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [0ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [0ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [1ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [0ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [0ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [0ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [1ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [0ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [69ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [1ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [1ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [1ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [11ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [1ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [1ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [1ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [1ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [1ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [1ms]
test ShortMaxVectorTests.eqShortMaxVectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test ShortMaxVectorTests.expandShortMaxVectorTests(short[-i * 5], mask[i % 2]): success [220ms]
test ShortMaxVectorTests.expandShortMaxVectorTests(short[i * 5], mask[i % 2]): success [66ms]
test ShortMaxVectorTests.expandShortMaxVectorTests(short[i + 1], mask[i % 2]): success [139ms]
test ShortMaxVectorTests.expandShortMaxVectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [66ms]
test ShortMaxVectorTests.expandShortMaxVectorTests(short[-i * 5], mask[true]): success [16ms]
test ShortMaxVectorTests.expandShortMaxVectorTests(short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.expandShortMaxVectorTests(short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.expandShortMaxVectorTests(short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.expandShortMaxVectorTests(short[-i * 5], mask[false]): success [2ms]
test ShortMaxVectorTests.expandShortMaxVectorTests(short[i * 5], mask[false]): success [2ms]
test ShortMaxVectorTests.expandShortMaxVectorTests(short[i + 1], mask[false]): success [3ms]
test ShortMaxVectorTests.expandShortMaxVectorTests(short[cornerCaseValue(i)], mask[false]): success [2ms]
test ShortMaxVectorTests.getShortMaxVectorTests(short[-i * 5]): success [6ms]
test ShortMaxVectorTests.getShortMaxVectorTests(short[i * 5]): success [6ms]
test ShortMaxVectorTests.getShortMaxVectorTests(short[i + 1]): success [111ms]
test ShortMaxVectorTests.getShortMaxVectorTests(short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.hashCodeShortMaxVectorTestsSmokeTest(short[-i * 5]): success [44ms]
test ShortMaxVectorTests.hashCodeShortMaxVectorTestsSmokeTest(short[i * 5]): success [1ms]
test ShortMaxVectorTests.hashCodeShortMaxVectorTestsSmokeTest(short[i + 1]): success [1ms]
test ShortMaxVectorTests.hashCodeShortMaxVectorTestsSmokeTest(short[cornerCaseValue(i)]): success [1ms]
test ShortMaxVectorTests.indexInRangeLongShortMaxVectorTestsSmokeTest(0): success [69ms]
test ShortMaxVectorTests.indexInRangeLongShortMaxVectorTestsSmokeTest(-1): success [2ms]
test ShortMaxVectorTests.indexInRangeLongShortMaxVectorTestsSmokeTest(1): success [76ms]
test ShortMaxVectorTests.indexInRangeLongShortMaxVectorTestsSmokeTest(2): success [2ms]
test ShortMaxVectorTests.indexInRangeLongShortMaxVectorTestsSmokeTest(-2): success [4ms]
test ShortMaxVectorTests.indexInRangeShortMaxVectorTestsSmokeTest(0): success [2ms]
test ShortMaxVectorTests.indexInRangeShortMaxVectorTestsSmokeTest(-1): success [2ms]
test ShortMaxVectorTests.indexInRangeShortMaxVectorTestsSmokeTest(1): success [2ms]
test ShortMaxVectorTests.indexInRangeShortMaxVectorTestsSmokeTest(2): success [2ms]
test ShortMaxVectorTests.indexInRangeShortMaxVectorTestsSmokeTest(-2): success [2ms]
test ShortMaxVectorTests.loopBoundLongShortMaxVectorTestsSmokeTest(0): success [0ms]
test ShortMaxVectorTests.loopBoundLongShortMaxVectorTestsSmokeTest(1): success [0ms]
test ShortMaxVectorTests.loopBoundLongShortMaxVectorTestsSmokeTest(32): success [0ms]
test ShortMaxVectorTests.loopBoundLongShortMaxVectorTestsSmokeTest(37): success [0ms]
test ShortMaxVectorTests.loopBoundLongShortMaxVectorTestsSmokeTest(1024): success [0ms]
test ShortMaxVectorTests.loopBoundLongShortMaxVectorTestsSmokeTest(1025): success [0ms]
test ShortMaxVectorTests.loopBoundLongShortMaxVectorTestsSmokeTest(1029): success [0ms]
test ShortMaxVectorTests.loopBoundShortMaxVectorTestsSmokeTest(0): success [0ms]
test ShortMaxVectorTests.loopBoundShortMaxVectorTestsSmokeTest(1): success [0ms]
test ShortMaxVectorTests.loopBoundShortMaxVectorTestsSmokeTest(32): success [0ms]
test ShortMaxVectorTests.loopBoundShortMaxVectorTestsSmokeTest(37): success [0ms]
test ShortMaxVectorTests.loopBoundShortMaxVectorTestsSmokeTest(1024): success [0ms]
test ShortMaxVectorTests.loopBoundShortMaxVectorTestsSmokeTest(1025): success [0ms]
test ShortMaxVectorTests.loopBoundShortMaxVectorTestsSmokeTest(1029): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i], short[i]): success [178ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i], short[i - length / 2]): success [88ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i], short[i + 1]): success [101ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i], short[i - 2]): success [78ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i], short[zigZag(i)]): success [79ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i], short[cornerCaseValue(i)]): success [78ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i - length / 2], short[i]): success [143ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i - length / 2], short[i - length / 2]): success [78ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i - length / 2], short[i + 1]): success [78ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i - length / 2], short[i - 2]): success [78ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i - length / 2], short[zigZag(i)]): success [138ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [78ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i + 1], short[i]): success [78ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i + 1], short[i - length / 2]): success [80ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i + 1], short[i + 1]): success [128ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i + 1], short[i - 2]): success [84ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i + 1], short[zigZag(i)]): success [78ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i + 1], short[cornerCaseValue(i)]): success [80ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i - 2], short[i]): success [124ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i - 2], short[i - length / 2]): success [79ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i - 2], short[i + 1]): success [79ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i - 2], short[i - 2]): success [80ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i - 2], short[zigZag(i)]): success [171ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[i - 2], short[cornerCaseValue(i)]): success [101ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[zigZag(i)], short[i]): success [79ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[zigZag(i)], short[i - length / 2]): success [134ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[zigZag(i)], short[i + 1]): success [80ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[zigZag(i)], short[i - 2]): success [79ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[zigZag(i)], short[zigZag(i)]): success [79ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [141ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[cornerCaseValue(i)], short[i]): success [190ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [97ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[cornerCaseValue(i)], short[i + 1]): success [79ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[cornerCaseValue(i)], short[i - 2]): success [142ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [125ms]
test ShortMaxVectorTests.ltShortMaxVectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [79ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i], short[i]): success [1ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [1ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [1ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [1ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [1ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [1ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [1ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [1ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [117ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [1ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [1ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [1ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [1ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [4ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [0ms]
test ShortMaxVectorTests.ltShortMaxVectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test ShortMaxVectorTests.maskAndNotShortMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test ShortMaxVectorTests.maskAndNotShortMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test ShortMaxVectorTests.maskAndShortMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test ShortMaxVectorTests.maskAndShortMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test ShortMaxVectorTests.maskCompressShortMaxVectorTestsSmokeTest(mask[i % 2]): success [330ms]
test ShortMaxVectorTests.maskCompressShortMaxVectorTestsSmokeTest(mask[true]): success [164ms]
test ShortMaxVectorTests.maskCompressShortMaxVectorTestsSmokeTest(mask[false]): success [179ms]
test ShortMaxVectorTests.maskEqShortMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [21ms]
test ShortMaxVectorTests.maskEqShortMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test ShortMaxVectorTests.maskEqualsShortMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test ShortMaxVectorTests.maskEqualsShortMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test ShortMaxVectorTests.maskFirstTrueShortMaxVectorTestsSmokeTest(mask[i % 2]): success [53ms]
test ShortMaxVectorTests.maskFirstTrueShortMaxVectorTestsSmokeTest(mask[true]): success [37ms]
test ShortMaxVectorTests.maskFirstTrueShortMaxVectorTestsSmokeTest(mask[false]): success [2ms]
test ShortMaxVectorTests.maskHashCodeShortMaxVectorTestsSmokeTest(mask[i % 2]): success [0ms]
test ShortMaxVectorTests.maskHashCodeShortMaxVectorTestsSmokeTest(mask[true]): success [0ms]
test ShortMaxVectorTests.maskHashCodeShortMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test ShortMaxVectorTests.maskLastTrueShortMaxVectorTestsSmokeTest(mask[i % 2]): success [100ms]
test ShortMaxVectorTests.maskLastTrueShortMaxVectorTestsSmokeTest(mask[true]): success [39ms]
test ShortMaxVectorTests.maskLastTrueShortMaxVectorTestsSmokeTest(mask[false]): success [22ms]
test ShortMaxVectorTests.maskOrShortMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [20ms]
test ShortMaxVectorTests.maskOrShortMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [4ms]
test ShortMaxVectorTests.maskTrueCountShortMaxVectorTestsSmokeTest(mask[i % 2]): success [67ms]
test ShortMaxVectorTests.maskTrueCountShortMaxVectorTestsSmokeTest(mask[true]): success [53ms]
test ShortMaxVectorTests.maskTrueCountShortMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test ShortMaxVectorTests.maskXorShortMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [11ms]
test ShortMaxVectorTests.maskXorShortMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test ShortMaxVectorTests.maxShortMaxVectorTests(short[-i * 5], short[i * 5]): success [8ms]
test ShortMaxVectorTests.maxShortMaxVectorTests(short[-i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.maxShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.maxShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [8ms]
test ShortMaxVectorTests.maxShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.maxShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.minShortMaxVectorTests(short[-i * 5], short[i * 5]): success [8ms]
test ShortMaxVectorTests.minShortMaxVectorTests(short[-i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.minShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.minShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test ShortMaxVectorTests.minShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.minShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [42ms]
test ShortMaxVectorTests.mulShortMaxVectorTests(short[-i * 5], short[i * 5]): success [8ms]
test ShortMaxVectorTests.mulShortMaxVectorTests(short[-i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.mulShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.negShortMaxVectorTests(short[-i * 5]): success [14ms]
test ShortMaxVectorTests.negShortMaxVectorTests(short[i * 5]): success [1ms]
test ShortMaxVectorTests.negShortMaxVectorTests(short[i + 1]): success [77ms]
test ShortMaxVectorTests.negShortMaxVectorTests(short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.notShortMaxVectorTests(short[-i * 5]): success [18ms]
test ShortMaxVectorTests.notShortMaxVectorTests(short[i * 5]): success [1ms]
test ShortMaxVectorTests.notShortMaxVectorTests(short[i + 1]): success [83ms]
test ShortMaxVectorTests.notShortMaxVectorTests(short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.orShortMaxVectorTests(short[-i * 5], short[i * 5]): success [34ms]
test ShortMaxVectorTests.orShortMaxVectorTests(short[-i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.orShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.orShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [8ms]
test ShortMaxVectorTests.orShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.orShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.shuffleEqualsShortMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [511ms]
test ShortMaxVectorTests.shuffleEqualsShortMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [77ms]
test ShortMaxVectorTests.shuffleMiscellaneousShortMaxVectorTestsSmokeTest(shuffle[random]): success [61ms]
test ShortMaxVectorTests.shuffleTest(): success [492ms]
test ShortMaxVectorTests.shuffleToStringShortMaxVectorTestsSmokeTest(shuffle[random]): success [54ms]
test ShortMaxVectorTests.sliceBinaryShortMaxVectorTestsBinary(short[-i * 5], short[i * 5]): success [586ms]
test ShortMaxVectorTests.sliceBinaryShortMaxVectorTestsBinary(short[-i * 5], short[i + 1]): success [80ms]
test ShortMaxVectorTests.sliceBinaryShortMaxVectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [275ms]
test ShortMaxVectorTests.sliceShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [149ms]
test ShortMaxVectorTests.sliceShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [114ms]
test ShortMaxVectorTests.sliceShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [291ms]
test ShortMaxVectorTests.sliceShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [81ms]
test ShortMaxVectorTests.sliceShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [77ms]
test ShortMaxVectorTests.sliceShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [77ms]
test ShortMaxVectorTests.sliceShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [97ms]
test ShortMaxVectorTests.sliceShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [104ms]
test ShortMaxVectorTests.sliceShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [77ms]
test ShortMaxVectorTests.sliceUnaryShortMaxVectorTests(short[-i * 5]): success [264ms]
test ShortMaxVectorTests.sliceUnaryShortMaxVectorTests(short[i * 5]): success [79ms]
test ShortMaxVectorTests.sliceUnaryShortMaxVectorTests(short[i + 1]): success [269ms]
test ShortMaxVectorTests.sliceUnaryShortMaxVectorTests(short[cornerCaseValue(i)]): success [76ms]
test ShortMaxVectorTests.smokeTest1(): success [0ms]
test ShortMaxVectorTests.smokeTest2(): success [63ms]
test ShortMaxVectorTests.subShortMaxVectorTests(short[-i * 5], short[i * 5]): success [6ms]
test ShortMaxVectorTests.subShortMaxVectorTests(short[-i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test ShortMaxVectorTests.subShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test ShortMaxVectorTests.subShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test ShortMaxVectorTests.subShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test ShortMaxVectorTests.subShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test ShortMaxVectorTests.toDoubleArrayShortMaxVectorTestsSmokeTest(short[-i * 5]): success [0ms]
test ShortMaxVectorTests.toDoubleArrayShortMaxVectorTestsSmokeTest(short[i * 5]): success [0ms]
test ShortMaxVectorTests.toDoubleArrayShortMaxVectorTestsSmokeTest(short[i + 1]): success [0ms]
test ShortMaxVectorTests.toDoubleArrayShortMaxVectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.toIntArrayShortMaxVectorTestsSmokeTest(short[-i * 5]): success [0ms]
test ShortMaxVectorTests.toIntArrayShortMaxVectorTestsSmokeTest(short[i * 5]): success [0ms]
test ShortMaxVectorTests.toIntArrayShortMaxVectorTestsSmokeTest(short[i + 1]): success [2ms]
test ShortMaxVectorTests.toIntArrayShortMaxVectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.toLongArrayShortMaxVectorTestsSmokeTest(short[-i * 5]): success [0ms]
test ShortMaxVectorTests.toLongArrayShortMaxVectorTestsSmokeTest(short[i * 5]): success [0ms]
test ShortMaxVectorTests.toLongArrayShortMaxVectorTestsSmokeTest(short[i + 1]): success [1ms]
test ShortMaxVectorTests.toLongArrayShortMaxVectorTestsSmokeTest(short[cornerCaseValue(i)]): success [10ms]
test ShortMaxVectorTests.toStringShortMaxVectorTestsSmokeTest(short[-i * 5]): success [1ms]
test ShortMaxVectorTests.toStringShortMaxVectorTestsSmokeTest(short[i * 5]): success [0ms]
test ShortMaxVectorTests.toStringShortMaxVectorTestsSmokeTest(short[i + 1]): success [0ms]
test ShortMaxVectorTests.toStringShortMaxVectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test ShortMaxVectorTests.unsliceBinaryShortMaxVectorTestsBinary(short[-i * 5], short[i * 5]): success [276ms]
test ShortMaxVectorTests.unsliceBinaryShortMaxVectorTestsBinary(short[-i * 5], short[i + 1]): success [144ms]
test ShortMaxVectorTests.unsliceBinaryShortMaxVectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [297ms]
test ShortMaxVectorTests.unsliceShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [574ms]
test ShortMaxVectorTests.unsliceShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [346ms]
test ShortMaxVectorTests.unsliceShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [508ms]
test ShortMaxVectorTests.unsliceShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [186ms]
test ShortMaxVectorTests.unsliceShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [154ms]
test ShortMaxVectorTests.unsliceShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [188ms]
test ShortMaxVectorTests.unsliceShortMaxVectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [153ms]
test ShortMaxVectorTests.unsliceShortMaxVectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [190ms]
test ShortMaxVectorTests.unsliceShortMaxVectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [273ms]
test ShortMaxVectorTests.unsliceUnaryShortMaxVectorTests(short[-i * 5]): success [225ms]
test ShortMaxVectorTests.unsliceUnaryShortMaxVectorTests(short[i * 5]): success [78ms]
test ShortMaxVectorTests.unsliceUnaryShortMaxVectorTests(short[i + 1]): success [232ms]
test ShortMaxVectorTests.unsliceUnaryShortMaxVectorTests(short[cornerCaseValue(i)]): success [76ms]
test ShortMaxVectorTests.viewAsFloatingLanesTest(): success [23ms]
test ShortMaxVectorTests.viewAsIntegeralLanesTest(): success [0ms]
test ShortMaxVectorTests.withShortMaxVectorTests(short[-i * 5], short[i * 5]): success [18ms]
test ShortMaxVectorTests.withShortMaxVectorTests(short[-i * 5], short[i + 1]): success [17ms]
test ShortMaxVectorTests.withShortMaxVectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [127ms]

===============================================
jdk/incubator/vector/ShortMaxVectorTests.java
Total tests run: 3594, Passes: 3593, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/ShortMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/ShortMaxVectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/ShortMaxVectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/ShortMaxVectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/ShortMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/jdk/incubator/vector/ShortMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/6/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=4 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/ShortMaxVectorTests.d/testng.0.jta jdk/incubator/vector/ShortMaxVectorTests.java false ShortMaxVectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/Short128VectorTests.java
TEST: jdk/incubator/vector/Long64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.857 seconds
messages:
command: build Long64VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 22:22:31 IST 2025
Test directory:
  compile: Long64VectorTests
finished: Wed Apr 16 22:22:32 IST 2025
elapsed time (seconds): 0.857

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.856 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long64VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 22:22:31 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 6
Process id: 1660363
finished: Wed Apr 16 22:22:32 IST 2025
elapsed time (seconds): 0.856
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Long64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/4 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Long64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Long64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Long64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Long64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Long64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long64VectorTests 
TIME:   540.599 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long64VectorTests 
started: Wed Apr 16 22:22:32 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1664393
finished: Wed Apr 16 22:31:32 IST 2025
elapsed time (seconds): 540.599
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -3490455112280503423
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-3490455112280503423" to command line.
test Long64VectorTests.ABSLong64VectorTests(long[-i * 5]): success [565ms]
test Long64VectorTests.ABSLong64VectorTests(long[i * 5]): success [24ms]
test Long64VectorTests.ABSLong64VectorTests(long[i + 1]): success [65ms]
test Long64VectorTests.ABSLong64VectorTests(long[cornerCaseValue(i)]): success [10ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[-i * 5], mask[i % 2]): success [264ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[i * 5], mask[i % 2]): success [25ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[i + 1], mask[i % 2]): success [33ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[-i * 5], mask[true]): success [28ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[i * 5], mask[true]): success [8ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[i + 1], mask[true]): success [8ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[cornerCaseValue(i)], mask[true]): success [8ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[-i * 5], mask[false]): success [76ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[i * 5], mask[false]): success [12ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[i + 1], mask[false]): success [40ms]
test Long64VectorTests.ABSMaskedLong64VectorTests(long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long64VectorTests.ADDLong64VectorTests(long[-i * 5], long[i * 5]): success [257ms]
test Long64VectorTests.ADDLong64VectorTests(long[-i * 5], long[i + 1]): success [35ms]
test Long64VectorTests.ADDLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [33ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [16ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [24ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [4ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [4ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [4ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [4ms]
test Long64VectorTests.ADDLong64VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [165ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [33ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [34ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [13ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [6ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [6ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [6ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [10ms]
test Long64VectorTests.ADDLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [14ms]
test Long64VectorTests.ADDReduceLong64VectorTests(long[-i * 5]): success [120ms]
test Long64VectorTests.ADDReduceLong64VectorTests(long[i * 5]): success [35ms]
test Long64VectorTests.ADDReduceLong64VectorTests(long[i + 1]): success [8ms]
test Long64VectorTests.ADDReduceLong64VectorTests(long[cornerCaseValue(i)]): success [65ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[-i * 5], mask[i % 2]): success [119ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[i * 5], mask[i % 2]): success [53ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[i + 1], mask[i % 2]): success [34ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [22ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[-i * 5], mask[true]): success [81ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[i * 5], mask[true]): success [6ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[i + 1], mask[true]): success [6ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [6ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[-i * 5], mask[false]): success [40ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[i * 5], mask[false]): success [5ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[i + 1], mask[false]): success [6ms]
test Long64VectorTests.ADDReduceLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [5ms]
test Long64VectorTests.ADDReduceLongLong64VectorTests(long[-i * 5]): success [5ms]
test Long64VectorTests.ADDReduceLongLong64VectorTests(long[i * 5]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTests(long[i + 1]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long64VectorTests.ADDReduceLongLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long64VectorTests.ANDLong64VectorTests(long[-i * 5], long[i * 5]): success [189ms]
test Long64VectorTests.ANDLong64VectorTests(long[-i * 5], long[i + 1]): success [6ms]
test Long64VectorTests.ANDLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [50ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [41ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [20ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [4ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long64VectorTests.ANDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [64ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [36ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [9ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [6ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [66ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [7ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [7ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [6ms]
test Long64VectorTests.ANDLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [9ms]
test Long64VectorTests.ANDReduceLong64VectorTests(long[-i * 5]): success [128ms]
test Long64VectorTests.ANDReduceLong64VectorTests(long[i * 5]): success [8ms]
test Long64VectorTests.ANDReduceLong64VectorTests(long[i + 1]): success [34ms]
test Long64VectorTests.ANDReduceLong64VectorTests(long[cornerCaseValue(i)]): success [58ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[-i * 5], mask[i % 2]): success [79ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[i * 5], mask[i % 2]): success [43ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[i + 1], mask[i % 2]): success [9ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [108ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[-i * 5], mask[true]): success [9ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[i * 5], mask[true]): success [9ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[i + 1], mask[true]): success [9ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [9ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[-i * 5], mask[false]): success [15ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[i * 5], mask[false]): success [9ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[i + 1], mask[false]): success [9ms]
test Long64VectorTests.ANDReduceLong64VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [10ms]
test Long64VectorTests.AND_NOTLong64VectorTests(long[-i * 5], long[i * 5]): success [385ms]
test Long64VectorTests.AND_NOTLong64VectorTests(long[-i * 5], long[i + 1]): success [177ms]
test Long64VectorTests.AND_NOTLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [176ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [305ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [215ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [230ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [175ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [175ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [174ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [174ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [178ms]
test Long64VectorTests.AND_NOTLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [173ms]
test Long64VectorTests.ASHRLong64VectorTests(long[-i * 5], long[i * 5]): success [321ms]
test Long64VectorTests.ASHRLong64VectorTests(long[-i * 5], long[i + 1]): success [200ms]
test Long64VectorTests.ASHRLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [200ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [310ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [178ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [203ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [177ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [174ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [174ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [175ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [174ms]
test Long64VectorTests.ASHRLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [174ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [205ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [23ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [5ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftConst(long[-i * 5]): success [40ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftConst(long[i * 5]): success [21ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftConst(long[i + 1]): success [6ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [5ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [110ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [6ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [57ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [52ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [5ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [58ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [26ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [50ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [5ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [4ms]
test Long64VectorTests.ASHRLong64VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [4ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [142ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [15ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [11ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [111ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [18ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [16ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [18ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [19ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [18ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [17ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [11ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [17ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [471ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [3ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [88ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [8ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [5ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [26ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [67ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [2ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [5ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long64VectorTests.BITWISE_BLENDLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

stMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [714ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [747ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [676ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [795ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [699ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [924ms]
test Long64VectorTests.divLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [948ms]
test Long64VectorTests.eqLong64VectorTests(long[i], long[i]): success [242ms]
test Long64VectorTests.eqLong64VectorTests(long[i], long[i - length / 2]): success [124ms]
test Long64VectorTests.eqLong64VectorTests(long[i], long[i + 1]): success [113ms]
test Long64VectorTests.eqLong64VectorTests(long[i], long[i - 2]): success [113ms]
test Long64VectorTests.eqLong64VectorTests(long[i], long[zigZag(i)]): success [132ms]
test Long64VectorTests.eqLong64VectorTests(long[i], long[cornerCaseValue(i)]): success [116ms]
test Long64VectorTests.eqLong64VectorTests(long[i - length / 2], long[i]): success [120ms]
test Long64VectorTests.eqLong64VectorTests(long[i - length / 2], long[i - length / 2]): success [147ms]
test Long64VectorTests.eqLong64VectorTests(long[i - length / 2], long[i + 1]): success [144ms]
test Long64VectorTests.eqLong64VectorTests(long[i - length / 2], long[i - 2]): success [114ms]
test Long64VectorTests.eqLong64VectorTests(long[i - length / 2], long[zigZag(i)]): success [141ms]
test Long64VectorTests.eqLong64VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [142ms]
test Long64VectorTests.eqLong64VectorTests(long[i + 1], long[i]): success [118ms]
test Long64VectorTests.eqLong64VectorTests(long[i + 1], long[i - length / 2]): success [119ms]
test Long64VectorTests.eqLong64VectorTests(long[i + 1], long[i + 1]): success [127ms]
test Long64VectorTests.eqLong64VectorTests(long[i + 1], long[i - 2]): success [140ms]
test Long64VectorTests.eqLong64VectorTests(long[i + 1], long[zigZag(i)]): success [123ms]
test Long64VectorTests.eqLong64VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [114ms]
test Long64VectorTests.eqLong64VectorTests(long[i - 2], long[i]): success [149ms]
test Long64VectorTests.eqLong64VectorTests(long[i - 2], long[i - length / 2]): success [113ms]
test Long64VectorTests.eqLong64VectorTests(long[i - 2], long[i + 1]): success [167ms]
test Long64VectorTests.eqLong64VectorTests(long[i - 2], long[i - 2]): success [113ms]
test Long64VectorTests.eqLong64VectorTests(long[i - 2], long[zigZag(i)]): success [115ms]
test Long64VectorTests.eqLong64VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [120ms]
test Long64VectorTests.eqLong64VectorTests(long[zigZag(i)], long[i]): success [113ms]
test Long64VectorTests.eqLong64VectorTests(long[zigZag(i)], long[i - length / 2]): success [113ms]
test Long64VectorTests.eqLong64VectorTests(long[zigZag(i)], long[i + 1]): success [113ms]
test Long64VectorTests.eqLong64VectorTests(long[zigZag(i)], long[i - 2]): success [114ms]
test Long64VectorTests.eqLong64VectorTests(long[zigZag(i)], long[zigZag(i)]): success [114ms]
test Long64VectorTests.eqLong64VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [114ms]
test Long64VectorTests.eqLong64VectorTests(long[cornerCaseValue(i)], long[i]): success [113ms]
test Long64VectorTests.eqLong64VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [114ms]
test Long64VectorTests.eqLong64VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [146ms]
test Long64VectorTests.eqLong64VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [116ms]
test Long64VectorTests.eqLong64VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [126ms]
test Long64VectorTests.eqLong64VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [114ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [55ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [5ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [32ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [12ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [7ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [5ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [3ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [2ms]
test Long64VectorTests.eqLong64VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.expandLong64VectorTests(long[-i * 5], mask[i % 2]): success [118ms]
test Long64VectorTests.expandLong64VectorTests(long[i * 5], mask[i % 2]): success [14ms]
test Long64VectorTests.expandLong64VectorTests(long[i + 1], mask[i % 2]): success [15ms]
test Long64VectorTests.expandLong64VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Long64VectorTests.expandLong64VectorTests(long[-i * 5], mask[true]): success [41ms]
test Long64VectorTests.expandLong64VectorTests(long[i * 5], mask[true]): success [14ms]
test Long64VectorTests.expandLong64VectorTests(long[i + 1], mask[true]): success [14ms]
test Long64VectorTests.expandLong64VectorTests(long[cornerCaseValue(i)], mask[true]): success [14ms]
test Long64VectorTests.expandLong64VectorTests(long[-i * 5], mask[false]): success [31ms]
test Long64VectorTests.expandLong64VectorTests(long[i * 5], mask[false]): success [16ms]
test Long64VectorTests.expandLong64VectorTests(long[i + 1], mask[false]): success [16ms]
test Long64VectorTests.expandLong64VectorTests(long[cornerCaseValue(i)], mask[false]): success [17ms]
test Long64VectorTests.getLong64VectorTests(long[-i * 5]): success [30ms]
test Long64VectorTests.getLong64VectorTests(long[i * 5]): success [3ms]
test Long64VectorTests.getLong64VectorTests(long[i + 1]): success [3ms]
test Long64VectorTests.getLong64VectorTests(long[cornerCaseValue(i)]): success [3ms]
test Long64VectorTests.hashCodeLong64VectorTestsSmokeTest(long[-i * 5]): success [104ms]
test Long64VectorTests.hashCodeLong64VectorTestsSmokeTest(long[i * 5]): success [11ms]
test Long64VectorTests.hashCodeLong64VectorTestsSmokeTest(long[i + 1]): success [18ms]
test Long64VectorTests.hashCodeLong64VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [4ms]
test Long64VectorTests.indexInRangeLong64VectorTestsSmokeTest(0): success [93ms]
test Long64VectorTests.indexInRangeLong64VectorTestsSmokeTest(-1): success [5ms]
test Long64VectorTests.indexInRangeLong64VectorTestsSmokeTest(1): success [5ms]
test Long64VectorTests.indexInRangeLong64VectorTestsSmokeTest(2): success [7ms]
test Long64VectorTests.indexInRangeLong64VectorTestsSmokeTest(-2): success [7ms]
test Long64VectorTests.indexInRangeLongLong64VectorTestsSmokeTest(0): success [8ms]
test Long64VectorTests.indexInRangeLongLong64VectorTestsSmokeTest(-1): success [9ms]
test Long64VectorTests.indexInRangeLongLong64VectorTestsSmokeTest(1): success [9ms]
test Long64VectorTests.indexInRangeLongLong64VectorTestsSmokeTest(2): success [17ms]
test Long64VectorTests.indexInRangeLongLong64VectorTestsSmokeTest(-2): success [8ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(0): success [0ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(1): success [0ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(32): success [0ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(37): success [0ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(1024): success [0ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(1025): success [0ms]
test Long64VectorTests.loopBoundLong64VectorTestsSmokeTest(1029): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(0): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(1): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(32): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(37): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(1024): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(1025): success [0ms]
test Long64VectorTests.loopBoundLongLong64VectorTestsSmokeTest(1029): success [0ms]
test Long64VectorTests.ltLong64VectorTests(long[i], long[i]): success [240ms]
test Long64VectorTests.ltLong64VectorTests(long[i], long[i - length / 2]): success [113ms]
test Long64VectorTests.ltLong64VectorTests(long[i], long[i + 1]): success [150ms]
test Long64VectorTests.ltLong64VectorTests(long[i], long[i - 2]): success [118ms]
test Long64VectorTests.ltLong64VectorTests(long[i], long[zigZag(i)]): success [116ms]
test Long64VectorTests.ltLong64VectorTests(long[i], long[cornerCaseValue(i)]): success [157ms]
test Long64VectorTests.ltLong64VectorTests(long[i - length / 2], long[i]): success [114ms]
test Long64VectorTests.ltLong64VectorTests(long[i - length / 2], long[i - length / 2]): success [138ms]
test Long64VectorTests.ltLong64VectorTests(long[i - length / 2], long[i + 1]): success [137ms]
test Long64VectorTests.ltLong64VectorTests(long[i - length / 2], long[i - 2]): success [111ms]
test Long64VectorTests.ltLong64VectorTests(long[i - length / 2], long[zigZag(i)]): success [147ms]
test Long64VectorTests.ltLong64VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [136ms]
test Long64VectorTests.ltLong64VectorTests(long[i + 1], long[i]): success [112ms]
test Long64VectorTests.ltLong64VectorTests(long[i + 1], long[i - length / 2]): success [144ms]
test Long64VectorTests.ltLong64VectorTests(long[i + 1], long[i + 1]): success [125ms]
test Long64VectorTests.ltLong64VectorTests(long[i + 1], long[i - 2]): success [113ms]
test Long64VectorTests.ltLong64VectorTests(long[i + 1], long[zigZag(i)]): success [137ms]
test Long64VectorTests.ltLong64VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [122ms]
test Long64VectorTests.ltLong64VectorTests(long[i - 2], long[i]): success [114ms]
test Long64VectorTests.ltLong64VectorTests(long[i - 2], long[i - length / 2]): success [113ms]
test Long64VectorTests.ltLong64VectorTests(long[i - 2], long[i + 1]): success [144ms]
test Long64VectorTests.ltLong64VectorTests(long[i - 2], long[i - 2]): success [112ms]
test Long64VectorTests.ltLong64VectorTests(long[i - 2], long[zigZag(i)]): success [112ms]
test Long64VectorTests.ltLong64VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [113ms]
test Long64VectorTests.ltLong64VectorTests(long[zigZag(i)], long[i]): success [152ms]
test Long64VectorTests.ltLong64VectorTests(long[zigZag(i)], long[i - length / 2]): success [112ms]
test Long64VectorTests.ltLong64VectorTests(long[zigZag(i)], long[i + 1]): success [112ms]
test Long64VectorTests.ltLong64VectorTests(long[zigZag(i)], long[i - 2]): success [112ms]
test Long64VectorTests.ltLong64VectorTests(long[zigZag(i)], long[zigZag(i)]): success [112ms]
test Long64VectorTests.ltLong64VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [112ms]
test Long64VectorTests.ltLong64VectorTests(long[cornerCaseValue(i)], long[i]): success [112ms]
test Long64VectorTests.ltLong64VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [152ms]
test Long64VectorTests.ltLong64VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [112ms]
test Long64VectorTests.ltLong64VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [111ms]
test Long64VectorTests.ltLong64VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [112ms]
test Long64VectorTests.ltLong64VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [111ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i], long[i]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [12ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [3ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [52ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [2ms]
test Long64VectorTests.ltLong64VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.maskAndLong64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test Long64VectorTests.maskAndLong64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long64VectorTests.maskAndNotLong64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test Long64VectorTests.maskAndNotLong64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long64VectorTests.maskCompressLong64VectorTestsSmokeTest(mask[i % 2]): success [348ms]
test Long64VectorTests.maskCompressLong64VectorTestsSmokeTest(mask[true]): success [149ms]
test Long64VectorTests.maskCompressLong64VectorTestsSmokeTest(mask[false]): success [166ms]
test Long64VectorTests.maskEqLong64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Long64VectorTests.maskEqLong64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long64VectorTests.maskEqualsLong64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long64VectorTests.maskEqualsLong64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long64VectorTests.maskFirstTrueLong64VectorTestsSmokeTest(mask[i % 2]): success [33ms]
test Long64VectorTests.maskFirstTrueLong64VectorTestsSmokeTest(mask[true]): success [48ms]
test Long64VectorTests.maskFirstTrueLong64VectorTestsSmokeTest(mask[false]): success [17ms]
test Long64VectorTests.maskFromToLongLong64VectorTestsSmokeTest(-1): success [110ms]
test Long64VectorTests.maskFromToLongLong64VectorTestsSmokeTest(0): success [0ms]
test Long64VectorTests.maskFromToLongLong64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long64VectorTests.maskFromToLongLong64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long64VectorTests.maskHashCodeLong64VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long64VectorTests.maskHashCodeLong64VectorTestsSmokeTest(mask[true]): success [0ms]
test Long64VectorTests.maskHashCodeLong64VectorTestsSmokeTest(mask[false]): success [0ms]
test Long64VectorTests.maskLastTrueLong64VectorTestsSmokeTest(mask[i % 2]): success [61ms]
test Long64VectorTests.maskLastTrueLong64VectorTestsSmokeTest(mask[true]): success [49ms]
test Long64VectorTests.maskLastTrueLong64VectorTestsSmokeTest(mask[false]): success [29ms]
test Long64VectorTests.maskOrLong64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [35ms]
test Long64VectorTests.maskOrLong64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long64VectorTests.maskTrueCountLong64VectorTestsSmokeTest(mask[i % 2]): success [62ms]
test Long64VectorTests.maskTrueCountLong64VectorTestsSmokeTest(mask[true]): success [58ms]
test Long64VectorTests.maskTrueCountLong64VectorTestsSmokeTest(mask[false]): success [18ms]
test Long64VectorTests.maskXorLong64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Long64VectorTests.maskXorLong64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long64VectorTests.maxLong64VectorTests(long[-i * 5], long[i * 5]): success [19ms]
test Long64VectorTests.maxLong64VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long64VectorTests.maxLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.maxLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long64VectorTests.maxLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [2ms]
test Long64VectorTests.maxLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.minLong64VectorTests(long[-i * 5], long[i * 5]): success [8ms]
test Long64VectorTests.minLong64VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long64VectorTests.minLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.minLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long64VectorTests.minLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [2ms]
test Long64VectorTests.minLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.mulLong64VectorTests(long[-i * 5], long[i * 5]): success [7ms]
test Long64VectorTests.mulLong64VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long64VectorTests.mulLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [8ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [2ms]
test Long64VectorTests.mulLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [7ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long64VectorTests.mulLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long64VectorTests.negLong64VectorTests(long[-i * 5]): success [51ms]
test Long64VectorTests.negLong64VectorTests(long[i * 5]): success [21ms]
test Long64VectorTests.negLong64VectorTests(long[i + 1]): success [5ms]
test Long64VectorTests.negLong64VectorTests(long[cornerCaseValue(i)]): success [108ms]
test Long64VectorTests.notLong64VectorTests(long[-i * 5]): success [255ms]
test Long64VectorTests.notLong64VectorTests(long[i * 5]): success [194ms]
test Long64VectorTests.notLong64VectorTests(long[i + 1]): success [231ms]
test Long64VectorTests.notLong64VectorTests(long[cornerCaseValue(i)]): success [279ms]
test Long64VectorTests.orLong64VectorTests(long[-i * 5], long[i * 5]): success [30ms]
test Long64VectorTests.orLong64VectorTests(long[-i * 5], long[i + 1]): success [1ms]
test Long64VectorTests.orLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.orLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [20ms]
test Long64VectorTests.orLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [2ms]
test Long64VectorTests.orLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.shuffleEqualsLong64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [18ms]
test Long64VectorTests.shuffleEqualsLong64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [22ms]
test Long64VectorTests.shuffleMiscellaneousLong64VectorTestsSmokeTest(shuffle[random]): success [15ms]
test Long64VectorTests.shuffleTest(): success [342ms]
test Long64VectorTests.shuffleToStringLong64VectorTestsSmokeTest(shuffle[random]): success [51ms]
test Long64VectorTests.sliceBinaryLong64VectorTestsBinary(long[-i * 5], long[i * 5]): success [2012ms]
test Long64VectorTests.sliceBinaryLong64VectorTestsBinary(long[-i * 5], long[i + 1]): success [1149ms]
test Long64VectorTests.sliceBinaryLong64VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [1150ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [2121ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [1458ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1429ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [1656ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1488ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1500ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1524ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1486ms]
test Long64VectorTests.sliceLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1552ms]
test Long64VectorTests.sliceUnaryLong64VectorTests(long[-i * 5]): success [1656ms]
test Long64VectorTests.sliceUnaryLong64VectorTests(long[i * 5]): success [1092ms]
test Long64VectorTests.sliceUnaryLong64VectorTests(long[i + 1]): success [1261ms]
test Long64VectorTests.sliceUnaryLong64VectorTests(long[cornerCaseValue(i)]): success [1128ms]
test Long64VectorTests.smokeTest1(): success [0ms]
test Long64VectorTests.smokeTest2(): success [154ms]
test Long64VectorTests.subLong64VectorTests(long[-i * 5], long[i * 5]): success [8ms]
test Long64VectorTests.subLong64VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long64VectorTests.subLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [11ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [40ms]
test Long64VectorTests.subLong64VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [11ms]
test Long64VectorTests.subLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long64VectorTests.subLong64VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [9ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long64VectorTests.subLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long64VectorTests.toDoubleArrayLong64VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long64VectorTests.toDoubleArrayLong64VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long64VectorTests.toDoubleArrayLong64VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long64VectorTests.toDoubleArrayLong64VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.toIntArrayLong64VectorTestsSmokeTest(long[-i * 5]): success [17ms]
test Long64VectorTests.toIntArrayLong64VectorTestsSmokeTest(long[i * 5]): success [7ms]
test Long64VectorTests.toIntArrayLong64VectorTestsSmokeTest(long[i + 1]): success [7ms]
test Long64VectorTests.toIntArrayLong64VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [7ms]
test Long64VectorTests.toLongArrayLong64VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long64VectorTests.toLongArrayLong64VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long64VectorTests.toLongArrayLong64VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long64VectorTests.toLongArrayLong64VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long64VectorTests.toStringLong64VectorTestsSmokeTest(long[-i * 5]): success [9ms]
test Long64VectorTests.toStringLong64VectorTestsSmokeTest(long[i * 5]): success [21ms]
test Long64VectorTests.toStringLong64VectorTestsSmokeTest(long[i + 1]): success [49ms]
test Long64VectorTests.toStringLong64VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [1ms]
test Long64VectorTests.unsliceBinaryLong64VectorTestsBinary(long[-i * 5], long[i * 5]): success [1528ms]
test Long64VectorTests.unsliceBinaryLong64VectorTestsBinary(long[-i * 5], long[i + 1]): success [1506ms]
test Long64VectorTests.unsliceBinaryLong64VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [1030ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [3229ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [2215ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2274ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2349ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2499ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2501ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [2499ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [2465ms]
test Long64VectorTests.unsliceLong64VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2580ms]
test Long64VectorTests.unsliceUnaryLong64VectorTests(long[-i * 5]): success [1516ms]
test Long64VectorTests.unsliceUnaryLong64VectorTests(long[i * 5]): success [1196ms]
test Long64VectorTests.unsliceUnaryLong64VectorTests(long[i + 1]): success [1160ms]
test Long64VectorTests.unsliceUnaryLong64VectorTests(long[cornerCaseValue(i)]): success [1192ms]
test Long64VectorTests.viewAsFloatingLanesTest(): success [583ms]
test Long64VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long64VectorTests.withLong64VectorTests(long[-i * 5], long[i * 5]): success [168ms]
test Long64VectorTests.withLong64VectorTests(long[-i * 5], long[i + 1]): success [84ms]
test Long64VectorTests.withLong64VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [66ms]

===============================================
jdk/incubator/vector/Long64VectorTests.java
Total tests run: 3321, Passes: 3320, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/4 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Long64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Long64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Long64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/Long64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=4 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Long64VectorTests.d/testng.0.jta jdk/incubator/vector/Long64VectorTests.java false Long64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/AddTest.java
Passed: jdk/incubator/vector/Vector512ConversionTests.java
Passed: jdk/incubator/vector/Byte256VectorTests.java
Passed: jdk/incubator/vector/Short64VectorTests.java
Passed: jdk/incubator/vector/Short256VectorTests.java
Passed: jdk/incubator/vector/Short512VectorTests.java
Passed: jdk/incubator/vector/Vector256ConversionTests.java
Passed: jdk/incubator/vector/Byte512VectorTests.java
Passed: jdk/incubator/vector/Vector128ConversionTests.java
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#id0
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#Z
TEST: jdk/incubator/vector/VectorReshapeTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.532 seconds
messages:
command: build VectorReshapeTests
reason: Named class compiled on demand
started: Wed Apr 16 22:28:43 IST 2025
Test directory:
  compile: VectorReshapeTests
finished: Wed Apr 16 22:28:43 IST 2025
elapsed time (seconds): 0.532

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.532 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 22:28:43 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 2
Process id: 1660167
finished: Wed Apr 16 22:28:43 IST 2025
elapsed time (seconds): 0.532
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/VectorReshapeTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/VectorReshapeTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 7
REASON: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
TIME:   1114.113 seconds
messages:
command: testng --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests
reason: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
started: Wed Apr 16 22:28:43 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1694022
finished: Wed Apr 16 22:47:18 IST 2025
elapsed time (seconds): 1114.113
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorReshapeTests.testCastFromByte(byte(i)): success [47009ms]
test VectorReshapeTests.testCastFromDouble(double(i)): success [3373ms]
test VectorReshapeTests.testCastFromFloat(float(i)): success [4277ms]
test VectorReshapeTests.testCastFromInt(int(i)): success [4227ms]
test VectorReshapeTests.testCastFromLong(long(i)): success [3391ms]
test VectorReshapeTests.testCastFromShort(short(i)): success [4241ms]
test VectorReshapeTests.testRebracket128(byte(i)): success [23560ms]
test VectorReshapeTests.testRebracket256(byte(i)): success [117280ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64]
Failing with Species[long, 8, S_512_BIT]->Species[byte, 64, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-7, origin=56
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 17, 25, 33, 41, 49, 57]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket512(byte(i)): failure [110826ms]
java.lang.AssertionError: arrays differ firstly at element [56]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket512(VectorReshapeTests.java:1018)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testRebracket64(byte(i)): success [16352ms]
test VectorReshapeTests.testRebracketMax(byte(i)): success [21363ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[byte, 8, S_64_BIT]->Species[byte, 64, S_512_BIT] (reinterpret), partLimit=-8, block=8, part=-6, origin=48
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeByte(byte(i)): failure [247205ms]
java.lang.AssertionError: arrays differ firstly at element [48]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeByte(VectorReshapeTests.java:441)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[double, 1, S_64_BIT]->Species[double, 8, S_512_BIT] (reinterpret), partLimit=-8, block=8, part=-3, origin=24
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeDouble(byte(i)): failure [74187ms]
java.lang.AssertionError: arrays differ firstly at element [24]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeDouble(VectorReshapeTests.java:671)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[float, 2, S_64_BIT]->Species[float, 16, S_512_BIT] (reinterpret), partLimit=-8, block=8, part=-2, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeFloat(byte(i)): failure [73751ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeFloat(VectorReshapeTests.java:625)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[int, 2, S_64_BIT]->Species[int, 16, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-1, origin=8
expect: [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeInt(byte(i)): failure [128779ms]
java.lang.AssertionError: arrays differ firstly at element [8]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeInt(VectorReshapeTests.java:533)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[long, 1, S_64_BIT]->Species[long, 4, S_256_BIT] (lanewise), partLimit=-4, block=8, part=-1, origin=8
expect: [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeLong(byte(i)): failure [15468ms]
java.lang.AssertionError: arrays differ firstly at element [8]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeLong(VectorReshapeTests.java:578)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[short, 8, S_Max_BIT]->Species[short, 32, S_512_BIT] (lanewise), partLimit=-4, block=16, part=-2, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeShort(byte(i)): failure [175207ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeShort(VectorReshapeTests.java:511)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testUCastFromByte(byte(i)): success [25611ms]
test VectorReshapeTests.testUCastFromInt(int(i)): success [1ms]
test VectorReshapeTests.testUCastFromShort(short(i)): success [11844ms]

===============================================
jdk/incubator/vector/VectorReshapeTests.java
Total tests run: 20, Passes: 13, Failures: 7, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 7
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 7
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 7
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=4 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/VectorReshapeTests.d/testng.0.jta jdk/incubator/vector/VectorReshapeTests.java false VectorReshapeTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 7
--------------------------------------------------
Passed: jdk/incubator/vector/Vector64ConversionTests.java#id0
Test results: passed: 75; failed: 5; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_incubator_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector
Finished running test 'jtreg:test/jdk/jdk/incubator/vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_incubator_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk/jdk/incubator/vector                  83    75     5     0     3 <<
==============================
TEST FAILURE

