Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/jdk/incubator/vector/', will run:
* jtreg:test/jdk/jdk/incubator/vector
Clean up dirs for jtreg_test_jdk_jdk_incubator_vector

Running test 'jtreg:test/jdk/jdk/incubator/vector'
Passed: jdk/incubator/vector/AddTest.java
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
--------------------------------------------------
TEST: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   13.993 seconds
messages:
command: build Byte512VectorLoadStoreTests
reason: Named class compiled on demand
started: Thu Apr 17 03:54:42 IST 2025
Test directory:
  compile: Byte512VectorLoadStoreTests
finished: Thu Apr 17 03:54:56 IST 2025
elapsed time (seconds): 13.993

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   13.987 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorLoadStoreTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 03:54:42 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 4
Process id: 2201204
finished: Thu Apr 17 03:54:56 IST 2025
elapsed time (seconds): 13.987
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Byte512VectorLoadStoreTests.d 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Byte512VectorLoadStoreTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorLoadStoreTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Byte512VectorLoadStoreTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Byte512VectorLoadStoreTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Byte512VectorLoadStoreTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Byte512VectorLoadStoreTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Byte512VectorLoadStoreTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorLoadStoreTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm -XX:-TieredCompilation Byte512VectorLoadStoreTests 
TIME:   59.542 seconds
messages:
command: testng -XX:-TieredCompilation Byte512VectorLoadStoreTests
reason: User specified action: run testng/othervm -XX:-TieredCompilation Byte512VectorLoadStoreTests 
started: Thu Apr 17 03:54:56 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 2202249
finished: Thu Apr 17 03:55:55 IST 2025
elapsed time (seconds): 59.542
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED

STDOUT:
For random generator using seed: -5377049161827820872
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-5377049161827820872" to command line.
test Byte512VectorLoadStoreTests.booleanGather(byte[i * 5], index[random]): success [1283ms]
test Byte512VectorLoadStoreTests.booleanGather(byte[i + 1], index[random]): success [2815ms]
test Byte512VectorLoadStoreTests.booleanGatherMask(byte[i * 5], index[random], mask[i % 2]): success [460ms]
test Byte512VectorLoadStoreTests.booleanGatherMask(byte[i + 1], index[random], mask[i % 2]): success [298ms]
test Byte512VectorLoadStoreTests.booleanGatherMask(byte[i * 5], index[random], mask[true]): success [328ms]
test Byte512VectorLoadStoreTests.booleanGatherMask(byte[i + 1], index[random], mask[true]): success [309ms]
test Byte512VectorLoadStoreTests.booleanGatherMask(byte[i * 5], index[random], mask[false]): success [556ms]
test Byte512VectorLoadStoreTests.booleanGatherMask(byte[i + 1], index[random], mask[false]): success [305ms]
test Byte512VectorLoadStoreTests.booleanScatter(byte[i * 5], index[random]): success [227ms]
test Byte512VectorLoadStoreTests.booleanScatter(byte[i + 1], index[random]): success [206ms]
test Byte512VectorLoadStoreTests.booleanScatterMask(byte[i * 5], index[random], mask[i % 2]): success [132ms]
test Byte512VectorLoadStoreTests.booleanScatterMask(byte[i + 1], index[random], mask[i % 2]): success [152ms]
test Byte512VectorLoadStoreTests.booleanScatterMask(byte[i * 5], index[random], mask[true]): success [3ms]
test Byte512VectorLoadStoreTests.booleanScatterMask(byte[i + 1], index[random], mask[true]): success [242ms]
test Byte512VectorLoadStoreTests.booleanScatterMask(byte[i * 5], index[random], mask[false]): success [638ms]
test Byte512VectorLoadStoreTests.booleanScatterMask(byte[i + 1], index[random], mask[false]): success [2ms]
test Byte512VectorLoadStoreTests.gather(byte[i * 5], index[random]): success [1816ms]
test Byte512VectorLoadStoreTests.gather(byte[i + 1], index[random]): success [220ms]
test Byte512VectorLoadStoreTests.gatherMask(byte[i * 5], index[random], mask[i % 2]): success [398ms]
test Byte512VectorLoadStoreTests.gatherMask(byte[i + 1], index[random], mask[i % 2]): success [417ms]
test Byte512VectorLoadStoreTests.gatherMask(byte[i * 5], index[random], mask[true]): success [147ms]
test Byte512VectorLoadStoreTests.gatherMask(byte[i + 1], index[random], mask[true]): success [290ms]
test Byte512VectorLoadStoreTests.gatherMask(byte[i * 5], index[random], mask[false]): success [613ms]
test Byte512VectorLoadStoreTests.gatherMask(byte[i + 1], index[random], mask[false]): success [168ms]
test Byte512VectorLoadStoreTests.loadArrayIOOBE(byte[i * 5], -1): success [327ms]
test Byte512VectorLoadStoreTests.loadArrayIOOBE(byte[i * 5], l): success [305ms]
test Byte512VectorLoadStoreTests.loadArrayIOOBE(byte[i * 5], l - 1): success [5ms]
test Byte512VectorLoadStoreTests.loadArrayIOOBE(byte[i * 5], l + 1): success [13ms]
test Byte512VectorLoadStoreTests.loadArrayIOOBE(byte[i * 5], l - speciesl + 1): success [87ms]
test Byte512VectorLoadStoreTests.loadArrayIOOBE(byte[i * 5], l + speciesl - 1): success [3ms]
test Byte512VectorLoadStoreTests.loadArrayIOOBE(byte[i * 5], l + speciesl): success [4ms]
test Byte512VectorLoadStoreTests.loadArrayIOOBE(byte[i * 5], l + speciesl + 1): success [4ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], -1, mask[i % 2]): success [178ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l, mask[i % 2]): success [826ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l - 1, mask[i % 2]): success [4ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + 1, mask[i % 2]): success [151ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l - speciesl + 1, mask[i % 2]): success [195ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + speciesl - 1, mask[i % 2]): success [43ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + speciesl, mask[i % 2]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + speciesl + 1, mask[i % 2]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], -1, mask[true]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l, mask[true]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l - 1, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + 1, mask[true]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l - speciesl + 1, mask[true]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + speciesl - 1, mask[true]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + speciesl, mask[true]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + speciesl + 1, mask[true]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], -1, mask[false]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l, mask[false]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l - 1, mask[false]): success [2ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + 1, mask[false]): success [5ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l - speciesl + 1, mask[false]): success [6ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + speciesl - 1, mask[false]): success [101ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + speciesl, mask[false]): success [3ms]
test Byte512VectorLoadStoreTests.loadArrayMaskIOOBE(byte[i * 5], l + speciesl + 1, mask[false]): success [2ms]
test Byte512VectorLoadStoreTests.loadByteStoreBooleanArray(byte[i * 5]): success [548ms]
test Byte512VectorLoadStoreTests.loadByteStoreBooleanArray(byte[i + 1]): success [122ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentIOOBE(byte[i * 5], -1): success [508ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentIOOBE(byte[i * 5], l): success [868ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentIOOBE(byte[i * 5], l - 1): success [11ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentIOOBE(byte[i * 5], l + 1): success [22ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentIOOBE(byte[i * 5], l - speciesl*ebsize + 1): success [116ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentIOOBE(byte[i * 5], l + speciesl*ebsize - 1): success [4ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentIOOBE(byte[i * 5], l + speciesl*ebsize): success [6ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentIOOBE(byte[i * 5], l + speciesl*ebsize + 1): success [4ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], -1, mask[i % 2]): success [191ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l, mask[i % 2]): success [654ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l - 1, mask[i % 2]): success [8ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + 1, mask[i % 2]): success [8ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l - speciesl*ebsize + 1, mask[i % 2]): success [143ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize - 1, mask[i % 2]): success [8ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize, mask[i % 2]): success [7ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize + 1, mask[i % 2]): success [19ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], -1, mask[true]): success [9ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l, mask[true]): success [5ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l - 1, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + 1, mask[true]): success [6ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l - speciesl*ebsize + 1, mask[true]): success [5ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize - 1, mask[true]): success [5ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize, mask[true]): success [5ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize + 1, mask[true]): success [7ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], -1, mask[false]): success [54ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l, mask[false]): success [6ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l - 1, mask[false]): success [18ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + 1, mask[false]): success [5ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l - speciesl*ebsize + 1, mask[false]): success [5ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize - 1, mask[false]): success [81ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize, mask[false]): success [4ms]
test Byte512VectorLoadStoreTests.loadMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize + 1, mask[false]): success [5ms]
test Byte512VectorLoadStoreTests.loadStoreArray(byte[i * 5]): success [3ms]
test Byte512VectorLoadStoreTests.loadStoreArray(byte[i + 1]): success [4ms]
test Byte512VectorLoadStoreTests.loadStoreBooleanArray(byte[i * 5]): success [259ms]
test Byte512VectorLoadStoreTests.loadStoreBooleanArray(byte[i + 1]): success [122ms]
test Byte512VectorLoadStoreTests.loadStoreMask(mask[i % 2]): success [11ms]
test Byte512VectorLoadStoreTests.loadStoreMask(mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.loadStoreMask(mask[false]): success [47ms]
test Byte512VectorLoadStoreTests.loadStoreMask(byte[i * 5], mask[i % 2]): success [2ms]
test Byte512VectorLoadStoreTests.loadStoreMask(byte[i + 1], mask[i % 2]): success [2ms]
test Byte512VectorLoadStoreTests.loadStoreMask(byte[i * 5], mask[true]): success [2ms]
test Byte512VectorLoadStoreTests.loadStoreMask(byte[i + 1], mask[true]): success [8ms]
test Byte512VectorLoadStoreTests.loadStoreMask(byte[i * 5], mask[false]): success [2ms]
test Byte512VectorLoadStoreTests.loadStoreMask(byte[i + 1], mask[false]): success [2ms]
test Byte512VectorLoadStoreTests.loadStoreMaskArray(byte[i * 5], mask[i % 2]): success [211ms]
test Byte512VectorLoadStoreTests.loadStoreMaskArray(byte[i + 1], mask[i % 2]): success [411ms]
test Byte512VectorLoadStoreTests.loadStoreMaskArray(byte[i * 5], mask[true]): success [451ms]
test Byte512VectorLoadStoreTests.loadStoreMaskArray(byte[i + 1], mask[true]): success [83ms]
test Byte512VectorLoadStoreTests.loadStoreMaskArray(byte[i * 5], mask[false]): success [61ms]
test Byte512VectorLoadStoreTests.loadStoreMaskArray(byte[i + 1], mask[false]): success [7ms]
test Byte512VectorLoadStoreTests.loadStoreMaskBooleanArray(byte[i * 5], mask[i % 2]): success [651ms]
test Byte512VectorLoadStoreTests.loadStoreMaskBooleanArray(byte[i + 1], mask[i % 2]): success [908ms]
test Byte512VectorLoadStoreTests.loadStoreMaskBooleanArray(byte[i * 5], mask[true]): success [1388ms]
test Byte512VectorLoadStoreTests.loadStoreMaskBooleanArray(byte[i + 1], mask[true]): success [466ms]
test Byte512VectorLoadStoreTests.loadStoreMaskBooleanArray(byte[i * 5], mask[false]): success [510ms]
test Byte512VectorLoadStoreTests.loadStoreMaskBooleanArray(byte[i + 1], mask[false]): success [242ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], DMS, BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], DMS, LITTLE_ENDIAN): success [4ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:byte[], BIG_ENDIAN): success [1060ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:byte[], LITTLE_ENDIAN): success [82ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:short[], BIG_ENDIAN): success [1909ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:short[], LITTLE_ENDIAN): success [100ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:int[], BIG_ENDIAN): success [63ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:int[], LITTLE_ENDIAN): success [31ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:float[], BIG_ENDIAN): success [499ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:float[], LITTLE_ENDIAN): success [753ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:long[], BIG_ENDIAN): success [70ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:long[], LITTLE_ENDIAN): success [753ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:double[], BIG_ENDIAN): success [44ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:double[], LITTLE_ENDIAN): success [53ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:ByteBuffer.wrap, BIG_ENDIAN): success [35ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:ByteBuffer.wrap, LITTLE_ENDIAN): success [31ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:IntBuffer.wrap, BIG_ENDIAN): success [35ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:IntBuffer.wrap, LITTLE_ENDIAN): success [31ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:ByteBuffer.allocate, BIG_ENDIAN): success [31ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:ByteBuffer.allocate, LITTLE_ENDIAN): success [84ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:IntBuffer.allocate, BIG_ENDIAN): success [31ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:IntBuffer.allocate, LITTLE_ENDIAN): success [31ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:long[].asSlice, BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i * 5], HMS:long[].asSlice, LITTLE_ENDIAN): success [31ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], DMS, BIG_ENDIAN): success [5ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], DMS, LITTLE_ENDIAN): success [5ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:byte[], BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:byte[], LITTLE_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:short[], BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:short[], LITTLE_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:int[], BIG_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:int[], LITTLE_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:float[], BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:float[], LITTLE_ENDIAN): success [31ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:long[], BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:long[], LITTLE_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:double[], BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:double[], LITTLE_ENDIAN): success [55ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:ByteBuffer.wrap, BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:ByteBuffer.wrap, LITTLE_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:IntBuffer.wrap, BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:IntBuffer.wrap, LITTLE_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:ByteBuffer.allocate, BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:ByteBuffer.allocate, LITTLE_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:IntBuffer.allocate, BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:IntBuffer.allocate, LITTLE_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:long[].asSlice, BIG_ENDIAN): success [30ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegment(byte[i + 1], HMS:long[].asSlice, LITTLE_ENDIAN): success [32ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], DMS, mask[i % 2], BIG_ENDIAN): success [1320ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], DMS, mask[i % 2], LITTLE_ENDIAN): success [298ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:byte[], mask[i % 2], BIG_ENDIAN): success [2929ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:byte[], mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:short[], mask[i % 2], BIG_ENDIAN): failure [54ms]
java.lang.IndexOutOfBoundsException: Masked range check failed: vector mask Mask[T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.] out of bounds at index 281479271743489+0 for length 3072
	at jdk.incubator.vector/jdk.incubator.vector.AbstractMask.checkIndexFailed(AbstractMask.java:510)
	at jdk.incubator.vector/jdk.incubator.vector.AbstractMask.checkIndexByLane(AbstractMask.java:464)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.intoMemorySegment(ByteVector.java:3888)
	at Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(Byte512VectorLoadStoreTests.java:572)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:short[], mask[i % 2], LITTLE_ENDIAN): success [265ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:int[], mask[i % 2], BIG_ENDIAN): success [424ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:int[], mask[i % 2], LITTLE_ENDIAN): success [1573ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:float[], mask[i % 2], BIG_ENDIAN): success [43ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:float[], mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[], mask[i % 2], BIG_ENDIAN): success [59ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[], mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:double[], mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:double[], mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.wrap, mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.wrap, mask[i % 2], LITTLE_ENDIAN): success [48ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.wrap, mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.wrap, mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.allocate, mask[i % 2], BIG_ENDIAN): success [42ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.allocate, mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.allocate, mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.allocate, mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[].asSlice, mask[i % 2], BIG_ENDIAN): success [42ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[].asSlice, mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], DMS, mask[i % 2], BIG_ENDIAN): success [12ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], DMS, mask[i % 2], LITTLE_ENDIAN): success [11ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:byte[], mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:byte[], mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:short[], mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:short[], mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:int[], mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:int[], mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:float[], mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:float[], mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[], mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[], mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:double[], mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:double[], mask[i % 2], LITTLE_ENDIAN): success [42ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.wrap, mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.wrap, mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.wrap, mask[i % 2], BIG_ENDIAN): success [44ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.wrap, mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.allocate, mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.allocate, mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.allocate, mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.allocate, mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[].asSlice, mask[i % 2], BIG_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[].asSlice, mask[i % 2], LITTLE_ENDIAN): success [41ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], DMS, mask[true], BIG_ENDIAN): success [14ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], DMS, mask[true], LITTLE_ENDIAN): success [14ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:byte[], mask[true], BIG_ENDIAN): success [319ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:byte[], mask[true], LITTLE_ENDIAN): success [2283ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:short[], mask[true], BIG_ENDIAN): success [65ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:short[], mask[true], LITTLE_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:int[], mask[true], BIG_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:int[], mask[true], LITTLE_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:float[], mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:float[], mask[true], LITTLE_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[], mask[true], BIG_ENDIAN): success [69ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[], mask[true], LITTLE_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:double[], mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:double[], mask[true], LITTLE_ENDIAN): success [65ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.wrap, mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.wrap, mask[true], LITTLE_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.wrap, mask[true], BIG_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.wrap, mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.allocate, mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.allocate, mask[true], LITTLE_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.allocate, mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.allocate, mask[true], LITTLE_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[].asSlice, mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[].asSlice, mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], DMS, mask[true], BIG_ENDIAN): success [14ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], DMS, mask[true], LITTLE_ENDIAN): success [13ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:byte[], mask[true], BIG_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:byte[], mask[true], LITTLE_ENDIAN): success [65ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:short[], mask[true], BIG_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:short[], mask[true], LITTLE_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:int[], mask[true], BIG_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:int[], mask[true], LITTLE_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:float[], mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:float[], mask[true], LITTLE_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[], mask[true], BIG_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[], mask[true], LITTLE_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:double[], mask[true], BIG_ENDIAN): success [58ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:double[], mask[true], LITTLE_ENDIAN): success [62ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.wrap, mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.wrap, mask[true], LITTLE_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.wrap, mask[true], BIG_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.wrap, mask[true], LITTLE_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.allocate, mask[true], BIG_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.allocate, mask[true], LITTLE_ENDIAN): success [57ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.allocate, mask[true], BIG_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.allocate, mask[true], LITTLE_ENDIAN): success [58ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[].asSlice, mask[true], BIG_ENDIAN): success [65ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[].asSlice, mask[true], LITTLE_ENDIAN): success [56ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], DMS, mask[false], BIG_ENDIAN): success [10ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], DMS, mask[false], LITTLE_ENDIAN): success [9ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:byte[], mask[false], BIG_ENDIAN): success [35ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:byte[], mask[false], LITTLE_ENDIAN): success [35ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:short[], mask[false], BIG_ENDIAN): success [35ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:short[], mask[false], LITTLE_ENDIAN): success [63ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:int[], mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:int[], mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:float[], mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:float[], mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[], mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[], mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:double[], mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:double[], mask[false], LITTLE_ENDIAN): success [42ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.wrap, mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.wrap, mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.wrap, mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.wrap, mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.allocate, mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:ByteBuffer.allocate, mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.allocate, mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:IntBuffer.allocate, mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[].asSlice, mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i * 5], HMS:long[].asSlice, mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], DMS, mask[false], BIG_ENDIAN): success [8ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], DMS, mask[false], LITTLE_ENDIAN): success [8ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:byte[], mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:byte[], mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:short[], mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:short[], mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:int[], mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:int[], mask[false], LITTLE_ENDIAN): success [40ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:float[], mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:float[], mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[], mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[], mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:double[], mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:double[], mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.wrap, mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.wrap, mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.wrap, mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.wrap, mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.allocate, mask[false], BIG_ENDIAN): success [37ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:ByteBuffer.allocate, mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.allocate, mask[false], BIG_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:IntBuffer.allocate, mask[false], LITTLE_ENDIAN): success [34ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[].asSlice, mask[false], BIG_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreMemorySegmentMask(byte[i + 1], HMS:long[].asSlice, mask[false], LITTLE_ENDIAN): success [33ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], DMS, BIG_ENDIAN): success [49ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], DMS, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:byte[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:byte[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:short[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:short[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:int[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:int[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:float[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:float[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:long[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:long[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:double[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:double[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:ByteBuffer.wrap, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:ByteBuffer.wrap, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:IntBuffer.wrap, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:IntBuffer.wrap, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:ByteBuffer.allocate, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:ByteBuffer.allocate, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:IntBuffer.allocate, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:IntBuffer.allocate, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:long[].asSlice, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i * 5], HMS:long[].asSlice, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], DMS, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], DMS, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:byte[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:byte[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:short[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:short[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:int[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:int[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:float[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:float[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:long[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:long[], LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:double[], BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:double[], LITTLE_ENDIAN): success [7ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:ByteBuffer.wrap, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:ByteBuffer.wrap, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:IntBuffer.wrap, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:IntBuffer.wrap, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:ByteBuffer.allocate, BIG_ENDIAN): success [4ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:ByteBuffer.allocate, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:IntBuffer.allocate, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:IntBuffer.allocate, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:long[].asSlice, BIG_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreReadonlyMemorySegment(byte[i + 1], HMS:long[].asSlice, LITTLE_ENDIAN): success [0ms]
test Byte512VectorLoadStoreTests.loadStoreShuffle(): success [5618ms]
test Byte512VectorLoadStoreTests.scatter(byte[i * 5], index[random]): success [16ms]
test Byte512VectorLoadStoreTests.scatter(byte[i + 1], index[random]): success [103ms]
test Byte512VectorLoadStoreTests.scatterMask(byte[i * 5], index[random], mask[i % 2]): success [16ms]
test Byte512VectorLoadStoreTests.scatterMask(byte[i + 1], index[random], mask[i % 2]): success [73ms]
test Byte512VectorLoadStoreTests.scatterMask(byte[i * 5], index[random], mask[true]): success [63ms]
test Byte512VectorLoadStoreTests.scatterMask(byte[i + 1], index[random], mask[true]): success [3ms]
test Byte512VectorLoadStoreTests.scatterMask(byte[i * 5], index[random], mask[false]): success [306ms]
test Byte512VectorLoadStoreTests.scatterMask(byte[i + 1], index[random], mask[false]): success [2ms]
test Byte512VectorLoadStoreTests.storeArrayIOOBE(byte[i * 5], -1): success [3ms]
test Byte512VectorLoadStoreTests.storeArrayIOOBE(byte[i * 5], l): success [35ms]
test Byte512VectorLoadStoreTests.storeArrayIOOBE(byte[i * 5], l - 1): success [2ms]
test Byte512VectorLoadStoreTests.storeArrayIOOBE(byte[i * 5], l + 1): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayIOOBE(byte[i * 5], l - speciesl + 1): success [87ms]
test Byte512VectorLoadStoreTests.storeArrayIOOBE(byte[i * 5], l + speciesl - 1): success [2ms]
test Byte512VectorLoadStoreTests.storeArrayIOOBE(byte[i * 5], l + speciesl): success [2ms]
test Byte512VectorLoadStoreTests.storeArrayIOOBE(byte[i * 5], l + speciesl + 1): success [2ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], -1, mask[i % 2]): success [9ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l, mask[i % 2]): success [207ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l - 1, mask[i % 2]): success [5ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + 1, mask[i % 2]): success [5ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l - speciesl + 1, mask[i % 2]): success [108ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + speciesl - 1, mask[i % 2]): success [5ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + speciesl, mask[i % 2]): success [5ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + speciesl + 1, mask[i % 2]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], -1, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l - 1, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + 1, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l - speciesl + 1, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + speciesl - 1, mask[true]): success [3ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + speciesl, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + speciesl + 1, mask[true]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], -1, mask[false]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l, mask[false]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l - 1, mask[false]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + 1, mask[false]): success [3ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l - speciesl + 1, mask[false]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + speciesl - 1, mask[false]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + speciesl, mask[false]): success [4ms]
test Byte512VectorLoadStoreTests.storeArrayMaskIOOBE(byte[i * 5], l + speciesl + 1, mask[false]): success [4ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentIOOBE(byte[i * 5], -1): success [12ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentIOOBE(byte[i * 5], l): success [104ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentIOOBE(byte[i * 5], l - 1): success [6ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentIOOBE(byte[i * 5], l + 1): success [6ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentIOOBE(byte[i * 5], l - speciesl*ebsize + 1): success [121ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentIOOBE(byte[i * 5], l + speciesl*ebsize - 1): success [6ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentIOOBE(byte[i * 5], l + speciesl*ebsize): success [5ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentIOOBE(byte[i * 5], l + speciesl*ebsize + 1): success [6ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], -1, mask[i % 2]): success [17ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l, mask[i % 2]): success [564ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l - 1, mask[i % 2]): success [7ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + 1, mask[i % 2]): success [8ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l - speciesl*ebsize + 1, mask[i % 2]): success [159ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize - 1, mask[i % 2]): success [13ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize, mask[i % 2]): success [11ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize + 1, mask[i % 2]): success [12ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], -1, mask[true]): success [12ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l, mask[true]): success [13ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l - 1, mask[true]): success [12ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + 1, mask[true]): success [13ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l - speciesl*ebsize + 1, mask[true]): success [12ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize - 1, mask[true]): success [13ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize, mask[true]): success [13ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize + 1, mask[true]): success [9ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], -1, mask[false]): success [7ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l, mask[false]): success [10ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l - 1, mask[false]): success [7ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + 1, mask[false]): success [6ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l - speciesl*ebsize + 1, mask[false]): success [5ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize - 1, mask[false]): success [6ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize, mask[false]): success [6ms]
test Byte512VectorLoadStoreTests.storeMemorySegmentMaskIOOBE(byte[i * 5], l + speciesl*ebsize + 1, mask[false]): success [5ms]

===============================================
jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Total tests run: 428, Passes: 427, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Byte512VectorLoadStoreTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Byte512VectorLoadStoreTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorLoadStoreTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Byte512VectorLoadStoreTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Byte512VectorLoadStoreTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Byte512VectorLoadStoreTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=3 \
        -XX:+UseKNLSetting \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Byte512VectorLoadStoreTests.d/testng.0.jta jdk/incubator/vector/Byte512VectorLoadStoreTests.java false Byte512VectorLoadStoreTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorTests.java
Passed: jdk/incubator/vector/Byte128VectorTests.java
Passed: jdk/incubator/vector/Byte256VectorTests.java
Passed: jdk/incubator/vector/ByteMaxVectorTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorTests.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorTests.java
Passed: jdk/incubator/vector/Byte64VectorTests.java
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float512VectorTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/FloatMaxVectorTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int128VectorTests.java
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorTests.java
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int512VectorTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorTests.java
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/MethodOverideTest.java
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long256VectorTests.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
Passed: jdk/incubator/vector/Long512VectorTests.java
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/LongMaxVectorTests.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorTests.java
Passed: jdk/incubator/vector/UnalignedHeapTest.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short128VectorTests.java
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short256VectorTests.java
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/VectorMathTest.java
Passed: jdk/incubator/vector/Short64VectorTests.java
Passed: jdk/incubator/vector/ShortMaxVectorTests.java
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
TEST: jdk/incubator/vector/Long128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.889 seconds
messages:
command: build Long128VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 03:56:49 IST 2025
Test directory:
  compile: Long128VectorTests
finished: Thu Apr 17 03:56:51 IST 2025
elapsed time (seconds): 1.889

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.888 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 03:56:49 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 16
Process id: 2202328
finished: Thu Apr 17 03:56:51 IST 2025
elapsed time (seconds): 1.888
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Long128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Long128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Long128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 3
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests 
TIME:   246.825 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests 
started: Thu Apr 17 03:56:51 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2204942
finished: Thu Apr 17 04:00:58 IST 2025
elapsed time (seconds): 246.825
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -4151377887546601095
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-4151377887546601095" to command line.
test Long128VectorTests.ABSLong128VectorTests(long[-i * 5]): success [561ms]
test Long128VectorTests.ABSLong128VectorTests(long[i * 5]): success [50ms]
test Long128VectorTests.ABSLong128VectorTests(long[i + 1]): success [4ms]
test Long128VectorTests.ABSLong128VectorTests(long[cornerCaseValue(i)]): success [3ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[i % 2]): success [222ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[i % 2]): success [70ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[i % 2]): success [3ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[true]): success [53ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[false]): success [6ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[i * 5]): success [213ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[i + 1]): success [93ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [22ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [8ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [131ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [66ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [9ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[-i * 5]): success [130ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[i * 5]): success [0ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[i + 1]): success [91ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [110ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [114ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[true]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[false]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[false]): success [4ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [22ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[-i * 5]): success [5ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[i * 5]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[i * 5]): success [162ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[i + 1]): success [63ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [24ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [6ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [12ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [69ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[-i * 5]): success [146ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[i * 5]): success [0ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[i + 1]): success [88ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [75ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [88ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[true]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[true]): success [30ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [12ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[i * 5]): success [180ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[i + 1]): success [76ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [77ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [77ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [4ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [4ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [5ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [5ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [5ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[i * 5]): success [124ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[i + 1]): success [72ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [88ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [77ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [185ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [64ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[-i * 5]): success [9ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[i * 5]): success [54ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[i + 1]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [63ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [59ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [17ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [21ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [52ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [124ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [97ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [496ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [6ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [4ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [4ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [87ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [6ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [6ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [75ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [24ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [3ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

 success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [5ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseDivByZeroSmokeTest(): success [11ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[i % 2]): success [16ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[i % 2]): success [71ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[i % 2]): success [134ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[i % 2]): success [83ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[i % 2]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[true]): success [72ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[true]): success [6ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[true]): success [5ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [6ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[i * 5]): success [178ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[i + 1]): success [179ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [77ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [119ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [7ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [290ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [283ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [146ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): failure [140ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$7(LongVector.java:914)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.bOpTemplateMF(LongVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.bOpMF(Long128Vector.java:204)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.bOpMF(Long128Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$6(LongVector.java:914)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lanewiseTemplate(LongVector.java:895)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.lanewise(Long128Vector.java:281)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.lanewise(Long128Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.div(LongVector.java:1645)
	at Long128VectorTests.divLong128VectorTestsMasked(Long128VectorTests.java:1780)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): failure [97ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$7(LongVector.java:914)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.bOpTemplateMF(LongVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.bOpMF(Long128Vector.java:204)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.bOpMF(Long128Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$6(LongVector.java:914)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lanewiseTemplate(LongVector.java:895)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.lanewise(Long128Vector.java:281)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.lanewise(Long128Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.div(LongVector.java:1645)
	at Long128VectorTests.divLong128VectorTestsMasked(Long128VectorTests.java:1780)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [202ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [145ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [147ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [145ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i]): success [172ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i - length / 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i - 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i - length / 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i + 1]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i - 2]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[zigZag(i)]): success [76ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i - length / 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i - 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i - length / 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i + 1]): success [68ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i - 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [68ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i - length / 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i + 1]): success [73ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i - 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [68ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [69ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [68ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [65ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[i % 2]): success [87ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[i % 2]): success [79ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[i % 2]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[true]): success [24ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[true]): success [5ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[false]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[false]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[false]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.getLong128VectorTests(long[-i * 5]): success [4ms]
test Long128VectorTests.getLong128VectorTests(long[i * 5]): success [71ms]
test Long128VectorTests.getLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.getLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[-i * 5]): success [38ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[i * 5]): success [2ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[i + 1]): success [4ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(0): success [74ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(-1): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(1): success [18ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(2): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(-2): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(0): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(-1): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(1): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(2): success [5ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(-2): success [4ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(32): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(37): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1024): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1025): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1029): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(32): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(37): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1024): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1025): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1029): success [0ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i]): success [171ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i - length / 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i + 1]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i - 2]): success [68ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[zigZag(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i - length / 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i + 1]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i - 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[zigZag(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i - length / 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i + 1]): success [68ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i - 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[zigZag(i)]): success [68ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i]): success [90ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i - length / 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i + 1]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i - 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[zigZag(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i - length / 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i + 1]): success [79ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i - 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[zigZag(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [69ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [9ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [65ms]
test Long128VectorTests.maskAndLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Long128VectorTests.maskAndLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskAndNotLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Long128VectorTests.maskAndNotLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[i % 2]): success [239ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[true]): success [80ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[false]): success [60ms]
test Long128VectorTests.maskEqLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Long128VectorTests.maskEqLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskEqualsLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long128VectorTests.maskEqualsLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[i % 2]): success [34ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[true]): success [54ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[false]): success [20ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(-1): success [63ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[true]): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[false]): success [0ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[i % 2]): success [64ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[true]): success [54ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[false]): success [34ms]
test Long128VectorTests.maskOrLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Long128VectorTests.maskOrLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[i % 2]): success [31ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[true]): success [55ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[false]): success [21ms]
test Long128VectorTests.maskXorLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Long128VectorTests.maskXorLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.negLong128VectorTests(long[-i * 5]): success [14ms]
test Long128VectorTests.negLong128VectorTests(long[i * 5]): success [47ms]
test Long128VectorTests.negLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.negLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.notLong128VectorTests(long[-i * 5]): success [18ms]
test Long128VectorTests.notLong128VectorTests(long[i * 5]): success [51ms]
test Long128VectorTests.notLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.notLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[i * 5]): success [9ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.shuffleEqualsLong128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [473ms]
test Long128VectorTests.shuffleEqualsLong128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [51ms]
test Long128VectorTests.shuffleMiscellaneousLong128VectorTestsSmokeTest(shuffle[random]): success [25ms]
test Long128VectorTests.shuffleTest(): success [362ms]
test Long128VectorTests.shuffleToStringLong128VectorTestsSmokeTest(shuffle[random]): success [49ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i * 5]): success [593ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i + 1]): success [270ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [75ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [159ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [329ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [77ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [77ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [77ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [77ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [76ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [77ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [77ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[-i * 5]): success [224ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[i * 5]): success [224ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[i + 1]): success [72ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[cornerCaseValue(i)]): success [73ms]
test Long128VectorTests.smokeTest1(): success [0ms]
test Long128VectorTests.smokeTest2(): success [50ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [23ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [7ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [8ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[i * 5]): success [5ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[i + 1]): success [6ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [5ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[-i * 5]): success [2ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[i * 5]): success [7ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[i + 1]): success [45ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i * 5]): success [238ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i + 1]): success [299ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [74ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [536ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [510ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [171ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [147ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [146ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [154ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [147ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [153ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [146ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[-i * 5]): success [211ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[i * 5]): success [200ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[i + 1]): success [72ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[cornerCaseValue(i)]): success [73ms]
test Long128VectorTests.viewAsFloatingLanesTest(): success [242ms]
test Long128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[i * 5]): success [20ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[i + 1]): success [83ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]

===============================================
jdk/incubator/vector/Long128VectorTests.java
Total tests run: 3321, Passes: 3318, Failures: 3, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 3
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 3
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 3
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Long128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=3 \
        -XX:+UseKNLSetting \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Long128VectorTests.d/testng.0.jta jdk/incubator/vector/Long128VectorTests.java false Long128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 3
--------------------------------------------------
Passed: jdk/incubator/vector/Float64VectorTests.java
Passed: jdk/incubator/vector/Double64VectorTests.java
Passed: jdk/incubator/vector/Vector512ConversionTests.java
Passed: jdk/incubator/vector/Vector256ConversionTests.java
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#Z
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#id0
Passed: jdk/incubator/vector/Int64VectorTests.java
Passed: jdk/incubator/vector/Vector128ConversionTests.java
Passed: jdk/incubator/vector/Long64VectorTests.java
Passed: jdk/incubator/vector/Short512VectorTests.java
TEST: jdk/incubator/vector/VectorReshapeTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.366 seconds
messages:
command: build VectorReshapeTests
reason: Named class compiled on demand
started: Thu Apr 17 03:59:09 IST 2025
Test directory:
  compile: VectorReshapeTests
finished: Thu Apr 17 03:59:10 IST 2025
elapsed time (seconds): 0.366

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.366 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 03:59:09 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 4
Process id: 2201204
finished: Thu Apr 17 03:59:10 IST 2025
elapsed time (seconds): 0.366
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
REASON: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
TIME:   470.736 seconds
messages:
command: testng --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests
reason: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
started: Thu Apr 17 03:59:10 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 2206564
finished: Thu Apr 17 04:07:00 IST 2025
elapsed time (seconds): 470.736
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorReshapeTests.testCastFromByte(byte(i)): success [29354ms]
test VectorReshapeTests.testCastFromDouble(double(i)): success [2144ms]
test VectorReshapeTests.testCastFromFloat(float(i)): success [2182ms]
test VectorReshapeTests.testCastFromInt(int(i)): success [2314ms]
test VectorReshapeTests.testCastFromLong(long(i)): success [1949ms]
test VectorReshapeTests.testCastFromShort(short(i)): success [2349ms]
test VectorReshapeTests.testRebracket128(byte(i)): success [12928ms]
test VectorReshapeTests.testRebracket256(byte(i)): success [17712ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64]
Failing with Species[long, 8, S_512_BIT]->Species[byte, 64, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-2, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 17, 25, 33, 41, 49, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket512(byte(i)): failure [41494ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket512(VectorReshapeTests.java:1018)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testRebracket64(byte(i)): success [11503ms]
test VectorReshapeTests.testRebracketMax(byte(i)): success [18062ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[byte, 8, S_64_BIT]->Species[byte, 64, S_512_BIT] (reinterpret), partLimit=-8, block=8, part=-4, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeByte(byte(i)): failure [32255ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeByte(VectorReshapeTests.java:441)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testReshapeDouble(byte(i)): success [23867ms]
test VectorReshapeTests.testReshapeFloat(byte(i)): success [28903ms]
test VectorReshapeTests.testReshapeInt(byte(i)): success [23971ms]
test VectorReshapeTests.testReshapeLong(byte(i)): success [20132ms]
test VectorReshapeTests.testReshapeShort(byte(i)): success [166761ms]
test VectorReshapeTests.testUCastFromByte(byte(i)): success [18142ms]
test VectorReshapeTests.testUCastFromInt(int(i)): success [1ms]
test VectorReshapeTests.testUCastFromShort(short(i)): success [9172ms]

===============================================
jdk/incubator/vector/VectorReshapeTests.java
Total tests run: 20, Passes: 18, Failures: 2, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=3 -XX:+UseKNLSetting -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=3 \
        -XX:+UseKNLSetting \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/VectorReshapeTests.d/testng.0.jta jdk/incubator/vector/VectorReshapeTests.java false VectorReshapeTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
--------------------------------------------------
Passed: jdk/incubator/vector/Vector64ConversionTests.java#id0
Passed: jdk/incubator/vector/Byte512VectorTests.java
Test results: passed: 77; failed: 3; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_incubator_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector
Finished running test 'jtreg:test/jdk/jdk/incubator/vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_incubator_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk/jdk/incubator/vector                  83    77     3     0     3 <<
==============================
TEST FAILURE

