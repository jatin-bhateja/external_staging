Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_1', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_1
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_1

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Passed: compiler/codegen/C1NullCheckOfNullStore.java
Passed: compiler/codegen/LoadWithMask.java
Passed: compiler/codegen/IntRotateWithImmediate.java
Passed: compiler/codegen/LoadWithMask2.java
Passed: compiler/codegen/ShiftByZero.java
Passed: compiler/codegen/Test6378821.java
Passed: compiler/codegen/Test6797305.java
Passed: compiler/codegen/BMI2.java
Passed: compiler/codegen/CRCTest.java
Passed: compiler/codegen/BMI1.java
Passed: compiler/codegen/ClearArrayTest.java
Passed: compiler/codegen/BadLogicCode.java
Passed: compiler/codegen/Test6814842.java
Passed: compiler/codegen/Test8005033.java
Passed: compiler/codegen/BitTests.java
Passed: compiler/codegen/ShiftTest.java
Passed: compiler/codegen/TestByteIntVect.java
Passed: compiler/codegen/TestByteShortVect.java
Passed: compiler/codegen/Test6431242.java
Passed: compiler/codegen/Test6909839.java
Passed: compiler/codegen/Test7009231.java
Passed: compiler/codegen/Test8011901.java
Passed: compiler/codegen/TestConvertImplicitNullCheck.java
Passed: compiler/codegen/TestBooleanVect.java
Passed: compiler/codegen/Test6879902.java
Passed: compiler/codegen/TestCharShortVect.java
Passed: compiler/codegen/TestCharVect.java
Passed: compiler/codegen/TestDoubleVect.java
Passed: compiler/codegen/TestByteVect.java
Passed: compiler/codegen/Test6942326.java
Passed: compiler/codegen/Test6823354.java
Passed: compiler/codegen/TestByteLongVect.java
Passed: compiler/codegen/TestCharVect2.java#id0
Passed: compiler/codegen/TestFloatVect.java
Passed: compiler/codegen/TestByteDoubleVect.java
Passed: compiler/codegen/TestByteFloatVect.java
Passed: compiler/codegen/TestIntFloatVect.java
Passed: compiler/codegen/TestLongDoubleVect.java
Passed: compiler/codegen/Test7100757.java
Passed: compiler/codegen/TestMultiMemInstructionMatching.java
Passed: compiler/codegen/TestGCMLoadPlacement.java
Passed: compiler/codegen/TestOopCmp.java
Passed: compiler/codegen/TestLongVect.java
Passed: compiler/codegen/TestLongFloatVect.java
Passed: compiler/codegen/TestIntVect.java
Passed: compiler/loopopts/superword/AlignmentOnePack.java
Passed: compiler/codegen/TestShortDoubleVect.java
Passed: compiler/loopopts/superword/CoLocatePackMemoryState.java
Passed: compiler/codegen/TestShortIntVect.java
Passed: compiler/loopopts/superword/CoLocatePack.java
Passed: compiler/codegen/TestFloatDoubleVect.java
Passed: compiler/codegen/TestShortLongVect.java
Passed: compiler/codegen/TestShortVect.java
Passed: compiler/codegen/TestCharVect2.java#id1
Passed: compiler/codegen/TestIntLongVect.java
Passed: compiler/codegen/TestIntDoubleVect.java
Passed: compiler/loopopts/superword/ReductionPerf.java
Passed: compiler/codegen/TestShortFloatVect.java
Passed: compiler/codegen/TestSignedMultiplyLong.java
Passed: compiler/loopopts/superword/MinMaxRed_Long.java
Passed: compiler/loopopts/superword/SuperWordIntermediateUse.java
Passed: compiler/loopopts/superword/MinMaxRed_Int.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage.java
Passed: compiler/loopopts/superword/TestAlignVector.java#AlignVector
Passed: compiler/loopopts/superword/TestAlignVector.java#NoAlignVector
Passed: compiler/loopopts/superword/RedTest_long.java
Passed: compiler/loopopts/superword/TestAlignVector.java#VerifyAlignVector
Passed: compiler/loopopts/superword/SumRed_Long.java
Passed: compiler/loopopts/superword/TestBestAlign.java
Passed: compiler/loopopts/superword/TestCmpInvar.java
Passed: compiler/loopopts/superword/RedTest_int.java
Passed: compiler/loopopts/superword/TestCompatibleUseDefTypeSize.java
Passed: compiler/loopopts/superword/TestCyclicDependency.java
Passed: compiler/loopopts/superword/ProdRed_Int.java
Passed: compiler/loopopts/superword/ProdRed_Float.java
Passed: compiler/loopopts/superword/SumRed_Int.java
Passed: compiler/loopopts/superword/SumRedAbsNeg_Double.java
Passed: compiler/loopopts/superword/SumRed_Float.java
Passed: compiler/loopopts/superword/ProdRed_Double.java
Passed: compiler/loopopts/superword/SumRedAbsNeg_Float.java
Passed: compiler/loopopts/superword/SumRed_Double.java
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-Align16
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx1-v016-A
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#Vanilla
Passed: compiler/loopopts/superword/TestEliminateAllocationWithCastP2XUse.java
Passed: compiler/loopopts/superword/SumRedSqrt_Double.java
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-NoTieredCompilation-Xbatch
Passed: compiler/loopopts/superword/TestHoistedReductionNode.java
Passed: compiler/loopopts/superword/TestFuzzPreLoop.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx1-v016-U
Passed: compiler/loopopts/superword/TestIndependentPacksWithCyclicDependency2.java
Passed: compiler/loopopts/superword/TestLargeCompilation.java
Passed: compiler/loopopts/superword/TestGeneralizedReductions.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx1-v032-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx1-v032-U
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v004-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v004-U
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v008-U
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v008-A
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestMemorySegment.java#char-array
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v016-A
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#double-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v016-U
Passed: compiler/loopopts/superword/TestMemorySegment.java#float-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array
Passed: compiler/loopopts/superword/TestMemorySegmentMainLoopAlignment.java
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#native
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-VerifyAlignVector
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-AlignVector
Passed: compiler/loopopts/superword/TestNegBaseOffset.java
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#Vanilla
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-VerifyAlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#short-array
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-AlignVector
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithMoreFlags
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithFlags
Passed: compiler/loopopts/superword/TestMemorySegment.java#native-AlignVector
Passed: compiler/loopopts/superword/TestSearchAlignment.java
Passed: compiler/loopopts/superword/TestPeeledReductionNode.java
Passed: compiler/loopopts/superword/TestReductionWithLoopVariantUse.java
Passed: compiler/loopopts/superword/TestParallelReduction.java
Passed: compiler/loopopts/superword/TestMultiversionRemoveUselessSlowLoop.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize16-Unaligned
Passed: compiler/loopopts/superword/TestPickLastMemoryState.java
Passed: compiler/loopopts/superword/TestPickFirstMemoryState.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-A
Passed: compiler/loopopts/superword/TestWronglyMarkedReduction.java
Passed: compiler/loopopts/superword/TestVectorizeTypeConversionWithUnsafe.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize32-Aligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Aligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Unaligned
Passed: compiler/loopopts/superword/TestVectorizationWithInvariant.java
Passed: compiler/vectorapi/TestIsLoadVector.java
Passed: compiler/vectorapi/Test8303508.java
Passed: compiler/loopopts/superword/TestVectorFPReduction.java
Passed: compiler/vectorapi/TestLongVectorNeg.java
Passed: compiler/vectorapi/Test8259353.java
Passed: compiler/vectorapi/TestBiMorphicMismatchedMemSegment.java
Passed: compiler/vectorapi/TestLoopStoreVector.java#id0
Passed: compiler/vectorapi/TestNoInline.java
Passed: compiler/vectorapi/TestLoopStoreVector.java#id1
Passed: compiler/vectorapi/TestIntrinsicBailOut.java#id0
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-U
Passed: compiler/vectorapi/TestVectorErgonomics.java
Passed: compiler/vectorapi/Test8278948.java
Passed: compiler/vectorapi/TestVectorShuffleIota.java
Passed: compiler/vectorapi/TestVectorTest.java
Passed: compiler/vectorapi/VectorBoxExpandTest.java
Passed: compiler/vectorapi/TestVectorAddMulReduction.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#AlignVector
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#StoreToLoadForwardingFailureDetection
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#vanilla
Passed: compiler/vectorapi/TestVectorShiftImm.java
Passed: compiler/loopopts/superword/TestMovingLoadBeforeStore.java
Passed: compiler/vectorapi/TestReverseByteTransforms.java
Passed: compiler/vectorapi/VectorFPtoIntCastTest.java
Passed: compiler/vectorapi/VectorMemoryAlias.java
Passed: compiler/vectorapi/VectorCommutativeOperSharingTest.java
Passed: compiler/vectorapi/TestVectorShuffleIotaByte.java
Passed: compiler/vectorapi/VectorMaskCastTest.java
Passed: compiler/vectorapi/TestTwoVectorPermute.java
Passed: compiler/c2/cr6340864/TestFloatVect.java
Passed: compiler/c2/cr6340864/TestDoubleVect.java
Passed: compiler/vectorapi/TestMaskedMacroLogicVector.java
Passed: compiler/vectorapi/TestRawOopAtSafepoint.java
Passed: compiler/loopopts/superword/TestEquivalentInvariants.java
Passed: compiler/c2/cr6340864/TestByteVect.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage2.java
Passed: compiler/c2/irTests/blackhole/BlackholeHotInlineTest.java
Passed: compiler/c2/cr6340864/TestLongVectRotate.java
Passed: compiler/c2/irTests/blackhole/BlackholeStoreStoreEATest.java
Passed: compiler/c2/cr6340864/TestIntVectRotate.java
Passed: compiler/c2/irTests/blackhole/BlackholeLoadOptoTest.java
Passed: compiler/c2/cr6340864/TestShortVect.java
Passed: compiler/c2/cr6340864/TestIntVect.java
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id0
Passed: compiler/vectorapi/VectorGatherMaskFoldingTest.java
Passed: compiler/c2/irTests/igvn/TestCombineAddPWithConstantOffsets.java
Passed: compiler/c2/irTests/igvn/TestIntegerMulRing.java
Passed: compiler/c2/irTests/igvn/TestLoadNIdeal.java
Passed: compiler/c2/irTests/igvn/TestCleanMemPhi.java
Passed: compiler/c2/irTests/loopOpts/LoopIdealizationTests.java
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id1
Passed: compiler/vectorapi/VectorCastShape128Test.java
Passed: compiler/c2/cr6340864/TestLongVect.java
Passed: compiler/c2/irTests/blackhole/BlackholeSyncEATest.java
Passed: compiler/vectorapi/VectorSaturatedOperationsTest.java
Passed: compiler/c2/irTests/scalarReplacement/ScalarReplacementTests.java
Passed: compiler/c2/irTests/stringopts/TestNegativeArraySize.java
Passed: compiler/c2/irTests/AndINodeIdealizationTests.java
Passed: compiler/c2/irTests/AddINodeIdealizationTests.java
Passed: compiler/c2/irTests/AddLNodeIdealizationTests.java
Passed: compiler/c2/irTests/AndLNodeIdealizationTests.java
Passed: compiler/c2/irTests/CmpUWithZero.java
Passed: compiler/c2/irTests/CMoveLConstants.java
Passed: compiler/vectorapi/VectorCastShape64Test.java
Passed: compiler/c2/irTests/stable/StablePrimFinalTest.java
Passed: compiler/c2/irTests/stable/StablePrimPlainTest.java
Passed: compiler/vectorapi/VectorMultiplyOpt.java
Passed: compiler/c2/irTests/DeMorganLawLongTests.java
Passed: compiler/c2/irTests/DeMorganLawIntTests.java
Passed: compiler/c2/irTests/ConstructorBarriers.java
Passed: compiler/c2/irTests/stable/StableRefArrayTest.java
Passed: compiler/c2/irTests/stable/StablePrimVolatileTest.java
Passed: compiler/c2/irTests/LShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/DivINodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StableRefPlainTest.java
Passed: compiler/c2/irTests/DivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/MaxMinINodeIdealizationTests.java
Passed: compiler/c2/irTests/LShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/ModDNodeTests.java
Passed: compiler/c2/irTests/stable/StableRefVolatileTest.java
Passed: compiler/c2/irTests/stable/StablePrimArrayTest.java
Passed: compiler/c2/irTests/ModFNodeTests.java
Passed: compiler/c2/irTests/ModINodeIdealizationTests.java
Passed: compiler/c2/irTests/ModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/MulINodeIdealizationTests.java
Passed: compiler/c2/irTests/MulLNodeIdealizationTests.java
Passed: compiler/c2/irTests/OrINodeIdealizationTests.java
Passed: compiler/c2/irTests/MulHFNodeIdealizationTests.java
Passed: compiler/c2/irTests/OrLNodeIdealizationTests.java
Passed: compiler/c2/irTests/RShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/RShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestAutoVecCountingDownLoop.java
Passed: compiler/c2/irTests/TestArrayElementTypeLoad.java
Passed: compiler/c2/irTests/SubINodeIdealizationTests.java
Passed: compiler/c2/irTests/SubLNodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StableRefFinalTest.java
Passed: compiler/c2/irTests/TestAutoVectorization2DArray.java
Passed: compiler/c2/irTests/TestBackToBackIfs.java
Passed: compiler/c2/irTests/TestBackToBackMustBeNotNull.java
Passed: compiler/c2/irTests/TestCMoveCCP.java
Passed: compiler/c2/irTests/TestConv2BExpansion.java
Passed: compiler/c2/irTests/TestDebugInfo.java
Passed: compiler/c2/irTests/TestConvI2LCastLongLoop.java
Passed: compiler/c2/irTests/TestEnumFinalFold.java
Passed: compiler/c2/irTests/TestCountedLoopPhiValue.java
Passed: compiler/c2/irTests/TestFPConversion.java
Passed: compiler/c2/irTests/TestGetAndAdd.java
Passed: compiler/c2/irTests/TestFPComparison.java
Passed: compiler/c2/irTests/TestFewIterationsCountedLoop.java
Passed: compiler/c2/irTests/TestIterativeEA.java
Passed: compiler/c2/irTests/TestIRFma.java
Passed: compiler/c2/irTests/TestIRLShiftIdeal_XPlusX_LShiftC.java
Passed: compiler/c2/irTests/TestCountedLoopSafepoint.java
Passed: compiler/c2/irTests/TestIRAbs.java
Passed: compiler/c2/irTests/TestMulNodeIdealization.java
Passed: compiler/c2/irTests/TestMinMaxIdentities.java
Passed: compiler/c2/irTests/TestIfMinMax.java
Passed: compiler/c2/irTests/TestOptimizeUnstableIf.java
Passed: compiler/c2/irTests/TestPadding.java
Passed: compiler/c2/irTests/TestPushAddThruCast.java
Passed: compiler/c2/irTests/TestPhiDuplicatedConversion.java
Passed: compiler/c2/irTests/TestScalarReplacement.java
Passed: compiler/c2/irTests/TestRemixAddressExpressions.java
Passed: compiler/c2/irTests/TestLongRangeChecks.java
Passed: compiler/c2/irTests/TestPostParseCallDevirtualization.java
Passed: compiler/c2/irTests/TestScheduleSmallMethod.java
Passed: compiler/c2/irTests/TestSpecialCasesOf_AMinusB_Plus_CMinusD_InAddIdeal.java
Passed: compiler/c2/irTests/gc/ReferenceClearTests.java
Passed: compiler/c2/irTests/TestShiftAndMask.java
Passed: compiler/c2/irTests/TestSkeletonPredicates.java
Passed: compiler/c2/irTests/TestLSMMissedEmptyLoop.java
Passed: compiler/c2/irTests/ConvF2HFIdealizationTests.java
Passed: compiler/c2/irTests/TestTypeSpeculation.java
Passed: compiler/c2/irTests/TestSuperwordFailsUnrolling.java
Passed: compiler/c2/irTests/TestStripMiningDropsSafepoint.java
Passed: compiler/c2/irTests/TestTestRemovalPeephole.java
Passed: compiler/c2/irTests/UDivINodeIdealizationTests.java
Passed: compiler/c2/irTests/TestVectorizeURShiftSubword.java
Passed: compiler/c2/irTests/TestUnsignedComparison.java
Passed: compiler/c2/irTests/UDivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/URShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/UModINodeIdealizationTests.java
Passed: compiler/c2/irTests/UModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/URShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/XorINodeIdealizationTests.java
Passed: compiler/c2/irTests/XorLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestVectorizationMultiInvar.java
Passed: compiler/c2/irTests/TestFloat16ScalarOperations.java
Passed: compiler/vectorization/runner/ArrayCopyTest.java
Passed: compiler/vectorization/runner/ArrayUnsafeOpTest.java
Passed: compiler/vectorization/runner/ArrayIndexFillTest.java
Passed: compiler/vectorization/runner/BasicBooleanOpTest.java
Passed: compiler/vectorization/runner/ArrayShiftOpTest.java
Passed: compiler/c2/irTests/gc/ReferenceRefersToTests.java
Passed: compiler/vectorization/runner/BasicByteOpTest.java
Passed: compiler/c2/irTests/ProfileAtTypeCheck.java
Passed: compiler/vectorization/runner/BasicCharOpTest.java
Passed: compiler/vectorization/TestAbsCharVector.java
Passed: compiler/vectorization/runner/BasicIntOpTest.java
Passed: compiler/vectorization/runner/BasicDoubleOpTest.java
Passed: compiler/vectorization/TestAutoVecIntMinMax.java
Passed: compiler/vectorization/TestCMoveWithoutBoolPack.java
Passed: compiler/vectorization/runner/LoopControlFlowTest.java
Passed: compiler/vectorization/runner/BasicShortOpTest.java
Passed: compiler/vectorization/runner/BasicLongOpTest.java
Passed: compiler/vectorization/runner/BasicFloatOpTest.java
Passed: compiler/vectorization/runner/ArrayInvariantFillTest.java
Passed: compiler/vectorization/runner/LoopLiveOutNodesTest.java
Passed: compiler/vectorization/TestMemoryVectorMismatched.java
Passed: compiler/vectorization/TestNarrowedIntegerReverseBytes.java
Passed: compiler/vectorization/runner/StripMinedLoopTest.java
Passed: compiler/vectorization/runner/LoopRangeStrideTest.java
Passed: compiler/vectorization/runner/LoopReductionOpTest.java
Passed: compiler/vectorization/TestOptionVectorize.java
Passed: compiler/vectorization/TestMacroLogicVector.java
Passed: compiler/vectorization/TestPopCountVector.java
Passed: compiler/vectorization/TestOverlappingMismatchedAccesses.java
Passed: compiler/vectorization/TestMaskedVectors.java
Passed: compiler/vectorization/TestNaNVector.java
Passed: compiler/vectorization/runner/LoopArrayIndexComputeTest.java
Passed: compiler/vectorization/runner/MultipleLoopsTest.java
Passed: compiler/vectorization/TestComplexAddrExpr.java
Passed: compiler/vectorization/TestSmallVectorPopIndex.java
Passed: compiler/vectorization/TestFloat16VectorConvChain.java
Passed: compiler/vectorization/TestUnexpectedLoadOrdering.java
Passed: compiler/vectorization/TestReplicateLoopIV.java
Passed: compiler/vectorization/TestRotateByteAndShortVector.java
Passed: compiler/vectorization/TestReplicateAtConv.java
Passed: compiler/vectorization/TestVectorUnalignedOffset.java
Passed: compiler/vectorization/TestOffsetSorting.java
Passed: compiler/vectorization/TestRoundVectFloat.java
Passed: compiler/vectorization/TestSignumVector.java
Passed: compiler/vectorization/TestFloat16ToFloatConv.java
Passed: compiler/vectorization/TestVectorizationNegativeScale.java
Passed: compiler/vectorization/TestOptionVectorizeIR.java
Passed: compiler/vectorization/TestForEachRem.java
Passed: compiler/vectorization/TestSubwordReverseBytes.java
Passed: compiler/vectorization/TestVectorsNotSavedAtSafepoint.java
Passed: compiler/vectorization/TestBufferVectorization.java
Passed: compiler/vectorapi/reshape/TestVectorCastAVX1.java
Passed: compiler/vectorization/TestVectorZeroCount.java
Test results: passed: 343; excluded: 18; did not meet platform requirements: 65
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
   jtreg:test/hotspot/jtreg:hotspot_vector_1           426   343     0     0    83   
==============================
TEST SUCCESS

Finished building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_2', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_2
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_2

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Passed: compiler/intrinsics/string/TestStringIndexOfCharIntrinsics.java
Passed: compiler/intrinsics/string/TestStringEqualsBadLength.java
Passed: compiler/intrinsics/string/TestStringConstruction.java
Passed: compiler/intrinsics/string/TestStringIntrinsicRangeChecks.java
Passed: compiler/intrinsics/string/TestCopyValueOf.java
Passed: compiler/intrinsics/Test6982370.java
Passed: compiler/intrinsics/Test8005419.java
Passed: compiler/intrinsics/string/TestStringIntrinsicMemoryFlow.java
Passed: compiler/intrinsics/Test8237524.java
Passed: compiler/intrinsics/Test8215792.java
Passed: compiler/intrinsics/TestArrayGuardWithInterfaces.java
Passed: compiler/intrinsics/IntrinsicDisabledTest.java
Passed: compiler/intrinsics/TestArraysHashCode.java
Passed: compiler/intrinsics/string/TestStringIntrinsics2.java
Passed: compiler/intrinsics/IntrinsicAvailableTest.java
Passed: compiler/intrinsics/string/TestStringConstructionIntrinsics.java#id0
Passed: compiler/intrinsics/TestContinuationPinningAndEA.java
Passed: compiler/codegen/Test6875866.java
Passed: compiler/intrinsics/TestReferenceRefersTo.java
Passed: compiler/intrinsics/string/TestHasNegatives.java#id0
Passed: compiler/intrinsics/TestReferenceGetWithNull.java
Passed: compiler/intrinsics/TestCheckIndex.java
Passed: compiler/intrinsics/VectorizedMismatchTest.java
Passed: compiler/intrinsics/TestCompareUnsigned.java
Passed: compiler/intrinsics/string/TestStringUTF16IntrinsicRangeChecks.java
Passed: compiler/intrinsics/string/TestCountPositives.java#id0
Passed: compiler/intrinsics/TestRotate.java
Passed: compiler/codegen/aes/Test8292158.java
Passed: compiler/codegen/aes/Test8299817.java
Passed: compiler/intrinsics/TestIntegerUnsignedDivMod.java
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLenReturnProfile.java
Passed: compiler/intrinsics/base64/TestBase64.java
Passed: compiler/intrinsics/string/TestEncodeIntrinsics.java
Passed: compiler/intrinsics/bigInteger/TestSquareToLen.java
Passed: compiler/intrinsics/bmi/verifycode/AndnTestI.java
Passed: compiler/intrinsics/bigInteger/TestMulAdd.java
Passed: compiler/intrinsics/bigInteger/MontgomeryMultiplyTest.java
Passed: compiler/codegen/Test6935535.java#id0
Passed: compiler/intrinsics/bigInteger/TestShift.java
Passed: compiler/codegen/Test6935535.java#id1
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestI.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestI.java
Passed: compiler/intrinsics/string/TestStringIntrinsics.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestL.java
Passed: compiler/intrinsics/bmi/verifycode/AndnTestL.java
Passed: compiler/intrinsics/TestLongUnsignedDivMod.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestL.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestI.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestI.java
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLen.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestI.java
Passed: compiler/intrinsics/bmi/verifycode/BzhiTestI2L.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestL.java
Passed: compiler/intrinsics/bmi/TestBlsiI.java
Passed: compiler/intrinsics/bmi/TestLzcntI.java
Passed: compiler/intrinsics/bmi/TestBlsmskI.java
Passed: compiler/intrinsics/bmi/TestBlsmskL.java
Passed: compiler/intrinsics/bmi/TestBlsrI.java
Passed: compiler/intrinsics/bmi/TestBlsiL.java
Passed: compiler/intrinsics/bmi/TestAndnI.java
Passed: compiler/intrinsics/float16/Binary16ConversionNaN.java
Passed: compiler/intrinsics/bmi/TestBlsrL.java
Passed: compiler/intrinsics/bmi/TestTzcntI.java
Passed: compiler/intrinsics/TestBitShuffleOpers.java
Passed: compiler/intrinsics/bmi/TestLzcntL.java
Passed: compiler/intrinsics/bmi/TestTzcntL.java
Passed: compiler/intrinsics/bmi/TestAndnL.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id1
Passed: compiler/intrinsics/math/Test8210461.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id0
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id2
Passed: compiler/intrinsics/float16/TestAllFloat16ToFloat.java
Passed: compiler/intrinsics/chacha/TestChaCha20.java
Passed: compiler/intrinsics/float16/TestConstFloat16ToFloat.java
Passed: compiler/intrinsics/math/TestMinMaxIntrinsics.java
Passed: compiler/intrinsics/math/TestFpMinMaxReductions.java
Passed: compiler/intrinsics/math/TestPow0Dot5Opt.java
Passed: compiler/intrinsics/klass/TestIsPrimitive.java
Passed: compiler/intrinsics/math/TestPow2Opt.java
Passed: compiler/intrinsics/math/TestMinMaxOpt.java
Passed: compiler/intrinsics/math/TestFpMinMaxIntrinsics.java
Passed: compiler/intrinsics/bmi/TestBzhiI2L.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactLongTest.java
Passed: compiler/intrinsics/math/TestMinMaxInlining.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactIntTest.java
Passed: compiler/intrinsics/mathexact/AddExactICondTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoadTest.java
Passed: compiler/codegen/aes/TestCipherBlockChainingEncrypt.java
Passed: compiler/intrinsics/math/MaxMinOptimizeTest.java
Passed: compiler/intrinsics/klass/CastNullCheckDroppingsTest.java
Passed: compiler/intrinsics/float16/Binary16Conversion.java
Passed: compiler/intrinsics/mathexact/AddExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/AddExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/AddExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/GVNTest.java
Passed: compiler/intrinsics/mathexact/AddExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/CompareTest.java
Passed: compiler/intrinsics/mathexact/MulExactICondTest.java
Passed: compiler/intrinsics/mathexact/AddExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/IncExactITest.java
Passed: compiler/intrinsics/mathexact/IncExactLTest.java
Passed: compiler/intrinsics/mathexact/DecExactITest.java
Passed: compiler/intrinsics/mathexact/NegExactILoadTest.java
Passed: compiler/intrinsics/mathexact/NegExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/DecExactLTest.java
Passed: compiler/intrinsics/mathexact/MulExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/NegExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/NestedMathExactTest.java
Passed: compiler/intrinsics/mathexact/SplitThruPhiTest.java
Passed: compiler/intrinsics/mathexact/SubExactICondTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/NegExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoadTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/NegExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactLConstantTest.java
Passed: compiler/intrinsics/SortingDeoptimizationTest.java
Passed: compiler/intrinsics/object/TestHashCode.java
Passed: compiler/intrinsics/mathexact/MulExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/MulExactILoadTest.java
Passed: compiler/intrinsics/mathexact/MulExactINonConstantTest.java
Passed: compiler/loopopts/superword/Vec_MulAddS2I.java
Passed: compiler/intrinsics/mathexact/SubExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/LongMulOverflowTest.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1Intrinsics.java
Passed: compiler/intrinsics/mathexact/SubExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/SubExactLConstantTest.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestMD5MultiBlockIntrinsics.java
Passed: compiler/intrinsics/mathexact/MulExactLNonConstantTest.java
Passed: compiler/intrinsics/sha/sanity/TestSHA256Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestMD5Intrinsics.java
Passed: compiler/intrinsics/unsafe/TestUnsafeMismatchedArrayFieldAccess.java
Passed: compiler/intrinsics/unsafe/TestCAEAntiDep.java
Passed: compiler/intrinsics/unsafe/UnsafeGetAddressTest.java
Passed: compiler/intrinsics/object/TestClone.java
Passed: compiler/intrinsics/unsafe/TestUnsafeUnalignedMismatchedAccesses.java
Passed: compiler/intrinsics/math/TestSignumIntrinsic.java
Passed: compiler/intrinsics/unsafe/UnsafeTwoCASLong.java
Passed: compiler/intrinsics/zip/TestCRC32C.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512Intrinsics.java
Passed: compiler/intrinsics/zip/TestCRC32.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512MultiBlockIntrinsics.java
Passed: compiler/intrinsics/zip/TestFpRegsABI.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/AllocateUninitializedArray.java
Passed: compiler/intrinsics/sha/sanity/TestSHA256MultiBlockIntrinsics.java
Passed: compiler/intrinsics/zip/TestAdler32.java
Passed: compiler/intrinsics/unsafe/DirectByteBufferTest.java
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id1
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id0
Passed: compiler/intrinsics/sha/TestDigest.java
Passed: compiler/codegen/aes/TestAESMain.java
Test results: passed: 170; skipped: 1; excluded: 1; did not meet platform requirements: 21
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_2
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
   jtreg:test/hotspot/jtreg:hotspot_vector_2           192   169     0     0    23   
==============================
TEST SUCCESS

Finished building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/:jdk_vector', will run:
* jtreg:test/jdk:jdk_vector
Clean up dirs for jtreg_test_jdk_jdk_vector

Running test 'jtreg:test/jdk:jdk_vector'
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ByteMaxVectorTests.java
Passed: jdk/incubator/vector/Byte128VectorTests.java
Passed: jdk/incubator/vector/Byte64VectorTests.java
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorTests.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/FloatMaxVectorTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorTests.java
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorTests.java
Passed: jdk/incubator/vector/Double512VectorTests.java
Passed: jdk/incubator/vector/Int128VectorTests.java
Passed: jdk/incubator/vector/Double128VectorTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorTests.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorTests.java
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float512VectorTests.java
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/MethodOverideTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short128VectorTests.java
Passed: jdk/incubator/vector/Long512VectorTests.java
--------------------------------------------------
TEST: jdk/incubator/vector/Float64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.383 seconds
messages:
command: build Float64VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 01:55:25 IST 2025
Test directory:
  compile: Float64VectorTests
finished: Thu Apr 17 01:55:27 IST 2025
elapsed time (seconds): 1.383

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.383 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float64VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 01:55:25 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 12
Process id: 2065334
finished: Thu Apr 17 01:55:27 IST 2025
elapsed time (seconds): 1.383
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Float64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Float64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Float64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Float64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Float64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Float64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Float64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Float64VectorTests 
TIME:   351.433 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Float64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Float64VectorTests 
started: Thu Apr 17 01:55:27 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2067511
finished: Thu Apr 17 02:01:18 IST 2025
elapsed time (seconds): 351.433
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -1363225654630301730
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-1363225654630301730" to command line.
test Float64VectorTests.ABSFloat64VectorTests(float[-i * 5]): success [579ms]
test Float64VectorTests.ABSFloat64VectorTests(float[i * 5]): success [22ms]
test Float64VectorTests.ABSFloat64VectorTests(float[i + 1]): success [25ms]
test Float64VectorTests.ABSFloat64VectorTests(float[0.01 + (i / (i + 1))]): success [2ms]
test Float64VectorTests.ABSFloat64VectorTests(AbstractVectorTest$1@6ed11085): success [2ms]
test Float64VectorTests.ABSFloat64VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float64VectorTests.ABSMaskedFloat64VectorTests(float[-i * 5], mask[i % 2]): success [268ms]
test Float64VectorTests.ABSMaskedFloat64VectorTests(float[i * 5], mask[i % 2]): success [26ms]
test Float64VectorTests.ABSMaskedFloat64VectorTests(float[i + 1], mask[i % 2]): success [54ms]
test Float64VectorTests.ABSMaskedFloat64VectorTests(float[0.01 + (i / (i + 1))], mask[i % 2]): success [32ms]
test Float64VectorTests.ABSMaskedFloat64VectorTests(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [2ms]
test Float64VectorTests.ABSMaskedFloat64VectorTests(float[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Float64VectorTests.ABSMaskedFloat64VectorTests(float[-i * 5], mask[true]): success [2ms]
test Float64VectorTests.ABSMaskedFloat64VectorTests(float[i * 5], mask[true]): success [2ms]
test Float64VectorTests.ABSMaskedFloat64VectorTests(float[i + 1], mask[true]): success [2ms]
test Float64VectorTests.ABSMaskedFloat64VectorTests(float[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Float64VectorTests.ABSMaskedFloat64VectorTests(AbstractVectorTest$1@6ed11085, mask[true]): success [2ms]
test Float64VectorTests.ABSMaskedFloat64VectorTests(float[cornerCaseValue(i)], mask[true]): success [5ms]
test Float64VectorTests.ABSMaskedFloat64VectorTests(float[-i * 5], mask[false]): success [4ms]
test Float64VectorTests.ABSMaskedFloat64VectorTests(float[i * 5], mask[false]): success [4ms]
test Float64VectorTests.ABSMaskedFloat64VectorTests(float[i + 1], mask[false]): success [4ms]
test Float64VectorTests.ABSMaskedFloat64VectorTests(float[0.01 + (i / (i + 1))], mask[false]): success [4ms]
test Float64VectorTests.ABSMaskedFloat64VectorTests(AbstractVectorTest$1@6ed11085, mask[false]): success [4ms]
test Float64VectorTests.ABSMaskedFloat64VectorTests(float[cornerCaseValue(i)], mask[false]): success [4ms]
test Float64VectorTests.ACOSFloat64VectorTests(float[-i * 5]): success [141ms]
test Float64VectorTests.ACOSFloat64VectorTests(float[i * 5]): success [19ms]
test Float64VectorTests.ACOSFloat64VectorTests(float[i + 1]): success [9ms]
test Float64VectorTests.ACOSFloat64VectorTests(float[0.01 + (i / (i + 1))]): success [67ms]
test Float64VectorTests.ACOSFloat64VectorTests(AbstractVectorTest$1@6ed11085): success [2ms]
test Float64VectorTests.ACOSFloat64VectorTests(float[cornerCaseValue(i)]): success [1ms]
test Float64VectorTests.ADDFloat64VectorTests(float[-i * 5], float[i * 5]): success [266ms]
test Float64VectorTests.ADDFloat64VectorTests(float[-i * 5], float[i + 1]): success [1ms]
test Float64VectorTests.ADDFloat64VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [56ms]
test Float64VectorTests.ADDFloat64VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [31ms]
test Float64VectorTests.ADDFloat64VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[i * 5]): success [18ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[i + 1]): success [2ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [3ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [7ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [2ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [31ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [12ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [7ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [5ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [5ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [11ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [5ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [40ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [7ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [3ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [3ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [39ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [37ms]
test Float64VectorTests.ADDFloat64VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [1ms]
test Float64VectorTests.ADDFloat64VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [116ms]
test Float64VectorTests.ADDFloat64VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [35ms]
test Float64VectorTests.ADDFloat64VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [16ms]
test Float64VectorTests.ADDFloat64VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [72ms]
test Float64VectorTests.ADDFloat64VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Float64VectorTests.ADDFloat64VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [3ms]
test Float64VectorTests.ADDFloat64VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [3ms]
test Float64VectorTests.ADDFloat64VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Float64VectorTests.ADDFloat64VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [4ms]
test Float64VectorTests.ADDFloat64VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [3ms]
test Float64VectorTests.ADDFloat64VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [2ms]
test Float64VectorTests.ADDFloat64VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [2ms]
test Float64VectorTests.ADDFloat64VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Float64VectorTests.ADDFloat64VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [2ms]
test Float64VectorTests.ADDFloat64VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [2ms]
test Float64VectorTests.ADDReduceFloat64VectorTests(float[-i * 5]): success [141ms]
test Float64VectorTests.ADDReduceFloat64VectorTests(float[i * 5]): success [31ms]
test Float64VectorTests.ADDReduceFloat64VectorTests(float[i + 1]): success [0ms]
test Float64VectorTests.ADDReduceFloat64VectorTests(float[0.01 + (i / (i + 1))]): success [85ms]
test Float64VectorTests.ADDReduceFloat64VectorTests(AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.ADDReduceFloat64VectorTests(float[cornerCaseValue(i)]): success [4ms]
test Float64VectorTests.ADDReduceFloat64VectorTestsMasked(float[-i * 5], mask[i % 2]): success [128ms]
test Float64VectorTests.ADDReduceFloat64VectorTestsMasked(float[i * 5], mask[i % 2]): success [38ms]
test Float64VectorTests.ADDReduceFloat64VectorTestsMasked(float[i + 1], mask[i % 2]): success [3ms]
test Float64VectorTests.ADDReduceFloat64VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[i % 2]): success [45ms]
test Float64VectorTests.ADDReduceFloat64VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [5ms]
test Float64VectorTests.ADDReduceFloat64VectorTestsMasked(float[cornerCaseValue(i)], mask[i % 2]): success [77ms]
test Float64VectorTests.ADDReduceFloat64VectorTestsMasked(float[-i * 5], mask[true]): success [5ms]
test Float64VectorTests.ADDReduceFloat64VectorTestsMasked(float[i * 5], mask[true]): success [98ms]
test Float64VectorTests.ADDReduceFloat64VectorTestsMasked(float[i + 1], mask[true]): success [5ms]
test Float64VectorTests.ADDReduceFloat64VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[true]): success [5ms]
test Float64VectorTests.ADDReduceFloat64VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[true]): success [5ms]
test Float64VectorTests.ADDReduceFloat64VectorTestsMasked(float[cornerCaseValue(i)], mask[true]): success [12ms]
test Float64VectorTests.ADDReduceFloat64VectorTestsMasked(float[-i * 5], mask[false]): success [6ms]
test Float64VectorTests.ADDReduceFloat64VectorTestsMasked(float[i * 5], mask[false]): success [5ms]
test Float64VectorTests.ADDReduceFloat64VectorTestsMasked(float[i + 1], mask[false]): success [5ms]
test Float64VectorTests.ADDReduceFloat64VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[false]): success [5ms]
test Float64VectorTests.ADDReduceFloat64VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[false]): success [5ms]
test Float64VectorTests.ADDReduceFloat64VectorTestsMasked(float[cornerCaseValue(i)], mask[false]): success [20ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTests(float[-i * 5]): success [11ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTests(float[i * 5]): success [0ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTests(float[i + 1]): success [0ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTests(AbstractVectorTest$1@6ed11085): success [1ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTests(float[cornerCaseValue(i)]): success [4ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTestsMasked(float[-i * 5], mask[i % 2]): success [10ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTestsMasked(float[i * 5], mask[i % 2]): success [1ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTestsMasked(float[i + 1], mask[i % 2]): success [5ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[i % 2]): success [1ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [1ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTestsMasked(float[cornerCaseValue(i)], mask[i % 2]): success [9ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTestsMasked(float[-i * 5], mask[true]): success [0ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTestsMasked(float[i * 5], mask[true]): success [0ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTestsMasked(float[i + 1], mask[true]): success [0ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTestsMasked(float[cornerCaseValue(i)], mask[true]): success [29ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTestsMasked(float[-i * 5], mask[false]): success [0ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTestsMasked(float[i * 5], mask[false]): success [0ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTestsMasked(float[i + 1], mask[false]): success [0ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[false]): success [1ms]
test Float64VectorTests.ADDReduceLongFloat64VectorTestsMasked(float[cornerCaseValue(i)], mask[false]): success [86ms]
test Float64VectorTests.ASINFloat64VectorTests(float[-i * 5]): success [164ms]
test Float64VectorTests.ASINFloat64VectorTests(float[i * 5]): success [1ms]
test Float64VectorTests.ASINFloat64VectorTests(float[i + 1]): success [59ms]
test Float64VectorTests.ASINFloat64VectorTests(float[0.01 + (i / (i + 1))]): success [1ms]
test Float64VectorTests.ASINFloat64VectorTests(AbstractVectorTest$1@6ed11085): success [63ms]
test Float64VectorTests.ASINFloat64VectorTests(float[cornerCaseValue(i)]): success [1ms]
test Float64VectorTests.ATAN2Float64VectorTests(float[-i * 5], float[i * 5]): success [245ms]
test Float64VectorTests.ATAN2Float64VectorTests(float[-i * 5], float[i + 1]): success [39ms]
test Float64VectorTests.ATAN2Float64VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [1ms]
test Float64VectorTests.ATAN2Float64VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [96ms]
test Float64VectorTests.ATAN2Float64VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [6ms]
test Float64VectorTests.ATANFloat64VectorTests(float[-i * 5]): success [111ms]
test Float64VectorTests.ATANFloat64VectorTests(float[i * 5]): success [2ms]
test Float64VectorTests.ATANFloat64VectorTests(float[i + 1]): success [45ms]
test Float64VectorTests.ATANFloat64VectorTests(float[0.01 + (i / (i + 1))]): success [2ms]
test Float64VectorTests.ATANFloat64VectorTests(AbstractVectorTest$1@6ed11085): success [75ms]
test Float64VectorTests.ATANFloat64VectorTests(float[cornerCaseValue(i)]): success [5ms]
test Float64VectorTests.BroadcastFloat64VectorTests(float[-i * 5]): success [114ms]
test Float64VectorTests.BroadcastFloat64VectorTests(float[i * 5]): success [0ms]
test Float64VectorTests.BroadcastFloat64VectorTests(float[i + 1]): success [0ms]
test Float64VectorTests.BroadcastFloat64VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.BroadcastFloat64VectorTests(AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.BroadcastFloat64VectorTests(float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.BroadcastLongFloat64VectorTestsSmokeTest(float[-i * 5]): success [4ms]
test Float64VectorTests.BroadcastLongFloat64VectorTestsSmokeTest(float[i * 5]): success [4ms]
test Float64VectorTests.BroadcastLongFloat64VectorTestsSmokeTest(float[i + 1]): success [4ms]
test Float64VectorTests.BroadcastLongFloat64VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [4ms]
test Float64VectorTests.CBRTFloat64VectorTests(float[-i * 5]): success [147ms]
test Float64VectorTests.CBRTFloat64VectorTests(float[i * 5]): success [2ms]
test Float64VectorTests.CBRTFloat64VectorTests(float[i + 1]): success [101ms]
test Float64VectorTests.CBRTFloat64VectorTests(float[0.01 + (i / (i + 1))]): success [1ms]
test Float64VectorTests.CBRTFloat64VectorTests(AbstractVectorTest$1@6ed11085): success [116ms]
test Float64VectorTests.CBRTFloat64VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float64VectorTests.COSFloat64VectorTests(float[-i * 5]): success [103ms]
test Float64VectorTests.COSFloat64VectorTests(float[i * 5]): success [0ms]
test Float64VectorTests.COSFloat64VectorTests(float[i + 1]): success [39ms]
test Float64VectorTests.COSFloat64VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.COSFloat64VectorTests(AbstractVectorTest$1@6ed11085): success [65ms]
test Float64VectorTests.COSFloat64VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float64VectorTests.COSHFloat64VectorTests(float[-i * 5]): success [168ms]
test Float64VectorTests.COSHFloat64VectorTests(float[i * 5]): success [1ms]
test Float64VectorTests.COSHFloat64VectorTests(float[i + 1]): success [47ms]
test Float64VectorTests.COSHFloat64VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.COSHFloat64VectorTests(AbstractVectorTest$1@6ed11085): success [139ms]
test Float64VectorTests.COSHFloat64VectorTests(float[cornerCaseValue(i)]): success [3ms]
test Float64VectorTests.DIVFloat64VectorTests(float[-i * 5], float[i * 5]): success [220ms]
test Float64VectorTests.DIVFloat64VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float64VectorTests.DIVFloat64VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [56ms]
test Float64VectorTests.DIVFloat64VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.DIVFloat64VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [65ms]
test Float64VectorTests.DIVFloat64VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [97ms]
test Float64VectorTests.DIVFloat64VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [34ms]
test Float64VectorTests.DIVFloat64VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [4ms]
test Float64VectorTests.DIVFloat64VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [71ms]
test Float64VectorTests.DIVFloat64VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Float64VectorTests.DIVFloat64VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [5ms]
test Float64VectorTests.DIVFloat64VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [6ms]
test Float64VectorTests.DIVFloat64VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [5ms]
test Float64VectorTests.DIVFloat64VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [4ms]
test Float64VectorTests.DIVFloat64VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [4ms]
test Float64VectorTests.DIVFloat64VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [4ms]
test Float64VectorTests.DIVFloat64VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [24ms]
test Float64VectorTests.DIVFloat64VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [4ms]
test Float64VectorTests.DIVFloat64VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [4ms]
test Float64VectorTests.DIVFloat64VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [4ms]
test Float64VectorTests.EQFloat64VectorTests(float[i], float[i]): success [401ms]
test Float64VectorTests.EQFloat64VectorTests(float[i], float[i - length / 2]): success [240ms]
test Float64VectorTests.EQFloat64VectorTests(float[i], float[i + 1]): success [175ms]
test Float64VectorTests.EQFloat64VectorTests(float[i], float[i - 2]): success [147ms]
test Float64VectorTests.EQFloat64VectorTests(float[i], float[zigZag(i)]): success [175ms]
test Float64VectorTests.EQFloat64VectorTests(float[i], float[cornerCaseValue(i)]): success [143ms]
test Float64VectorTests.EQFloat64VectorTests(float[i - length / 2], float[i]): success [170ms]
test Float64VectorTests.EQFloat64VectorTests(float[i - length / 2], float[i - length / 2]): success [141ms]
test Float64VectorTests.EQFloat64VectorTests(float[i - length / 2], float[i + 1]): success [150ms]
test Float64VectorTests.EQFloat64VectorTests(float[i - length / 2], float[i - 2]): success [176ms]
test Float64VectorTests.EQFloat64VectorTests(float[i - length / 2], float[zigZag(i)]): success [141ms]
test Float64VectorTests.EQFloat64VectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [141ms]
test Float64VectorTests.EQFloat64VectorTests(float[i + 1], float[i]): success [142ms]
test Float64VectorTests.EQFloat64VectorTests(float[i + 1], float[i - length / 2]): success [143ms]
test Float64VectorTests.EQFloat64VectorTests(float[i + 1], float[i + 1]): success [141ms]
test Float64VectorTests.EQFloat64VectorTests(float[i + 1], float[i - 2]): success [141ms]
test Float64VectorTests.EQFloat64VectorTests(float[i + 1], float[zigZag(i)]): success [141ms]
test Float64VectorTests.EQFloat64VectorTests(float[i + 1], float[cornerCaseValue(i)]): success [142ms]
test Float64VectorTests.EQFloat64VectorTests(float[i - 2], float[i]): success [141ms]
test Float64VectorTests.EQFloat64VectorTests(float[i - 2], float[i - length / 2]): success [141ms]
test Float64VectorTests.EQFloat64VectorTests(float[i - 2], float[i + 1]): success [141ms]
test Float64VectorTests.EQFloat64VectorTests(float[i - 2], float[i - 2]): success [141ms]
test Float64VectorTests.EQFloat64VectorTests(float[i - 2], float[zigZag(i)]): success [156ms]
test Float64VectorTests.EQFloat64VectorTests(float[i - 2], float[cornerCaseValue(i)]): success [142ms]
test Float64VectorTests.EQFloat64VectorTests(float[zigZag(i)], float[i]): success [151ms]
test Float64VectorTests.EQFloat64VectorTests(float[zigZag(i)], float[i - length / 2]): success [140ms]
test Float64VectorTests.EQFloat64VectorTests(float[zigZag(i)], float[i + 1]): success [141ms]
test Float64VectorTests.EQFloat64VectorTests(float[zigZag(i)], float[i - 2]): success [141ms]
test Float64VectorTests.EQFloat64VectorTests(float[zigZag(i)], float[zigZag(i)]): success [143ms]
test Float64VectorTests.EQFloat64VectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [141ms]
test Float64VectorTests.EQFloat64VectorTests(float[cornerCaseValue(i)], float[i]): success [141ms]
test Float64VectorTests.EQFloat64VectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [141ms]
test Float64VectorTests.EQFloat64VectorTests(float[cornerCaseValue(i)], float[i + 1]): success [141ms]
test Float64VectorTests.EQFloat64VectorTests(float[cornerCaseValue(i)], float[i - 2]): success [144ms]
test Float64VectorTests.EQFloat64VectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [168ms]
test Float64VectorTests.EQFloat64VectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [139ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[i % 2]): success [22ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[i % 2]): success [6ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i + 1], mask[i % 2]): success [7ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - 2], mask[i % 2]): success [6ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[zigZag(i)], mask[i % 2]): success [6ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i], mask[i % 2]): success [6ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - length / 2], mask[i % 2]): success [6ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i + 1], mask[i % 2]): success [10ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - 2], mask[i % 2]): success [6ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[zigZag(i)], mask[i % 2]): success [6ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)], mask[i % 2]): success [10ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i], mask[i % 2]): success [6ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - length / 2], mask[i % 2]): success [11ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i + 1], mask[i % 2]): success [6ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - 2], mask[i % 2]): success [6ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[zigZag(i)], mask[i % 2]): success [6ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)], mask[i % 2]): success [228ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i], mask[i % 2]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - length / 2], mask[i % 2]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i + 1], mask[i % 2]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - 2], mask[i % 2]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[zigZag(i)], mask[i % 2]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)], mask[i % 2]): success [69ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i], mask[i % 2]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - length / 2], mask[i % 2]): success [8ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i + 1], mask[i % 2]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - 2], mask[i % 2]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)], mask[i % 2]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i], mask[i % 2]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2], mask[i % 2]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1], mask[i % 2]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2], mask[i % 2]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)], mask[i % 2]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[true]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[true]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i + 1], mask[true]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - 2], mask[true]): success [5ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[zigZag(i)], mask[true]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[cornerCaseValue(i)], mask[true]): success [4ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i], mask[true]): success [5ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - length / 2], mask[true]): success [4ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i + 1], mask[true]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - 2], mask[true]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[zigZag(i)], mask[true]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)], mask[true]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i], mask[true]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - length / 2], mask[true]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i + 1], mask[true]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - 2], mask[true]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[zigZag(i)], mask[true]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i], mask[true]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - length / 2], mask[true]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i + 1], mask[true]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - 2], mask[true]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[zigZag(i)], mask[true]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i], mask[true]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - length / 2], mask[true]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i + 1], mask[true]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - 2], mask[true]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)], mask[true]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)], mask[true]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i], mask[true]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2], mask[true]): success [4ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1], mask[true]): success [5ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2], mask[true]): success [6ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)], mask[true]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)], mask[true]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[false]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[false]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i + 1], mask[false]): success [3ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - 2], mask[false]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[zigZag(i)], mask[false]): success [2ms]
test Float64VectorTests.EQFloat64VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[cornerCaseValue(i)], mask[false]): success [2ms]
test Float64VectorTests

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

64VectorTests.eqFloat64VectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [138ms]
test Float64VectorTests.eqFloat64VectorTests(float[cornerCaseValue(i)], float[i]): success [138ms]
test Float64VectorTests.eqFloat64VectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [138ms]
test Float64VectorTests.eqFloat64VectorTests(float[cornerCaseValue(i)], float[i + 1]): success [138ms]
test Float64VectorTests.eqFloat64VectorTests(float[cornerCaseValue(i)], float[i - 2]): success [139ms]
test Float64VectorTests.eqFloat64VectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [139ms]
test Float64VectorTests.eqFloat64VectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [139ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i], float[i]): success [2ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i], float[i - length / 2]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i], float[i + 1]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i], float[i - 2]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i], float[zigZag(i)]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i], float[cornerCaseValue(i)]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i - length / 2]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i + 1]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i - 2]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[zigZag(i)]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i - length / 2]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i + 1]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i - 2]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[zigZag(i)]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)]): success [67ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i - length / 2]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i + 1]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i - 2]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[zigZag(i)]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i - length / 2]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i + 1]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i - 2]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)]): success [1ms]
test Float64VectorTests.eqFloat64VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [1ms]
test Float64VectorTests.expandFloat64VectorTests(float[-i * 5], mask[i % 2]): success [143ms]
test Float64VectorTests.expandFloat64VectorTests(float[i * 5], mask[i % 2]): success [16ms]
test Float64VectorTests.expandFloat64VectorTests(float[i + 1], mask[i % 2]): success [16ms]
test Float64VectorTests.expandFloat64VectorTests(float[0.01 + (i / (i + 1))], mask[i % 2]): success [16ms]
test Float64VectorTests.expandFloat64VectorTests(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [16ms]
test Float64VectorTests.expandFloat64VectorTests(float[cornerCaseValue(i)], mask[i % 2]): success [16ms]
test Float64VectorTests.expandFloat64VectorTests(float[-i * 5], mask[true]): success [32ms]
test Float64VectorTests.expandFloat64VectorTests(float[i * 5], mask[true]): success [13ms]
test Float64VectorTests.expandFloat64VectorTests(float[i + 1], mask[true]): success [12ms]
test Float64VectorTests.expandFloat64VectorTests(float[0.01 + (i / (i + 1))], mask[true]): success [12ms]
test Float64VectorTests.expandFloat64VectorTests(AbstractVectorTest$1@6ed11085, mask[true]): success [12ms]
test Float64VectorTests.expandFloat64VectorTests(float[cornerCaseValue(i)], mask[true]): success [12ms]
test Float64VectorTests.expandFloat64VectorTests(float[-i * 5], mask[false]): success [16ms]
test Float64VectorTests.expandFloat64VectorTests(float[i * 5], mask[false]): success [15ms]
test Float64VectorTests.expandFloat64VectorTests(float[i + 1], mask[false]): success [15ms]
test Float64VectorTests.expandFloat64VectorTests(float[0.01 + (i / (i + 1))], mask[false]): success [16ms]
test Float64VectorTests.expandFloat64VectorTests(AbstractVectorTest$1@6ed11085, mask[false]): success [15ms]
test Float64VectorTests.expandFloat64VectorTests(float[cornerCaseValue(i)], mask[false]): success [39ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[i * 5], float[-i * 5]): success [11ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[i * 5], float[i * 5]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[i * 5], float[i + 1]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[i + 1], float[-i * 5]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[i + 1], float[i * 5]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[i + 1], float[i + 1]): success [1ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[i + 1], float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[i + 1], AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[-i * 5]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[i * 5]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[i + 1]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[cornerCaseValue(i)]): success [9ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[-i * 5]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i * 5]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i + 1]): success [34ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[-i * 5]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[i * 5]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[cornerCaseValue(i)], AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.fmaFloat64VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[-i * 5]): success [8ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[i * 5]): success [10ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[i + 1]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[-i * 5]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[i * 5]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[i + 1]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[-i * 5]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[i * 5]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[i + 1]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[cornerCaseValue(i)]): success [9ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[-i * 5]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i * 5]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i + 1]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[-i * 5]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[i * 5]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.fmaFloat64VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.getFloat64VectorTests(float[-i * 5]): success [34ms]
test Float64VectorTests.getFloat64VectorTests(float[i * 5]): success [2ms]
test Float64VectorTests.getFloat64VectorTests(float[i + 1]): success [3ms]
test Float64VectorTests.getFloat64VectorTests(float[0.01 + (i / (i + 1))]): success [3ms]
test Float64VectorTests.getFloat64VectorTests(AbstractVectorTest$1@6ed11085): success [3ms]
test Float64VectorTests.getFloat64VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float64VectorTests.hashCodeFloat64VectorTestsSmokeTest(float[-i * 5]): success [46ms]
test Float64VectorTests.hashCodeFloat64VectorTestsSmokeTest(float[i * 5]): success [9ms]
test Float64VectorTests.hashCodeFloat64VectorTestsSmokeTest(float[i + 1]): success [10ms]
test Float64VectorTests.hashCodeFloat64VectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [4ms]
test Float64VectorTests.hashCodeFloat64VectorTestsSmokeTest(AbstractVectorTest$1@6ed11085): success [24ms]
test Float64VectorTests.hashCodeFloat64VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [31ms]
test Float64VectorTests.indexInRangeFloat64VectorTestsSmokeTest(0): success [88ms]
test Float64VectorTests.indexInRangeFloat64VectorTestsSmokeTest(-1): success [23ms]
test Float64VectorTests.indexInRangeFloat64VectorTestsSmokeTest(1): success [23ms]
test Float64VectorTests.indexInRangeFloat64VectorTestsSmokeTest(2): success [6ms]
test Float64VectorTests.indexInRangeFloat64VectorTestsSmokeTest(-2): success [7ms]
test Float64VectorTests.indexInRangeLongFloat64VectorTestsSmokeTest(0): success [7ms]
test Float64VectorTests.indexInRangeLongFloat64VectorTestsSmokeTest(-1): success [5ms]
test Float64VectorTests.indexInRangeLongFloat64VectorTestsSmokeTest(1): success [5ms]
test Float64VectorTests.indexInRangeLongFloat64VectorTestsSmokeTest(2): success [16ms]
test Float64VectorTests.indexInRangeLongFloat64VectorTestsSmokeTest(-2): success [5ms]
test Float64VectorTests.loopBoundFloat64VectorTestsSmokeTest(0): success [0ms]
test Float64VectorTests.loopBoundFloat64VectorTestsSmokeTest(1): success [0ms]
test Float64VectorTests.loopBoundFloat64VectorTestsSmokeTest(32): success [0ms]
test Float64VectorTests.loopBoundFloat64VectorTestsSmokeTest(37): success [0ms]
test Float64VectorTests.loopBoundFloat64VectorTestsSmokeTest(1024): success [0ms]
test Float64VectorTests.loopBoundFloat64VectorTestsSmokeTest(1025): success [0ms]
test Float64VectorTests.loopBoundFloat64VectorTestsSmokeTest(1029): success [0ms]
test Float64VectorTests.loopBoundLongFloat64VectorTestsSmokeTest(0): success [0ms]
test Float64VectorTests.loopBoundLongFloat64VectorTestsSmokeTest(1): success [0ms]
test Float64VectorTests.loopBoundLongFloat64VectorTestsSmokeTest(32): success [0ms]
test Float64VectorTests.loopBoundLongFloat64VectorTestsSmokeTest(37): success [0ms]
test Float64VectorTests.loopBoundLongFloat64VectorTestsSmokeTest(1024): success [0ms]
test Float64VectorTests.loopBoundLongFloat64VectorTestsSmokeTest(1025): success [0ms]
test Float64VectorTests.loopBoundLongFloat64VectorTestsSmokeTest(1029): success [0ms]
test Float64VectorTests.ltFloat64VectorTests(float[i], float[i]): success [240ms]
test Float64VectorTests.ltFloat64VectorTests(float[i], float[i - length / 2]): success [140ms]
test Float64VectorTests.ltFloat64VectorTests(float[i], float[i + 1]): success [140ms]
test Float64VectorTests.ltFloat64VectorTests(float[i], float[i - 2]): success [140ms]
test Float64VectorTests.ltFloat64VectorTests(float[i], float[zigZag(i)]): success [141ms]
test Float64VectorTests.ltFloat64VectorTests(float[i], float[cornerCaseValue(i)]): success [141ms]
test Float64VectorTests.ltFloat64VectorTests(float[i - length / 2], float[i]): success [152ms]
test Float64VectorTests.ltFloat64VectorTests(float[i - length / 2], float[i - length / 2]): success [139ms]
test Float64VectorTests.ltFloat64VectorTests(float[i - length / 2], float[i + 1]): success [138ms]
test Float64VectorTests.ltFloat64VectorTests(float[i - length / 2], float[i - 2]): success [138ms]
test Float64VectorTests.ltFloat64VectorTests(float[i - length / 2], float[zigZag(i)]): success [143ms]
test Float64VectorTests.ltFloat64VectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [141ms]
test Float64VectorTests.ltFloat64VectorTests(float[i + 1], float[i]): success [139ms]
test Float64VectorTests.ltFloat64VectorTests(float[i + 1], float[i - length / 2]): success [141ms]
test Float64VectorTests.ltFloat64VectorTests(float[i + 1], float[i + 1]): success [171ms]
test Float64VectorTests.ltFloat64VectorTests(float[i + 1], float[i - 2]): success [140ms]
test Float64VectorTests.ltFloat64VectorTests(float[i + 1], float[zigZag(i)]): success [141ms]
test Float64VectorTests.ltFloat64VectorTests(float[i + 1], float[cornerCaseValue(i)]): success [140ms]
test Float64VectorTests.ltFloat64VectorTests(float[i - 2], float[i]): success [139ms]
test Float64VectorTests.ltFloat64VectorTests(float[i - 2], float[i - length / 2]): success [140ms]
test Float64VectorTests.ltFloat64VectorTests(float[i - 2], float[i + 1]): success [140ms]
test Float64VectorTests.ltFloat64VectorTests(float[i - 2], float[i - 2]): success [140ms]
test Float64VectorTests.ltFloat64VectorTests(float[i - 2], float[zigZag(i)]): success [140ms]
test Float64VectorTests.ltFloat64VectorTests(float[i - 2], float[cornerCaseValue(i)]): success [140ms]
test Float64VectorTests.ltFloat64VectorTests(float[zigZag(i)], float[i]): success [141ms]
test Float64VectorTests.ltFloat64VectorTests(float[zigZag(i)], float[i - length / 2]): success [140ms]
test Float64VectorTests.ltFloat64VectorTests(float[zigZag(i)], float[i + 1]): success [140ms]
test Float64VectorTests.ltFloat64VectorTests(float[zigZag(i)], float[i - 2]): success [139ms]
test Float64VectorTests.ltFloat64VectorTests(float[zigZag(i)], float[zigZag(i)]): success [139ms]
test Float64VectorTests.ltFloat64VectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [141ms]
test Float64VectorTests.ltFloat64VectorTests(float[cornerCaseValue(i)], float[i]): success [141ms]
test Float64VectorTests.ltFloat64VectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [141ms]
test Float64VectorTests.ltFloat64VectorTests(float[cornerCaseValue(i)], float[i + 1]): success [141ms]
test Float64VectorTests.ltFloat64VectorTests(float[cornerCaseValue(i)], float[i - 2]): success [140ms]
test Float64VectorTests.ltFloat64VectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [140ms]
test Float64VectorTests.ltFloat64VectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [138ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i], float[i]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i], float[i - length / 2]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i], float[i + 1]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i], float[i - 2]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i], float[zigZag(i)]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i], float[cornerCaseValue(i)]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i - length / 2]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i + 1]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i - 2]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i - length / 2], float[zigZag(i)]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i - length / 2], float[cornerCaseValue(i)]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i + 1], float[i]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i + 1], float[i - length / 2]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i + 1], float[i + 1]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i + 1], float[i - 2]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i + 1], float[zigZag(i)]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i + 1], float[cornerCaseValue(i)]): success [80ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i - 2], float[i]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i - 2], float[i - length / 2]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i - 2], float[i + 1]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i - 2], float[i - 2]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i - 2], float[zigZag(i)]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[i - 2], float[cornerCaseValue(i)]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i - length / 2]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i + 1]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i - 2]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[zigZag(i)]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i - length / 2]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i + 1]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i - 2]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)]): success [1ms]
test Float64VectorTests.ltFloat64VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [1ms]
test Float64VectorTests.maskAndFloat64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [15ms]
test Float64VectorTests.maskAndFloat64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float64VectorTests.maskAndNotFloat64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test Float64VectorTests.maskAndNotFloat64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float64VectorTests.maskCompressFloat64VectorTestsSmokeTest(mask[i % 2]): success [216ms]
test Float64VectorTests.maskCompressFloat64VectorTestsSmokeTest(mask[true]): success [93ms]
test Float64VectorTests.maskCompressFloat64VectorTestsSmokeTest(mask[false]): success [61ms]
test Float64VectorTests.maskEqFloat64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Float64VectorTests.maskEqFloat64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float64VectorTests.maskEqualsFloat64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Float64VectorTests.maskEqualsFloat64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float64VectorTests.maskFirstTrueFloat64VectorTestsSmokeTest(mask[i % 2]): success [88ms]
test Float64VectorTests.maskFirstTrueFloat64VectorTestsSmokeTest(mask[true]): success [56ms]
test Float64VectorTests.maskFirstTrueFloat64VectorTestsSmokeTest(mask[false]): success [22ms]
test Float64VectorTests.maskFromToLongFloat64VectorTestsSmokeTest(-1): success [67ms]
test Float64VectorTests.maskFromToLongFloat64VectorTestsSmokeTest(0): success [0ms]
test Float64VectorTests.maskFromToLongFloat64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Float64VectorTests.maskFromToLongFloat64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Float64VectorTests.maskHashCodeFloat64VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Float64VectorTests.maskHashCodeFloat64VectorTestsSmokeTest(mask[true]): success [0ms]
test Float64VectorTests.maskHashCodeFloat64VectorTestsSmokeTest(mask[false]): success [0ms]
test Float64VectorTests.maskLastTrueFloat64VectorTestsSmokeTest(mask[i % 2]): success [65ms]
test Float64VectorTests.maskLastTrueFloat64VectorTestsSmokeTest(mask[true]): success [55ms]
test Float64VectorTests.maskLastTrueFloat64VectorTestsSmokeTest(mask[false]): success [35ms]
test Float64VectorTests.maskOrFloat64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [47ms]
test Float64VectorTests.maskOrFloat64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float64VectorTests.maskTrueCountFloat64VectorTestsSmokeTest(mask[i % 2]): success [29ms]
test Float64VectorTests.maskTrueCountFloat64VectorTestsSmokeTest(mask[true]): success [55ms]
test Float64VectorTests.maskTrueCountFloat64VectorTestsSmokeTest(mask[false]): success [22ms]
test Float64VectorTests.maskXorFloat64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Float64VectorTests.maskXorFloat64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float64VectorTests.maxFloat64VectorTests(float[-i * 5], float[i * 5]): success [9ms]
test Float64VectorTests.maxFloat64VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float64VectorTests.maxFloat64VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.maxFloat64VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.maxFloat64VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.maxFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [6ms]
test Float64VectorTests.maxFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float64VectorTests.maxFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.maxFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.maxFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.minFloat64VectorTests(float[-i * 5], float[i * 5]): success [6ms]
test Float64VectorTests.minFloat64VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float64VectorTests.minFloat64VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.minFloat64VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.minFloat64VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.minFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [6ms]
test Float64VectorTests.minFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [16ms]
test Float64VectorTests.minFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.minFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.minFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.mulFloat64VectorTests(float[-i * 5], float[i * 5]): success [7ms]
test Float64VectorTests.mulFloat64VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float64VectorTests.mulFloat64VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.mulFloat64VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.mulFloat64VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [8ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [7ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [6ms]
test Float64VectorTests.mulFloat64VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float64VectorTests.mulFloat64VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float64VectorTests.negFloat64VectorTests(float[-i * 5]): success [51ms]
test Float64VectorTests.negFloat64VectorTests(float[i * 5]): success [18ms]
test Float64VectorTests.negFloat64VectorTests(float[i + 1]): success [0ms]
test Float64VectorTests.negFloat64VectorTests(float[0.01 + (i / (i + 1))]): success [57ms]
test Float64VectorTests.negFloat64VectorTests(AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.negFloat64VectorTests(float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.powFloat64VectorTests(float[-i * 5], float[i * 5]): success [87ms]
test Float64VectorTests.powFloat64VectorTests(float[-i * 5], float[i + 1]): success [6ms]
test Float64VectorTests.powFloat64VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [3ms]
test Float64VectorTests.powFloat64VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [66ms]
test Float64VectorTests.powFloat64VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [4ms]
test Float64VectorTests.powFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [14ms]
test Float64VectorTests.powFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float64VectorTests.powFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.powFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [1ms]
test Float64VectorTests.powFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.shuffleEqualsFloat64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [16ms]
test Float64VectorTests.shuffleEqualsFloat64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [13ms]
test Float64VectorTests.shuffleMiscellaneousFloat64VectorTestsSmokeTest(shuffle[random]): success [44ms]
test Float64VectorTests.shuffleTest(): success [776ms]
test Float64VectorTests.shuffleToStringFloat64VectorTestsSmokeTest(shuffle[random]): success [64ms]
test Float64VectorTests.sliceBinaryFloat64VectorTestsBinary(float[-i * 5], float[i * 5]): success [1184ms]
test Float64VectorTests.sliceBinaryFloat64VectorTestsBinary(float[-i * 5], float[i + 1]): success [280ms]
test Float64VectorTests.sliceBinaryFloat64VectorTestsBinary(float[-i * 5], float[0.01 + (i / (i + 1))]): success [344ms]
test Float64VectorTests.sliceBinaryFloat64VectorTestsBinary(float[-i * 5], AbstractVectorTest$1@6ed11085): success [341ms]
test Float64VectorTests.sliceBinaryFloat64VectorTestsBinary(float[-i * 5], float[cornerCaseValue(i)]): success [381ms]
test Float64VectorTests.sliceFloat64VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [611ms]
test Float64VectorTests.sliceFloat64VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [515ms]
test Float64VectorTests.sliceFloat64VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [282ms]
test Float64VectorTests.sliceFloat64VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [270ms]
test Float64VectorTests.sliceFloat64VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [444ms]
test Float64VectorTests.sliceFloat64VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [269ms]
test Float64VectorTests.sliceFloat64VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [282ms]
test Float64VectorTests.sliceFloat64VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [278ms]
test Float64VectorTests.sliceFloat64VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [279ms]
test Float64VectorTests.sliceFloat64VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [277ms]
test Float64VectorTests.sliceFloat64VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [276ms]
test Float64VectorTests.sliceFloat64VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [306ms]
test Float64VectorTests.sliceFloat64VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [270ms]
test Float64VectorTests.sliceFloat64VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [269ms]
test Float64VectorTests.sliceFloat64VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [269ms]
test Float64VectorTests.sliceUnaryFloat64VectorTests(float[-i * 5]): success [610ms]
test Float64VectorTests.sliceUnaryFloat64VectorTests(float[i * 5]): success [346ms]
test Float64VectorTests.sliceUnaryFloat64VectorTests(float[i + 1]): success [345ms]
test Float64VectorTests.sliceUnaryFloat64VectorTests(float[0.01 + (i / (i + 1))]): success [295ms]
test Float64VectorTests.sliceUnaryFloat64VectorTests(AbstractVectorTest$1@6ed11085): success [353ms]
test Float64VectorTests.sliceUnaryFloat64VectorTests(float[cornerCaseValue(i)]): success [266ms]
test Float64VectorTests.smokeTest1(): success [0ms]
test Float64VectorTests.smokeTest2(): success [52ms]
test Float64VectorTests.sqrtFloat64VectorTests(float[-i * 5]): success [52ms]
test Float64VectorTests.sqrtFloat64VectorTests(float[i * 5]): success [0ms]
test Float64VectorTests.sqrtFloat64VectorTests(float[i + 1]): success [37ms]
test Float64VectorTests.sqrtFloat64VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.sqrtFloat64VectorTests(AbstractVectorTest$1@6ed11085): success [57ms]
test Float64VectorTests.sqrtFloat64VectorTests(float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.subFloat64VectorTests(float[-i * 5], float[i * 5]): success [10ms]
test Float64VectorTests.subFloat64VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float64VectorTests.subFloat64VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.subFloat64VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.subFloat64VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [9ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [7ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.subFloat64VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [7ms]
test Float64VectorTests.subFloat64VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float64VectorTests.subFloat64VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float64VectorTests.toDoubleArrayFloat64VectorTestsSmokeTest(float[-i * 5]): success [0ms]
test Float64VectorTests.toDoubleArrayFloat64VectorTestsSmokeTest(float[i * 5]): success [0ms]
test Float64VectorTests.toDoubleArrayFloat64VectorTestsSmokeTest(float[i + 1]): success [0ms]
test Float64VectorTests.toDoubleArrayFloat64VectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.toDoubleArrayFloat64VectorTestsSmokeTest(AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.toDoubleArrayFloat64VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.toIntArrayFloat64VectorTestsSmokeTest(float[-i * 5]): success [7ms]
test Float64VectorTests.toIntArrayFloat64VectorTestsSmokeTest(float[i * 5]): success [7ms]
test Float64VectorTests.toIntArrayFloat64VectorTestsSmokeTest(float[i + 1]): success [7ms]
test Float64VectorTests.toIntArrayFloat64VectorTestsSmokeTest(float[intCornerCaseValue(i)]): success [15ms]
test Float64VectorTests.toLongArrayFloat64VectorTestsSmokeTest(float[-i * 5]): success [0ms]
test Float64VectorTests.toLongArrayFloat64VectorTestsSmokeTest(float[i * 5]): success [0ms]
test Float64VectorTests.toLongArrayFloat64VectorTestsSmokeTest(float[i + 1]): success [0ms]
test Float64VectorTests.toLongArrayFloat64VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [0ms]
test Float64VectorTests.toStringFloat64VectorTestsSmokeTest(float[-i * 5]): success [17ms]
test Float64VectorTests.toStringFloat64VectorTestsSmokeTest(float[i * 5]): success [2ms]
test Float64VectorTests.toStringFloat64VectorTestsSmokeTest(float[i + 1]): success [20ms]
test Float64VectorTests.toStringFloat64VectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [8ms]
test Float64VectorTests.toStringFloat64VectorTestsSmokeTest(AbstractVectorTest$1@6ed11085): success [32ms]
test Float64VectorTests.toStringFloat64VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [34ms]
test Float64VectorTests.unsliceBinaryFloat64VectorTestsBinary(float[-i * 5], float[i * 5]): success [703ms]
test Float64VectorTests.unsliceBinaryFloat64VectorTestsBinary(float[-i * 5], float[i + 1]): success [572ms]
test Float64VectorTests.unsliceBinaryFloat64VectorTestsBinary(float[-i * 5], float[0.01 + (i / (i + 1))]): failure [509ms]
java.lang.AssertionError: arrays differ firstly at element [0]; expected value is <1.007151> but was <0.0>. (ref: [1.007151, -1750.0], res: [0.0, -1750.0]), at index #350, at origin #1, with part #0 expected [1.007151] but found [0.0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEquals(Assert.java:774)
	at org.testng.Assert.assertEquals(Assert.java:422)
	at Float64VectorTests.assertArraysEquals(Float64VectorTests.java:960)
	at Float64VectorTests.unsliceBinaryFloat64VectorTestsBinary(Float64VectorTests.java:3712)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Float64VectorTests.unsliceBinaryFloat64VectorTestsBinary(float[-i * 5], AbstractVectorTest$1@6ed11085): success [266ms]
test Float64VectorTests.unsliceBinaryFloat64VectorTestsBinary(float[-i * 5], float[cornerCaseValue(i)]): success [178ms]
test Float64VectorTests.unsliceFloat64VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [1449ms]
test Float64VectorTests.unsliceFloat64VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [571ms]
test Float64VectorTests.unsliceFloat64VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [454ms]
test Float64VectorTests.unsliceFloat64VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [535ms]
test Float64VectorTests.unsliceFloat64VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [543ms]
test Float64VectorTests.unsliceFloat64VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [598ms]
test Float64VectorTests.unsliceFloat64VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [499ms]
test Float64VectorTests.unsliceFloat64VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [445ms]
test Float64VectorTests.unsliceFloat64VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [445ms]
test Float64VectorTests.unsliceFloat64VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [461ms]
test Float64VectorTests.unsliceFloat64VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [531ms]
test Float64VectorTests.unsliceFloat64VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [534ms]
test Float64VectorTests.unsliceFloat64VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [539ms]
test Float64VectorTests.unsliceFloat64VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [533ms]
test Float64VectorTests.unsliceFloat64VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [531ms]
test Float64VectorTests.unsliceUnaryFloat64VectorTests(float[-i * 5]): success [601ms]
test Float64VectorTests.unsliceUnaryFloat64VectorTests(float[i * 5]): success [331ms]
test Float64VectorTests.unsliceUnaryFloat64VectorTests(float[i + 1]): success [259ms]
test Float64VectorTests.unsliceUnaryFloat64VectorTests(float[0.01 + (i / (i + 1))]): success [340ms]
test Float64VectorTests.unsliceUnaryFloat64VectorTests(AbstractVectorTest$1@6ed11085): success [334ms]
test Float64VectorTests.unsliceUnaryFloat64VectorTests(float[cornerCaseValue(i)]): success [257ms]
test Float64VectorTests.viewAsFloatingLanesTest(): success [26ms]
test Float64VectorTests.viewAsIntegeralLanesTest(): success [28ms]
test Float64VectorTests.withFloat64VectorTests(float[-i * 5], float[i * 5]): success [65ms]
test Float64VectorTests.withFloat64VectorTests(float[-i * 5], float[i + 1]): success [1ms]
test Float64VectorTests.withFloat64VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float64VectorTests.withFloat64VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float64VectorTests.withFloat64VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]

===============================================
jdk/incubator/vector/Float64VectorTests.java
Total tests run: 3215, Passes: 3214, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Float64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Float64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Float64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Float64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Float64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Float64VectorTests.d/testng.0.jta jdk/incubator/vector/Float64VectorTests.java false Float64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/LongMaxVectorTests.java
Passed: jdk/incubator/vector/Long256VectorTests.java
Passed: jdk/incubator/vector/Int512VectorTests.java
Passed: jdk/incubator/vector/Double64VectorTests.java
Passed: jdk/incubator/vector/UnalignedHeapTest.java
Passed: jdk/incubator/vector/Long128VectorTests.java
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorTests.java
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/VectorMathTest.java
Passed: jdk/incubator/vector/ShortMaxVectorTests.java
Passed: jdk/incubator/vector/Short64VectorTests.java
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
TEST: jdk/incubator/vector/Int64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.268 seconds
messages:
command: build Int64VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 01:57:07 IST 2025
Test directory:
  compile: Int64VectorTests
finished: Thu Apr 17 01:57:08 IST 2025
elapsed time (seconds): 1.268

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.267 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 01:57:07 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 15
Process id: 2065654
finished: Thu Apr 17 01:57:08 IST 2025
elapsed time (seconds): 1.267
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/0 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests 
TIME:   485.368 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests 
started: Thu Apr 17 01:57:08 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2068082
finished: Thu Apr 17 02:05:13 IST 2025
elapsed time (seconds): 485.368
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 7925042434296303937
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=7925042434296303937" to command line.
test Int64VectorTests.ABSInt64VectorTests(int[-i * 5]): success [580ms]
test Int64VectorTests.ABSInt64VectorTests(int[i * 5]): success [24ms]
test Int64VectorTests.ABSInt64VectorTests(int[i + 1]): success [29ms]
test Int64VectorTests.ABSInt64VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[i % 2]): success [225ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[i % 2]): success [47ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[i % 2]): success [59ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[true]): success [29ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[false]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[i * 5]): success [303ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [55ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [17ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [9ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [25ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [10ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [6ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [6ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [48ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [158ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [72ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [36ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [16ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[-i * 5]): success [144ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[i + 1]): success [54ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[cornerCaseValue(i)]): success [67ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [120ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [64ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [76ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [40ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[-i * 5]): success [20ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [8ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[true]): success [9ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[i * 5]): success [206ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[i + 1]): success [27ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [29ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [20ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [37ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [21ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [4ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [70ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [67ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [7ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [36ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [5ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[-i * 5]): success [155ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[i + 1]): success [55ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[cornerCaseValue(i)]): success [71ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [85ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [66ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [79ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [6ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [14ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [56ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [4ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[i * 5]): success [181ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[i + 1]): success [31ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [142ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [78ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [8ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [83ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [42ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[i * 5]): success [169ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[i + 1]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [61ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [153ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [76ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [40ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [234ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [52ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[-i * 5]): success [44ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[i * 5]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[i + 1]): success [39ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [118ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [29ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [62ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [61ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [56ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [29ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [7ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [187ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [82ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [97ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [413ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): failure [149ms]
java.lang.AssertionError: at index #433, input1 = -2165, input2 = 433, input3 = 434, mask = false expected [-2165] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:907)
	at Int64VectorTests.assertAltBroadcastArraysEquals(Int64VectorTests.java:671)
	at Int64VectorTests.assertAltBroadcastArraysEquals(Int64VectorTests.java:659)
	at Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(Int64VectorTests.java:5633)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [5ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [2ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [2ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [87ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [53ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [24ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [65ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BI

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

zigZag(i)], int[i + 1], mask[false]): success [292ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[i - 2], mask[false]): success [292ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[zigZag(i)], mask[false]): success [292ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[cornerCaseValue(i)], mask[false]): success [292ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i], mask[false]): success [292ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i - length / 2], mask[false]): success [293ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i + 1], mask[false]): success [292ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i - 2], mask[false]): success [292ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[zigZag(i)], mask[false]): success [292ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [291ms]
test Int64VectorTests.UMAXInt64VectorTests(int[-i * 5], int[i * 5]): success [149ms]
test Int64VectorTests.UMAXInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.UMAXInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [58ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [87ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [73ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[-i * 5]): success [125ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[i * 5]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[i + 1]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[cornerCaseValue(i)]): success [50ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [84ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [69ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [70ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [75ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [13ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[i * 5]): success [153ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [89ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [79ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [74ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[-i * 5]): success [108ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[i * 5]): success [67ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[i + 1]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[cornerCaseValue(i)]): success [34ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [85ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [69ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [141ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [73ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [13ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.VectorShapeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.VectorTypeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.WithLanesInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.WithShapeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[i * 5]): success [65ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [56ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [79ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [67ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [73ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[-i * 5]): success [135ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[i + 1]): success [54ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[cornerCaseValue(i)]): success [124ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [83ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [22ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [82ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [152ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[-i * 5]): success [252ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[i * 5]): success [181ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[i + 1]): success [183ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[cornerCaseValue(i)]): success [155ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[i % 2]): success [422ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[i % 2]): success [327ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[i % 2]): success [329ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [293ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[true]): success [291ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[true]): success [293ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[true]): success [292ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [292ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[false]): success [291ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[false]): success [292ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[false]): success [292ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [291ms]
test Int64VectorTests.ZeroInt64VectorTests(int[-i * 5]): success [135ms]
test Int64VectorTests.ZeroInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ZeroInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.ZeroInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.absInt64VectorTests(int[-i * 5]): success [54ms]
test Int64VectorTests.absInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.absInt64VectorTests(int[i + 1]): success [39ms]
test Int64VectorTests.absInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[i * 5]): success [38ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [13ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [50ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.allTrueInt64VectorTests(boolean[i % 2]): success [26ms]
test Int64VectorTests.allTrueInt64VectorTests(boolean[i % 5]): success [20ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.anyTrueInt64VectorTests(boolean[i % 2]): success [7ms]
test Int64VectorTests.anyTrueInt64VectorTests(boolean[i % 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [17ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [17ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [7ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [2ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [16ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseDivByZeroSmokeTest(): success [13ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[i % 2]): success [98ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [62ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[true]): success [67ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [83ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [5ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [58ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[i % 2]): success [203ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[i % 2]): success [16ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[i % 2]): success [16ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [16ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[true]): success [81ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[true]): success [13ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[true]): success [13ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [13ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[false]): success [15ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[false]): success [15ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[false]): success [16ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [16ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[i * 5]): success [339ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[i + 1]): success [208ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [208ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [126ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [9ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [574ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [325ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [316ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): failure [41ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.lambda$binaryOperationsMF$7(IntVector.java:956)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.bOpTemplateMF(IntVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Int64Vector.bOpMF(Int64Vector.java:209)
	at jdk.incubator.vector/jdk.incubator.vector.Int64Vector.bOpMF(Int64Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.lambda$binaryOperationsMF$6(IntVector.java:956)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.lanewiseTemplate(IntVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Int64Vector.lanewise(Int64Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Int64Vector.lanewise(Int64Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.div(IntVector.java:1732)
	at Int64VectorTests.divInt64VectorTestsMasked(Int64VectorTests.java:1758)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [317ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [316ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [376ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [317ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [316ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i]): success [255ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i - length / 2]): success [154ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i + 1]): success [153ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i - 2]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[zigZag(i)]): success [153ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[cornerCaseValue(i)]): success [169ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i - length / 2]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i + 1]): success [151ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i - 2]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[zigZag(i)]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i]): success [153ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i - length / 2]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i + 1]): success [153ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i - 2]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[zigZag(i)]): success [153ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i - length / 2]): success [153ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i + 1]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i - 2]): success [153ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[zigZag(i)]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [153ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i]): success [153ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i - length / 2]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i + 1]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i - 2]): success [153ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[zigZag(i)]): success [153ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [159ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [152ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [2ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [11ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [2ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [64ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[i % 2]): success [147ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[i % 2]): success [15ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[i % 2]): success [15ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [18ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[true]): success [32ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[true]): success [13ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[true]): success [13ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [13ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[false]): success [15ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[false]): success [15ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[false]): success [15ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [15ms]
test Int64VectorTests.getInt64VectorTests(int[-i * 5]): success [47ms]
test Int64VectorTests.getInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.getInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.getInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[-i * 5]): success [48ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[i * 5]): success [21ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[i + 1]): success [3ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [3ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(0): success [91ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(-1): success [6ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(1): success [26ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(2): success [6ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(-2): success [9ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(0): success [8ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(-1): success [7ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(1): success [9ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(2): success [20ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(-2): success [6ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(32): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(37): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1024): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1025): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1029): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1): success [4ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(32): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(37): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1024): success [1ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1025): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1029): success [0ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i]): success [259ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i - length / 2]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i + 1]): success [152ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i - 2]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[zigZag(i)]): success [152ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[cornerCaseValue(i)]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i]): success [201ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i - length / 2]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i + 1]): success [152ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i - 2]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[zigZag(i)]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i]): success [166ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i - length / 2]): success [152ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i + 1]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i - 2]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[zigZag(i)]): success [152ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i]): success [152ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i - length / 2]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i + 1]): success [152ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i - 2]): success [152ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[zigZag(i)]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i - length / 2]): success [152ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i + 1]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i - 2]): success [152ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[zigZag(i)]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [161ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [152ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [153ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [153ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i]): success [2ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [6ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [2ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [65ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.maskAndInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test Int64VectorTests.maskAndInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskAndNotInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int64VectorTests.maskAndNotInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[i % 2]): success [235ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[true]): success [85ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[false]): success [66ms]
test Int64VectorTests.maskEqInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Int64VectorTests.maskEqInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskEqualsInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int64VectorTests.maskEqualsInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[i % 2]): success [38ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[true]): success [55ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[false]): success [23ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(-1): success [79ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[true]): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[false]): success [0ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[i % 2]): success [68ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[true]): success [56ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[false]): success [36ms]
test Int64VectorTests.maskOrInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [23ms]
test Int64VectorTests.maskOrInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[i % 2]): success [32ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[true]): success [55ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[false]): success [22ms]
test Int64VectorTests.maskXorInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Int64VectorTests.maskXorInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [40ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.negInt64VectorTests(int[-i * 5]): success [50ms]
test Int64VectorTests.negInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.negInt64VectorTests(int[i + 1]): success [37ms]
test Int64VectorTests.negInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.notInt64VectorTests(int[-i * 5]): success [59ms]
test Int64VectorTests.notInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.notInt64VectorTests(int[i + 1]): success [42ms]
test Int64VectorTests.notInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.shuffleEqualsInt64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [17ms]
test Int64VectorTests.shuffleEqualsInt64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [13ms]
test Int64VectorTests.shuffleMiscellaneousInt64VectorTestsSmokeTest(shuffle[random]): success [10ms]
test Int64VectorTests.shuffleTest(): success [285ms]
test Int64VectorTests.shuffleToStringInt64VectorTestsSmokeTest(shuffle[random]): success [64ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i * 5]): success [820ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i + 1]): success [237ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [254ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [455ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [270ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [284ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [169ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [170ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [183ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [196ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [164ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [170ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[-i * 5]): success [429ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[i * 5]): success [218ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[i + 1]): success [227ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[cornerCaseValue(i)]): success [158ms]
test Int64VectorTests.smokeTest1(): success [0ms]
test Int64VectorTests.smokeTest2(): success [91ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [1ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [23ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[-i * 5]): success [8ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[i * 5]): success [17ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[i + 1]): success [6ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [2ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i * 5]): success [451ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i + 1]): success [161ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [396ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [1075ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [319ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [316ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [317ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [504ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [338ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [333ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [316ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [316ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[-i * 5]): success [395ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[i * 5]): success [158ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[i + 1]): success [158ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[cornerCaseValue(i)]): success [158ms]
test Int64VectorTests.viewAsFloatingLanesTest(): success [543ms]
test Int64VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[i * 5]): success [65ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]

===============================================
jdk/incubator/vector/Int64VectorTests.java
Total tests run: 3622, Passes: 3620, Failures: 2, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/0 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Int64VectorTests.d/testng.0.jta jdk/incubator/vector/Int64VectorTests.java false Int64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
--------------------------------------------------
Passed: jdk/incubator/vector/Long64VectorTests.java
Passed: jdk/incubator/vector/Vector512ConversionTests.java
Passed: jdk/incubator/vector/Short256VectorTests.java
Passed: jdk/incubator/vector/AddTest.java
TEST: jdk/incubator/vector/Short512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.832 seconds
messages:
command: build Short512VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 02:01:04 IST 2025
Test directory:
  compile: Short512VectorTests
finished: Thu Apr 17 02:01:05 IST 2025
elapsed time (seconds): 0.832

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.832 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 02:01:04 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 16
Process id: 2065745
finished: Thu Apr 17 02:01:05 IST 2025
elapsed time (seconds): 0.832
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Short512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/1 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Short512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Short512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short512VectorTests 
TIME:   540.777 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short512VectorTests 
started: Thu Apr 17 02:01:05 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2069335
finished: Thu Apr 17 02:10:06 IST 2025
elapsed time (seconds): 540.777
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 8008633936412543819
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=8008633936412543819" to command line.
test Short512VectorTests.ABSMaskedShort512VectorTests(short[-i * 5], mask[i % 2]): success [534ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i * 5], mask[i % 2]): success [803ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i + 1], mask[i % 2]): success [12ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[-i * 5], mask[true]): success [170ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i + 1], mask[true]): success [34ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[-i * 5], mask[false]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.ABSShort512VectorTests(short[-i * 5]): success [264ms]
test Short512VectorTests.ABSShort512VectorTests(short[i * 5]): success [46ms]
test Short512VectorTests.ABSShort512VectorTests(short[i + 1]): success [3ms]
test Short512VectorTests.ABSShort512VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[-i * 5]): success [67ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[i * 5]): success [2ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[i + 1]): success [21ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[cornerCaseValue(i)]): success [4ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [11ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i + 1], mask[true]): success [25ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [50ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[-i * 5]): success [263ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[i * 5]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[i + 1]): success [76ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [98ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [121ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[-i * 5], mask[true]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i + 1], mask[true]): success [30ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.ADDShort512VectorTests(short[-i * 5], short[i * 5]): success [127ms]
test Short512VectorTests.ADDShort512VectorTests(short[-i * 5], short[i + 1]): success [1035ms]
test Short512VectorTests.ADDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [5ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [15ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [22ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [6ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [603ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [177ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [6ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [152ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [17ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[-i * 5]): success [173ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[i * 5]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[i + 1]): success [77ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [34ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [4ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [122ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[-i * 5], mask[true]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i + 1], mask[true]): success [26ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[-i * 5], mask[false]): success [2ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.ANDShort512VectorTests(short[-i * 5], short[i * 5]): success [915ms]
test Short512VectorTests.ANDShort512VectorTests(short[-i * 5], short[i + 1]): success [201ms]
test Short512VectorTests.ANDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [7ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [39ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [12ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [190ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [5ms]
test Short512VectorTests.AND_NOTShort512VectorTests(short[-i * 5], short[i * 5]): success [796ms]
test Short512VectorTests.AND_NOTShort512VectorTests(short[-i * 5], short[i + 1]): success [535ms]
test Short512VectorTests.AND_NOTShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [74ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [112ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [192ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [76ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [77ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [328ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [76ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [75ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [75ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [75ms]
test Short512VectorTests.ASHRShort512VectorTests(short[-i * 5], short[i * 5]): success [190ms]
test Short512VectorTests.ASHRShort512VectorTests(short[-i * 5], short[i + 1]): success [490ms]
test Short512VectorTests.ASHRShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [72ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [343ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [254ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [72ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [327ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [74ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [72ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [72ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [72ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [188ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [566ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[-i * 5]): success [158ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[i * 5]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[i + 1]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [17ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [93ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [108ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [10ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [108ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [14ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [237ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [7ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [7ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [290ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [6ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [6ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [8ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [320ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [106ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [7ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [45ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [73ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

nerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.XORShort512VectorTests(short[-i * 5], short[i * 5]): success [11ms]
test Short512VectorTests.XORShort512VectorTests(short[-i * 5], short[i + 1]): success [4ms]
test Short512VectorTests.XORShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [10ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [150ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): failure [88ms]
java.lang.AssertionError: at index #672, input1 = -3360, input2 = 3360, mask = false expected [-3360] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:885)
	at Short512VectorTests.assertArraysEquals(Short512VectorTests.java:455)
	at Short512VectorTests.assertArraysEquals(Short512VectorTests.java:445)
	at Short512VectorTests.XORShort512VectorTestsMasked(Short512VectorTests.java:2034)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[-i * 5], mask[i % 2]): success [472ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i * 5], mask[i % 2]): success [487ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i + 1], mask[i % 2]): success [390ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [384ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[-i * 5], mask[true]): success [616ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i * 5], mask[true]): success [388ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i + 1], mask[true]): success [381ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [386ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[-i * 5], mask[false]): success [381ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i * 5], mask[false]): success [387ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i + 1], mask[false]): success [383ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [391ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[-i * 5]): success [264ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[i * 5]): success [412ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[i + 1]): success [262ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[cornerCaseValue(i)]): success [268ms]
test Short512VectorTests.ZeroShort512VectorTests(short[-i * 5]): success [64ms]
test Short512VectorTests.ZeroShort512VectorTests(short[i * 5]): success [79ms]
test Short512VectorTests.ZeroShort512VectorTests(short[i + 1]): success [62ms]
test Short512VectorTests.ZeroShort512VectorTests(short[cornerCaseValue(i)]): success [62ms]
test Short512VectorTests.absShort512VectorTests(short[-i * 5]): success [23ms]
test Short512VectorTests.absShort512VectorTests(short[i * 5]): success [12ms]
test Short512VectorTests.absShort512VectorTests(short[i + 1]): success [3ms]
test Short512VectorTests.absShort512VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.addShort512VectorTests(short[-i * 5], short[i * 5]): success [220ms]
test Short512VectorTests.addShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.addShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [411ms]
test Short512VectorTests.addShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [41ms]
test Short512VectorTests.addShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [8ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.allTrueShort512VectorTests(boolean[i % 2]): success [20ms]
test Short512VectorTests.allTrueShort512VectorTests(boolean[i % 5]): success [15ms]
test Short512VectorTests.andShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.andShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.andShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.andShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.andShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.andShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.anyTrueShort512VectorTests(boolean[i % 2]): success [6ms]
test Short512VectorTests.anyTrueShort512VectorTests(boolean[i % 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [5ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [45ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [57ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [8ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [76ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [8ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [72ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [8ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [74ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.bitwiseDivByZeroSmokeTest(): success [14ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [10ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [78ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i + 1], mask[true]): success [144ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [100ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [106ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [67ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [67ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [204ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [74ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [69ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [67ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [67ms]
test Short512VectorTests.compressShort512VectorTests(short[-i * 5], mask[i % 2]): success [2555ms]
test Short512VectorTests.compressShort512VectorTests(short[i * 5], mask[i % 2]): success [249ms]
test Short512VectorTests.compressShort512VectorTests(short[i + 1], mask[i % 2]): success [161ms]
test Short512VectorTests.compressShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [161ms]
test Short512VectorTests.compressShort512VectorTests(short[-i * 5], mask[true]): success [249ms]
test Short512VectorTests.compressShort512VectorTests(short[i * 5], mask[true]): success [1348ms]
test Short512VectorTests.compressShort512VectorTests(short[i + 1], mask[true]): success [3ms]
test Short512VectorTests.compressShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.compressShort512VectorTests(short[-i * 5], mask[false]): success [22ms]
test Short512VectorTests.compressShort512VectorTests(short[i * 5], mask[false]): success [11ms]
test Short512VectorTests.compressShort512VectorTests(short[i + 1], mask[false]): success [11ms]
test Short512VectorTests.compressShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [11ms]
test Short512VectorTests.divShort512VectorTests(short[-i * 5], short[i * 5]): success [237ms]
test Short512VectorTests.divShort512VectorTests(short[-i * 5], short[i + 1]): success [477ms]
test Short512VectorTests.divShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [206ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [12ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [851ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [20ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short512VectorTests.divShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [11ms]
test Short512VectorTests.divShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [2ms]
test Short512VectorTests.divShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [484ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [1301ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [394ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [400ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [1242ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [396ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [394ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [394ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [394ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i]): success [309ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i - length / 2]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i + 1]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i - 2]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[zigZag(i)]): success [133ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[cornerCaseValue(i)]): success [142ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i - length / 2]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i + 1]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i - 2]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[zigZag(i)]): success [128ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i - length / 2]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i + 1]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i - 2]): success [128ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[zigZag(i)]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i]): success [128ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i - length / 2]): success [128ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i + 1]): success [128ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i - 2]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[zigZag(i)]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i]): success [139ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i - length / 2]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i + 1]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i - 2]): success [128ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[zigZag(i)]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [128ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [150ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [115ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [10ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.expandShort512VectorTests(short[-i * 5], mask[i % 2]): success [5645ms]
test Short512VectorTests.expandShort512VectorTests(short[i * 5], mask[i % 2]): success [195ms]
test Short512VectorTests.expandShort512VectorTests(short[i + 1], mask[i % 2]): success [158ms]
test Short512VectorTests.expandShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [148ms]
test Short512VectorTests.expandShort512VectorTests(short[-i * 5], mask[true]): success [132ms]
test Short512VectorTests.expandShort512VectorTests(short[i * 5], mask[true]): success [2269ms]
test Short512VectorTests.expandShort512VectorTests(short[i + 1], mask[true]): success [3ms]
test Short512VectorTests.expandShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.expandShort512VectorTests(short[-i * 5], mask[false]): success [11ms]
test Short512VectorTests.expandShort512VectorTests(short[i * 5], mask[false]): success [11ms]
test Short512VectorTests.expandShort512VectorTests(short[i + 1], mask[false]): success [11ms]
test Short512VectorTests.expandShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [11ms]
test Short512VectorTests.getShort512VectorTests(short[-i * 5]): success [18ms]
test Short512VectorTests.getShort512VectorTests(short[i * 5]): success [18ms]
test Short512VectorTests.getShort512VectorTests(short[i + 1]): success [18ms]
test Short512VectorTests.getShort512VectorTests(short[cornerCaseValue(i)]): success [18ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[-i * 5]): success [35ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(0): success [67ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(-1): success [3ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(1): success [19ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(2): success [3ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(-2): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(0): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(-1): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(1): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(2): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(-2): success [3ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(0): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(32): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(37): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1024): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1025): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1029): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(0): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(32): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(37): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1024): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1025): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1029): success [0ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i]): success [310ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i - length / 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i + 1]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i - 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[zigZag(i)]): success [141ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[cornerCaseValue(i)]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i - length / 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i + 1]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i - 2]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[zigZag(i)]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i - length / 2]): success [128ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i + 1]): success [128ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i - 2]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[zigZag(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i]): success [135ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i - length / 2]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i + 1]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i - 2]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[zigZag(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [141ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i - length / 2]): success [132ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i + 1]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i - 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[zigZag(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i]): success [176ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [150ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [114ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.maskAndNotShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Short512VectorTests.maskAndNotShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskAndShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Short512VectorTests.maskAndShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskCompressShort512VectorTestsSmokeTest(mask[i % 2]): success [829ms]
test Short512VectorTests.maskCompressShort512VectorTestsSmokeTest(mask[true]): success [581ms]
test Short512VectorTests.maskCompressShort512VectorTestsSmokeTest(mask[false]): success [575ms]
test Short512VectorTests.maskEqShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short512VectorTests.maskEqShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskEqualsShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short512VectorTests.maskEqualsShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskFirstTrueShort512VectorTestsSmokeTest(mask[i % 2]): success [118ms]
test Short512VectorTests.maskFirstTrueShort512VectorTestsSmokeTest(mask[true]): success [169ms]
test Short512VectorTests.maskFirstTrueShort512VectorTestsSmokeTest(mask[false]): success [107ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(-1): success [62ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(0): success [0ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short512VectorTests.maskHashCodeShort512VectorTestsSmokeTest(mask[i % 2]): success [5ms]
test Short512VectorTests.maskHashCodeShort512VectorTestsSmokeTest(mask[true]): success [0ms]
test Short512VectorTests.maskHashCodeShort512VectorTestsSmokeTest(mask[false]): success [0ms]
test Short512VectorTests.maskLastTrueShort512VectorTestsSmokeTest(mask[i % 2]): success [161ms]
test Short512VectorTests.maskLastTrueShort512VectorTestsSmokeTest(mask[true]): success [145ms]
test Short512VectorTests.maskLastTrueShort512VectorTestsSmokeTest(mask[false]): success [131ms]
test Short512VectorTests.maskOrShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Short512VectorTests.maskOrShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskTrueCountShort512VectorTestsSmokeTest(mask[i % 2]): success [115ms]
test Short512VectorTests.maskTrueCountShort512VectorTestsSmokeTest(mask[true]): success [146ms]
test Short512VectorTests.maskTrueCountShort512VectorTestsSmokeTest(mask[false]): success [107ms]
test Short512VectorTests.maskXorShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short512VectorTests.maskXorShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maxShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.maxShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.maxShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [5ms]
test Short512VectorTests.maxShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.maxShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.maxShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.minShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.minShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.minShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.minShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.minShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.minShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.mulShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.mulShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.mulShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.negShort512VectorTests(short[-i * 5]): success [8ms]
test Short512VectorTests.negShort512VectorTests(short[i * 5]): success [12ms]
test Short512VectorTests.negShort512VectorTests(short[i + 1]): success [2ms]
test Short512VectorTests.negShort512VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.notShort512VectorTests(short[-i * 5]): success [75ms]
test Short512VectorTests.notShort512VectorTests(short[i * 5]): success [89ms]
test Short512VectorTests.notShort512VectorTests(short[i + 1]): success [67ms]
test Short512VectorTests.notShort512VectorTests(short[cornerCaseValue(i)]): success [67ms]
test Short512VectorTests.orShort512VectorTests(short[-i * 5], short[i * 5]): success [8ms]
test Short512VectorTests.orShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.orShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.orShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.orShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.orShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.shuffleEqualsShort512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [443ms]
test Short512VectorTests.shuffleEqualsShort512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [79ms]
test Short512VectorTests.shuffleMiscellaneousShort512VectorTestsSmokeTest(shuffle[random]): success [187ms]
test Short512VectorTests.shuffleTest(): success [1151ms]
test Short512VectorTests.shuffleToStringShort512VectorTestsSmokeTest(shuffle[random]): success [67ms]
test Short512VectorTests.sliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i * 5]): success [881ms]
test Short512VectorTests.sliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i + 1]): success [3907ms]
test Short512VectorTests.sliceBinaryShort512VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [618ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [722ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [2293ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [699ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [685ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [5187ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [683ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [729ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [691ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [684ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[-i * 5]): success [586ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[i * 5]): success [2005ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[i + 1]): success [543ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[cornerCaseValue(i)]): success [541ms]
test Short512VectorTests.smokeTest1(): success [0ms]
test Short512VectorTests.smokeTest2(): success [86ms]
test Short512VectorTests.subShort512VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.subShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.subShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.subShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[-i * 5]): success [3ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[i * 5]): success [2ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [8ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[-i * 5]): success [3ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[i * 5]): success [27ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[i + 1]): success [2ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [15ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[-i * 5]): success [12ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[i * 5]): success [13ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.unsliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i * 5]): success [569ms]
test Short512VectorTests.unsliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i + 1]): success [2911ms]
test Short512VectorTests.unsliceBinaryShort512VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [549ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [2241ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [9983ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1187ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [1194ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [16826ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1201ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1193ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1202ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1200ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[-i * 5]): success [551ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[i * 5]): success [2000ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[i + 1]): success [546ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[cornerCaseValue(i)]): success [553ms]
test Short512VectorTests.viewAsFloatingLanesTest(): success [29ms]
test Short512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Short512VectorTests.withShort512VectorTests(short[-i * 5], short[i * 5]): success [11ms]
test Short512VectorTests.withShort512VectorTests(short[-i * 5], short[i + 1]): success [10ms]
test Short512VectorTests.withShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [10ms]

===============================================
jdk/incubator/vector/Short512VectorTests.java
Total tests run: 3598, Passes: 3597, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/1 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Short512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Short512VectorTests.d/testng.0.jta jdk/incubator/vector/Short512VectorTests.java false Short512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
TEST: jdk/incubator/vector/Byte256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   27.469 seconds
messages:
command: build Byte256VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 01:53:42 IST 2025
Test directory:
  compile: Byte256VectorTests
finished: Thu Apr 17 01:54:09 IST 2025
elapsed time (seconds): 27.469

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   27.463 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 01:53:42 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 14
Process id: 2065508
finished: Thu Apr 17 01:54:09 IST 2025
elapsed time (seconds): 27.463
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Byte256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Byte256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Byte256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Byte256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte256VectorTests 
TIME:   975.604 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Byte256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte256VectorTests 
started: Thu Apr 17 01:54:09 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2066605
finished: Thu Apr 17 02:10:25 IST 2025
elapsed time (seconds): 975.604
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 541847080747726324
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=541847080747726324" to command line.
test Byte256VectorTests.ABSByte256VectorTests(byte[-i * 5]): success [1121ms]
test Byte256VectorTests.ABSByte256VectorTests(byte[i * 5]): success [22ms]
test Byte256VectorTests.ABSByte256VectorTests(byte[i + 1]): success [97ms]
test Byte256VectorTests.ABSByte256VectorTests(byte[cornerCaseValue(i)]): success [9ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[-i * 5], mask[i % 2]): success [546ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i * 5], mask[i % 2]): success [182ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i + 1], mask[i % 2]): success [150ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [10ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[-i * 5], mask[true]): success [5ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i * 5], mask[true]): success [5ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i + 1], mask[true]): success [5ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[cornerCaseValue(i)], mask[true]): success [8ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[-i * 5], mask[false]): success [4ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i * 5], mask[false]): success [4ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i + 1], mask[false]): success [4ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[cornerCaseValue(i)], mask[false]): success [4ms]
test Byte256VectorTests.ADDByte256VectorTests(byte[-i * 5], byte[i * 5]): success [1165ms]
test Byte256VectorTests.ADDByte256VectorTests(byte[-i * 5], byte[i + 1]): success [8ms]
test Byte256VectorTests.ADDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [118ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5]): success [68ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [24ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [4ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [12ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [17ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [399ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [2ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [432ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [10ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [158ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [8ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [8ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [23ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [62ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [6ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[-i * 5]): success [182ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[i * 5]): success [78ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[i + 1]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[cornerCaseValue(i)]): success [19ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [155ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i * 5], mask[i % 2]): success [130ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i + 1], mask[i % 2]): success [6ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [30ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[-i * 5], mask[true]): success [41ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i + 1], mask[true]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[-i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i * 5], mask[false]): success [4ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[-i * 5]): success [11ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[i * 5]): success [11ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[i + 1]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[cornerCaseValue(i)]): success [16ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [8ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i * 5], mask[i % 2]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i + 1], mask[i % 2]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [25ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[-i * 5], mask[true]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i * 5], mask[true]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i + 1], mask[true]): success [86ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[-i * 5], mask[false]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i * 5], mask[false]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i + 1], mask[false]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte256VectorTests.ANDByte256VectorTests(byte[-i * 5], byte[i * 5]): success [1122ms]
test Byte256VectorTests.ANDByte256VectorTests(byte[-i * 5], byte[i + 1]): success [10ms]
test Byte256VectorTests.ANDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [209ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [7ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [41ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [3ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [30ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [5ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [15ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [39ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [156ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [9ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [9ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [9ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [8ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [8ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [22ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[-i * 5]): success [269ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[i * 5]): success [79ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[i + 1]): success [4ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[cornerCaseValue(i)]): success [19ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [37ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i * 5], mask[i % 2]): success [125ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i + 1], mask[i % 2]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [29ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[-i * 5], mask[true]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i * 5], mask[true]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i + 1], mask[true]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[-i * 5], mask[false]): success [40ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte256VectorTests.AND_NOTByte256VectorTests(byte[-i * 5], byte[i * 5]): success [1534ms]
test Byte256VectorTests.AND_NOTByte256VectorTests(byte[-i * 5], byte[i + 1]): success [144ms]
test Byte256VectorTests.AND_NOTByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [498ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [304ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [148ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [403ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [150ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [150ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [151ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [249ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [152ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [154ms]
test Byte256VectorTests.ASHRByte256VectorTests(byte[-i * 5], byte[i * 5]): success [680ms]
test Byte256VectorTests.ASHRByte256VectorTests(byte[-i * 5], byte[i + 1]): success [151ms]
test Byte256VectorTests.ASHRByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [481ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [650ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [150ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [481ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [177ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [152ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [153ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [250ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [151ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [152ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShift(byte[-i * 5], byte[i * 5]): success [817ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShift(byte[-i * 5], byte[i + 1]): success [8ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShift(byte[-i * 5], byte[cornerCaseValue(i)]): success [87ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[-i * 5]): success [163ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[i * 5]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[i + 1]): success [74ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[cornerCaseValue(i)]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [527ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [7ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [114ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[true]): success [7ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[false]): success [39ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[i % 2]): success [16ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[i % 2]): success [7ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[i % 2]): success [104ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[true]): success [67ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[false]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[false]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [256ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[i * 5]): success [17ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[i + 1]): success [300ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [15ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[i * 5]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[i + 1]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [42ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [11ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [10ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [11ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [11ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [340ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [6ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [68ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [8ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [42ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [9ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [38ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [68ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [366ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [5ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [52ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): s

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

6VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [24ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.bitwiseDivByZeroSmokeTest(): success [18ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i * 5], mask[i % 2]): success [29ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i + 1], mask[i % 2]): success [7ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [146ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i * 5], mask[true]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i + 1], mask[true]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i * 5], mask[false]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [208ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [135ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [269ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [134ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [135ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [134ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [136ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [135ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [134ms]
test Byte256VectorTests.compressByte256VectorTests(byte[-i * 5], mask[i % 2]): success [2824ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i * 5], mask[i % 2]): success [314ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i + 1], mask[i % 2]): success [542ms]
test Byte256VectorTests.compressByte256VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [319ms]
test Byte256VectorTests.compressByte256VectorTests(byte[-i * 5], mask[true]): success [1414ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i * 5], mask[true]): success [7ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i + 1], mask[true]): success [7ms]
test Byte256VectorTests.compressByte256VectorTests(byte[cornerCaseValue(i)], mask[true]): success [7ms]
test Byte256VectorTests.compressByte256VectorTests(byte[-i * 5], mask[false]): success [88ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i * 5], mask[false]): success [26ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i + 1], mask[false]): success [26ms]
test Byte256VectorTests.compressByte256VectorTests(byte[cornerCaseValue(i)], mask[false]): success [26ms]
test Byte256VectorTests.divByte256VectorTests(byte[-i * 5], byte[i * 5]): success [722ms]
test Byte256VectorTests.divByte256VectorTests(byte[-i * 5], byte[i + 1]): success [406ms]
test Byte256VectorTests.divByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [698ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [43ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [902ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [11ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [10ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [15ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [5ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [6ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [1635ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [805ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1569ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [807ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [818ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): failure [346ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lambda$binaryOperationsMF$7(ByteVector.java:956)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.bOpTemplateMF(ByteVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Byte256Vector.bOpMF(Byte256Vector.java:209)
	at jdk.incubator.vector/jdk.incubator.vector.Byte256Vector.bOpMF(Byte256Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lambda$binaryOperationsMF$6(ByteVector.java:956)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lanewiseTemplate(ByteVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Byte256Vector.lanewise(Byte256Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Byte256Vector.lanewise(Byte256Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.div(ByteVector.java:1729)
	at Byte256VectorTests.divByte256VectorTestsMasked(Byte256VectorTests.java:1796)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [800ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [800ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [801ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i]): success [447ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i - length / 2]): success [263ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i + 1]): success [266ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i - 2]): success [324ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[zigZag(i)]): success [266ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[cornerCaseValue(i)]): success [267ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i - length / 2]): success [276ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i + 1]): success [266ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i - 2]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [266ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i - length / 2]): success [267ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i + 1]): success [266ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i - 2]): success [267ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[zigZag(i)]): success [267ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [294ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i - length / 2]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i + 1]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i - 2]): success [266ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[zigZag(i)]): success [267ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i]): success [266ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [266ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i + 1]): success [263ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i - 2]): success [276ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [268ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [268ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [264ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [268ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i]): success [117ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - 2]): success [13ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.expandByte256VectorTests(byte[-i * 5], mask[i % 2]): success [5970ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i * 5], mask[i % 2]): success [304ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i + 1], mask[i % 2]): success [423ms]
test Byte256VectorTests.expandByte256VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [302ms]
test Byte256VectorTests.expandByte256VectorTests(byte[-i * 5], mask[true]): success [2324ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i * 5], mask[true]): success [7ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i + 1], mask[true]): success [6ms]
test Byte256VectorTests.expandByte256VectorTests(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.expandByte256VectorTests(byte[-i * 5], mask[false]): success [26ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i * 5], mask[false]): success [35ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i + 1], mask[false]): success [59ms]
test Byte256VectorTests.expandByte256VectorTests(byte[cornerCaseValue(i)], mask[false]): success [22ms]
test Byte256VectorTests.getByte256VectorTests(byte[-i * 5]): success [36ms]
test Byte256VectorTests.getByte256VectorTests(byte[i * 5]): success [35ms]
test Byte256VectorTests.getByte256VectorTests(byte[i + 1]): success [230ms]
test Byte256VectorTests.getByte256VectorTests(byte[cornerCaseValue(i)]): success [24ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[-i * 5]): success [45ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[i * 5]): success [1ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[i + 1]): success [1ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [17ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(0): success [80ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(-1): success [8ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(1): success [23ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(2): success [6ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(-2): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(0): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(-1): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(1): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(2): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(-2): success [6ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(0): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(32): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(37): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1024): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1025): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1029): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(0): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(32): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(37): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1024): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1025): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1029): success [0ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i]): success [508ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i - length / 2]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i + 1]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i - 2]): success [268ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[zigZag(i)]): success [276ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[cornerCaseValue(i)]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i - length / 2]): success [268ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i + 1]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i - 2]): success [269ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [268ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [268ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i - length / 2]): success [268ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i + 1]): success [277ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i - 2]): success [268ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[zigZag(i)]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [287ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i]): success [274ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i - length / 2]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i + 1]): success [264ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i - 2]): success [268ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[zigZag(i)]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [268ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i]): success [275ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [274ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i + 1]): success [269ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i - 2]): success [269ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [269ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i]): success [319ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [268ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [268ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [272ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [281ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [265ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i]): success [5ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i]): success [118ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [6ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.maskAndByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Byte256VectorTests.maskAndByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskAndNotByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Byte256VectorTests.maskAndNotByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskCompressByte256VectorTestsSmokeTest(mask[i % 2]): success [849ms]
test Byte256VectorTests.maskCompressByte256VectorTestsSmokeTest(mask[true]): success [593ms]
test Byte256VectorTests.maskCompressByte256VectorTestsSmokeTest(mask[false]): success [639ms]
test Byte256VectorTests.maskEqByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Byte256VectorTests.maskEqByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskEqualsByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Byte256VectorTests.maskEqualsByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskFirstTrueByte256VectorTestsSmokeTest(mask[i % 2]): success [117ms]
test Byte256VectorTests.maskFirstTrueByte256VectorTestsSmokeTest(mask[true]): success [146ms]
test Byte256VectorTests.maskFirstTrueByte256VectorTestsSmokeTest(mask[false]): success [104ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(-1): success [70ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(0): success [0ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Byte256VectorTests.maskHashCodeByte256VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Byte256VectorTests.maskHashCodeByte256VectorTestsSmokeTest(mask[true]): success [0ms]
test Byte256VectorTests.maskHashCodeByte256VectorTestsSmokeTest(mask[false]): success [0ms]
test Byte256VectorTests.maskLastTrueByte256VectorTestsSmokeTest(mask[i % 2]): success [162ms]
test Byte256VectorTests.maskLastTrueByte256VectorTestsSmokeTest(mask[true]): success [146ms]
test Byte256VectorTests.maskLastTrueByte256VectorTestsSmokeTest(mask[false]): success [130ms]
test Byte256VectorTests.maskOrByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [21ms]
test Byte256VectorTests.maskOrByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskTrueCountByte256VectorTestsSmokeTest(mask[i % 2]): success [113ms]
test Byte256VectorTests.maskTrueCountByte256VectorTestsSmokeTest(mask[true]): success [146ms]
test Byte256VectorTests.maskTrueCountByte256VectorTestsSmokeTest(mask[false]): success [104ms]
test Byte256VectorTests.maskXorByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Byte256VectorTests.maskXorByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maxByte256VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte256VectorTests.maxByte256VectorTests(byte[-i * 5], byte[i + 1]): success [6ms]
test Byte256VectorTests.maxByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.maxByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte256VectorTests.maxByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.maxByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.minByte256VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte256VectorTests.minByte256VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte256VectorTests.minByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.minByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte256VectorTests.minByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.minByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.mulByte256VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte256VectorTests.mulByte256VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte256VectorTests.mulByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [7ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [6ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte256VectorTests.negByte256VectorTests(byte[-i * 5]): success [22ms]
test Byte256VectorTests.negByte256VectorTests(byte[i * 5]): success [5ms]
test Byte256VectorTests.negByte256VectorTests(byte[i + 1]): success [107ms]
test Byte256VectorTests.negByte256VectorTests(byte[cornerCaseValue(i)]): success [3ms]
test Byte256VectorTests.notByte256VectorTests(byte[-i * 5]): success [169ms]
test Byte256VectorTests.notByte256VectorTests(byte[i * 5]): success [136ms]
test Byte256VectorTests.notByte256VectorTests(byte[i + 1]): success [272ms]
test Byte256VectorTests.notByte256VectorTests(byte[cornerCaseValue(i)]): success [137ms]
test Byte256VectorTests.orByte256VectorTests(byte[-i * 5], byte[i * 5]): success [10ms]
test Byte256VectorTests.orByte256VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte256VectorTests.orByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.orByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte256VectorTests.orByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.orByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[-i * 5]): success [1ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[i * 5]): success [19ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.shuffleEqualsByte256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [3670ms]
test Byte256VectorTests.shuffleEqualsByte256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [467ms]
test Byte256VectorTests.shuffleMiscellaneousByte256VectorTestsSmokeTest(shuffle[random]): success [89ms]
test Byte256VectorTests.shuffleTest(): success [1118ms]
test Byte256VectorTests.shuffleToStringByte256VectorTestsSmokeTest(shuffle[random]): success [71ms]
test Byte256VectorTests.sliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [4425ms]
test Byte256VectorTests.sliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [1247ms]
test Byte256VectorTests.sliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [2664ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [3361ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1385ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [3672ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1361ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [1366ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1381ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [1408ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [1363ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1366ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[-i * 5]): success [2557ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[i * 5]): success [1092ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[i + 1]): success [1784ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[cornerCaseValue(i)]): success [1095ms]
test Byte256VectorTests.smokeTest1(): success [30ms]
test Byte256VectorTests.smokeTest2(): success [58ms]
test Byte256VectorTests.subByte256VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte256VectorTests.subByte256VectorTests(byte[-i * 5], byte[i + 1]): success [396ms]
test Byte256VectorTests.subByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [512ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1355ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [30ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [33ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[-i * 5]): success [1ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[i + 1]): success [3ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[-i * 5]): success [3ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[i * 5]): success [8ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[i + 1]): success [7ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[-i * 5]): success [21ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[i * 5]): success [1ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[i + 1]): success [71ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.unsliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [3210ms]
test Byte256VectorTests.unsliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [1660ms]
test Byte256VectorTests.unsliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [2727ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [11175ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [2396ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [18654ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [2420ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [2409ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2406ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [2491ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [2398ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2461ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[-i * 5]): success [2607ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[i * 5]): success [1090ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[i + 1]): success [1777ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[cornerCaseValue(i)]): success [1072ms]
test Byte256VectorTests.viewAsFloatingLanesTest(): success [16ms]
test Byte256VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Byte256VectorTests.withByte256VectorTests(byte[-i * 5], byte[i * 5]): success [21ms]
test Byte256VectorTests.withByte256VectorTests(byte[-i * 5], byte[i + 1]): success [20ms]
test Byte256VectorTests.withByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [763ms]

===============================================
jdk/incubator/vector/Byte256VectorTests.java
Total tests run: 3602, Passes: 3601, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Byte256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Byte256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Byte256VectorTests.d/testng.0.jta jdk/incubator/vector/Byte256VectorTests.java false Byte256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Vector256ConversionTests.java
Passed: jdk/incubator/vector/Vector128ConversionTests.java
TEST: jdk/incubator/vector/VectorMaxConversionTests.java#id0
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.884 seconds
messages:
command: build VectorMaxConversionTests
reason: Named class compiled on demand
started: Thu Apr 17 02:02:04 IST 2025
Test directory:
  compile: VectorMaxConversionTests
finished: Thu Apr 17 02:02:05 IST 2025
elapsed time (seconds): 0.884

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.884 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 02:02:04 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 4
Process id: 2064649
finished: Thu Apr 17 02:02:05 IST 2025
elapsed time (seconds): 0.884
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorMaxConversionTests_id0.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorMaxConversionTests.java#id0 \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorMaxConversionTests_id0.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorMaxConversionTests_id0.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorMaxConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorMaxConversionTests_id0.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorMaxConversionTests_id0.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED VectorMaxConversionTests 
TIME:   719.43 seconds
messages:
command: testng -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED VectorMaxConversionTests
reason: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED VectorMaxConversionTests 
started: Thu Apr 17 02:02:05 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 2069924
finished: Thu Apr 17 02:14:04 IST 2025
elapsed time (seconds): 719.43
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 8, S_64_BIT], byte(i)): success [722ms]
castShape took 718 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cab41a5): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 4, S_64_BIT], byte(i)): success [1383ms]
castShape took 1383 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c8e097): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 2, S_64_BIT], byte(i)): success [1337ms]
castShape took 1337 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5261d331): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 1, S_64_BIT], byte(i)): success [387ms]
castShape took 387 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b024c50): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 2, S_64_BIT], byte(i)): success [126ms]
castShape took 127 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3be09a90): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 1, S_64_BIT], byte(i)): success [116ms]
castShape took 117 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@587a291b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 16, S_128_BIT], byte(i)): success [2142ms]
castShape took 2142 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f553ca0): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 8, S_128_BIT], byte(i)): success [1608ms]
castShape took 1607 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5212df12): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 4, S_128_BIT], byte(i)): success [1573ms]
castShape took 1573 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19c279d4): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 2, S_128_BIT], byte(i)): success [1569ms]
castShape took 1569 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4a894f72): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 4, S_128_BIT], byte(i)): success [216ms]
castShape took 217 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43fdb9e1): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 2, S_128_BIT], byte(i)): success [348ms]
castShape took 349 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2ebfb027): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 32, S_256_BIT], byte(i)): success [5937ms]
castShape took 5938 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6f0bebeb): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 16, S_256_BIT], byte(i)): success [424ms]
castShape took 424 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45fe649f): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 8, S_256_BIT], byte(i)): success [1676ms]
castShape took 1676 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b5d7f8): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 4, S_256_BIT], byte(i)): success [141ms]
castShape took 141 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2fb6b370): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 8, S_256_BIT], byte(i)): success [813ms]
castShape took 813 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10a5cbc2): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 4, S_256_BIT], byte(i)): success [158ms]
castShape took 159 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@11fcafb7): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 64, S_512_BIT], byte(i)): success [20724ms]
castShape took 20724 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@72677220): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 32, S_512_BIT], byte(i)): success [3697ms]
castShape took 3697 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21f40c58): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 16, S_512_BIT], byte(i)): success [699ms]
castShape took 699 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1a234fa0): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 8, S_512_BIT], byte(i)): success [118ms]
castShape took 119 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@150f656): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 16, S_512_BIT], byte(i)): success [138ms]
castShape took 138 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13f0799c): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 8, S_512_BIT], byte(i)): success [111ms]
castShape took 111 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2708bbf): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 16, S_Max_BIT], byte(i)): success [250ms]
castShape took 251 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4636b97e): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 8, S_Max_BIT], byte(i)): success [135ms]
castShape took 134 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6ec78b92): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 4, S_Max_BIT], byte(i)): success [121ms]
castShape took 122 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7514785e): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 2, S_Max_BIT], byte(i)): success [118ms]
castShape took 118 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1cd890db): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 4, S_Max_BIT], byte(i)): success [125ms]
castShape took 125 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d2edfc): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 2, S_Max_BIT], byte(i)): success [123ms]
castShape took 123 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25c43ebb): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 8, S_64_BIT], short(i)): success [2237ms]
castShape took 2237 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c8f70a7): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 4, S_64_BIT], short(i)): success [3658ms]
castShape took 3658 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@269d30e): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 2, S_64_BIT], short(i)): success [1233ms]
castShape took 1233 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@24836f52): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 1, S_64_BIT], short(i)): success [1266ms]
castShape took 1267 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65e87916): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 2, S_64_BIT], short(i)): success [11ms]
castShape took 12 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@769c5c70): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 1, S_64_BIT], short(i)): success [17ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3702b375): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 16, S_128_BIT], short(i)): success [2289ms]
castShape took 2288 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3837a5b7): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 8, S_128_BIT], short(i)): success [363ms]
castShape took 364 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@606c340d): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 4, S_128_BIT], short(i)): success [24ms]
castShape took 24 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@630bd20e): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 2, S_128_BIT], short(i)): success [20ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12ed57a7): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 4, S_128_BIT], short(i)): success [24ms]
castShape took 24 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f2d24f6): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 2, S_128_BIT], short(i)): success [23ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37603231): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 32, S_256_BIT], short(i)): success [3741ms]
castShape took 3741 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bc54142): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 16, S_256_BIT], short(i)): success [6042ms]
castShape took 6042 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e567a1): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 8, S_256_BIT], short(i)): success [81ms]
castShape took 81 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19dc3e28): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 4, S_256_BIT], short(i)): success [61ms]
castShape took 62 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3de2e4ff): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 8, S_256_BIT], short(i)): success [23ms]
castShape took 24 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@40d0b25): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 4, S_256_BIT], short(i)): success [31ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@377723a8): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 64, S_512_BIT], short(i)): success [11775ms]
castShape took 11775 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6516338a): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 32, S_512_BIT], short(i)): success [3866ms]
castShape took 3866 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@31ffcfc1): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 16, S_512_BIT], short(i)): success [4263ms]
castShape took 4263 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7fac3958): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 8, S_512_BIT], short(i)): success [1285ms]
castShape took 1285 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12aa0499): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 16, S_512_BIT], short(i)): success [3133ms]
castShape took 3133 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@acc04f5): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 8, S_512_BIT], short(i)): success [81ms]
castShape took 81 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15e41f09): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 16, S_Max_BIT], short(i)): success [903ms]
castShape took 904 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c73d6bf): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 8, S_Max_BIT], short(i)): success [357ms]
castShape took 357 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@86b636b): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 4, S_Max_BIT], short(i)): success [18ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1cc95e51): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 2, S_Max_BIT], short(i)): success [37ms]
castShape took 38 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@69062f41): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 4, S_Max_BIT], short(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b0797d8): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 2, S_Max_BIT], short(i)): success [18ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1fde55c6): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 8, S_64_BIT], int(i)): success [2330ms]
castShape took 2330 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@263b3e17): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 4, S_64_BIT], int(i)): success [495ms]
castShape took 495 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19d63f56): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 2, S_64_BIT], int(i)): success [1002ms]
castShape took 1003 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44b0a7f2): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 1, S_64_BIT], int(i)): success [281ms]
castShape took 271 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@24106675): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 2, S_64_BIT], int(i)): success [32ms]
castShape took 32 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@236f95aa): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 1, S_64_BIT], int(i)): success [15ms]
castShape took 16 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5efab149): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 16, S_128_BIT], int(i)): success [28ms]
castShape took 29 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3fd3b325): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 8, S_128_BIT], int(i)): success [2754ms]
castShape took 2754 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3f43f08e): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 4, S_128_BIT], int(i)): success [890ms]
castShape took 891 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5fe72406): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 2, S_128_BIT], int(i)): success [14ms]
castShape took 14 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21f61f55): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 4, S_128_BIT], int(i)): success [20ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3325e54b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 2, S_128_BIT], int(i)): success [14ms]
castShape took 14 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b339f99): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 32, S_256_BIT], int(i)): success [3598ms]
castShape took 3598 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18cb82df): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 16, S_256_BIT], int(i)): success [2575ms]
castShape took 2575 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@643f070d): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 8, S_256_BIT], int(i)): success [4261ms]
castShape took 4262 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@653e4509): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 4, S_256_BIT], int(i)): success [98ms]
castShape took 98 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2839d331): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 8, S_256_BIT], int(i)): success [2318ms]
castShape took 2319 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37078c85): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 4, S_256_BIT], int(i)): success [11ms]
castShape took 12 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76efca29): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 64, S_512_BIT], int(i)): success [6657ms]
castShape took 6657 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b5f7bb5): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 32, S_512_BIT], int(i)): success [3836ms]
castShape took 3837 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f9918c7): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 16, S_512_BIT], int(i)): success [2274ms]
castShape took 2274 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19345d92): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 8, S_512_BIT], int(i)): success [3390ms]
castShape took 3391 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49d8e1d8): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 16, S_512_BIT], int(i)): success [2368ms]
castShape took 2367 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29a2fa79): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 8, S_512_BIT], int(i)): success [2696ms]
castShape took 2696 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2659de2b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 16, S_Max_BIT], int(i)): success [17ms]
castShape took 17 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5675465e): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 8, S_Max_BIT], int(i)): success [772ms]
castShape took 773 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b2a4a82): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 4, S_Max_BIT], int(i)): success [217ms]
castShape took 217 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@38212d6d): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5e3358da): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 4, S_Max_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1127a9e1): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43ace159): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 8, S_64_BIT], long(i)): success [223ms]
castShape took 224 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6371010b): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 4, S_64_BIT], long(i)): success [754ms]
castShape took 754 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f1a9567): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 2, S_64_BIT], long(i)): success [477ms]
castShape took 477 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@170549c7): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 1, S_64_BIT], long(i)): success [1417ms]
castShape took 1417 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@124d2b42): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 2, S_64_BIT], long(i)): success [17ms]
castShape took 17 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75b96cb8): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 1, S_64_BIT], long(i)): success [20ms]
castShape took 20 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e6da30a): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 16, S_128_BIT], long(i)): success [42ms]
castShape took 42 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e481f14): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 8, S_128_BIT], long(i)): success [37ms]
castShape took 38 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34ac9d6d): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 4, S_128_BIT], long(i)): success [1869ms]
castShape took 1869 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19137dfa): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 2, S_128_BIT], long(i)): success [2229ms]
castShape took 2229 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4068a139): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 4, S_128_BIT], long(i)): success [718ms]
castShape took 718 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5d2ea27e): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 2, S_128_BIT], long(i)): success [18ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42642d30): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 32, S_256_BIT], long(i)): success [7049ms]
castShape took 7049 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@41f2d159): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 16, S_256_BIT], long(i)): success [4185ms]
castShape took 4186 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8040dfb): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 8, S_256_BIT], long(i)): success [3140ms]
castShape took 3141 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2dd5b0c1): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 4, S_256_BIT], long(i)): success [5049ms]
castShape took 5050 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bc29b56): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 8, S_256_BIT], long(i)): success [3082ms]
castShape took 3083 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3da5771b): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 4, S_256_BIT], long(i)): success [3051ms]
castShape took 3051 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b928f24): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 64, S_512_BIT], long(i)): success [13415ms]
castShape took 13416 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@53d438dd): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 32, S_512_BIT], long(i)): success [7175ms]
castShape took 7175 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e9e124f): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 16, S_512_BIT], long(i)): success [4148ms]
castShape took 4151 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3767d1fe): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 8, S_512_BIT], long(i)): success [3090ms]
castShape took 3072 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16658144): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 16, S_512_BIT], long(i)): success [4739ms]
castShape took 4739 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e488490): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 8, S_512_BIT], long(i)): success [3115ms]
castShape took 3115 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@207051a): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 16, S_Max_BIT], long(i)): success [31ms]
castShape took 31 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1684bed8): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 8, S_Max_BIT], long(i)): success [27ms]
castShape took 27 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6c6e507c): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 4, S_Max_BIT], long(i)): success [730ms]
castShape took 730 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1529045f): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 2, S_Max_BIT], long(i)): success [305ms]
castShape took 305 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b90aeb7): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 4, S_Max_BIT], long(i)): success [650ms]
castShape took 650 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d930031): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 2, S_Max_BIT], long(i)): success [18ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@838508): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[byte, 8, S_64_BIT], float(i)): success [1302ms]
castShape took 1302 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1d21acd5): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[short, 4, S_64_BIT], float(i)): success [2352ms]
castShape took 2353 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c17510f): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[int, 2, S_64_BIT], float(i)): success [14ms]
castShape took 15 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13587957): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[long, 1, S_64_BIT], float(i)): success [1124ms]
castShape took 1125 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4fa6b2a5): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[float, 2, S_64_BIT], float(i)): success [707ms]
castShape took 707 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@79362e86): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[double, 1, S_64_BIT], float(i)): success [6ms]
castShape took 6 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d200a30): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[byte, 16, S_128_BIT], float(i)): success [15ms]
castShape took 15 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@571838c): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[short, 8, S_128_BIT], float(i)): success [24ms]
castShape took 25 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b89077f): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[int, 4, S_128_BIT], float(i)): success [8ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@265bfffc): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[long, 2, S_128_BIT], float(i)): success [2045ms]
castShape took 2045 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b94a991): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[float, 4, S_128_BIT], float(i)): success [252ms]
castShape took 252 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5235bec2): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[double, 2, S_128_BIT], float(i)): success [8ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d2cf589): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[byte, 32, S_256_BIT], float(i)): success [3521ms]
castShape took 3521 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@62f11d82): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[shor

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

1ef944f8): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[float, 4, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bc51306): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[int, 2, S_64_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49fd216e): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[float, 2, S_64_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1384eb87): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[long, 2, S_128_BIT]): success [2ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15c672de): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[double, 2, S_128_BIT]): success [2ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55b9f94e): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [3ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4076fced): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [3ms]
shuffleCast took 4 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14f5c5a9): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e77565): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5103825a): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@167a7081): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e72c4eb): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@198647f7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 1, S_64_BIT]): success [1ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@361e5553): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2fd76e9b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@693954e1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50a63192): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 5 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17f0e87c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b06ce01): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76d7bdef): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4ba2a3c4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@463142d5): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16da3050): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4219c83b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d863fcd): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1f18e4b1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27321f76): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@99a4da7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14a4f797): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@666c1382): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@224314a2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1dfb4134): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7496b2ca): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45563d04): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@188caa7b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77ca5b48): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@390db554): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18fd0f5e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@701bc385): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7d444216): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34c85df8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f3cb131): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e8d1c80): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c93a156): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@67821d4e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12d3c83): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 34 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c820ef5): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@491d4183): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46df943c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21550842): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77aa4c20): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@466dc5c5): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5cacb27e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25fea54b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7403ac38): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e150e1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b496a1d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a208eb4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b0a79e4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29812350): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25838d8c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@86a45d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@74779344): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dd24a2a): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d369f8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e80a3ef): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5c7cbdb6): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@277354b5): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@219fe42e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@389fdeba): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45b7e819): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@216f5222): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e9e4164): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5bd5a86d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f7104ce): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39c11e76): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7af8d8a7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e165d44): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48e07e11): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65977dc6): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@573ae6a8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6f12f8f8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bf63723): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ca34cbb): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61e2481c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7652041a): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@171dcd5c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13b8c413): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@68a34a82): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2bb7efc2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@207054d6): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b5a9bf3): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44bcaa50): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39229018): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3aa271dc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21b29cc2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e9a9a6f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2cd91c5f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2865f6ed): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13e4446c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@246e3c69): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e214d63): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1319af93): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@157c2890): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b8ae83): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43daa5ab): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@47292319): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57438fd4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6628a0cd): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78c44a0e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8b487c6): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@739d3d0b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3f47c415): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10fe1ffa): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dbd1524): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6fb99235): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5eb9a353): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@30c81a1d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5c663160): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@279510cc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@303e321a): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7612d72): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6cb56024): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@508fb1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b4e64be): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10d15b43): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48a586d9): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5809466): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@520d679c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42d3e00a): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18a4ca36): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d6e637d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@718b30d4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f66a0b7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d7a71f2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 16, S_256_BIT]): success [10ms]
shuffleCastNeg took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c0607e5): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15ce859f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@529cf764): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e239d9b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e80c493): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@438e98dd): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61b0eeb1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7ff46da2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2028cad4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e946b66): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@151408c8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66b68443): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@405e2a9f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@198ffaff): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@144407fa): success [0ms]

===============================================
jdk/incubator/vector/VectorMaxConversionTests.java#id0
Total tests run: 936, Passes: 935, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorMaxConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorMaxConversionTests.java#id0 \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorMaxConversionTests_id0.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorMaxConversionTests_id0.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorMaxConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -XX:-TieredCompilation \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/VectorMaxConversionTests_id0.d/testng.0.jta jdk/incubator/vector/VectorMaxConversionTests.java#id0 false VectorMaxConversionTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#Z
Passed: jdk/incubator/vector/Byte512VectorTests.java
TEST: jdk/incubator/vector/VectorReshapeTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.373 seconds
messages:
command: build VectorReshapeTests
reason: Named class compiled on demand
started: Thu Apr 17 02:02:18 IST 2025
Test directory:
  compile: VectorReshapeTests
finished: Thu Apr 17 02:02:19 IST 2025
elapsed time (seconds): 0.373

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.372 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 02:02:18 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 2
Process id: 2064589
finished: Thu Apr 17 02:02:19 IST 2025
elapsed time (seconds): 0.372
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/VectorReshapeTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/9 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/VectorReshapeTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
REASON: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
TIME:   890.077 seconds
messages:
command: testng --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests
reason: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
started: Thu Apr 17 02:02:19 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 2070066
finished: Thu Apr 17 02:17:09 IST 2025
elapsed time (seconds): 890.077
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorReshapeTests.testCastFromByte(byte(i)): success [38956ms]
test VectorReshapeTests.testCastFromDouble(double(i)): success [3045ms]
test VectorReshapeTests.testCastFromFloat(float(i)): success [3312ms]
test VectorReshapeTests.testCastFromInt(int(i)): success [3979ms]
test VectorReshapeTests.testCastFromLong(long(i)): success [2989ms]
test VectorReshapeTests.testCastFromShort(short(i)): success [3757ms]
test VectorReshapeTests.testRebracket128(byte(i)): success [12462ms]
test VectorReshapeTests.testRebracket256(byte(i)): success [105798ms]
test VectorReshapeTests.testRebracket512(byte(i)): success [176903ms]
test VectorReshapeTests.testRebracket64(byte(i)): success [11286ms]
test VectorReshapeTests.testRebracketMax(byte(i)): success [13480ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[byte, 16, S_128_BIT]->Species[byte, 64, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-1, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeByte(byte(i)): failure [185823ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeByte(VectorReshapeTests.java:447)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[double, 1, S_64_BIT]->Species[double, 4, S_256_BIT] (lanewise), partLimit=-4, block=8, part=-2, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeDouble(byte(i)): failure [16241ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeDouble(VectorReshapeTests.java:670)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[float, 4, S_128_BIT]->Species[float, 16, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-3, origin=48
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeFloat(byte(i)): failure [28481ms]
java.lang.AssertionError: arrays differ firstly at element [48]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeFloat(VectorReshapeTests.java:631)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[int, 2, S_64_BIT]->Species[int, 16, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-1, origin=8
expect: [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeInt(byte(i)): failure [79986ms]
java.lang.AssertionError: arrays differ firstly at element [8]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeInt(VectorReshapeTests.java:533)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[long, 1, S_64_BIT]->Species[long, 8, S_512_BIT] (reinterpret), partLimit=-8, block=8, part=-4, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeLong(byte(i)): failure [34849ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeLong(VectorReshapeTests.java:579)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[short, 8, S_128_BIT]->Species[short, 32, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-3, origin=48
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeShort(byte(i)): failure [127682ms]
java.lang.AssertionError: arrays differ firstly at element [48]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeShort(VectorReshapeTests.java:493)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testUCastFromByte(byte(i)): success [23540ms]
test VectorReshapeTests.testUCastFromInt(int(i)): success [1ms]
test VectorReshapeTests.testUCastFromShort(short(i)): success [11785ms]

===============================================
jdk/incubator/vector/VectorReshapeTests.java
Total tests run: 20, Passes: 14, Failures: 6, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 6
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 6
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/9 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=1 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=1 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/VectorReshapeTests.d/testng.0.jta jdk/incubator/vector/VectorReshapeTests.java false VectorReshapeTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
--------------------------------------------------
Passed: jdk/incubator/vector/Vector64ConversionTests.java#id0
Test results: passed: 74; failed: 6; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector
Finished running test 'jtreg:test/jdk:jdk_vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk:jdk_vector                            83    74     6     0     3 <<
==============================
TEST FAILURE

