Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/jdk/incubator/vector/', will run:
* jtreg:test/jdk/jdk/incubator/vector
Clean up dirs for jtreg_test_jdk_jdk_incubator_vector

Running test 'jtreg:test/jdk/jdk/incubator/vector'
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/AddTest.java
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorTests.java
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
--------------------------------------------------
TEST: jdk/incubator/vector/Byte512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   25.672 seconds
messages:
command: build Byte512VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 03:20:38 IST 2025
Test directory:
  compile: Byte512VectorTests
finished: Thu Apr 17 03:21:04 IST 2025
elapsed time (seconds): 25.672

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   25.667 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 03:20:38 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 11
Process id: 2136978
finished: Thu Apr 17 03:21:04 IST 2025
elapsed time (seconds): 25.667
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Byte512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Byte512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Byte512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Byte512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte512VectorTests 
TIME:   57.373 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Byte512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte512VectorTests 
started: Thu Apr 17 03:21:04 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2138303
finished: Thu Apr 17 03:22:01 IST 2025
elapsed time (seconds): 57.373
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 1440575002888536861
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=1440575002888536861" to command line.
test Byte512VectorTests.ABSByte512VectorTests(byte[-i * 5]): success [332ms]
test Byte512VectorTests.ABSByte512VectorTests(byte[i * 5]): success [297ms]
test Byte512VectorTests.ABSByte512VectorTests(byte[i + 1]): success [31ms]
test Byte512VectorTests.ABSByte512VectorTests(byte[cornerCaseValue(i)]): success [5ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[-i * 5], mask[i % 2]): success [128ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i * 5], mask[i % 2]): success [98ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i + 1], mask[i % 2]): success [10ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[-i * 5], mask[true]): success [107ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[cornerCaseValue(i)], mask[true]): success [3ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[-i * 5], mask[false]): success [0ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.ADDByte512VectorTests(byte[-i * 5], byte[i * 5]): success [105ms]
test Byte512VectorTests.ADDByte512VectorTests(byte[-i * 5], byte[i + 1]): success [169ms]
test Byte512VectorTests.ADDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [3ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5]): success [65ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1]): success [3ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [29ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [4ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [9ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [7ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [56ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [2ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [105ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [48ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [4ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [69ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [61ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.ADDReduceByte512VectorTests(byte[-i * 5]): success [113ms]
test Byte512VectorTests.ADDReduceByte512VectorTests(byte[i * 5]): success [3ms]
test Byte512VectorTests.ADDReduceByte512VectorTests(byte[i + 1]): success [76ms]
test Byte512VectorTests.ADDReduceByte512VectorTests(byte[cornerCaseValue(i)]): success [16ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [71ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i * 5], mask[i % 2]): success [3ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i + 1], mask[i % 2]): success [96ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [24ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[-i * 5], mask[true]): success [0ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i * 5], mask[true]): success [0ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[-i * 5], mask[false]): success [0ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTests(byte[-i * 5]): success [9ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTests(byte[i * 5]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTests(byte[i + 1]): success [11ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTests(byte[cornerCaseValue(i)]): success [15ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [9ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i * 5], mask[i % 2]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i + 1], mask[i % 2]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [25ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[-i * 5], mask[true]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i * 5], mask[true]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i + 1], mask[true]): success [71ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[-i * 5], mask[false]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.ANDByte512VectorTests(byte[-i * 5], byte[i * 5]): success [165ms]
test Byte512VectorTests.ANDByte512VectorTests(byte[-i * 5], byte[i + 1]): success [36ms]
test Byte512VectorTests.ANDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [3ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [5ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [3ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [23ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [4ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [3ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [3ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [31ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [2ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [3ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [3ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [7ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [30ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [4ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [67ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.ANDReduceByte512VectorTests(byte[-i * 5]): success [151ms]
test Byte512VectorTests.ANDReduceByte512VectorTests(byte[i * 5]): success [3ms]
test Byte512VectorTests.ANDReduceByte512VectorTests(byte[i + 1]): success [84ms]
test Byte512VectorTests.ANDReduceByte512VectorTests(byte[cornerCaseValue(i)]): success [16ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [20ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i * 5], mask[i % 2]): success [4ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i + 1], mask[i % 2]): success [96ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [24ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[-i * 5], mask[true]): success [0ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i * 5], mask[true]): success [0ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[-i * 5], mask[false]): success [0ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.AND_NOTByte512VectorTests(byte[-i * 5], byte[i * 5]): success [230ms]
test Byte512VectorTests.AND_NOTByte512VectorTests(byte[-i * 5], byte[i + 1]): success [6ms]
test Byte512VectorTests.AND_NOTByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [103ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [29ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [4ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [77ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.ASHRByte512VectorTests(byte[-i * 5], byte[i * 5]): success [147ms]
test Byte512VectorTests.ASHRByte512VectorTests(byte[-i * 5], byte[i + 1]): success [68ms]
test Byte512VectorTests.ASHRByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [171ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [36ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [14ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [78ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShift(byte[-i * 5], byte[i * 5]): success [75ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShift(byte[-i * 5], byte[i + 1]): success [165ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShift(byte[-i * 5], byte[cornerCaseValue(i)]): success [3ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftConst(byte[-i * 5]): success [43ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftConst(byte[i * 5]): success [2ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftConst(byte[i + 1]): success [3ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftConst(byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [20ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [38ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[true]): success [4ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[true]): success [62ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[false]): success [33ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[i % 2]): success [13ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[i % 2]): success [3ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[i % 2]): success [6ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[true]): success [52ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[true]): success [0ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[true]): success [60ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[false]): success [0ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [79ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i * 5], byte[i * 5]): success [47ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i * 5], byte[i + 1]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [106ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i + 1], byte[i * 5]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i + 1], byte[i + 1]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [357ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [5ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [69ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [6ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [40ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [8ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [36ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [75ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [5ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [4ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [50ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

* 5], mask[true]): success [1ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [61ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [2ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.compressByte512VectorTests(byte[-i * 5], mask[i % 2]): success [489ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i * 5], mask[i % 2]): success [42ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i + 1], mask[i % 2]): success [12ms]
test Byte512VectorTests.compressByte512VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [12ms]
test Byte512VectorTests.compressByte512VectorTests(byte[-i * 5], mask[true]): success [229ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i * 5], mask[true]): success [130ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.compressByte512VectorTests(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.compressByte512VectorTests(byte[-i * 5], mask[false]): success [1ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.compressByte512VectorTests(byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.divByte512VectorTests(byte[-i * 5], byte[i * 5]): success [16ms]
test Byte512VectorTests.divByte512VectorTests(byte[-i * 5], byte[i + 1]): success [65ms]
test Byte512VectorTests.divByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [26ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [93ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [23ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [114ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [4ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [122ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[i]): success [96ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[i - length / 2]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[i + 1]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[i - 2]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[zigZag(i)]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[i]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[i - length / 2]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[i + 1]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[i - 2]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[i]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[i - length / 2]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[i + 1]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[i - 2]): success [2ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[zigZag(i)]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[i]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[i - length / 2]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[i + 1]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[i - 2]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[zigZag(i)]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[i]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[i + 1]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[i - 2]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [2ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[i]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [2ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [1ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i]): success [1ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - length / 2]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i + 1]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - 2]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[zigZag(i)]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i]): success [113ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i + 1]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - 2]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - length / 2]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i + 1]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - 2]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[zigZag(i)]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - length / 2]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i + 1]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - 2]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[zigZag(i)]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i + 1]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - 2]): success [14ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [0ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.expandByte512VectorTests(byte[-i * 5], mask[i % 2]): success [734ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i * 5], mask[i % 2]): success [44ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i + 1], mask[i % 2]): success [20ms]
test Byte512VectorTests.expandByte512VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [19ms]
test Byte512VectorTests.expandByte512VectorTests(byte[-i * 5], mask[true]): success [133ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i * 5], mask[true]): success [239ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.expandByte512VectorTests(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.expandByte512VectorTests(byte[-i * 5], mask[false]): success [1ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.expandByte512VectorTests(byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.getByte512VectorTests(byte[-i * 5]): success [29ms]
test Byte512VectorTests.getByte512VectorTests(byte[i * 5]): success [29ms]
test Byte512VectorTests.getByte512VectorTests(byte[i + 1]): success [29ms]
test Byte512VectorTests.getByte512VectorTests(byte[cornerCaseValue(i)]): success [55ms]
test Byte512VectorTests.hashCodeByte512VectorTestsSmokeTest(byte[-i * 5]): success [37ms]
test Byte512VectorTests.hashCodeByte512VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte512VectorTests.hashCodeByte512VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte512VectorTests.hashCodeByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [20ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(0): success [71ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(-1): success [7ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(1): success [21ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(2): success [5ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(-2): success [5ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(0): success [5ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(-1): success [5ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(1): success [5ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(2): success [5ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(-2): success [5ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(0): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(1): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(32): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(37): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(1024): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(1025): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(1029): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(0): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(1): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(32): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(37): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(1024): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(1025): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(1029): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[i]): success [95ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[i - length / 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[i + 1]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[i - 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[zigZag(i)]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[i]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[i - length / 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[i + 1]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[i - 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [1ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[i]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[i - length / 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[i + 1]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[i - 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[zigZag(i)]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[i]): success [5ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[i - length / 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[i + 1]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[i - 2]): success [2ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[zigZag(i)]): success [1ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[i]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [5ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[i + 1]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[i - 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[i]): success [32ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [1ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[i]): success [2ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[i - length / 2]): success [2ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[i + 1]): success [2ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[i - 2]): success [2ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[zigZag(i)]): success [2ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i]): success [109ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i + 1]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - length / 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i + 1]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[zigZag(i)]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - length / 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i + 1]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[zigZag(i)]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i + 1]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [0ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.maskAndByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Byte512VectorTests.maskAndByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskAndNotByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Byte512VectorTests.maskAndNotByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskCompressByte512VectorTestsSmokeTest(mask[i % 2]): success [132ms]
test Byte512VectorTests.maskCompressByte512VectorTestsSmokeTest(mask[true]): success [1ms]
test Byte512VectorTests.maskCompressByte512VectorTestsSmokeTest(mask[false]): success [75ms]
test Byte512VectorTests.maskEqByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Byte512VectorTests.maskEqByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskEqualsByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Byte512VectorTests.maskEqualsByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskFirstTrueByte512VectorTestsSmokeTest(mask[i % 2]): success [232ms]
test Byte512VectorTests.maskFirstTrueByte512VectorTestsSmokeTest(mask[true]): success [38ms]
test Byte512VectorTests.maskFirstTrueByte512VectorTestsSmokeTest(mask[false]): success [10ms]
test Byte512VectorTests.maskFromToLongByte512VectorTestsSmokeTest(-1): success [58ms]
test Byte512VectorTests.maskFromToLongByte512VectorTestsSmokeTest(0): success [0ms]
test Byte512VectorTests.maskFromToLongByte512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Byte512VectorTests.maskFromToLongByte512VectorTestsSmokeTest(81985529216486895): success [5ms]
test Byte512VectorTests.maskHashCodeByte512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Byte512VectorTests.maskHashCodeByte512VectorTestsSmokeTest(mask[true]): success [0ms]
test Byte512VectorTests.maskHashCodeByte512VectorTestsSmokeTest(mask[false]): success [0ms]
test Byte512VectorTests.maskLastTrueByte512VectorTestsSmokeTest(mask[i % 2]): success [291ms]
test Byte512VectorTests.maskLastTrueByte512VectorTestsSmokeTest(mask[true]): success [42ms]
test Byte512VectorTests.maskLastTrueByte512VectorTestsSmokeTest(mask[false]): success [0ms]
test Byte512VectorTests.maskOrByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Byte512VectorTests.maskOrByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskTrueCountByte512VectorTestsSmokeTest(mask[i % 2]): success [269ms]
test Byte512VectorTests.maskTrueCountByte512VectorTestsSmokeTest(mask[true]): success [55ms]
test Byte512VectorTests.maskTrueCountByte512VectorTestsSmokeTest(mask[false]): success [0ms]
test Byte512VectorTests.maskXorByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Byte512VectorTests.maskXorByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maxByte512VectorTests(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte512VectorTests.maxByte512VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.maxByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.maxByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [9ms]
test Byte512VectorTests.maxByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.maxByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.minByte512VectorTests(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte512VectorTests.minByte512VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.minByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.minByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte512VectorTests.minByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.minByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.mulByte512VectorTests(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte512VectorTests.mulByte512VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.mulByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [8ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [9ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [8ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.negByte512VectorTests(byte[-i * 5]): success [10ms]
test Byte512VectorTests.negByte512VectorTests(byte[i * 5]): success [7ms]
test Byte512VectorTests.negByte512VectorTests(byte[i + 1]): success [2ms]
test Byte512VectorTests.negByte512VectorTests(byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.notByte512VectorTests(byte[-i * 5]): success [9ms]
test Byte512VectorTests.notByte512VectorTests(byte[i * 5]): success [9ms]
test Byte512VectorTests.notByte512VectorTests(byte[i + 1]): success [2ms]
test Byte512VectorTests.notByte512VectorTests(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.orByte512VectorTests(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte512VectorTests.orByte512VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.orByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.orByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte512VectorTests.orByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.orByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.reinterpretAsBytesByte512VectorTestsSmokeTest(byte[-i * 5]): success [4ms]
test Byte512VectorTests.reinterpretAsBytesByte512VectorTestsSmokeTest(byte[i * 5]): success [20ms]
test Byte512VectorTests.reinterpretAsBytesByte512VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte512VectorTests.reinterpretAsBytesByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.shuffleEqualsByte512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [1044ms]
test Byte512VectorTests.shuffleEqualsByte512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [239ms]
test Byte512VectorTests.shuffleMiscellaneousByte512VectorTestsSmokeTest(shuffle[random]): success [182ms]
test Byte512VectorTests.shuffleTest(): success [892ms]
test Byte512VectorTests.shuffleToStringByte512VectorTestsSmokeTest(shuffle[random]): success [41ms]
test Byte512VectorTests.sliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [520ms]
test Byte512VectorTests.sliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [373ms]
test Byte512VectorTests.sliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [57ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [12ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [43ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [144ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [39ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.sliceUnaryByte512VectorTests(byte[-i * 5]): success [243ms]
test Byte512VectorTests.sliceUnaryByte512VectorTests(byte[i * 5]): success [152ms]
test Byte512VectorTests.sliceUnaryByte512VectorTests(byte[i + 1]): success [1ms]
test Byte512VectorTests.sliceUnaryByte512VectorTests(byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.smokeTest1(): success [43ms]
test Byte512VectorTests.smokeTest2(): success [87ms]
test Byte512VectorTests.subByte512VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte512VectorTests.subByte512VectorTests(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte512VectorTests.subByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [67ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [91ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): failure [78ms]
java.lang.AssertionError: at index #833, input1 = -69, input2 = 65, mask = false expected [-69] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:841)
	at Byte512VectorTests.assertBroadcastArraysEquals(Byte512VectorTests.java:470)
	at Byte512VectorTests.assertBroadcastArraysEquals(Byte512VectorTests.java:460)
	at Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(Byte512VectorTests.java:2105)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [159ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [31ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [39ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.toDoubleArrayByte512VectorTestsSmokeTest(byte[-i * 5]): success [1ms]
test Byte512VectorTests.toDoubleArrayByte512VectorTestsSmokeTest(byte[i * 5]): success [1ms]
test Byte512VectorTests.toDoubleArrayByte512VectorTestsSmokeTest(byte[i + 1]): success [3ms]
test Byte512VectorTests.toDoubleArrayByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.toIntArrayByte512VectorTestsSmokeTest(byte[-i * 5]): success [7ms]
test Byte512VectorTests.toIntArrayByte512VectorTestsSmokeTest(byte[i * 5]): success [9ms]
test Byte512VectorTests.toIntArrayByte512VectorTestsSmokeTest(byte[i + 1]): success [7ms]
test Byte512VectorTests.toIntArrayByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.toLongArrayByte512VectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test Byte512VectorTests.toLongArrayByte512VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte512VectorTests.toLongArrayByte512VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte512VectorTests.toLongArrayByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.toStringByte512VectorTestsSmokeTest(byte[-i * 5]): success [24ms]
test Byte512VectorTests.toStringByte512VectorTestsSmokeTest(byte[i * 5]): success [1ms]
test Byte512VectorTests.toStringByte512VectorTestsSmokeTest(byte[i + 1]): success [71ms]
test Byte512VectorTests.toStringByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.unsliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [397ms]
test Byte512VectorTests.unsliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [277ms]
test Byte512VectorTests.unsliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [331ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [407ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [630ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [414ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [296ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [492ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [338ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [282ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [225ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [225ms]
test Byte512VectorTests.unsliceUnaryByte512VectorTests(byte[-i * 5]): success [238ms]
test Byte512VectorTests.unsliceUnaryByte512VectorTests(byte[i * 5]): success [235ms]
test Byte512VectorTests.unsliceUnaryByte512VectorTests(byte[i + 1]): success [1ms]
test Byte512VectorTests.unsliceUnaryByte512VectorTests(byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.viewAsFloatingLanesTest(): success [14ms]
test Byte512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Byte512VectorTests.withByte512VectorTests(byte[-i * 5], byte[i * 5]): success [3ms]
test Byte512VectorTests.withByte512VectorTests(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte512VectorTests.withByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [25ms]

===============================================
jdk/incubator/vector/Byte512VectorTests.java
Total tests run: 3602, Passes: 3601, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Byte512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Byte512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/1/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Byte512VectorTests.d/testng.0.jta jdk/incubator/vector/Byte512VectorTests.java false Byte512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte128VectorTests.java
TEST: jdk/incubator/vector/DoubleMaxVectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.889 seconds
messages:
command: build DoubleMaxVectorTests
reason: Named class compiled on demand
started: Thu Apr 17 03:21:17 IST 2025
Test directory:
  compile: DoubleMaxVectorTests
finished: Thu Apr 17 03:21:18 IST 2025
elapsed time (seconds): 1.889

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.888 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/DoubleMaxVectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 03:21:17 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 3
Process id: 2136393
finished: Thu Apr 17 03:21:18 IST 2025
elapsed time (seconds): 1.888
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/DoubleMaxVectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/15 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/DoubleMaxVectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/DoubleMaxVectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/DoubleMaxVectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/DoubleMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/DoubleMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/DoubleMaxVectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/DoubleMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/DoubleMaxVectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation DoubleMaxVectorTests 
TIME:   44.525 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation DoubleMaxVectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation DoubleMaxVectorTests 
started: Thu Apr 17 03:21:18 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2138788
finished: Thu Apr 17 03:22:03 IST 2025
elapsed time (seconds): 44.525
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -6099675358820957152
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-6099675358820957152" to command line.
test DoubleMaxVectorTests.ABSDoubleMaxVectorTests(double[-i * 5]): success [621ms]
test DoubleMaxVectorTests.ABSDoubleMaxVectorTests(double[i * 5]): success [6ms]
test DoubleMaxVectorTests.ABSDoubleMaxVectorTests(double[i + 1]): success [53ms]
test DoubleMaxVectorTests.ABSDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [4ms]
test DoubleMaxVectorTests.ABSDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [2ms]
test DoubleMaxVectorTests.ABSDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [2ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[-i * 5], mask[i % 2]): success [240ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[i * 5], mask[i % 2]): success [4ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[i + 1], mask[i % 2]): success [77ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(AbstractVectorTest$1@27211610, mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[-i * 5], mask[true]): success [0ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[i * 5], mask[true]): success [0ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[i + 1], mask[true]): success [0ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(AbstractVectorTest$1@27211610, mask[true]): success [0ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[cornerCaseValue(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[-i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[i + 1], mask[false]): success [0ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(AbstractVectorTest$1@27211610, mask[false]): success [0ms]
test DoubleMaxVectorTests.ABSMaskedDoubleMaxVectorTests(double[cornerCaseValue(i)], mask[false]): success [0ms]
test DoubleMaxVectorTests.ACOSDoubleMaxVectorTests(double[-i * 5]): success [231ms]
test DoubleMaxVectorTests.ACOSDoubleMaxVectorTests(double[i * 5]): success [4ms]
test DoubleMaxVectorTests.ACOSDoubleMaxVectorTests(double[i + 1]): success [75ms]
test DoubleMaxVectorTests.ACOSDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test DoubleMaxVectorTests.ACOSDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [1ms]
test DoubleMaxVectorTests.ACOSDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTests(double[-i * 5], double[i * 5]): success [251ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTests(double[-i * 5], double[i + 1]): success [4ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [63ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTests(double[-i * 5], AbstractVectorTest$1@27211610): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5]): success [16ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [23ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [14ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610, mask[i % 2]): success [3ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [3ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [5ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [5ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610, mask[true]): success [14ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [6ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [6ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [39ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610, mask[false]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [107ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [3ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [69ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[true]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[false]): success [1ms]
test DoubleMaxVectorTests.ADDDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTests(double[-i * 5]): success [104ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTests(double[i * 5]): success [88ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTests(double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[-i * 5], mask[i % 2]): success [69ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[i * 5], mask[i % 2]): success [108ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[i + 1], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(AbstractVectorTest$1@27211610, mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[-i * 5], mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[i * 5], mask[true]): success [10ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[i + 1], mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(AbstractVectorTest$1@27211610, mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[-i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[i + 1], mask[false]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(AbstractVectorTest$1@27211610, mask[false]): success [0ms]
test DoubleMaxVectorTests.ADDReduceDoubleMaxVectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTests(double[-i * 5]): success [10ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTests(double[i * 5]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTests(double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[-i * 5], mask[i % 2]): success [9ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[i * 5], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[i + 1], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [1ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(AbstractVectorTest$1@27211610, mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[-i * 5], mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[i * 5], mask[true]): success [11ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[i + 1], mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(AbstractVectorTest$1@27211610, mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[-i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[i + 1], mask[false]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(AbstractVectorTest$1@27211610, mask[false]): success [1ms]
test DoubleMaxVectorTests.ADDReduceLongDoubleMaxVectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [0ms]
test DoubleMaxVectorTests.ASINDoubleMaxVectorTests(double[-i * 5]): success [149ms]
test DoubleMaxVectorTests.ASINDoubleMaxVectorTests(double[i * 5]): success [5ms]
test DoubleMaxVectorTests.ASINDoubleMaxVectorTests(double[i + 1]): success [68ms]
test DoubleMaxVectorTests.ASINDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.ASINDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.ASINDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [1ms]
test DoubleMaxVectorTests.ATAN2DoubleMaxVectorTests(double[-i * 5], double[i * 5]): success [244ms]
test DoubleMaxVectorTests.ATAN2DoubleMaxVectorTests(double[-i * 5], double[i + 1]): success [21ms]
test DoubleMaxVectorTests.ATAN2DoubleMaxVectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [87ms]
test DoubleMaxVectorTests.ATAN2DoubleMaxVectorTests(double[-i * 5], AbstractVectorTest$1@27211610): success [4ms]
test DoubleMaxVectorTests.ATAN2DoubleMaxVectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [7ms]
test DoubleMaxVectorTests.ATANDoubleMaxVectorTests(double[-i * 5]): success [72ms]
test DoubleMaxVectorTests.ATANDoubleMaxVectorTests(double[i * 5]): success [4ms]
test DoubleMaxVectorTests.ATANDoubleMaxVectorTests(double[i + 1]): success [68ms]
test DoubleMaxVectorTests.ATANDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test DoubleMaxVectorTests.ATANDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.ATANDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [1ms]
test DoubleMaxVectorTests.BroadcastDoubleMaxVectorTests(double[-i * 5]): success [100ms]
test DoubleMaxVectorTests.BroadcastDoubleMaxVectorTests(double[i * 5]): success [58ms]
test DoubleMaxVectorTests.BroadcastDoubleMaxVectorTests(double[i + 1]): success [73ms]
test DoubleMaxVectorTests.BroadcastDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.BroadcastDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.BroadcastDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.BroadcastLongDoubleMaxVectorTestsSmokeTest(double[-i * 5]): success [3ms]
test DoubleMaxVectorTests.BroadcastLongDoubleMaxVectorTestsSmokeTest(double[i * 5]): success [3ms]
test DoubleMaxVectorTests.BroadcastLongDoubleMaxVectorTestsSmokeTest(double[i + 1]): success [3ms]
test DoubleMaxVectorTests.BroadcastLongDoubleMaxVectorTestsSmokeTest(double[cornerCaseValue(i)]): success [3ms]
test DoubleMaxVectorTests.CBRTDoubleMaxVectorTests(double[-i * 5]): success [128ms]
test DoubleMaxVectorTests.CBRTDoubleMaxVectorTests(double[i * 5]): success [52ms]
test DoubleMaxVectorTests.CBRTDoubleMaxVectorTests(double[i + 1]): success [75ms]
test DoubleMaxVectorTests.CBRTDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [3ms]
test DoubleMaxVectorTests.CBRTDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.CBRTDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.COSDoubleMaxVectorTests(double[-i * 5]): success [83ms]
test DoubleMaxVectorTests.COSDoubleMaxVectorTests(double[i * 5]): success [4ms]
test DoubleMaxVectorTests.COSDoubleMaxVectorTests(double[i + 1]): success [69ms]
test DoubleMaxVectorTests.COSDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [5ms]
test DoubleMaxVectorTests.COSDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [1ms]
test DoubleMaxVectorTests.COSDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [3ms]
test DoubleMaxVectorTests.COSHDoubleMaxVectorTests(double[-i * 5]): success [131ms]
test DoubleMaxVectorTests.COSHDoubleMaxVectorTests(double[i * 5]): success [3ms]
test DoubleMaxVectorTests.COSHDoubleMaxVectorTests(double[i + 1]): success [72ms]
test DoubleMaxVectorTests.COSHDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.COSHDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.COSHDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [1ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTests(double[-i * 5], double[i * 5]): success [186ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTests(double[-i * 5], double[i + 1]): success [3ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [62ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTests(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [32ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [3ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [69ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[true]): success [0ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [20ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[false]): success [0ms]
test DoubleMaxVectorTests.DIVDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i], double[i]): success [211ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i], double[i - length / 2]): success [56ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i], double[i + 1]): success [7ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i], double[i - 2]): success [7ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i], double[zigZag(i)]): success [6ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i], double[cornerCaseValue(i)]): success [6ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - length / 2], double[i]): success [12ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - length / 2], double[i - length / 2]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - length / 2], double[i + 1]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - length / 2], double[i - 2]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - length / 2], double[zigZag(i)]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [5ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i + 1], double[i]): success [4ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i + 1], double[i - length / 2]): success [4ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i + 1], double[i + 1]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i + 1], double[i - 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i + 1], double[zigZag(i)]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i + 1], double[cornerCaseValue(i)]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - 2], double[i]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - 2], double[i - length / 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - 2], double[i + 1]): success [41ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - 2], double[i - 2]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - 2], double[zigZag(i)]): success [1ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[i - 2], double[cornerCaseValue(i)]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[zigZag(i)], double[i]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[zigZag(i)], double[i - length / 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[zigZag(i)], double[i + 1]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[zigZag(i)], double[i - 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[zigZag(i)], double[zigZag(i)]): success [5ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[cornerCaseValue(i)], double[i]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[cornerCaseValue(i)], double[i + 1]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[cornerCaseValue(i)], double[i - 2]): success [5ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[i % 2]): success [16ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[i % 2]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[i % 2]): success [25ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[i % 2]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[i % 2]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[i % 2]): success [21ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[i % 2]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[i % 2]): success [6ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[i % 2]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[i % 2]): success [6ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[i % 2]): success [3ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[i % 2]): success [155ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[true]): success [0ms]
test DoubleMaxVectorTests.EQDoubleMaxVectorTestsBroadc

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

tsSmokeTest(0): success [63ms]
test DoubleMaxVectorTests.indexInRangeDoubleMaxVectorTestsSmokeTest(-1): success [16ms]
test DoubleMaxVectorTests.indexInRangeDoubleMaxVectorTestsSmokeTest(1): success [16ms]
test DoubleMaxVectorTests.indexInRangeDoubleMaxVectorTestsSmokeTest(2): success [2ms]
test DoubleMaxVectorTests.indexInRangeDoubleMaxVectorTestsSmokeTest(-2): success [3ms]
test DoubleMaxVectorTests.indexInRangeLongDoubleMaxVectorTestsSmokeTest(0): success [2ms]
test DoubleMaxVectorTests.indexInRangeLongDoubleMaxVectorTestsSmokeTest(-1): success [2ms]
test DoubleMaxVectorTests.indexInRangeLongDoubleMaxVectorTestsSmokeTest(1): success [2ms]
test DoubleMaxVectorTests.indexInRangeLongDoubleMaxVectorTestsSmokeTest(2): success [10ms]
test DoubleMaxVectorTests.indexInRangeLongDoubleMaxVectorTestsSmokeTest(-2): success [2ms]
test DoubleMaxVectorTests.loopBoundDoubleMaxVectorTestsSmokeTest(0): success [0ms]
test DoubleMaxVectorTests.loopBoundDoubleMaxVectorTestsSmokeTest(1): success [0ms]
test DoubleMaxVectorTests.loopBoundDoubleMaxVectorTestsSmokeTest(32): success [0ms]
test DoubleMaxVectorTests.loopBoundDoubleMaxVectorTestsSmokeTest(37): success [0ms]
test DoubleMaxVectorTests.loopBoundDoubleMaxVectorTestsSmokeTest(1024): success [0ms]
test DoubleMaxVectorTests.loopBoundDoubleMaxVectorTestsSmokeTest(1025): success [0ms]
test DoubleMaxVectorTests.loopBoundDoubleMaxVectorTestsSmokeTest(1029): success [0ms]
test DoubleMaxVectorTests.loopBoundLongDoubleMaxVectorTestsSmokeTest(0): success [0ms]
test DoubleMaxVectorTests.loopBoundLongDoubleMaxVectorTestsSmokeTest(1): success [0ms]
test DoubleMaxVectorTests.loopBoundLongDoubleMaxVectorTestsSmokeTest(32): success [0ms]
test DoubleMaxVectorTests.loopBoundLongDoubleMaxVectorTestsSmokeTest(37): success [0ms]
test DoubleMaxVectorTests.loopBoundLongDoubleMaxVectorTestsSmokeTest(1024): success [0ms]
test DoubleMaxVectorTests.loopBoundLongDoubleMaxVectorTestsSmokeTest(1025): success [0ms]
test DoubleMaxVectorTests.loopBoundLongDoubleMaxVectorTestsSmokeTest(1029): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i], double[i]): success [127ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i], double[i - length / 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i], double[i - 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i], double[zigZag(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - length / 2], double[i]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - length / 2], double[i - length / 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - length / 2], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - length / 2], double[i - 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - length / 2], double[zigZag(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i + 1], double[i]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i + 1], double[i - length / 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i + 1], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i + 1], double[i - 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i + 1], double[zigZag(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i + 1], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - 2], double[i]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - 2], double[i - length / 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - 2], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - 2], double[i - 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - 2], double[zigZag(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[i - 2], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[zigZag(i)], double[i]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[zigZag(i)], double[i - length / 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[zigZag(i)], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[zigZag(i)], double[i - 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[zigZag(i)], double[zigZag(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[cornerCaseValue(i)], double[i]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[cornerCaseValue(i)], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[cornerCaseValue(i)], double[i - 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i], double[i]): success [1ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i], double[i - length / 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i], double[i - 2]): success [1ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i], double[zigZag(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - length / 2], double[i]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - length / 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - length / 2], double[i + 1]): success [1ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - length / 2], double[zigZag(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - length / 2], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i + 1], double[i]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i + 1], double[i - length / 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i + 1], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i + 1], double[i - 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i + 1], double[zigZag(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i + 1], double[cornerCaseValue(i)]): success [1ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - 2], double[i]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - 2], double[i - length / 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - 2], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - 2], double[i - 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - 2], double[zigZag(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[i - 2], double[cornerCaseValue(i)]): success [69ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - length / 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[zigZag(i)], double[zigZag(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - length / 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - 2]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)]): success [0ms]
test DoubleMaxVectorTests.ltDoubleMaxVectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.maskAndDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [11ms]
test DoubleMaxVectorTests.maskAndDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test DoubleMaxVectorTests.maskAndNotDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [4ms]
test DoubleMaxVectorTests.maskAndNotDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test DoubleMaxVectorTests.maskCompressDoubleMaxVectorTestsSmokeTest(mask[i % 2]): success [167ms]
test DoubleMaxVectorTests.maskCompressDoubleMaxVectorTestsSmokeTest(mask[true]): success [0ms]
test DoubleMaxVectorTests.maskCompressDoubleMaxVectorTestsSmokeTest(mask[false]): success [109ms]
test DoubleMaxVectorTests.maskEqDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test DoubleMaxVectorTests.maskEqDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test DoubleMaxVectorTests.maskEqualsDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test DoubleMaxVectorTests.maskEqualsDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test DoubleMaxVectorTests.maskFirstTrueDoubleMaxVectorTestsSmokeTest(mask[i % 2]): success [99ms]
test DoubleMaxVectorTests.maskFirstTrueDoubleMaxVectorTestsSmokeTest(mask[true]): success [33ms]
test DoubleMaxVectorTests.maskFirstTrueDoubleMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test DoubleMaxVectorTests.maskHashCodeDoubleMaxVectorTestsSmokeTest(mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.maskHashCodeDoubleMaxVectorTestsSmokeTest(mask[true]): success [0ms]
test DoubleMaxVectorTests.maskHashCodeDoubleMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test DoubleMaxVectorTests.maskLastTrueDoubleMaxVectorTestsSmokeTest(mask[i % 2]): success [90ms]
test DoubleMaxVectorTests.maskLastTrueDoubleMaxVectorTestsSmokeTest(mask[true]): success [33ms]
test DoubleMaxVectorTests.maskLastTrueDoubleMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test DoubleMaxVectorTests.maskOrDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [42ms]
test DoubleMaxVectorTests.maskOrDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test DoubleMaxVectorTests.maskTrueCountDoubleMaxVectorTestsSmokeTest(mask[i % 2]): success [58ms]
test DoubleMaxVectorTests.maskTrueCountDoubleMaxVectorTestsSmokeTest(mask[true]): success [34ms]
test DoubleMaxVectorTests.maskTrueCountDoubleMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test DoubleMaxVectorTests.maskXorDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test DoubleMaxVectorTests.maskXorDoubleMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTests(double[-i * 5], double[i * 5]): success [5ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTests(double[-i * 5], double[i + 1]): success [31ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTests(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [6ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.maxDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTests(double[-i * 5], double[i * 5]): success [5ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTests(double[-i * 5], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTests(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [5ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [32ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.minDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTests(double[-i * 5], double[i * 5]): success [6ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTests(double[-i * 5], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTests(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [5ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610, mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610, mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610, mask[false]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [5ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[false]): success [0ms]
test DoubleMaxVectorTests.mulDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test DoubleMaxVectorTests.negDoubleMaxVectorTests(double[-i * 5]): success [14ms]
test DoubleMaxVectorTests.negDoubleMaxVectorTests(double[i * 5]): success [2ms]
test DoubleMaxVectorTests.negDoubleMaxVectorTests(double[i + 1]): success [48ms]
test DoubleMaxVectorTests.negDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.negDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.negDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTests(double[-i * 5], double[i * 5]): success [26ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTests(double[-i * 5], double[i + 1]): success [9ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [74ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTests(double[-i * 5], AbstractVectorTest$1@27211610): success [1ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [2ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [12ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.powDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.shuffleEqualsDoubleMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [369ms]
test DoubleMaxVectorTests.shuffleEqualsDoubleMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [29ms]
test DoubleMaxVectorTests.shuffleMiscellaneousDoubleMaxVectorTestsSmokeTest(shuffle[random]): success [48ms]
test DoubleMaxVectorTests.shuffleTest(): success [1129ms]
test DoubleMaxVectorTests.shuffleToStringDoubleMaxVectorTestsSmokeTest(shuffle[random]): success [65ms]
test DoubleMaxVectorTests.sliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], double[i * 5]): success [1000ms]
test DoubleMaxVectorTests.sliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], double[i + 1]): success [18ms]
test DoubleMaxVectorTests.sliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [287ms]
test DoubleMaxVectorTests.sliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], AbstractVectorTest$1@27211610): success [38ms]
test DoubleMaxVectorTests.sliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [16ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [80ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [6ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [187ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [2ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [2ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [58ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[true]): success [4ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [4ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [3ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [59ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[false]): success [1ms]
test DoubleMaxVectorTests.sliceDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test DoubleMaxVectorTests.sliceUnaryDoubleMaxVectorTests(double[-i * 5]): success [271ms]
test DoubleMaxVectorTests.sliceUnaryDoubleMaxVectorTests(double[i * 5]): success [3ms]
test DoubleMaxVectorTests.sliceUnaryDoubleMaxVectorTests(double[i + 1]): success [110ms]
test DoubleMaxVectorTests.sliceUnaryDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test DoubleMaxVectorTests.sliceUnaryDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [12ms]
test DoubleMaxVectorTests.sliceUnaryDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [34ms]
test DoubleMaxVectorTests.smokeTest1(): success [0ms]
test DoubleMaxVectorTests.smokeTest2(): success [62ms]
test DoubleMaxVectorTests.sqrtDoubleMaxVectorTests(double[-i * 5]): success [15ms]
test DoubleMaxVectorTests.sqrtDoubleMaxVectorTests(double[i * 5]): success [2ms]
test DoubleMaxVectorTests.sqrtDoubleMaxVectorTests(double[i + 1]): success [65ms]
test DoubleMaxVectorTests.sqrtDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.sqrtDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.sqrtDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTests(double[-i * 5], double[i * 5]): success [7ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTests(double[-i * 5], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTests(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610, mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610, mask[true]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [37ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610, mask[false]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [7ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@27211610): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [5ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[true]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[false]): success [0ms]
test DoubleMaxVectorTests.subDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test DoubleMaxVectorTests.toIntArrayDoubleMaxVectorTestsSmokeTest(double[-i * 5]): success [8ms]
test DoubleMaxVectorTests.toIntArrayDoubleMaxVectorTestsSmokeTest(double[i * 5]): success [5ms]
test DoubleMaxVectorTests.toIntArrayDoubleMaxVectorTestsSmokeTest(double[i + 1]): success [5ms]
test DoubleMaxVectorTests.toIntArrayDoubleMaxVectorTestsSmokeTest(double[intCornerCaseValue(i)]): success [5ms]
test DoubleMaxVectorTests.toLongArrayDoubleMaxVectorTestsSmokeTest(double[-i * 5]): success [0ms]
test DoubleMaxVectorTests.toLongArrayDoubleMaxVectorTestsSmokeTest(double[i * 5]): success [2ms]
test DoubleMaxVectorTests.toLongArrayDoubleMaxVectorTestsSmokeTest(double[i + 1]): success [0ms]
test DoubleMaxVectorTests.toLongArrayDoubleMaxVectorTestsSmokeTest(double[cornerCaseValue(i)]): success [0ms]
test DoubleMaxVectorTests.toStringDoubleMaxVectorTestsSmokeTest(double[-i * 5]): success [21ms]
test DoubleMaxVectorTests.toStringDoubleMaxVectorTestsSmokeTest(double[i * 5]): success [1ms]
test DoubleMaxVectorTests.toStringDoubleMaxVectorTestsSmokeTest(double[i + 1]): success [16ms]
test DoubleMaxVectorTests.toStringDoubleMaxVectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [1ms]
test DoubleMaxVectorTests.toStringDoubleMaxVectorTestsSmokeTest(AbstractVectorTest$1@27211610): success [1ms]
test DoubleMaxVectorTests.toStringDoubleMaxVectorTestsSmokeTest(double[cornerCaseValue(i)]): success [33ms]
test DoubleMaxVectorTests.unsliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], double[i * 5]): success [283ms]
test DoubleMaxVectorTests.unsliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], double[i + 1]): success [11ms]
test DoubleMaxVectorTests.unsliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [141ms]
test DoubleMaxVectorTests.unsliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], AbstractVectorTest$1@27211610): success [1ms]
test DoubleMaxVectorTests.unsliceBinaryDoubleMaxVectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [489ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [81ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [341ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[i % 2]): success [196ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [81ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [125ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [81ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [81ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[true]): success [192ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [130ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [80ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [80ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [81ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], AbstractVectorTest$1@27211610, mask[false]): success [81ms]
test DoubleMaxVectorTests.unsliceDoubleMaxVectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [93ms]
test DoubleMaxVectorTests.unsliceUnaryDoubleMaxVectorTests(double[-i * 5]): success [260ms]
test DoubleMaxVectorTests.unsliceUnaryDoubleMaxVectorTests(double[i * 5]): success [2ms]
test DoubleMaxVectorTests.unsliceUnaryDoubleMaxVectorTests(double[i + 1]): success [110ms]
test DoubleMaxVectorTests.unsliceUnaryDoubleMaxVectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test DoubleMaxVectorTests.unsliceUnaryDoubleMaxVectorTests(AbstractVectorTest$1@27211610): success [1ms]
test DoubleMaxVectorTests.unsliceUnaryDoubleMaxVectorTests(double[cornerCaseValue(i)]): success [1ms]
test DoubleMaxVectorTests.viewAsFloatingLanesTest(): success [19ms]
test DoubleMaxVectorTests.viewAsIntegeralLanesTest(): success [22ms]
test DoubleMaxVectorTests.withDoubleMaxVectorTests(double[-i * 5], double[i * 5]): success [19ms]
test DoubleMaxVectorTests.withDoubleMaxVectorTests(double[-i * 5], double[i + 1]): success [18ms]
test DoubleMaxVectorTests.withDoubleMaxVectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [98ms]
test DoubleMaxVectorTests.withDoubleMaxVectorTests(double[-i * 5], AbstractVectorTest$1@27211610): success [17ms]
test DoubleMaxVectorTests.withDoubleMaxVectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [17ms]

===============================================
jdk/incubator/vector/DoubleMaxVectorTests.java
Total tests run: 3205, Passes: 3204, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/15 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/DoubleMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/DoubleMaxVectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/DoubleMaxVectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/DoubleMaxVectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/DoubleMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/jdk/incubator/vector/DoubleMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/15/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/DoubleMaxVectorTests.d/testng.0.jta jdk/incubator/vector/DoubleMaxVectorTests.java false DoubleMaxVectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Byte256VectorTests.java
Passed: jdk/incubator/vector/Float128VectorTests.java
Passed: jdk/incubator/vector/Byte64VectorTests.java
Passed: jdk/incubator/vector/ByteMaxVectorTests.java
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float512VectorTests.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/FloatMaxVectorTests.java
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorTests.java
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int128VectorTests.java
Passed: jdk/incubator/vector/Int512VectorTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/MethodOverideTest.java
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long256VectorTests.java
Passed: jdk/incubator/vector/IntMaxVectorTests.java
Passed: jdk/incubator/vector/Long512VectorTests.java
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
TEST: jdk/incubator/vector/LongMaxVectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.88 seconds
messages:
command: build LongMaxVectorTests
reason: Named class compiled on demand
started: Thu Apr 17 03:22:52 IST 2025
Test directory:
  compile: LongMaxVectorTests
finished: Thu Apr 17 03:22:53 IST 2025
elapsed time (seconds): 0.88

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.879 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 03:22:52 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 14
Process id: 2137293
finished: Thu Apr 17 03:22:53 IST 2025
elapsed time (seconds): 0.879
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/LongMaxVectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/10 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/LongMaxVectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/LongMaxVectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/LongMaxVectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation LongMaxVectorTests 
TIME:   44.822 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation LongMaxVectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation LongMaxVectorTests 
started: Thu Apr 17 03:22:53 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2140510
finished: Thu Apr 17 03:23:38 IST 2025
elapsed time (seconds): 44.822
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -6883333140250929821
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-6883333140250929821" to command line.
test LongMaxVectorTests.ABSLongMaxVectorTests(long[-i * 5]): success [651ms]
test LongMaxVectorTests.ABSLongMaxVectorTests(long[i * 5]): success [9ms]
test LongMaxVectorTests.ABSLongMaxVectorTests(long[i + 1]): success [52ms]
test LongMaxVectorTests.ABSLongMaxVectorTests(long[cornerCaseValue(i)]): success [4ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[-i * 5], mask[i % 2]): success [241ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i * 5], mask[i % 2]): success [4ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i + 1], mask[i % 2]): success [71ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[-i * 5], mask[true]): success [28ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[cornerCaseValue(i)], mask[false]): success [21ms]
test LongMaxVectorTests.ADDLongMaxVectorTests(long[-i * 5], long[i * 5]): success [236ms]
test LongMaxVectorTests.ADDLongMaxVectorTests(long[-i * 5], long[i + 1]): success [3ms]
test LongMaxVectorTests.ADDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [62ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [16ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [2ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [8ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [22ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [13ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [4ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [8ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [137ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): failure [34ms]
java.lang.AssertionError: at index #81, input1 = -405, input2 = 82, mask = false expected [-405] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:797)
	at LongMaxVectorTests.assertArraysEquals(LongMaxVectorTests.java:417)
	at LongMaxVectorTests.assertArraysEquals(LongMaxVectorTests.java:407)
	at LongMaxVectorTests.ADDLongMaxVectorTestsMasked(LongMaxVectorTests.java:1525)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [74ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [12ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[-i * 5]): success [19ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[i * 5]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[i + 1]): success [1ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[-i * 5], mask[i % 2]): success [9ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [13ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[-i * 5]): success [112ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[i * 5]): success [85ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[i + 1]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[cornerCaseValue(i)]): success [7ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[i % 2]): success [61ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i * 5], mask[i % 2]): success [100ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTests(long[-i * 5], long[i * 5]): success [213ms]
test LongMaxVectorTests.ANDLongMaxVectorTests(long[-i * 5], long[i + 1]): success [4ms]
test LongMaxVectorTests.ANDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [70ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [4ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [16ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [6ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [8ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [8ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [70ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[-i * 5]): success [129ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[i * 5]): success [86ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[i + 1]): success [0ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[i % 2]): success [21ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i * 5], mask[i % 2]): success [100ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [12ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTests(long[-i * 5], long[i * 5]): success [157ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTests(long[-i * 5], long[i + 1]): success [5ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [73ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [130ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [78ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTests(long[-i * 5], long[i * 5]): success [119ms]
test LongMaxVectorTests.ASHRLongMaxVectorTests(long[-i * 5], long[i + 1]): success [3ms]
test LongMaxVectorTests.ASHRLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [69ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [112ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [5ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [77ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShift(long[-i * 5], long[i * 5]): success [241ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShift(long[-i * 5], long[i + 1]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [61ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[-i * 5]): success [7ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[i * 5]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[i + 1]): success [54ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [62ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [16ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [51ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [3ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [122ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [3ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [94ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [1ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [491ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [4ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [26ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [6ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [1ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [12ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

sts(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[-i * 5], mask[i % 2]): success [131ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i * 5], mask[i % 2]): success [1ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i + 1], mask[i % 2]): success [77ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTests(long[-i * 5], long[i * 5]): success [72ms]
test LongMaxVectorTests.divLongMaxVectorTests(long[-i * 5], long[i + 1]): success [4ms]
test LongMaxVectorTests.divLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [90ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [7ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [86ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [7ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [103ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [111ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i]): success [97ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i + 1]): success [38ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i - 2]): success [2ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[cornerCaseValue(i)]): success [2ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [63ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[-i * 5], mask[i % 2]): success [125ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i * 5], mask[i % 2]): success [1ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i + 1], mask[i % 2]): success [73ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[-i * 5]): success [7ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[i * 5]): success [7ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[i + 1]): success [104ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[-i * 5]): success [43ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[i * 5]): success [2ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[i + 1]): success [2ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [2ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(0): success [86ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(-1): success [4ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(1): success [17ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(2): success [2ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(-2): success [3ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(0): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(-1): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(1): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(2): success [8ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(-2): success [2ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(0): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(32): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(37): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1024): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1025): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1029): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(0): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(32): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(37): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1024): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1025): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1029): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i]): success [93ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i - 2]): success [39ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i - 2]): success [2ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[cornerCaseValue(i)]): success [2ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i]): success [1ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [1ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [1ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [1ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [1ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [1ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [1ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [67ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.maskAndLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test LongMaxVectorTests.maskAndLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskAndNotLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test LongMaxVectorTests.maskAndNotLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskCompressLongMaxVectorTestsSmokeTest(mask[i % 2]): success [147ms]
test LongMaxVectorTests.maskCompressLongMaxVectorTestsSmokeTest(mask[true]): success [0ms]
test LongMaxVectorTests.maskCompressLongMaxVectorTestsSmokeTest(mask[false]): success [105ms]
test LongMaxVectorTests.maskEqLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test LongMaxVectorTests.maskEqLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskEqualsLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test LongMaxVectorTests.maskEqualsLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskFirstTrueLongMaxVectorTestsSmokeTest(mask[i % 2]): success [71ms]
test LongMaxVectorTests.maskFirstTrueLongMaxVectorTestsSmokeTest(mask[true]): success [32ms]
test LongMaxVectorTests.maskFirstTrueLongMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test LongMaxVectorTests.maskHashCodeLongMaxVectorTestsSmokeTest(mask[i % 2]): success [0ms]
test LongMaxVectorTests.maskHashCodeLongMaxVectorTestsSmokeTest(mask[true]): success [0ms]
test LongMaxVectorTests.maskHashCodeLongMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test LongMaxVectorTests.maskLastTrueLongMaxVectorTestsSmokeTest(mask[i % 2]): success [88ms]
test LongMaxVectorTests.maskLastTrueLongMaxVectorTestsSmokeTest(mask[true]): success [32ms]
test LongMaxVectorTests.maskLastTrueLongMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test LongMaxVectorTests.maskOrLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test LongMaxVectorTests.maskOrLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskTrueCountLongMaxVectorTestsSmokeTest(mask[i % 2]): success [45ms]
test LongMaxVectorTests.maskTrueCountLongMaxVectorTestsSmokeTest(mask[true]): success [32ms]
test LongMaxVectorTests.maskTrueCountLongMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test LongMaxVectorTests.maskXorLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test LongMaxVectorTests.maskXorLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTests(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.maxLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.maxLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTests(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.minLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.minLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [15ms]
test LongMaxVectorTests.mulLongMaxVectorTests(long[-i * 5], long[i * 5]): success [6ms]
test LongMaxVectorTests.mulLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[-i * 5]): success [14ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[i * 5]): success [2ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[i + 1]): success [45ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[-i * 5]): success [18ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[i * 5]): success [2ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[i + 1]): success [50ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTests(long[-i * 5], long[i * 5]): success [8ms]
test LongMaxVectorTests.orLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test LongMaxVectorTests.orLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.shuffleEqualsLongMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [420ms]
test LongMaxVectorTests.shuffleEqualsLongMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [60ms]
test LongMaxVectorTests.shuffleMiscellaneousLongMaxVectorTestsSmokeTest(shuffle[random]): success [42ms]
test LongMaxVectorTests.shuffleTest(): success [311ms]
test LongMaxVectorTests.shuffleToStringLongMaxVectorTestsSmokeTest(shuffle[random]): success [78ms]
test LongMaxVectorTests.sliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i * 5]): success [455ms]
test LongMaxVectorTests.sliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i + 1]): success [3ms]
test LongMaxVectorTests.sliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [121ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [60ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [150ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[-i * 5]): success [179ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[i * 5]): success [2ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[i + 1]): success [138ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.smokeTest1(): success [0ms]
test LongMaxVectorTests.smokeTest2(): success [50ms]
test LongMaxVectorTests.subLongMaxVectorTests(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[-i * 5]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[i * 5]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[i + 1]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[-i * 5]): success [5ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[i * 5]): success [5ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[i + 1]): success [7ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [5ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[-i * 5]): success [0ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[i * 5]): success [0ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[i + 1]): success [4ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[-i * 5]): success [8ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[i * 5]): success [41ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[i + 1]): success [0ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [17ms]
test LongMaxVectorTests.unsliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i * 5]): success [189ms]
test LongMaxVectorTests.unsliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i + 1]): success [125ms]
test LongMaxVectorTests.unsliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [232ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [393ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [80ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [306ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [78ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [78ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [78ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [102ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [118ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [185ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[-i * 5]): success [174ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[i * 5]): success [2ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[i + 1]): success [100ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.viewAsFloatingLanesTest(): success [235ms]
test LongMaxVectorTests.viewAsIntegeralLanesTest(): success [0ms]
test LongMaxVectorTests.withLongMaxVectorTests(long[-i * 5], long[i * 5]): success [18ms]
test LongMaxVectorTests.withLongMaxVectorTests(long[-i * 5], long[i + 1]): success [17ms]
test LongMaxVectorTests.withLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [91ms]

===============================================
jdk/incubator/vector/LongMaxVectorTests.java
Total tests run: 3317, Passes: 3316, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/10 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/LongMaxVectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/LongMaxVectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/LongMaxVectorTests.d/testng.0.jta jdk/incubator/vector/LongMaxVectorTests.java false LongMaxVectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/UnalignedHeapTest.java
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/Short128VectorTests.java
Passed: jdk/incubator/vector/VectorMathTest.java
Passed: jdk/incubator/vector/Short512VectorTests.java
Passed: jdk/incubator/vector/Short256VectorTests.java
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/Double128VectorTests.java
Passed: jdk/incubator/vector/Short64VectorTests.java
Passed: jdk/incubator/vector/ShortMaxVectorTests.java
Passed: jdk/incubator/vector/Vector512ConversionTests.java
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#id0
Passed: jdk/incubator/vector/Vector256ConversionTests.java
Passed: jdk/incubator/vector/Vector128ConversionTests.java
Passed: jdk/incubator/vector/Vector64ConversionTests.java#id0
Passed: jdk/incubator/vector/Long128VectorTests.java
Passed: jdk/incubator/vector/VectorReshapeTests.java
Passed: jdk/incubator/vector/Float64VectorTests.java
Passed: jdk/incubator/vector/Double64VectorTests.java
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#Z
Passed: jdk/incubator/vector/Int64VectorTests.java
Passed: jdk/incubator/vector/Long64VectorTests.java
Test results: passed: 77; failed: 3; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_incubator_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector
Finished running test 'jtreg:test/jdk/jdk/incubator/vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_incubator_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk/jdk/incubator/vector                  83    77     3     0     3 <<
==============================
TEST FAILURE

