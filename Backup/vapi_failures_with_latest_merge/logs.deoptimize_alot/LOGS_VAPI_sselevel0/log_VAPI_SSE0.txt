Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/jdk/incubator/vector/', will run:
* jtreg:test/jdk/jdk/incubator/vector
Clean up dirs for jtreg_test_jdk_jdk_incubator_vector

Running test 'jtreg:test/jdk/jdk/incubator/vector'
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorTests.java
Passed: jdk/incubator/vector/Double512VectorTests.java
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorTests.java
Passed: jdk/incubator/vector/Double128VectorTests.java
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorTests.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float512VectorTests.java
Passed: jdk/incubator/vector/Float256VectorTests.java
Passed: jdk/incubator/vector/FloatMaxVectorTests.java
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
--------------------------------------------------
TEST: jdk/incubator/vector/ByteMaxVectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   27.385 seconds
messages:
command: build ByteMaxVectorTests
reason: Named class compiled on demand
started: Wed Apr 16 16:42:55 IST 2025
Test directory:
  compile: ByteMaxVectorTests
finished: Wed Apr 16 16:43:23 IST 2025
elapsed time (seconds): 27.385

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   27.379 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/ByteMaxVectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 16:42:55 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 14
Process id: 1414055
finished: Wed Apr 16 16:43:23 IST 2025
elapsed time (seconds): 27.379
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/ByteMaxVectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/ByteMaxVectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/ByteMaxVectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/ByteMaxVectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/ByteMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/ByteMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/ByteMaxVectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/ByteMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/ByteMaxVectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation ByteMaxVectorTests 
TIME:   436.413 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation ByteMaxVectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation ByteMaxVectorTests 
started: Wed Apr 16 16:43:23 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1415174
finished: Wed Apr 16 16:50:39 IST 2025
elapsed time (seconds): 436.413
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -5226795736062051262
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-5226795736062051262" to command line.
test ByteMaxVectorTests.ABSByteMaxVectorTests(byte[-i * 5]): success [595ms]
test ByteMaxVectorTests.ABSByteMaxVectorTests(byte[i * 5]): success [6ms]
test ByteMaxVectorTests.ABSByteMaxVectorTests(byte[i + 1]): success [52ms]
test ByteMaxVectorTests.ABSByteMaxVectorTests(byte[cornerCaseValue(i)]): success [7ms]
test ByteMaxVectorTests.ABSMaskedByteMaxVectorTests(byte[-i * 5], mask[i % 2]): success [237ms]
test ByteMaxVectorTests.ABSMaskedByteMaxVectorTests(byte[i * 5], mask[i % 2]): success [6ms]
test ByteMaxVectorTests.ABSMaskedByteMaxVectorTests(byte[i + 1], mask[i % 2]): success [72ms]
test ByteMaxVectorTests.ABSMaskedByteMaxVectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test ByteMaxVectorTests.ABSMaskedByteMaxVectorTests(byte[-i * 5], mask[true]): success [3ms]
test ByteMaxVectorTests.ABSMaskedByteMaxVectorTests(byte[i * 5], mask[true]): success [2ms]
test ByteMaxVectorTests.ABSMaskedByteMaxVectorTests(byte[i + 1], mask[true]): success [61ms]
test ByteMaxVectorTests.ABSMaskedByteMaxVectorTests(byte[cornerCaseValue(i)], mask[true]): success [2ms]
test ByteMaxVectorTests.ABSMaskedByteMaxVectorTests(byte[-i * 5], mask[false]): success [1ms]
test ByteMaxVectorTests.ABSMaskedByteMaxVectorTests(byte[i * 5], mask[false]): success [9ms]
test ByteMaxVectorTests.ABSMaskedByteMaxVectorTests(byte[i + 1], mask[false]): success [1ms]
test ByteMaxVectorTests.ABSMaskedByteMaxVectorTests(byte[cornerCaseValue(i)], mask[false]): success [1ms]
test ByteMaxVectorTests.ADDByteMaxVectorTests(byte[-i * 5], byte[i * 5]): success [221ms]
test ByteMaxVectorTests.ADDByteMaxVectorTests(byte[-i * 5], byte[i + 1]): success [6ms]
test ByteMaxVectorTests.ADDByteMaxVectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [65ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5]): success [71ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1]): success [2ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [3ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [31ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [7ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [7ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [10ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [3ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [45ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [3ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [3ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [118ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [3ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [2ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test ByteMaxVectorTests.ADDByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test ByteMaxVectorTests.ADDReduceByteMaxVectorTests(byte[-i * 5]): success [116ms]
test ByteMaxVectorTests.ADDReduceByteMaxVectorTests(byte[i * 5]): success [63ms]
test ByteMaxVectorTests.ADDReduceByteMaxVectorTests(byte[i + 1]): success [3ms]
test ByteMaxVectorTests.ADDReduceByteMaxVectorTests(byte[cornerCaseValue(i)]): success [1ms]
test ByteMaxVectorTests.ADDReduceByteMaxVectorTestsMasked(byte[-i * 5], mask[i % 2]): success [82ms]
test ByteMaxVectorTests.ADDReduceByteMaxVectorTestsMasked(byte[i * 5], mask[i % 2]): success [81ms]
test ByteMaxVectorTests.ADDReduceByteMaxVectorTestsMasked(byte[i + 1], mask[i % 2]): success [2ms]
test ByteMaxVectorTests.ADDReduceByteMaxVectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test ByteMaxVectorTests.ADDReduceByteMaxVectorTestsMasked(byte[-i * 5], mask[true]): success [16ms]
test ByteMaxVectorTests.ADDReduceByteMaxVectorTestsMasked(byte[i * 5], mask[true]): success [2ms]
test ByteMaxVectorTests.ADDReduceByteMaxVectorTestsMasked(byte[i + 1], mask[true]): success [2ms]
test ByteMaxVectorTests.ADDReduceByteMaxVectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [2ms]
test ByteMaxVectorTests.ADDReduceByteMaxVectorTestsMasked(byte[-i * 5], mask[false]): success [2ms]
test ByteMaxVectorTests.ADDReduceByteMaxVectorTestsMasked(byte[i * 5], mask[false]): success [2ms]
test ByteMaxVectorTests.ADDReduceByteMaxVectorTestsMasked(byte[i + 1], mask[false]): success [2ms]
test ByteMaxVectorTests.ADDReduceByteMaxVectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [2ms]
test ByteMaxVectorTests.ADDReduceLongByteMaxVectorTests(byte[-i * 5]): success [9ms]
test ByteMaxVectorTests.ADDReduceLongByteMaxVectorTests(byte[i * 5]): success [11ms]
test ByteMaxVectorTests.ADDReduceLongByteMaxVectorTests(byte[i + 1]): success [0ms]
test ByteMaxVectorTests.ADDReduceLongByteMaxVectorTests(byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.ADDReduceLongByteMaxVectorTestsMasked(byte[-i * 5], mask[i % 2]): success [12ms]
test ByteMaxVectorTests.ADDReduceLongByteMaxVectorTestsMasked(byte[i * 5], mask[i % 2]): success [1ms]
test ByteMaxVectorTests.ADDReduceLongByteMaxVectorTestsMasked(byte[i + 1], mask[i % 2]): success [1ms]
test ByteMaxVectorTests.ADDReduceLongByteMaxVectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test ByteMaxVectorTests.ADDReduceLongByteMaxVectorTestsMasked(byte[-i * 5], mask[true]): success [13ms]
test ByteMaxVectorTests.ADDReduceLongByteMaxVectorTestsMasked(byte[i * 5], mask[true]): success [0ms]
test ByteMaxVectorTests.ADDReduceLongByteMaxVectorTestsMasked(byte[i + 1], mask[true]): success [0ms]
test ByteMaxVectorTests.ADDReduceLongByteMaxVectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test ByteMaxVectorTests.ADDReduceLongByteMaxVectorTestsMasked(byte[-i * 5], mask[false]): success [0ms]
test ByteMaxVectorTests.ADDReduceLongByteMaxVectorTestsMasked(byte[i * 5], mask[false]): success [0ms]
test ByteMaxVectorTests.ADDReduceLongByteMaxVectorTestsMasked(byte[i + 1], mask[false]): success [0ms]
test ByteMaxVectorTests.ADDReduceLongByteMaxVectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test ByteMaxVectorTests.ANDByteMaxVectorTests(byte[-i * 5], byte[i * 5]): success [198ms]
test ByteMaxVectorTests.ANDByteMaxVectorTests(byte[-i * 5], byte[i + 1]): success [6ms]
test ByteMaxVectorTests.ANDByteMaxVectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [60ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [8ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [17ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [4ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [3ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [3ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [2ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [2ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [7ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [2ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [8ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [4ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [66ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [15ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [30ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [4ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test ByteMaxVectorTests.ANDByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test ByteMaxVectorTests.ANDReduceByteMaxVectorTests(byte[-i * 5]): success [130ms]
test ByteMaxVectorTests.ANDReduceByteMaxVectorTests(byte[i * 5]): success [62ms]
test ByteMaxVectorTests.ANDReduceByteMaxVectorTests(byte[i + 1]): success [1ms]
test ByteMaxVectorTests.ANDReduceByteMaxVectorTests(byte[cornerCaseValue(i)]): success [1ms]
test ByteMaxVectorTests.ANDReduceByteMaxVectorTestsMasked(byte[-i * 5], mask[i % 2]): success [20ms]
test ByteMaxVectorTests.ANDReduceByteMaxVectorTestsMasked(byte[i * 5], mask[i % 2]): success [81ms]
test ByteMaxVectorTests.ANDReduceByteMaxVectorTestsMasked(byte[i + 1], mask[i % 2]): success [3ms]
test ByteMaxVectorTests.ANDReduceByteMaxVectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test ByteMaxVectorTests.ANDReduceByteMaxVectorTestsMasked(byte[-i * 5], mask[true]): success [15ms]
test ByteMaxVectorTests.ANDReduceByteMaxVectorTestsMasked(byte[i * 5], mask[true]): success [1ms]
test ByteMaxVectorTests.ANDReduceByteMaxVectorTestsMasked(byte[i + 1], mask[true]): success [1ms]
test ByteMaxVectorTests.ANDReduceByteMaxVectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [2ms]
test ByteMaxVectorTests.ANDReduceByteMaxVectorTestsMasked(byte[-i * 5], mask[false]): success [2ms]
test ByteMaxVectorTests.ANDReduceByteMaxVectorTestsMasked(byte[i * 5], mask[false]): success [2ms]
test ByteMaxVectorTests.ANDReduceByteMaxVectorTestsMasked(byte[i + 1], mask[false]): success [2ms]
test ByteMaxVectorTests.ANDReduceByteMaxVectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [3ms]
test ByteMaxVectorTests.AND_NOTByteMaxVectorTests(byte[-i * 5], byte[i * 5]): success [204ms]
test ByteMaxVectorTests.AND_NOTByteMaxVectorTests(byte[-i * 5], byte[i + 1]): success [5ms]
test ByteMaxVectorTests.AND_NOTByteMaxVectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [113ms]
test ByteMaxVectorTests.AND_NOTByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [128ms]
test ByteMaxVectorTests.AND_NOTByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [3ms]
test ByteMaxVectorTests.AND_NOTByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [75ms]
test ByteMaxVectorTests.AND_NOTByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [3ms]
test ByteMaxVectorTests.AND_NOTByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [2ms]
test ByteMaxVectorTests.AND_NOTByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [3ms]
test ByteMaxVectorTests.AND_NOTByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [2ms]
test ByteMaxVectorTests.AND_NOTByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [2ms]
test ByteMaxVectorTests.AND_NOTByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTests(byte[-i * 5], byte[i * 5]): success [150ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTests(byte[-i * 5], byte[i + 1]): success [3ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [105ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [140ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [3ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [75ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [4ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [3ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [4ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [2ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [2ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShift(byte[-i * 5], byte[i * 5]): success [233ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShift(byte[-i * 5], byte[i + 1]): success [4ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShift(byte[-i * 5], byte[cornerCaseValue(i)]): success [55ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftConst(byte[-i * 5]): success [44ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftConst(byte[i * 5]): success [4ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftConst(byte[i + 1]): success [49ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftConst(byte[cornerCaseValue(i)]): success [2ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [128ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [5ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [58ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[true]): success [3ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[true]): success [3ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [3ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[false]): success [2ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[false]): success [2ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[i % 2]): success [15ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMaskedConst(byte[i * 5], mask[i % 2]): success [5ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMaskedConst(byte[i + 1], mask[i % 2]): success [50ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[true]): success [6ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMaskedConst(byte[i * 5], mask[true]): success [1ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMaskedConst(byte[i + 1], mask[true]): success [1ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[true]): success [1ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[false]): success [1ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMaskedConst(byte[i * 5], mask[false]): success [2ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMaskedConst(byte[i + 1], mask[false]): success [1ms]
test ByteMaxVectorTests.ASHRByteMaxVectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[false]): success [1ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTests(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [143ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTests(byte[-i * 5], byte[i * 5], byte[i * 5]): success [3ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTests(byte[-i * 5], byte[i * 5], byte[i + 1]): success [94ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTests(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTests(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [1ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTests(byte[-i * 5], byte[i + 1], byte[i * 5]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTests(byte[-i * 5], byte[i + 1], byte[i + 1]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTests(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [393ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [4ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [5ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [80ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [7ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [1ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [7ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [35ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [61ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [56ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [4ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [1ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.BITWISE_BLENDByteMaxVectorTestsBroadcastS

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

seBlendByteMaxVectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [0ms]
test ByteMaxVectorTests.bitwiseBlendByteMaxVectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.bitwiseBlendByteMaxVectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [0ms]
test ByteMaxVectorTests.bitwiseBlendByteMaxVectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [0ms]
test ByteMaxVectorTests.bitwiseBlendByteMaxVectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [0ms]
test ByteMaxVectorTests.bitwiseBlendByteMaxVectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.bitwiseBlendByteMaxVectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [0ms]
test ByteMaxVectorTests.bitwiseBlendByteMaxVectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [0ms]
test ByteMaxVectorTests.bitwiseBlendByteMaxVectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [0ms]
test ByteMaxVectorTests.bitwiseBlendByteMaxVectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.bitwiseDivByZeroSmokeTest(): success [18ms]
test ByteMaxVectorTests.blendByteMaxVectorTests(byte[-i * 5], byte[i * 5], mask[i % 2]): success [23ms]
test ByteMaxVectorTests.blendByteMaxVectorTests(byte[-i * 5], byte[i + 1], mask[i % 2]): success [3ms]
test ByteMaxVectorTests.blendByteMaxVectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [58ms]
test ByteMaxVectorTests.blendByteMaxVectorTests(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test ByteMaxVectorTests.blendByteMaxVectorTests(byte[-i * 5], byte[i + 1], mask[true]): success [2ms]
test ByteMaxVectorTests.blendByteMaxVectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test ByteMaxVectorTests.blendByteMaxVectorTests(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test ByteMaxVectorTests.blendByteMaxVectorTests(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test ByteMaxVectorTests.blendByteMaxVectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test ByteMaxVectorTests.blendByteMaxVectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [36ms]
test ByteMaxVectorTests.blendByteMaxVectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [2ms]
test ByteMaxVectorTests.blendByteMaxVectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [61ms]
test ByteMaxVectorTests.blendByteMaxVectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test ByteMaxVectorTests.blendByteMaxVectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test ByteMaxVectorTests.blendByteMaxVectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test ByteMaxVectorTests.blendByteMaxVectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [2ms]
test ByteMaxVectorTests.blendByteMaxVectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test ByteMaxVectorTests.blendByteMaxVectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test ByteMaxVectorTests.compressByteMaxVectorTests(byte[-i * 5], mask[i % 2]): success [260ms]
test ByteMaxVectorTests.compressByteMaxVectorTests(byte[i * 5], mask[i % 2]): success [136ms]
test ByteMaxVectorTests.compressByteMaxVectorTests(byte[i + 1], mask[i % 2]): success [209ms]
test ByteMaxVectorTests.compressByteMaxVectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [136ms]
test ByteMaxVectorTests.compressByteMaxVectorTests(byte[-i * 5], mask[true]): success [81ms]
test ByteMaxVectorTests.compressByteMaxVectorTests(byte[i * 5], mask[true]): success [3ms]
test ByteMaxVectorTests.compressByteMaxVectorTests(byte[i + 1], mask[true]): success [3ms]
test ByteMaxVectorTests.compressByteMaxVectorTests(byte[cornerCaseValue(i)], mask[true]): success [3ms]
test ByteMaxVectorTests.compressByteMaxVectorTests(byte[-i * 5], mask[false]): success [8ms]
test ByteMaxVectorTests.compressByteMaxVectorTests(byte[i * 5], mask[false]): success [8ms]
test ByteMaxVectorTests.compressByteMaxVectorTests(byte[i + 1], mask[false]): success [8ms]
test ByteMaxVectorTests.compressByteMaxVectorTests(byte[cornerCaseValue(i)], mask[false]): success [7ms]
test ByteMaxVectorTests.divByteMaxVectorTests(byte[-i * 5], byte[i * 5]): success [224ms]
test ByteMaxVectorTests.divByteMaxVectorTests(byte[-i * 5], byte[i + 1]): success [137ms]
test ByteMaxVectorTests.divByteMaxVectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [246ms]
test ByteMaxVectorTests.divByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [15ms]
test ByteMaxVectorTests.divByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [96ms]
test ByteMaxVectorTests.divByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test ByteMaxVectorTests.divByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test ByteMaxVectorTests.divByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [3ms]
test ByteMaxVectorTests.divByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [3ms]
test ByteMaxVectorTests.divByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [2ms]
test ByteMaxVectorTests.divByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [18ms]
test ByteMaxVectorTests.divByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test ByteMaxVectorTests.divByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [10ms]
test ByteMaxVectorTests.divByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test ByteMaxVectorTests.divByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test ByteMaxVectorTests.divByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [394ms]
test ByteMaxVectorTests.divByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [270ms]
test ByteMaxVectorTests.divByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): failure [211ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lambda$binaryOperationsMF$7(ByteVector.java:956)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.bOpTemplateMF(ByteVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.ByteMaxVector.bOpMF(ByteMaxVector.java:209)
	at jdk.incubator.vector/jdk.incubator.vector.ByteMaxVector.bOpMF(ByteMaxVector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lambda$binaryOperationsMF$6(ByteVector.java:956)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lanewiseTemplate(ByteVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.ByteMaxVector.lanewise(ByteMaxVector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.ByteMaxVector.lanewise(ByteMaxVector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.div(ByteVector.java:1729)
	at ByteMaxVectorTests.divByteMaxVectorTestsMasked(ByteMaxVectorTests.java:1801)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test ByteMaxVectorTests.divByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [268ms]
test ByteMaxVectorTests.divByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [268ms]
test ByteMaxVectorTests.divByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [267ms]
test ByteMaxVectorTests.divByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [273ms]
test ByteMaxVectorTests.divByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [267ms]
test ByteMaxVectorTests.divByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [267ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i], byte[i]): success [230ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i], byte[i - length / 2]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i], byte[i + 1]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i], byte[i - 2]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i], byte[zigZag(i)]): success [137ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i], byte[cornerCaseValue(i)]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i - length / 2], byte[i]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i - length / 2], byte[i - length / 2]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i - length / 2], byte[i + 1]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i - length / 2], byte[i - 2]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i - length / 2], byte[zigZag(i)]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [142ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i + 1], byte[i]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i + 1], byte[i - length / 2]): success [135ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i + 1], byte[i + 1]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i + 1], byte[i - 2]): success [156ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i + 1], byte[zigZag(i)]): success [137ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i - 2], byte[i]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i - 2], byte[i - length / 2]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i - 2], byte[i + 1]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i - 2], byte[i - 2]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i - 2], byte[zigZag(i)]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[zigZag(i)], byte[i]): success [137ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[zigZag(i)], byte[i - length / 2]): success [137ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[zigZag(i)], byte[i + 1]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[zigZag(i)], byte[i - 2]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[cornerCaseValue(i)], byte[i]): success [135ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [136ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i]): success [2ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - length / 2]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i + 1]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - 2]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i], byte[zigZag(i)]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i + 1]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - 2]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i]): success [61ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - length / 2]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i + 1]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - 2]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[zigZag(i)]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - length / 2]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i + 1]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - 2]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[zigZag(i)]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i + 1]): success [9ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - 2]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [1ms]
test ByteMaxVectorTests.eqByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [1ms]
test ByteMaxVectorTests.expandByteMaxVectorTests(byte[-i * 5], mask[i % 2]): success [203ms]
test ByteMaxVectorTests.expandByteMaxVectorTests(byte[i * 5], mask[i % 2]): success [135ms]
test ByteMaxVectorTests.expandByteMaxVectorTests(byte[i + 1], mask[i % 2]): success [204ms]
test ByteMaxVectorTests.expandByteMaxVectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [135ms]
test ByteMaxVectorTests.expandByteMaxVectorTests(byte[-i * 5], mask[true]): success [20ms]
test ByteMaxVectorTests.expandByteMaxVectorTests(byte[i * 5], mask[true]): success [3ms]
test ByteMaxVectorTests.expandByteMaxVectorTests(byte[i + 1], mask[true]): success [3ms]
test ByteMaxVectorTests.expandByteMaxVectorTests(byte[cornerCaseValue(i)], mask[true]): success [3ms]
test ByteMaxVectorTests.expandByteMaxVectorTests(byte[-i * 5], mask[false]): success [8ms]
test ByteMaxVectorTests.expandByteMaxVectorTests(byte[i * 5], mask[false]): success [8ms]
test ByteMaxVectorTests.expandByteMaxVectorTests(byte[i + 1], mask[false]): success [7ms]
test ByteMaxVectorTests.expandByteMaxVectorTests(byte[cornerCaseValue(i)], mask[false]): success [7ms]
test ByteMaxVectorTests.getByteMaxVectorTests(byte[-i * 5]): success [11ms]
test ByteMaxVectorTests.getByteMaxVectorTests(byte[i * 5]): success [11ms]
test ByteMaxVectorTests.getByteMaxVectorTests(byte[i + 1]): success [96ms]
test ByteMaxVectorTests.getByteMaxVectorTests(byte[cornerCaseValue(i)]): success [4ms]
test ByteMaxVectorTests.hashCodeByteMaxVectorTestsSmokeTest(byte[-i * 5]): success [42ms]
test ByteMaxVectorTests.hashCodeByteMaxVectorTestsSmokeTest(byte[i * 5]): success [1ms]
test ByteMaxVectorTests.hashCodeByteMaxVectorTestsSmokeTest(byte[i + 1]): success [1ms]
test ByteMaxVectorTests.hashCodeByteMaxVectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [1ms]
test ByteMaxVectorTests.indexInRangeByteMaxVectorTestsSmokeTest(0): success [74ms]
test ByteMaxVectorTests.indexInRangeByteMaxVectorTestsSmokeTest(-1): success [4ms]
test ByteMaxVectorTests.indexInRangeByteMaxVectorTestsSmokeTest(1): success [20ms]
test ByteMaxVectorTests.indexInRangeByteMaxVectorTestsSmokeTest(2): success [3ms]
test ByteMaxVectorTests.indexInRangeByteMaxVectorTestsSmokeTest(-2): success [3ms]
test ByteMaxVectorTests.indexInRangeLongByteMaxVectorTestsSmokeTest(0): success [3ms]
test ByteMaxVectorTests.indexInRangeLongByteMaxVectorTestsSmokeTest(-1): success [3ms]
test ByteMaxVectorTests.indexInRangeLongByteMaxVectorTestsSmokeTest(1): success [3ms]
test ByteMaxVectorTests.indexInRangeLongByteMaxVectorTestsSmokeTest(2): success [3ms]
test ByteMaxVectorTests.indexInRangeLongByteMaxVectorTestsSmokeTest(-2): success [3ms]
test ByteMaxVectorTests.loopBoundByteMaxVectorTestsSmokeTest(0): success [0ms]
test ByteMaxVectorTests.loopBoundByteMaxVectorTestsSmokeTest(1): success [0ms]
test ByteMaxVectorTests.loopBoundByteMaxVectorTestsSmokeTest(32): success [0ms]
test ByteMaxVectorTests.loopBoundByteMaxVectorTestsSmokeTest(37): success [0ms]
test ByteMaxVectorTests.loopBoundByteMaxVectorTestsSmokeTest(1024): success [0ms]
test ByteMaxVectorTests.loopBoundByteMaxVectorTestsSmokeTest(1025): success [0ms]
test ByteMaxVectorTests.loopBoundByteMaxVectorTestsSmokeTest(1029): success [0ms]
test ByteMaxVectorTests.loopBoundLongByteMaxVectorTestsSmokeTest(0): success [0ms]
test ByteMaxVectorTests.loopBoundLongByteMaxVectorTestsSmokeTest(1): success [0ms]
test ByteMaxVectorTests.loopBoundLongByteMaxVectorTestsSmokeTest(32): success [0ms]
test ByteMaxVectorTests.loopBoundLongByteMaxVectorTestsSmokeTest(37): success [0ms]
test ByteMaxVectorTests.loopBoundLongByteMaxVectorTestsSmokeTest(1024): success [0ms]
test ByteMaxVectorTests.loopBoundLongByteMaxVectorTestsSmokeTest(1025): success [0ms]
test ByteMaxVectorTests.loopBoundLongByteMaxVectorTestsSmokeTest(1029): success [0ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i], byte[i]): success [231ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i], byte[i - length / 2]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i], byte[i + 1]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i], byte[i - 2]): success [136ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i], byte[zigZag(i)]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i], byte[cornerCaseValue(i)]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i - length / 2], byte[i]): success [136ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i - length / 2], byte[i - length / 2]): success [136ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i - length / 2], byte[i + 1]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i - length / 2], byte[i - 2]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i - length / 2], byte[zigZag(i)]): success [136ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [163ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i + 1], byte[i]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i + 1], byte[i - length / 2]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i + 1], byte[i + 1]): success [142ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i + 1], byte[i - 2]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i + 1], byte[zigZag(i)]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [142ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i - 2], byte[i]): success [136ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i - 2], byte[i - length / 2]): success [136ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i - 2], byte[i + 1]): success [138ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i - 2], byte[i - 2]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i - 2], byte[zigZag(i)]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[zigZag(i)], byte[i]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[zigZag(i)], byte[i - length / 2]): success [139ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[zigZag(i)], byte[i + 1]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[zigZag(i)], byte[i - 2]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [136ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [145ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[cornerCaseValue(i)], byte[i]): success [182ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [137ms]
test ByteMaxVectorTests.ltByteMaxVectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [136ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i], byte[i]): success [2ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i], byte[i - length / 2]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i], byte[i + 1]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i], byte[i - 2]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i], byte[zigZag(i)]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i + 1]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - 2]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i + 1], byte[i]): success [61ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - length / 2]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i + 1], byte[i + 1]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - 2]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i + 1], byte[zigZag(i)]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i - 2], byte[i]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - length / 2]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i - 2], byte[i + 1]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - 2]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i - 2], byte[zigZag(i)]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i + 1]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - 2]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [3ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [1ms]
test ByteMaxVectorTests.ltByteMaxVectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [1ms]
test ByteMaxVectorTests.maskAndByteMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test ByteMaxVectorTests.maskAndByteMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test ByteMaxVectorTests.maskAndNotByteMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test ByteMaxVectorTests.maskAndNotByteMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test ByteMaxVectorTests.maskCompressByteMaxVectorTestsSmokeTest(mask[i % 2]): success [381ms]
test ByteMaxVectorTests.maskCompressByteMaxVectorTestsSmokeTest(mask[true]): success [246ms]
test ByteMaxVectorTests.maskCompressByteMaxVectorTestsSmokeTest(mask[false]): success [209ms]
test ByteMaxVectorTests.maskEqByteMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test ByteMaxVectorTests.maskEqByteMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test ByteMaxVectorTests.maskEqualsByteMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test ByteMaxVectorTests.maskEqualsByteMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test ByteMaxVectorTests.maskFirstTrueByteMaxVectorTestsSmokeTest(mask[i % 2]): success [72ms]
test ByteMaxVectorTests.maskFirstTrueByteMaxVectorTestsSmokeTest(mask[true]): success [93ms]
test ByteMaxVectorTests.maskFirstTrueByteMaxVectorTestsSmokeTest(mask[false]): success [60ms]
test ByteMaxVectorTests.maskHashCodeByteMaxVectorTestsSmokeTest(mask[i % 2]): success [0ms]
test ByteMaxVectorTests.maskHashCodeByteMaxVectorTestsSmokeTest(mask[true]): success [0ms]
test ByteMaxVectorTests.maskHashCodeByteMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test ByteMaxVectorTests.maskLastTrueByteMaxVectorTestsSmokeTest(mask[i % 2]): success [118ms]
test ByteMaxVectorTests.maskLastTrueByteMaxVectorTestsSmokeTest(mask[true]): success [92ms]
test ByteMaxVectorTests.maskLastTrueByteMaxVectorTestsSmokeTest(mask[false]): success [79ms]
test ByteMaxVectorTests.maskOrByteMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [20ms]
test ByteMaxVectorTests.maskOrByteMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test ByteMaxVectorTests.maskTrueCountByteMaxVectorTestsSmokeTest(mask[i % 2]): success [68ms]
test ByteMaxVectorTests.maskTrueCountByteMaxVectorTestsSmokeTest(mask[true]): success [93ms]
test ByteMaxVectorTests.maskTrueCountByteMaxVectorTestsSmokeTest(mask[false]): success [60ms]
test ByteMaxVectorTests.maskXorByteMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test ByteMaxVectorTests.maskXorByteMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test ByteMaxVectorTests.maxByteMaxVectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test ByteMaxVectorTests.maxByteMaxVectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test ByteMaxVectorTests.maxByteMaxVectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.maxByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [5ms]
test ByteMaxVectorTests.maxByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test ByteMaxVectorTests.maxByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.minByteMaxVectorTests(byte[-i * 5], byte[i * 5]): success [5ms]
test ByteMaxVectorTests.minByteMaxVectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test ByteMaxVectorTests.minByteMaxVectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.minByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [5ms]
test ByteMaxVectorTests.minByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test ByteMaxVectorTests.minByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTests(byte[-i * 5], byte[i * 5]): success [5ms]
test ByteMaxVectorTests.mulByteMaxVectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [5ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [5ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [5ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test ByteMaxVectorTests.mulByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test ByteMaxVectorTests.negByteMaxVectorTests(byte[-i * 5]): success [13ms]
test ByteMaxVectorTests.negByteMaxVectorTests(byte[i * 5]): success [1ms]
test ByteMaxVectorTests.negByteMaxVectorTests(byte[i + 1]): success [79ms]
test ByteMaxVectorTests.negByteMaxVectorTests(byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.notByteMaxVectorTests(byte[-i * 5]): success [18ms]
test ByteMaxVectorTests.notByteMaxVectorTests(byte[i * 5]): success [1ms]
test ByteMaxVectorTests.notByteMaxVectorTests(byte[i + 1]): success [83ms]
test ByteMaxVectorTests.notByteMaxVectorTests(byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.orByteMaxVectorTests(byte[-i * 5], byte[i * 5]): success [8ms]
test ByteMaxVectorTests.orByteMaxVectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test ByteMaxVectorTests.orByteMaxVectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.orByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [5ms]
test ByteMaxVectorTests.orByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test ByteMaxVectorTests.orByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.reinterpretAsBytesByteMaxVectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test ByteMaxVectorTests.reinterpretAsBytesByteMaxVectorTestsSmokeTest(byte[i * 5]): success [0ms]
test ByteMaxVectorTests.reinterpretAsBytesByteMaxVectorTestsSmokeTest(byte[i + 1]): success [2ms]
test ByteMaxVectorTests.reinterpretAsBytesByteMaxVectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [16ms]
test ByteMaxVectorTests.shuffleEqualsByteMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [961ms]
test ByteMaxVectorTests.shuffleEqualsByteMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [135ms]
test ByteMaxVectorTests.shuffleMiscellaneousByteMaxVectorTestsSmokeTest(shuffle[random]): success [205ms]
test ByteMaxVectorTests.shuffleTest(): success [621ms]
test ByteMaxVectorTests.shuffleToStringByteMaxVectorTestsSmokeTest(shuffle[random]): success [51ms]
test ByteMaxVectorTests.sliceBinaryByteMaxVectorTestsBinary(byte[-i * 5], byte[i * 5]): success [616ms]
test ByteMaxVectorTests.sliceBinaryByteMaxVectorTestsBinary(byte[-i * 5], byte[i + 1]): success [163ms]
test ByteMaxVectorTests.sliceBinaryByteMaxVectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [315ms]
test ByteMaxVectorTests.sliceByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [251ms]
test ByteMaxVectorTests.sliceByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [163ms]
test ByteMaxVectorTests.sliceByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [370ms]
test ByteMaxVectorTests.sliceByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [198ms]
test ByteMaxVectorTests.sliceByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [177ms]
test ByteMaxVectorTests.sliceByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [162ms]
test ByteMaxVectorTests.sliceByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [162ms]
test ByteMaxVectorTests.sliceByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [162ms]
test ByteMaxVectorTests.sliceByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [162ms]
test ByteMaxVectorTests.sliceUnaryByteMaxVectorTests(byte[-i * 5]): success [286ms]
test ByteMaxVectorTests.sliceUnaryByteMaxVectorTests(byte[i * 5]): success [169ms]
test ByteMaxVectorTests.sliceUnaryByteMaxVectorTests(byte[i + 1]): success [277ms]
test ByteMaxVectorTests.sliceUnaryByteMaxVectorTests(byte[cornerCaseValue(i)]): success [147ms]
test ByteMaxVectorTests.smokeTest1(): success [0ms]
test ByteMaxVectorTests.smokeTest2(): success [60ms]
test ByteMaxVectorTests.subByteMaxVectorTests(byte[-i * 5], byte[i * 5]): success [5ms]
test ByteMaxVectorTests.subByteMaxVectorTests(byte[-i * 5], byte[i + 1]): success [56ms]
test ByteMaxVectorTests.subByteMaxVectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.subByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [95ms]
test ByteMaxVectorTests.subByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [156ms]
test ByteMaxVectorTests.subByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.subByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test ByteMaxVectorTests.subByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test ByteMaxVectorTests.subByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test ByteMaxVectorTests.subByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test ByteMaxVectorTests.subByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test ByteMaxVectorTests.subByteMaxVectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test ByteMaxVectorTests.subByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [28ms]
test ByteMaxVectorTests.subByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test ByteMaxVectorTests.subByteMaxVectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.subByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [33ms]
test ByteMaxVectorTests.subByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.subByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test ByteMaxVectorTests.subByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test ByteMaxVectorTests.subByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test ByteMaxVectorTests.subByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test ByteMaxVectorTests.subByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test ByteMaxVectorTests.subByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test ByteMaxVectorTests.subByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test ByteMaxVectorTests.toDoubleArrayByteMaxVectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test ByteMaxVectorTests.toDoubleArrayByteMaxVectorTestsSmokeTest(byte[i * 5]): success [0ms]
test ByteMaxVectorTests.toDoubleArrayByteMaxVectorTestsSmokeTest(byte[i + 1]): success [0ms]
test ByteMaxVectorTests.toDoubleArrayByteMaxVectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.toIntArrayByteMaxVectorTestsSmokeTest(byte[-i * 5]): success [1ms]
test ByteMaxVectorTests.toIntArrayByteMaxVectorTestsSmokeTest(byte[i * 5]): success [2ms]
test ByteMaxVectorTests.toIntArrayByteMaxVectorTestsSmokeTest(byte[i + 1]): success [0ms]
test ByteMaxVectorTests.toIntArrayByteMaxVectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [8ms]
test ByteMaxVectorTests.toLongArrayByteMaxVectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test ByteMaxVectorTests.toLongArrayByteMaxVectorTestsSmokeTest(byte[i * 5]): success [0ms]
test ByteMaxVectorTests.toLongArrayByteMaxVectorTestsSmokeTest(byte[i + 1]): success [0ms]
test ByteMaxVectorTests.toLongArrayByteMaxVectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test ByteMaxVectorTests.toStringByteMaxVectorTestsSmokeTest(byte[-i * 5]): success [8ms]
test ByteMaxVectorTests.toStringByteMaxVectorTestsSmokeTest(byte[i * 5]): success [13ms]
test ByteMaxVectorTests.toStringByteMaxVectorTestsSmokeTest(byte[i + 1]): success [12ms]
test ByteMaxVectorTests.toStringByteMaxVectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [39ms]
test ByteMaxVectorTests.unsliceBinaryByteMaxVectorTestsBinary(byte[-i * 5], byte[i * 5]): success [303ms]
test ByteMaxVectorTests.unsliceBinaryByteMaxVectorTestsBinary(byte[-i * 5], byte[i + 1]): success [150ms]
test ByteMaxVectorTests.unsliceBinaryByteMaxVectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [406ms]
test ByteMaxVectorTests.unsliceByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [691ms]
test ByteMaxVectorTests.unsliceByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [310ms]
test ByteMaxVectorTests.unsliceByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [643ms]
test ByteMaxVectorTests.unsliceByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [361ms]
test ByteMaxVectorTests.unsliceByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [478ms]
test ByteMaxVectorTests.unsliceByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [482ms]
test ByteMaxVectorTests.unsliceByteMaxVectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [414ms]
test ByteMaxVectorTests.unsliceByteMaxVectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [307ms]
test ByteMaxVectorTests.unsliceByteMaxVectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [306ms]
test ByteMaxVectorTests.unsliceUnaryByteMaxVectorTests(byte[-i * 5]): success [281ms]
test ByteMaxVectorTests.unsliceUnaryByteMaxVectorTests(byte[i * 5]): success [146ms]
test ByteMaxVectorTests.unsliceUnaryByteMaxVectorTests(byte[i + 1]): success [282ms]
test ByteMaxVectorTests.unsliceUnaryByteMaxVectorTests(byte[cornerCaseValue(i)]): success [169ms]
test ByteMaxVectorTests.viewAsFloatingLanesTest(): success [16ms]
test ByteMaxVectorTests.viewAsIntegeralLanesTest(): success [0ms]
test ByteMaxVectorTests.withByteMaxVectorTests(byte[-i * 5], byte[i * 5]): success [18ms]
test ByteMaxVectorTests.withByteMaxVectorTests(byte[-i * 5], byte[i + 1]): success [18ms]
test ByteMaxVectorTests.withByteMaxVectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [89ms]

===============================================
jdk/incubator/vector/ByteMaxVectorTests.java
Total tests run: 3598, Passes: 3597, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/ByteMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/ByteMaxVectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/ByteMaxVectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/ByteMaxVectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/ByteMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/jdk/incubator/vector/ByteMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/10/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/ByteMaxVectorTests.d/testng.0.jta jdk/incubator/vector/ByteMaxVectorTests.java false ByteMaxVectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorTests.java
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float64VectorTests.java
Passed: jdk/incubator/vector/Int256VectorTests.java
Passed: jdk/incubator/vector/IntMaxVectorTests.java
Passed: jdk/incubator/vector/Int128VectorTests.java
Passed: jdk/incubator/vector/MethodOverideTest.java
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
Passed: jdk/incubator/vector/Int512VectorTests.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
TEST: jdk/incubator/vector/Long256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.828 seconds
messages:
command: build Long256VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 16:49:53 IST 2025
Test directory:
  compile: Long256VectorTests
finished: Wed Apr 16 16:49:54 IST 2025
elapsed time (seconds): 0.828

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.828 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 16:49:53 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 15
Process id: 1414167
finished: Wed Apr 16 16:49:54 IST 2025
elapsed time (seconds): 0.828
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/5 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long256VectorTests 
TIME:   220.518 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long256VectorTests 
started: Wed Apr 16 16:49:54 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1417033
finished: Wed Apr 16 16:53:34 IST 2025
elapsed time (seconds): 220.518
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 2206073102873286634
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=2206073102873286634" to command line.
test Long256VectorTests.ABSLong256VectorTests(long[-i * 5]): success [606ms]
test Long256VectorTests.ABSLong256VectorTests(long[i * 5]): success [6ms]
test Long256VectorTests.ABSLong256VectorTests(long[i + 1]): success [49ms]
test Long256VectorTests.ABSLong256VectorTests(long[cornerCaseValue(i)]): success [7ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[-i * 5], mask[i % 2]): success [245ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i * 5], mask[i % 2]): success [75ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i + 1], mask[i % 2]): success [77ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[-i * 5], mask[true]): success [6ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[-i * 5], mask[false]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i * 5], mask[false]): success [6ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.ADDLong256VectorTests(long[-i * 5], long[i * 5]): success [245ms]
test Long256VectorTests.ADDLong256VectorTests(long[-i * 5], long[i + 1]): success [41ms]
test Long256VectorTests.ADDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [64ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [139ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [6ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [68ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [11ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [4ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [4ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [4ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [8ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[-i * 5]): success [102ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[i * 5]): success [62ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[i + 1]): success [10ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[cornerCaseValue(i)]): success [22ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[-i * 5], mask[i % 2]): success [60ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i * 5], mask[i % 2]): success [78ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[-i * 5], mask[true]): success [26ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[-i * 5], mask[false]): success [1ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[-i * 5]): success [5ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[i * 5]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[i + 1]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i + 1], mask[i % 2]): success [13ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.ANDLong256VectorTests(long[-i * 5], long[i * 5]): success [209ms]
test Long256VectorTests.ANDLong256VectorTests(long[-i * 5], long[i + 1]): success [4ms]
test Long256VectorTests.ANDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [63ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [15ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [3ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [4ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [77ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [4ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[-i * 5]): success [103ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[i * 5]): success [61ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[i + 1]): success [23ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[cornerCaseValue(i)]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[-i * 5], mask[i % 2]): success [22ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i * 5], mask[i % 2]): success [81ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i + 1], mask[i % 2]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[-i * 5], mask[true]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i * 5], mask[true]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i + 1], mask[true]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[-i * 5], mask[false]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i * 5], mask[false]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i + 1], mask[false]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [4ms]
test Long256VectorTests.AND_NOTLong256VectorTests(long[-i * 5], long[i * 5]): success [310ms]
test Long256VectorTests.AND_NOTLong256VectorTests(long[-i * 5], long[i + 1]): success [54ms]
test Long256VectorTests.AND_NOTLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [137ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [126ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [55ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [151ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [55ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [55ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [92ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [55ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [55ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [55ms]
test Long256VectorTests.ASHRLong256VectorTests(long[-i * 5], long[i * 5]): success [172ms]
test Long256VectorTests.ASHRLong256VectorTests(long[-i * 5], long[i + 1]): success [53ms]
test Long256VectorTests.ASHRLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [132ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [128ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [55ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [139ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [55ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [92ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [56ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [58ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [57ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [57ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [220ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [4ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [57ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[-i * 5]): success [8ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[i * 5]): success [4ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[i + 1]): success [49ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [60ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [4ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [59ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [14ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [4ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [51ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [77ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [10ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [116ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [491ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [5ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [6ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [68ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [4ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

ndLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.bitwiseDivByZeroSmokeTest(): success [12ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i * 5], mask[i % 2]): success [14ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [142ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i + 1], mask[true]): success [55ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.compressLong256VectorTests(long[-i * 5], mask[i % 2]): success [161ms]
test Long256VectorTests.compressLong256VectorTests(long[i * 5], mask[i % 2]): success [40ms]
test Long256VectorTests.compressLong256VectorTests(long[i + 1], mask[i % 2]): success [113ms]
test Long256VectorTests.compressLong256VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [72ms]
test Long256VectorTests.compressLong256VectorTests(long[-i * 5], mask[true]): success [80ms]
test Long256VectorTests.compressLong256VectorTests(long[i * 5], mask[true]): success [4ms]
test Long256VectorTests.compressLong256VectorTests(long[i + 1], mask[true]): success [4ms]
test Long256VectorTests.compressLong256VectorTests(long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long256VectorTests.compressLong256VectorTests(long[-i * 5], mask[false]): success [5ms]
test Long256VectorTests.compressLong256VectorTests(long[i * 5], mask[false]): success [5ms]
test Long256VectorTests.compressLong256VectorTests(long[i + 1], mask[false]): success [5ms]
test Long256VectorTests.compressLong256VectorTests(long[cornerCaseValue(i)], mask[false]): success [4ms]
test Long256VectorTests.divLong256VectorTests(long[-i * 5], long[i * 5]): success [188ms]
test Long256VectorTests.divLong256VectorTests(long[-i * 5], long[i + 1]): success [110ms]
test Long256VectorTests.divLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [197ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [10ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [98ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long256VectorTests.divLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [9ms]
test Long256VectorTests.divLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long256VectorTests.divLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [331ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [216ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [357ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [215ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [245ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [286ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [282ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [215ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [215ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i]): success [122ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i - length / 2]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i + 1]): success [57ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i - 2]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[zigZag(i)]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i - length / 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i + 1]): success [78ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i - 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[zigZag(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [68ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i - length / 2]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i + 1]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i - 2]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[zigZag(i)]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i - length / 2]): success [54ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i + 1]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i - 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[zigZag(i)]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i - length / 2]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i + 1]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i - 2]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[zigZag(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [51ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.expandLong256VectorTests(long[-i * 5], mask[i % 2]): success [121ms]
test Long256VectorTests.expandLong256VectorTests(long[i * 5], mask[i % 2]): success [48ms]
test Long256VectorTests.expandLong256VectorTests(long[i + 1], mask[i % 2]): success [107ms]
test Long256VectorTests.expandLong256VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [39ms]
test Long256VectorTests.expandLong256VectorTests(long[-i * 5], mask[true]): success [28ms]
test Long256VectorTests.expandLong256VectorTests(long[i * 5], mask[true]): success [4ms]
test Long256VectorTests.expandLong256VectorTests(long[i + 1], mask[true]): success [4ms]
test Long256VectorTests.expandLong256VectorTests(long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.expandLong256VectorTests(long[-i * 5], mask[false]): success [5ms]
test Long256VectorTests.expandLong256VectorTests(long[i * 5], mask[false]): success [5ms]
test Long256VectorTests.expandLong256VectorTests(long[i + 1], mask[false]): success [4ms]
test Long256VectorTests.expandLong256VectorTests(long[cornerCaseValue(i)], mask[false]): success [5ms]
test Long256VectorTests.getLong256VectorTests(long[-i * 5]): success [4ms]
test Long256VectorTests.getLong256VectorTests(long[i * 5]): success [4ms]
test Long256VectorTests.getLong256VectorTests(long[i + 1]): success [64ms]
test Long256VectorTests.getLong256VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[-i * 5]): success [35ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[i * 5]): success [1ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[i + 1]): success [1ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(0): success [69ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(-1): success [2ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(1): success [16ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(2): success [1ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(-2): success [1ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(0): success [2ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(-1): success [1ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(1): success [1ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(2): success [3ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(-2): success [1ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(0): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(32): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(37): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1024): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1025): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1029): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(0): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(32): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(37): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1024): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1025): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1029): success [0ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i]): success [130ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i - length / 2]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i + 1]): success [57ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i - 2]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[zigZag(i)]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[cornerCaseValue(i)]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i - length / 2]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i + 1]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i - 2]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[zigZag(i)]): success [62ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i - length / 2]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i + 1]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i - 2]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[zigZag(i)]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i - length / 2]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i + 1]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i - 2]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[zigZag(i)]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [82ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i - length / 2]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i + 1]): success [56ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i - 2]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[zigZag(i)]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [53ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i]): success [53ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [52ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.maskAndLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Long256VectorTests.maskAndLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskAndNotLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Long256VectorTests.maskAndNotLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskCompressLong256VectorTestsSmokeTest(mask[i % 2]): success [312ms]
test Long256VectorTests.maskCompressLong256VectorTestsSmokeTest(mask[true]): success [151ms]
test Long256VectorTests.maskCompressLong256VectorTestsSmokeTest(mask[false]): success [150ms]
test Long256VectorTests.maskEqLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Long256VectorTests.maskEqLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskEqualsLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long256VectorTests.maskEqualsLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskFirstTrueLong256VectorTestsSmokeTest(mask[i % 2]): success [38ms]
test Long256VectorTests.maskFirstTrueLong256VectorTestsSmokeTest(mask[true]): success [60ms]
test Long256VectorTests.maskFirstTrueLong256VectorTestsSmokeTest(mask[false]): success [27ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(-1): success [60ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(0): success [0ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long256VectorTests.maskHashCodeLong256VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long256VectorTests.maskHashCodeLong256VectorTestsSmokeTest(mask[true]): success [0ms]
test Long256VectorTests.maskHashCodeLong256VectorTestsSmokeTest(mask[false]): success [0ms]
test Long256VectorTests.maskLastTrueLong256VectorTestsSmokeTest(mask[i % 2]): success [74ms]
test Long256VectorTests.maskLastTrueLong256VectorTestsSmokeTest(mask[true]): success [59ms]
test Long256VectorTests.maskLastTrueLong256VectorTestsSmokeTest(mask[false]): success [41ms]
test Long256VectorTests.maskOrLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [18ms]
test Long256VectorTests.maskOrLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskTrueCountLong256VectorTestsSmokeTest(mask[i % 2]): success [36ms]
test Long256VectorTests.maskTrueCountLong256VectorTestsSmokeTest(mask[true]): success [59ms]
test Long256VectorTests.maskTrueCountLong256VectorTestsSmokeTest(mask[false]): success [27ms]
test Long256VectorTests.maskXorLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Long256VectorTests.maskXorLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maxLong256VectorTests(long[-i * 5], long[i * 5]): success [7ms]
test Long256VectorTests.maxLong256VectorTests(long[-i * 5], long[i + 1]): success [17ms]
test Long256VectorTests.maxLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.maxLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long256VectorTests.maxLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.maxLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.minLong256VectorTests(long[-i * 5], long[i * 5]): success [6ms]
test Long256VectorTests.minLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.minLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.minLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long256VectorTests.minLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.minLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.mulLong256VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.mulLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.mulLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.negLong256VectorTests(long[-i * 5]): success [14ms]
test Long256VectorTests.negLong256VectorTests(long[i * 5]): success [3ms]
test Long256VectorTests.negLong256VectorTests(long[i + 1]): success [78ms]
test Long256VectorTests.negLong256VectorTests(long[cornerCaseValue(i)]): success [2ms]
test Long256VectorTests.notLong256VectorTests(long[-i * 5]): success [68ms]
test Long256VectorTests.notLong256VectorTests(long[i * 5]): success [62ms]
test Long256VectorTests.notLong256VectorTests(long[i + 1]): success [139ms]
test Long256VectorTests.notLong256VectorTests(long[cornerCaseValue(i)]): success [52ms]
test Long256VectorTests.orLong256VectorTests(long[-i * 5], long[i * 5]): success [9ms]
test Long256VectorTests.orLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.orLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.orLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long256VectorTests.orLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.orLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.shuffleEqualsLong256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [433ms]
test Long256VectorTests.shuffleEqualsLong256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [27ms]
test Long256VectorTests.shuffleMiscellaneousLong256VectorTestsSmokeTest(shuffle[random]): success [15ms]
test Long256VectorTests.shuffleTest(): success [412ms]
test Long256VectorTests.shuffleToStringLong256VectorTestsSmokeTest(shuffle[random]): success [58ms]
test Long256VectorTests.sliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i * 5]): success [832ms]
test Long256VectorTests.sliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i + 1]): success [347ms]
test Long256VectorTests.sliceBinaryLong256VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [575ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [495ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [404ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [780ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [414ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [594ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [414ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [404ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [434ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [406ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[-i * 5]): success [533ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[i * 5]): success [346ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[i + 1]): success [506ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[cornerCaseValue(i)]): success [336ms]
test Long256VectorTests.smokeTest1(): success [0ms]
test Long256VectorTests.smokeTest2(): success [46ms]
test Long256VectorTests.subLong256VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.subLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.subLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [51ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long256VectorTests.subLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[i + 1]): success [4ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[-i * 5]): success [6ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[i * 5]): success [5ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[i + 1]): success [5ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [5ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[-i * 5]): success [1ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[i * 5]): success [6ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[i + 1]): success [43ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.unsliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i * 5]): success [539ms]
test Long256VectorTests.unsliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i + 1]): success [417ms]
test Long256VectorTests.unsliceBinaryLong256VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [612ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [1225ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [739ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1335ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [707ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [732ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1112ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [739ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [706ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [721ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[-i * 5]): success [502ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[i * 5]): success [337ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[i + 1]): success [501ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[cornerCaseValue(i)]): success [338ms]
test Long256VectorTests.viewAsFloatingLanesTest(): success [227ms]
test Long256VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long256VectorTests.withLong256VectorTests(long[-i * 5], long[i * 5]): success [27ms]
test Long256VectorTests.withLong256VectorTests(long[-i * 5], long[i + 1]): success [18ms]
test Long256VectorTests.withLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [109ms]

===============================================
jdk/incubator/vector/Long256VectorTests.java
Total tests run: 3321, Passes: 3320, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/5 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Long256VectorTests.d/testng.0.jta jdk/incubator/vector/Long256VectorTests.java false Long256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
TEST: jdk/incubator/vector/Long512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.752 seconds
messages:
command: build Long512VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 16:50:44 IST 2025
Test directory:
  compile: Long512VectorTests
finished: Wed Apr 16 16:50:44 IST 2025
elapsed time (seconds): 0.752

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.752 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long512VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 16:50:44 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 2
Process id: 1413146
finished: Wed Apr 16 16:50:44 IST 2025
elapsed time (seconds): 0.752
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Long512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/6 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Long512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Long512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long512VectorTests 
TIME:   175.289 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long512VectorTests 
started: Wed Apr 16 16:50:44 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1417126
finished: Wed Apr 16 16:53:40 IST 2025
elapsed time (seconds): 175.289
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -5662297857046577737
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-5662297857046577737" to command line.
test Long512VectorTests.ABSLong512VectorTests(long[-i * 5]): success [343ms]
test Long512VectorTests.ABSLong512VectorTests(long[i * 5]): success [321ms]
test Long512VectorTests.ABSLong512VectorTests(long[i + 1]): success [13ms]
test Long512VectorTests.ABSLong512VectorTests(long[cornerCaseValue(i)]): success [5ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[-i * 5], mask[i % 2]): success [165ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i * 5], mask[i % 2]): success [121ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i + 1], mask[i % 2]): success [50ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[-i * 5], mask[true]): success [92ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i * 5], mask[true]): success [1ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i + 1], mask[true]): success [1ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[-i * 5], mask[false]): success [1ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i * 5], mask[false]): success [6ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.ADDLong512VectorTests(long[-i * 5], long[i * 5]): success [76ms]
test Long512VectorTests.ADDLong512VectorTests(long[-i * 5], long[i + 1]): success [245ms]
test Long512VectorTests.ADDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [20ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [126ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [56ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [11ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [77ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long512VectorTests.ADDReduceLong512VectorTests(long[-i * 5]): success [108ms]
test Long512VectorTests.ADDReduceLong512VectorTests(long[i * 5]): success [3ms]
test Long512VectorTests.ADDReduceLong512VectorTests(long[i + 1]): success [66ms]
test Long512VectorTests.ADDReduceLong512VectorTests(long[cornerCaseValue(i)]): success [2ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[-i * 5], mask[i % 2]): success [68ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i * 5], mask[i % 2]): success [3ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i + 1], mask[i % 2]): success [85ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[-i * 5], mask[true]): success [2ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i * 5], mask[true]): success [2ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i + 1], mask[true]): success [12ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[-i * 5], mask[false]): success [1ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i + 1], mask[false]): success [2ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [28ms]
test Long512VectorTests.ADDReduceLongLong512VectorTests(long[-i * 5]): success [5ms]
test Long512VectorTests.ADDReduceLongLong512VectorTests(long[i * 5]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTests(long[i + 1]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [16ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.ANDLong512VectorTests(long[-i * 5], long[i * 5]): success [220ms]
test Long512VectorTests.ANDLong512VectorTests(long[-i * 5], long[i + 1]): success [46ms]
test Long512VectorTests.ANDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [17ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [2ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [75ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTests(long[-i * 5]): success [138ms]
test Long512VectorTests.ANDReduceLong512VectorTests(long[i * 5]): success [2ms]
test Long512VectorTests.ANDReduceLong512VectorTests(long[i + 1]): success [63ms]
test Long512VectorTests.ANDReduceLong512VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[-i * 5], mask[i % 2]): success [20ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i * 5], mask[i % 2]): success [2ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i + 1], mask[i % 2]): success [83ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[-i * 5], mask[true]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i * 5], mask[true]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i + 1], mask[true]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[-i * 5], mask[false]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long512VectorTests.AND_NOTLong512VectorTests(long[-i * 5], long[i * 5]): success [212ms]
test Long512VectorTests.AND_NOTLong512VectorTests(long[-i * 5], long[i + 1]): success [155ms]
test Long512VectorTests.AND_NOTLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [36ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [68ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [68ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [37ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [37ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [139ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [37ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [85ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [37ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [54ms]
test Long512VectorTests.ASHRLong512VectorTests(long[-i * 5], long[i * 5]): success [101ms]
test Long512VectorTests.ASHRLong512VectorTests(long[-i * 5], long[i + 1]): success [120ms]
test Long512VectorTests.ASHRLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [33ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [80ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [74ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [34ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [34ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [131ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [34ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [34ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [34ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [34ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [77ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [174ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftConst(long[-i * 5]): success [6ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftConst(long[i * 5]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftConst(long[i + 1]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [15ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [22ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [64ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [12ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [53ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [12ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [65ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [4ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [4ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [129ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [7ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [7ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [484ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [4ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [1ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [3ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTest

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

0ms]
test Long512VectorTests.bitwiseBlendLong512VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long512VectorTests.bitwiseBlendLong512VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.bitwiseBlendLong512VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.bitwiseBlendLong512VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long512VectorTests.bitwiseBlendLong512VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long512VectorTests.bitwiseBlendLong512VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long512VectorTests.bitwiseBlendLong512VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.bitwiseDivByZeroSmokeTest(): success [9ms]
test Long512VectorTests.blendLong512VectorTests(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test Long512VectorTests.blendLong512VectorTests(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long512VectorTests.blendLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long512VectorTests.blendLong512VectorTests(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long512VectorTests.blendLong512VectorTests(long[-i * 5], long[i + 1], mask[true]): success [67ms]
test Long512VectorTests.blendLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long512VectorTests.blendLong512VectorTests(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.blendLong512VectorTests(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.blendLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.compressLong512VectorTests(long[-i * 5], mask[i % 2]): success [123ms]
test Long512VectorTests.compressLong512VectorTests(long[i * 5], mask[i % 2]): success [87ms]
test Long512VectorTests.compressLong512VectorTests(long[i + 1], mask[i % 2]): success [37ms]
test Long512VectorTests.compressLong512VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [37ms]
test Long512VectorTests.compressLong512VectorTests(long[-i * 5], mask[true]): success [117ms]
test Long512VectorTests.compressLong512VectorTests(long[i * 5], mask[true]): success [70ms]
test Long512VectorTests.compressLong512VectorTests(long[i + 1], mask[true]): success [2ms]
test Long512VectorTests.compressLong512VectorTests(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long512VectorTests.compressLong512VectorTests(long[-i * 5], mask[false]): success [3ms]
test Long512VectorTests.compressLong512VectorTests(long[i * 5], mask[false]): success [3ms]
test Long512VectorTests.compressLong512VectorTests(long[i + 1], mask[false]): success [3ms]
test Long512VectorTests.compressLong512VectorTests(long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long512VectorTests.divLong512VectorTests(long[-i * 5], long[i * 5]): success [88ms]
test Long512VectorTests.divLong512VectorTests(long[-i * 5], long[i + 1]): success [184ms]
test Long512VectorTests.divLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [82ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [9ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [159ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long512VectorTests.divLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [9ms]
test Long512VectorTests.divLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long512VectorTests.divLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [164ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [268ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [147ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [148ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [386ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [148ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [147ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [212ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [154ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[i]): success [113ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[i - length / 2]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[i + 1]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[i - 2]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[zigZag(i)]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[i]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[i - length / 2]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[i + 1]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[i - 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[zigZag(i)]): success [47ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[i]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[i - length / 2]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[i + 1]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[i - 2]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[zigZag(i)]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[i]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[i - length / 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[i + 1]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[i - 2]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[zigZag(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[i]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[i - length / 2]): success [47ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[i + 1]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[i - 2]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[zigZag(i)]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[i]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [39ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.expandLong512VectorTests(long[-i * 5], mask[i % 2]): success [130ms]
test Long512VectorTests.expandLong512VectorTests(long[i * 5], mask[i % 2]): success [56ms]
test Long512VectorTests.expandLong512VectorTests(long[i + 1], mask[i % 2]): success [37ms]
test Long512VectorTests.expandLong512VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [37ms]
test Long512VectorTests.expandLong512VectorTests(long[-i * 5], mask[true]): success [75ms]
test Long512VectorTests.expandLong512VectorTests(long[i * 5], mask[true]): success [40ms]
test Long512VectorTests.expandLong512VectorTests(long[i + 1], mask[true]): success [2ms]
test Long512VectorTests.expandLong512VectorTests(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.expandLong512VectorTests(long[-i * 5], mask[false]): success [3ms]
test Long512VectorTests.expandLong512VectorTests(long[i * 5], mask[false]): success [3ms]
test Long512VectorTests.expandLong512VectorTests(long[i + 1], mask[false]): success [3ms]
test Long512VectorTests.expandLong512VectorTests(long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long512VectorTests.getLong512VectorTests(long[-i * 5]): success [4ms]
test Long512VectorTests.getLong512VectorTests(long[i * 5]): success [4ms]
test Long512VectorTests.getLong512VectorTests(long[i + 1]): success [3ms]
test Long512VectorTests.getLong512VectorTests(long[cornerCaseValue(i)]): success [4ms]
test Long512VectorTests.hashCodeLong512VectorTestsSmokeTest(long[-i * 5]): success [32ms]
test Long512VectorTests.hashCodeLong512VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long512VectorTests.hashCodeLong512VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long512VectorTests.hashCodeLong512VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(0): success [63ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(-1): success [1ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(1): success [14ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(2): success [1ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(-2): success [1ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(0): success [1ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(-1): success [1ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(1): success [1ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(2): success [2ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(-2): success [1ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(0): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(1): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(32): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(37): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(1024): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(1025): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(1029): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(0): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(1): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(32): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(37): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(1024): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(1025): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(1029): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[i]): success [114ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[i - length / 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[i + 1]): success [39ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[i - 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[zigZag(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[i]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[i - length / 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[i + 1]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[i - 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[zigZag(i)]): success [39ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [47ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[i]): success [39ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[i - length / 2]): success [39ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[i + 1]): success [39ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[i - 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[zigZag(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[i]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[i - length / 2]): success [39ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[i + 1]): success [39ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[i - 2]): success [39ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[zigZag(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[i]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[i - length / 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[i + 1]): success [39ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[i - 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[zigZag(i)]): success [46ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[i]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [43ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [39ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [39ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[i]): success [1ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.maskAndLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [11ms]
test Long512VectorTests.maskAndLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskAndNotLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [4ms]
test Long512VectorTests.maskAndNotLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskCompressLong512VectorTestsSmokeTest(mask[i % 2]): success [412ms]
test Long512VectorTests.maskCompressLong512VectorTestsSmokeTest(mask[true]): success [228ms]
test Long512VectorTests.maskCompressLong512VectorTestsSmokeTest(mask[false]): success [228ms]
test Long512VectorTests.maskEqLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long512VectorTests.maskEqLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskEqualsLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long512VectorTests.maskEqualsLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskFirstTrueLong512VectorTestsSmokeTest(mask[i % 2]): success [47ms]
test Long512VectorTests.maskFirstTrueLong512VectorTestsSmokeTest(mask[true]): success [71ms]
test Long512VectorTests.maskFirstTrueLong512VectorTestsSmokeTest(mask[false]): success [38ms]
test Long512VectorTests.maskFromToLongLong512VectorTestsSmokeTest(-1): success [55ms]
test Long512VectorTests.maskFromToLongLong512VectorTestsSmokeTest(0): success [0ms]
test Long512VectorTests.maskFromToLongLong512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long512VectorTests.maskFromToLongLong512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long512VectorTests.maskHashCodeLong512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long512VectorTests.maskHashCodeLong512VectorTestsSmokeTest(mask[true]): success [0ms]
test Long512VectorTests.maskHashCodeLong512VectorTestsSmokeTest(mask[false]): success [0ms]
test Long512VectorTests.maskLastTrueLong512VectorTestsSmokeTest(mask[i % 2]): success [86ms]
test Long512VectorTests.maskLastTrueLong512VectorTestsSmokeTest(mask[true]): success [71ms]
test Long512VectorTests.maskLastTrueLong512VectorTestsSmokeTest(mask[false]): success [55ms]
test Long512VectorTests.maskOrLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [16ms]
test Long512VectorTests.maskOrLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskTrueCountLong512VectorTestsSmokeTest(mask[i % 2]): success [46ms]
test Long512VectorTests.maskTrueCountLong512VectorTestsSmokeTest(mask[true]): success [71ms]
test Long512VectorTests.maskTrueCountLong512VectorTestsSmokeTest(mask[false]): success [38ms]
test Long512VectorTests.maskXorLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long512VectorTests.maskXorLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maxLong512VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.maxLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.maxLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [19ms]
test Long512VectorTests.maxLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.maxLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.maxLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.minLong512VectorTests(long[-i * 5], long[i * 5]): success [4ms]
test Long512VectorTests.minLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.minLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.minLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.minLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.minLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.mulLong512VectorTests(long[-i * 5], long[i * 5]): success [4ms]
test Long512VectorTests.mulLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.mulLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [4ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.negLong512VectorTests(long[-i * 5]): success [7ms]
test Long512VectorTests.negLong512VectorTests(long[i * 5]): success [7ms]
test Long512VectorTests.negLong512VectorTests(long[i + 1]): success [2ms]
test Long512VectorTests.negLong512VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long512VectorTests.notLong512VectorTests(long[-i * 5]): success [37ms]
test Long512VectorTests.notLong512VectorTests(long[i * 5]): success [42ms]
test Long512VectorTests.notLong512VectorTests(long[i + 1]): success [48ms]
test Long512VectorTests.notLong512VectorTests(long[cornerCaseValue(i)]): success [32ms]
test Long512VectorTests.orLong512VectorTests(long[-i * 5], long[i * 5]): success [9ms]
test Long512VectorTests.orLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.orLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.orLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.orLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.orLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.shuffleEqualsLong512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [387ms]
test Long512VectorTests.shuffleEqualsLong512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [26ms]
test Long512VectorTests.shuffleMiscellaneousLong512VectorTestsSmokeTest(shuffle[random]): success [7ms]
test Long512VectorTests.shuffleTest(): success [481ms]
test Long512VectorTests.shuffleToStringLong512VectorTestsSmokeTest(shuffle[random]): success [32ms]
test Long512VectorTests.sliceBinaryLong512VectorTestsBinary(long[-i * 5], long[i * 5]): success [375ms]
test Long512VectorTests.sliceBinaryLong512VectorTestsBinary(long[-i * 5], long[i + 1]): success [637ms]
test Long512VectorTests.sliceBinaryLong512VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [234ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [276ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [363ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [262ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [263ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [654ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [282ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [263ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [263ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [262ms]
test Long512VectorTests.sliceUnaryLong512VectorTests(long[-i * 5]): success [229ms]
test Long512VectorTests.sliceUnaryLong512VectorTests(long[i * 5]): success [406ms]
test Long512VectorTests.sliceUnaryLong512VectorTests(long[i + 1]): success [217ms]
test Long512VectorTests.sliceUnaryLong512VectorTests(long[cornerCaseValue(i)]): success [216ms]
test Long512VectorTests.smokeTest1(): success [0ms]
test Long512VectorTests.smokeTest2(): success [50ms]
test Long512VectorTests.subLong512VectorTests(long[-i * 5], long[i * 5]): success [4ms]
test Long512VectorTests.subLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.subLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [21ms]
test Long512VectorTests.subLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.subLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [4ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.toDoubleArrayLong512VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long512VectorTests.toDoubleArrayLong512VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long512VectorTests.toDoubleArrayLong512VectorTestsSmokeTest(long[i + 1]): success [4ms]
test Long512VectorTests.toDoubleArrayLong512VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.toIntArrayLong512VectorTestsSmokeTest(long[-i * 5]): success [5ms]
test Long512VectorTests.toIntArrayLong512VectorTestsSmokeTest(long[i * 5]): success [7ms]
test Long512VectorTests.toIntArrayLong512VectorTestsSmokeTest(long[i + 1]): success [5ms]
test Long512VectorTests.toIntArrayLong512VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [4ms]
test Long512VectorTests.toLongArrayLong512VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long512VectorTests.toLongArrayLong512VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long512VectorTests.toLongArrayLong512VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long512VectorTests.toLongArrayLong512VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.toStringLong512VectorTestsSmokeTest(long[-i * 5]): success [1ms]
test Long512VectorTests.toStringLong512VectorTestsSmokeTest(long[i * 5]): success [6ms]
test Long512VectorTests.toStringLong512VectorTestsSmokeTest(long[i + 1]): success [42ms]
test Long512VectorTests.toStringLong512VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.unsliceBinaryLong512VectorTestsBinary(long[-i * 5], long[i * 5]): success [235ms]
test Long512VectorTests.unsliceBinaryLong512VectorTestsBinary(long[-i * 5], long[i + 1]): success [454ms]
test Long512VectorTests.unsliceBinaryLong512VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [221ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [473ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [1003ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [454ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [453ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1264ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [454ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [453ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [768ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [466ms]
test Long512VectorTests.unsliceUnaryLong512VectorTests(long[-i * 5]): success [230ms]
test Long512VectorTests.unsliceUnaryLong512VectorTests(long[i * 5]): success [438ms]
test Long512VectorTests.unsliceUnaryLong512VectorTests(long[i + 1]): success [215ms]
test Long512VectorTests.unsliceUnaryLong512VectorTests(long[cornerCaseValue(i)]): success [216ms]
test Long512VectorTests.viewAsFloatingLanesTest(): success [206ms]
test Long512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long512VectorTests.withLong512VectorTests(long[-i * 5], long[i * 5]): success [10ms]
test Long512VectorTests.withLong512VectorTests(long[-i * 5], long[i + 1]): success [23ms]
test Long512VectorTests.withLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [9ms]

===============================================
jdk/incubator/vector/Long512VectorTests.java
Total tests run: 3321, Passes: 3320, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/6 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Long512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/14/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Long512VectorTests.d/testng.0.jta jdk/incubator/vector/Long512VectorTests.java false Long512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Long128VectorTests.java
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/UnalignedHeapTest.java
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
TEST: jdk/incubator/vector/LongMaxVectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.86 seconds
messages:
command: build LongMaxVectorTests
reason: Named class compiled on demand
started: Wed Apr 16 16:52:18 IST 2025
Test directory:
  compile: LongMaxVectorTests
finished: Wed Apr 16 16:52:19 IST 2025
elapsed time (seconds): 0.86

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.86 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 16:52:18 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 8
Process id: 1413518
finished: Wed Apr 16 16:52:19 IST 2025
elapsed time (seconds): 0.86
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/7 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/LongMaxVectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation LongMaxVectorTests 
TIME:   142.303 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation LongMaxVectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation LongMaxVectorTests 
started: Wed Apr 16 16:52:19 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1417480
finished: Wed Apr 16 16:54:41 IST 2025
elapsed time (seconds): 142.303
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -6739356110612849077
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-6739356110612849077" to command line.
test LongMaxVectorTests.ABSLongMaxVectorTests(long[-i * 5]): success [551ms]
test LongMaxVectorTests.ABSLongMaxVectorTests(long[i * 5]): success [6ms]
test LongMaxVectorTests.ABSLongMaxVectorTests(long[i + 1]): success [48ms]
test LongMaxVectorTests.ABSLongMaxVectorTests(long[cornerCaseValue(i)]): success [5ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[-i * 5], mask[i % 2]): success [213ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i * 5], mask[i % 2]): success [3ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i + 1], mask[i % 2]): success [67ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[-i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i + 1], mask[true]): success [34ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[cornerCaseValue(i)], mask[true]): success [13ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[-i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTests(long[-i * 5], long[i * 5]): success [198ms]
test LongMaxVectorTests.ADDLongMaxVectorTests(long[-i * 5], long[i + 1]): success [7ms]
test LongMaxVectorTests.ADDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [60ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [20ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [123ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [65ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [29ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[-i * 5]): success [21ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[i * 5]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[i + 1]): success [1ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[-i * 5], mask[i % 2]): success [10ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[-i * 5]): success [84ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[i * 5]): success [87ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[i + 1]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[i % 2]): success [53ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i * 5], mask[i % 2]): success [80ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i + 1], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[true]): success [2ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[false]): success [27ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [10ms]
test LongMaxVectorTests.ANDLongMaxVectorTests(long[-i * 5], long[i * 5]): success [147ms]
test LongMaxVectorTests.ANDLongMaxVectorTests(long[-i * 5], long[i + 1]): success [3ms]
test LongMaxVectorTests.ANDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [60ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [4ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [22ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [5ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [4ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[-i * 5]): success [89ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[i * 5]): success [62ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[i + 1]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[cornerCaseValue(i)]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[i % 2]): success [20ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i * 5], mask[i % 2]): success [80ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [12ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [28ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTests(long[-i * 5], long[i * 5]): success [135ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTests(long[-i * 5], long[i + 1]): success [2ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [72ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [102ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [4ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTests(long[-i * 5], long[i * 5]): success [102ms]
test LongMaxVectorTests.ASHRLongMaxVectorTests(long[-i * 5], long[i + 1]): success [3ms]
test LongMaxVectorTests.ASHRLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [68ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [77ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [74ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShift(long[-i * 5], long[i * 5]): success [183ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShift(long[-i * 5], long[i + 1]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [57ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[-i * 5]): success [9ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[i * 5]): success [3ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[i + 1]): success [56ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [63ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [57ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [14ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [50ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [2ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [114ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [4ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [89ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [520ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [8ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [4ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [6ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [6ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [78ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [3ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(lo

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

i * 5]): success [0ms]
test LongMaxVectorTests.bitwiseBlendLongMaxVectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test LongMaxVectorTests.bitwiseBlendLongMaxVectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.bitwiseBlendLongMaxVectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.bitwiseBlendLongMaxVectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test LongMaxVectorTests.bitwiseBlendLongMaxVectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test LongMaxVectorTests.bitwiseBlendLongMaxVectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.bitwiseBlendLongMaxVectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.bitwiseDivByZeroSmokeTest(): success [10ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[i * 5], mask[i % 2]): success [13ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[i + 1], mask[i % 2]): success [22ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [58ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[-i * 5], mask[i % 2]): success [133ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i * 5], mask[i % 2]): success [21ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i + 1], mask[i % 2]): success [124ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [20ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[-i * 5], mask[true]): success [62ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i * 5], mask[true]): success [2ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i + 1], mask[true]): success [2ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[cornerCaseValue(i)], mask[true]): success [3ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[-i * 5], mask[false]): success [3ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i * 5], mask[false]): success [3ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i + 1], mask[false]): success [3ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[cornerCaseValue(i)], mask[false]): success [3ms]
test LongMaxVectorTests.divLongMaxVectorTests(long[-i * 5], long[i * 5]): success [117ms]
test LongMaxVectorTests.divLongMaxVectorTests(long[-i * 5], long[i + 1]): success [39ms]
test LongMaxVectorTests.divLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [163ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [8ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [97ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [189ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [73ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [207ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [126ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [72ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [72ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [72ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [72ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [73ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i]): success [133ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i - length / 2]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i + 1]): success [68ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i - 2]): success [61ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[cornerCaseValue(i)]): success [64ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i - length / 2]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i + 1]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i - 2]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[zigZag(i)]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i - length / 2]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i + 1]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i - 2]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[cornerCaseValue(i)]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i - length / 2]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i + 1]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i - 2]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[zigZag(i)]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[cornerCaseValue(i)]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i - length / 2]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i + 1]): success [54ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i - 2]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[zigZag(i)]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i + 1]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i - 2]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [34ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[-i * 5], mask[i % 2]): success [86ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i * 5], mask[i % 2]): success [21ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i + 1], mask[i % 2]): success [88ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [21ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[-i * 5], mask[true]): success [18ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i * 5], mask[true]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i + 1], mask[true]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[cornerCaseValue(i)], mask[true]): success [2ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[-i * 5], mask[false]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i * 5], mask[false]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i + 1], mask[false]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[cornerCaseValue(i)], mask[false]): success [3ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[-i * 5]): success [3ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[i * 5]): success [2ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[i + 1]): success [57ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[-i * 5]): success [35ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[i * 5]): success [1ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[i + 1]): success [1ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [1ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(0): success [67ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(-1): success [1ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(1): success [17ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(2): success [1ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(-2): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(0): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(-1): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(1): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(2): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(-2): success [1ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(0): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(32): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(37): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1024): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1025): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1029): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(0): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(32): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(37): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1024): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1025): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1029): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i]): success [132ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i - length / 2]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i + 1]): success [95ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i - 2]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[zigZag(i)]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i - length / 2]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i + 1]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i - 2]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[zigZag(i)]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [64ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i - length / 2]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i + 1]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i - 2]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[zigZag(i)]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[cornerCaseValue(i)]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i - length / 2]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i + 1]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i - 2]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[zigZag(i)]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[cornerCaseValue(i)]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i - length / 2]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i + 1]): success [35ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i - 2]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[zigZag(i)]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i + 1]): success [38ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i - 2]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [34ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.maskAndLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test LongMaxVectorTests.maskAndLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskAndNotLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test LongMaxVectorTests.maskAndNotLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskCompressLongMaxVectorTestsSmokeTest(mask[i % 2]): success [230ms]
test LongMaxVectorTests.maskCompressLongMaxVectorTestsSmokeTest(mask[true]): success [67ms]
test LongMaxVectorTests.maskCompressLongMaxVectorTestsSmokeTest(mask[false]): success [78ms]
test LongMaxVectorTests.maskEqLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test LongMaxVectorTests.maskEqLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskEqualsLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test LongMaxVectorTests.maskEqualsLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskFirstTrueLongMaxVectorTestsSmokeTest(mask[i % 2]): success [34ms]
test LongMaxVectorTests.maskFirstTrueLongMaxVectorTestsSmokeTest(mask[true]): success [53ms]
test LongMaxVectorTests.maskFirstTrueLongMaxVectorTestsSmokeTest(mask[false]): success [20ms]
test LongMaxVectorTests.maskHashCodeLongMaxVectorTestsSmokeTest(mask[i % 2]): success [0ms]
test LongMaxVectorTests.maskHashCodeLongMaxVectorTestsSmokeTest(mask[true]): success [0ms]
test LongMaxVectorTests.maskHashCodeLongMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test LongMaxVectorTests.maskLastTrueLongMaxVectorTestsSmokeTest(mask[i % 2]): success [60ms]
test LongMaxVectorTests.maskLastTrueLongMaxVectorTestsSmokeTest(mask[true]): success [52ms]
test LongMaxVectorTests.maskLastTrueLongMaxVectorTestsSmokeTest(mask[false]): success [33ms]
test LongMaxVectorTests.maskOrLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [16ms]
test LongMaxVectorTests.maskOrLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskTrueCountLongMaxVectorTestsSmokeTest(mask[i % 2]): success [27ms]
test LongMaxVectorTests.maskTrueCountLongMaxVectorTestsSmokeTest(mask[true]): success [52ms]
test LongMaxVectorTests.maskTrueCountLongMaxVectorTestsSmokeTest(mask[false]): success [20ms]
test LongMaxVectorTests.maskXorLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test LongMaxVectorTests.maskXorLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTests(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.maxLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.maxLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTests(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.minLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.minLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTests(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[-i * 5]): success [12ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[i * 5]): success [1ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[i + 1]): success [46ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[-i * 5]): success [15ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[i * 5]): success [1ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[i + 1]): success [50ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTests(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.orLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.orLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.shuffleEqualsLongMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [410ms]
test LongMaxVectorTests.shuffleEqualsLongMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [18ms]
test LongMaxVectorTests.shuffleMiscellaneousLongMaxVectorTestsSmokeTest(shuffle[random]): success [10ms]
test LongMaxVectorTests.shuffleTest(): success [323ms]
test LongMaxVectorTests.shuffleToStringLongMaxVectorTestsSmokeTest(shuffle[random]): success [54ms]
test LongMaxVectorTests.sliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i * 5]): success [481ms]
test LongMaxVectorTests.sliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i + 1]): success [42ms]
test LongMaxVectorTests.sliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [224ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [131ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [45ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [273ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [45ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [51ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [54ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [77ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [62ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [44ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[-i * 5]): success [195ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[i * 5]): success [41ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[i + 1]): success [186ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[cornerCaseValue(i)]): success [40ms]
test LongMaxVectorTests.smokeTest1(): success [0ms]
test LongMaxVectorTests.smokeTest2(): success [71ms]
test LongMaxVectorTests.subLongMaxVectorTests(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[-i * 5]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[i * 5]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[i + 1]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[-i * 5]): success [5ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[i * 5]): success [5ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[i + 1]): success [5ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [5ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[-i * 5]): success [0ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[i * 5]): success [0ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[i + 1]): success [0ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[-i * 5]): success [1ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[i * 5]): success [0ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[i + 1]): success [0ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [6ms]
test LongMaxVectorTests.unsliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i * 5]): success [205ms]
test LongMaxVectorTests.unsliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i + 1]): success [97ms]
test LongMaxVectorTests.unsliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [207ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [473ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [102ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [405ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [86ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [84ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [84ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [86ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [83ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [92ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[-i * 5]): success [187ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[i * 5]): success [40ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[i + 1]): success [170ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[cornerCaseValue(i)]): success [40ms]
test LongMaxVectorTests.viewAsFloatingLanesTest(): success [227ms]
test LongMaxVectorTests.viewAsIntegeralLanesTest(): success [0ms]
test LongMaxVectorTests.withLongMaxVectorTests(long[-i * 5], long[i * 5]): success [18ms]
test LongMaxVectorTests.withLongMaxVectorTests(long[-i * 5], long[i + 1]): success [17ms]
test LongMaxVectorTests.withLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [88ms]

===============================================
jdk/incubator/vector/LongMaxVectorTests.java
Total tests run: 3317, Passes: 3316, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/7 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/LongMaxVectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/LongMaxVectorTests.d/testng.0.jta jdk/incubator/vector/LongMaxVectorTests.java false LongMaxVectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
TEST: jdk/incubator/vector/Int64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.046 seconds
messages:
command: build Int64VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 16:48:50 IST 2025
Test directory:
  compile: Int64VectorTests
finished: Wed Apr 16 16:48:51 IST 2025
elapsed time (seconds): 1.046

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.046 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 16:48:50 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 1
Process id: 1413119
finished: Wed Apr 16 16:48:51 IST 2025
elapsed time (seconds): 1.046
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Int64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/15 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Int64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Int64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests 
TIME:   461.237 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests 
started: Wed Apr 16 16:48:51 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1416679
finished: Wed Apr 16 16:56:32 IST 2025
elapsed time (seconds): 461.237
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -5863783923261206953
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-5863783923261206953" to command line.
test Int64VectorTests.ABSInt64VectorTests(int[-i * 5]): success [574ms]
test Int64VectorTests.ABSInt64VectorTests(int[i * 5]): success [24ms]
test Int64VectorTests.ABSInt64VectorTests(int[i + 1]): success [31ms]
test Int64VectorTests.ABSInt64VectorTests(int[cornerCaseValue(i)]): success [21ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[i % 2]): success [218ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[i % 2]): success [50ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [35ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[true]): success [28ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[false]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[i * 5]): success [290ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [54ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [16ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [9ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [25ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [11ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [4ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [6ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [44ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [146ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [65ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [36ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [13ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[-i * 5]): success [123ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[i * 5]): success [25ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[i + 1]): success [4ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [116ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [61ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [40ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [72ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [11ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [5ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [6ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [5ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[-i * 5]): success [20ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [9ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[true]): success [8ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[i * 5]): success [195ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [62ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [20ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [37ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [20ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [4ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [70ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [65ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [6ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [70ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [16ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[-i * 5]): success [132ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[i * 5]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[i + 1]): success [44ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[cornerCaseValue(i)]): success [55ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [79ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [70ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [39ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [5ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[i * 5]): success [173ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [62ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [132ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [74ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [5ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [36ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [40ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[i * 5]): success [159ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[i + 1]): success [33ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [150ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [39ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [80ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [6ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [216ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [50ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[-i * 5]): success [45ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[i * 5]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[i + 1]): success [39ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [113ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [56ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [29ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [59ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [52ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [54ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [7ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [181ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [39ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [44ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [349ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [83ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [102ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [23ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [60ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [44ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

s(int[i + 1]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[cornerCaseValue(i)]): success [47ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [97ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [66ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [122ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[i * 5]): success [137ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[i + 1]): success [55ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [73ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [62ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [67ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[-i * 5]): success [102ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[i * 5]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[i + 1]): success [46ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[cornerCaseValue(i)]): success [93ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [80ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [64ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [113ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [4ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [13ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [70ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.VectorShapeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.VectorTypeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.WithLanesInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.WithShapeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[i * 5]): success [62ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [53ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [73ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [31ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [82ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[-i * 5]): success [103ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[i * 5]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[i + 1]): success [44ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[cornerCaseValue(i)]): success [89ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [79ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [61ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [110ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[-i * 5]): success [230ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[i * 5]): success [163ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[i + 1]): success [179ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[cornerCaseValue(i)]): success [179ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[i % 2]): success [400ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[i % 2]): success [318ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[i % 2]): success [312ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [311ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[true]): success [279ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[true]): success [278ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[true]): success [280ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [279ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[false]): success [285ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[false]): success [279ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[false]): success [279ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [277ms]
test Int64VectorTests.ZeroInt64VectorTests(int[-i * 5]): success [117ms]
test Int64VectorTests.ZeroInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ZeroInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.ZeroInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.absInt64VectorTests(int[-i * 5]): success [68ms]
test Int64VectorTests.absInt64VectorTests(int[i * 5]): success [19ms]
test Int64VectorTests.absInt64VectorTests(int[i + 1]): success [2ms]
test Int64VectorTests.absInt64VectorTests(int[cornerCaseValue(i)]): success [66ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[i * 5]): success [33ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [38ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.allTrueInt64VectorTests(boolean[i % 2]): success [27ms]
test Int64VectorTests.allTrueInt64VectorTests(boolean[i % 5]): success [19ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.anyTrueInt64VectorTests(boolean[i % 2]): success [7ms]
test Int64VectorTests.anyTrueInt64VectorTests(boolean[i % 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [7ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [13ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [15ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [8ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [15ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [9ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [15ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseDivByZeroSmokeTest(): success [15ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[i % 2]): success [71ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[i % 2]): success [24ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [28ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [80ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [59ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [4ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [101ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[i % 2]): success [299ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[i % 2]): success [84ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[i % 2]): success [117ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [85ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[true]): success [75ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[true]): success [12ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [12ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[false]): success [13ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[false]): success [13ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[false]): success [14ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [14ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[i * 5]): success [319ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[i + 1]): success [189ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [211ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [110ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [9ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [2ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [528ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): failure [247ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.lambda$binaryOperationsMF$7(IntVector.java:956)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.bOpTemplateMF(IntVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Int64Vector.bOpMF(Int64Vector.java:209)
	at jdk.incubator.vector/jdk.incubator.vector.Int64Vector.bOpMF(Int64Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.lambda$binaryOperationsMF$6(IntVector.java:956)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.lanewiseTemplate(IntVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Int64Vector.lanewise(Int64Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Int64Vector.lanewise(Int64Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.div(IntVector.java:1732)
	at Int64VectorTests.divInt64VectorTestsMasked(Int64VectorTests.java:1758)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [291ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [289ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [292ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [348ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [353ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [293ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [292ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i]): success [332ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i - length / 2]): success [141ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i + 1]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i - 2]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[zigZag(i)]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i - length / 2]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i + 1]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i - 2]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[zigZag(i)]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i]): success [152ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i - length / 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i + 1]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i - 2]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[zigZag(i)]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i]): success [145ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i - length / 2]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i + 1]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i - 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[zigZag(i)]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i - length / 2]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i + 1]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i - 2]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[zigZag(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [2ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [9ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [57ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[i % 2]): success [197ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[i % 2]): success [84ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[i % 2]): success [84ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [115ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[true]): success [29ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[true]): success [11ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[true]): success [11ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [11ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [14ms]
test Int64VectorTests.getInt64VectorTests(int[-i * 5]): success [35ms]
test Int64VectorTests.getInt64VectorTests(int[i * 5]): success [3ms]
test Int64VectorTests.getInt64VectorTests(int[i + 1]): success [2ms]
test Int64VectorTests.getInt64VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[-i * 5]): success [51ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[i * 5]): success [20ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[i + 1]): success [3ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [3ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(0): success [93ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(-1): success [5ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(1): success [26ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(2): success [5ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(-2): success [9ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(0): success [7ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(-1): success [7ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(1): success [8ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(2): success [18ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(-2): success [5ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(32): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(37): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1024): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1025): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1029): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(0): success [4ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(32): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(37): success [1ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1024): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1025): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1029): success [0ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i]): success [234ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i - length / 2]): success [141ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i + 1]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i - 2]): success [143ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[zigZag(i)]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i]): success [183ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i - length / 2]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i + 1]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i - 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[zigZag(i)]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i - length / 2]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i + 1]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i - 2]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[zigZag(i)]): success [163ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i - length / 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i + 1]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i - 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[zigZag(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i - length / 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i + 1]): success [144ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i - 2]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[zigZag(i)]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [6ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [64ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.maskAndInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Int64VectorTests.maskAndInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskAndNotInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int64VectorTests.maskAndNotInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[i % 2]): success [226ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[true]): success [79ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[false]): success [60ms]
test Int64VectorTests.maskEqInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Int64VectorTests.maskEqInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskEqualsInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int64VectorTests.maskEqualsInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[i % 2]): success [36ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[true]): success [52ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[false]): success [20ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(-1): success [79ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[true]): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[false]): success [0ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[i % 2]): success [64ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[true]): success [52ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[false]): success [33ms]
test Int64VectorTests.maskOrInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [24ms]
test Int64VectorTests.maskOrInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[i % 2]): success [29ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[true]): success [52ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[false]): success [20ms]
test Int64VectorTests.maskXorInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Int64VectorTests.maskXorInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [31ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.negInt64VectorTests(int[-i * 5]): success [51ms]
test Int64VectorTests.negInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.negInt64VectorTests(int[i + 1]): success [37ms]
test Int64VectorTests.negInt64VectorTests(int[cornerCaseValue(i)]): success [32ms]
test Int64VectorTests.notInt64VectorTests(int[-i * 5]): success [60ms]
test Int64VectorTests.notInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.notInt64VectorTests(int[i + 1]): success [44ms]
test Int64VectorTests.notInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[i * 5]): success [10ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.shuffleEqualsInt64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [17ms]
test Int64VectorTests.shuffleEqualsInt64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [40ms]
test Int64VectorTests.shuffleMiscellaneousInt64VectorTestsSmokeTest(shuffle[random]): success [8ms]
test Int64VectorTests.shuffleTest(): success [276ms]
test Int64VectorTests.shuffleToStringInt64VectorTestsSmokeTest(shuffle[random]): success [49ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i * 5]): success [831ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i + 1]): success [243ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [252ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [464ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [165ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [294ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [165ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [164ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [163ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [185ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [164ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [170ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[-i * 5]): success [433ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[i * 5]): success [155ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[i + 1]): success [152ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[cornerCaseValue(i)]): success [229ms]
test Int64VectorTests.smokeTest1(): success [0ms]
test Int64VectorTests.smokeTest2(): success [93ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [8ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [17ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[-i * 5]): success [15ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[i * 5]): success [16ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[i + 1]): success [17ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [12ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i * 5]): success [459ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i + 1]): success [170ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [398ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [1056ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [312ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [311ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [314ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [474ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [346ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [312ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [309ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [312ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[-i * 5]): success [411ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[i * 5]): success [152ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[i + 1]): success [214ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[cornerCaseValue(i)]): success [151ms]
test Int64VectorTests.viewAsFloatingLanesTest(): success [547ms]
test Int64VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[i * 5]): success [124ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[i + 1]): success [64ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [64ms]

===============================================
jdk/incubator/vector/Int64VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/15 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Int64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/2/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Int64VectorTests.d/testng.0.jta jdk/incubator/vector/Int64VectorTests.java false Int64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/VectorMathTest.java
Passed: jdk/incubator/vector/Byte128VectorTests.java
Passed: jdk/incubator/vector/AddTest.java
Passed: jdk/incubator/vector/Vector512ConversionTests.java
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/ShortMaxVectorTests.java
TEST: jdk/incubator/vector/Byte256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   23.209 seconds
messages:
command: build Byte256VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 16:42:55 IST 2025
Test directory:
  compile: Byte256VectorTests
finished: Wed Apr 16 16:43:18 IST 2025
elapsed time (seconds): 23.209

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   23.203 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 16:42:55 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 9
Process id: 1413619
finished: Wed Apr 16 16:43:18 IST 2025
elapsed time (seconds): 23.203
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/Byte256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/10 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Byte256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/Byte256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/Byte256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte256VectorTests 
TIME:   925.757 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Byte256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte256VectorTests 
started: Wed Apr 16 16:43:18 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1414980
finished: Wed Apr 16 16:58:44 IST 2025
elapsed time (seconds): 925.757
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -676002160878744105
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-676002160878744105" to command line.
test Byte256VectorTests.ABSByte256VectorTests(byte[-i * 5]): success [940ms]
test Byte256VectorTests.ABSByte256VectorTests(byte[i * 5]): success [14ms]
test Byte256VectorTests.ABSByte256VectorTests(byte[i + 1]): success [100ms]
test Byte256VectorTests.ABSByte256VectorTests(byte[cornerCaseValue(i)]): success [11ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[-i * 5], mask[i % 2]): success [454ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i * 5], mask[i % 2]): success [158ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i + 1], mask[i % 2]): success [150ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [10ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[-i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i * 5], mask[true]): success [5ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i + 1], mask[true]): success [5ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[cornerCaseValue(i)], mask[true]): success [8ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[-i * 5], mask[false]): success [4ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i * 5], mask[false]): success [4ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i + 1], mask[false]): success [4ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.ADDByte256VectorTests(byte[-i * 5], byte[i * 5]): success [781ms]
test Byte256VectorTests.ADDByte256VectorTests(byte[-i * 5], byte[i + 1]): success [14ms]
test Byte256VectorTests.ADDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [137ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5]): success [69ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [3ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [36ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [9ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [12ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [17ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [22ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [8ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [190ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [2ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [243ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [10ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [162ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [9ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [8ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [19ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [62ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [6ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[-i * 5]): success [181ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[i * 5]): success [77ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[i + 1]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[cornerCaseValue(i)]): success [19ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [122ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i * 5], mask[i % 2]): success [161ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i + 1], mask[i % 2]): success [6ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[-i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i + 1], mask[true]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[-i * 5], mask[false]): success [7ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i * 5], mask[false]): success [10ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[-i * 5]): success [9ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[i * 5]): success [11ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[i + 1]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[cornerCaseValue(i)]): success [16ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [9ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i * 5], mask[i % 2]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i + 1], mask[i % 2]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [26ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[-i * 5], mask[true]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i * 5], mask[true]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i + 1], mask[true]): success [80ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[-i * 5], mask[false]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i * 5], mask[false]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i + 1], mask[false]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte256VectorTests.ANDByte256VectorTests(byte[-i * 5], byte[i * 5]): success [555ms]
test Byte256VectorTests.ANDByte256VectorTests(byte[-i * 5], byte[i + 1]): success [9ms]
test Byte256VectorTests.ANDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [208ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [7ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [30ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [3ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [30ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [5ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [14ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [38ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [155ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [9ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [9ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [9ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [8ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [8ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [7ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[-i * 5]): success [151ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[i * 5]): success [76ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[i + 1]): success [4ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[cornerCaseValue(i)]): success [19ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [31ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i * 5], mask[i % 2]): success [154ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i + 1], mask[i % 2]): success [6ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [29ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[-i * 5], mask[true]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i * 5], mask[true]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i + 1], mask[true]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[-i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte256VectorTests.AND_NOTByte256VectorTests(byte[-i * 5], byte[i * 5]): success [778ms]
test Byte256VectorTests.AND_NOTByte256VectorTests(byte[-i * 5], byte[i + 1]): success [144ms]
test Byte256VectorTests.AND_NOTByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [524ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [258ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [146ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [396ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [148ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [146ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [146ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [147ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [149ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [155ms]
test Byte256VectorTests.ASHRByte256VectorTests(byte[-i * 5], byte[i * 5]): success [533ms]
test Byte256VectorTests.ASHRByte256VectorTests(byte[-i * 5], byte[i + 1]): success [157ms]
test Byte256VectorTests.ASHRByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [517ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [400ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [149ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [402ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [159ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [150ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [150ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [158ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [148ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [157ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShift(byte[-i * 5], byte[i * 5]): success [551ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShift(byte[-i * 5], byte[i + 1]): success [7ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShift(byte[-i * 5], byte[cornerCaseValue(i)]): success [84ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[-i * 5]): success [92ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[i * 5]): success [7ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[i + 1]): success [74ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [260ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [8ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [112ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[true]): success [7ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[false]): success [39ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[false]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[i % 2]): success [16ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[i % 2]): success [8ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[i % 2]): success [109ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[true]): success [66ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [148ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[i * 5]): success [17ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[i + 1]): success [295ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[i * 5]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[i + 1]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [44ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [11ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [11ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [11ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [342ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [6ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [68ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [8ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [45ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [9ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [37ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [70ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [173ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [5ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [48ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): succ

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [24ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [3ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [3ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [3ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.bitwiseDivByZeroSmokeTest(): success [19ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i * 5], mask[i % 2]): success [28ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i + 1], mask[i % 2]): success [11ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [153ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i * 5], mask[true]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i + 1], mask[true]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i * 5], mask[false]): success [15ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [189ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [143ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [275ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [141ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [192ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [140ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [140ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [138ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [134ms]
test Byte256VectorTests.compressByte256VectorTests(byte[-i * 5], mask[i % 2]): success [1242ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i * 5], mask[i % 2]): success [299ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i + 1], mask[i % 2]): success [534ms]
test Byte256VectorTests.compressByte256VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [308ms]
test Byte256VectorTests.compressByte256VectorTests(byte[-i * 5], mask[true]): success [683ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i * 5], mask[true]): success [6ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i + 1], mask[true]): success [6ms]
test Byte256VectorTests.compressByte256VectorTests(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.compressByte256VectorTests(byte[-i * 5], mask[false]): success [22ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i * 5], mask[false]): success [22ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i + 1], mask[false]): success [83ms]
test Byte256VectorTests.compressByte256VectorTests(byte[cornerCaseValue(i)], mask[false]): success [23ms]
test Byte256VectorTests.divByte256VectorTests(byte[-i * 5], byte[i * 5]): success [583ms]
test Byte256VectorTests.divByte256VectorTests(byte[-i * 5], byte[i + 1]): success [402ms]
test Byte256VectorTests.divByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [808ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [36ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [286ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [10ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [13ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [10ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [14ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [5ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [6ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [1098ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [799ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): failure [1140ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lambda$binaryOperationsMF$7(ByteVector.java:956)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.bOpTemplateMF(ByteVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Byte256Vector.bOpMF(Byte256Vector.java:209)
	at jdk.incubator.vector/jdk.incubator.vector.Byte256Vector.bOpMF(Byte256Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lambda$binaryOperationsMF$6(ByteVector.java:956)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lanewiseTemplate(ByteVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Byte256Vector.lanewise(Byte256Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Byte256Vector.lanewise(Byte256Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.div(ByteVector.java:1729)
	at Byte256VectorTests.divByte256VectorTestsMasked(Byte256VectorTests.java:1796)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [807ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [808ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [802ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [805ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [800ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [800ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i]): success [436ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i - length / 2]): success [264ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i + 1]): success [322ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i - 2]): success [268ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[zigZag(i)]): success [269ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[cornerCaseValue(i)]): success [269ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i]): success [275ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i - length / 2]): success [268ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i + 1]): success [264ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i - 2]): success [264ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [264ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [263ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i]): success [264ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i - length / 2]): success [263ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i + 1]): success [268ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i - 2]): success [262ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[zigZag(i)]): success [272ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [277ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i]): success [264ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i - length / 2]): success [264ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i + 1]): success [264ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i - 2]): success [268ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[zigZag(i)]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [262ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i]): success [264ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [264ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i + 1]): success [275ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i - 2]): success [264ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [262ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [268ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i]): success [262ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [264ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [263ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [263ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [263ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [263ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i]): success [5ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i]): success [104ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i + 1]): success [8ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i + 1]): success [12ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.expandByte256VectorTests(byte[-i * 5], mask[i % 2]): success [1788ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i * 5], mask[i % 2]): success [400ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i + 1], mask[i % 2]): success [410ms]
test Byte256VectorTests.expandByte256VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [295ms]
test Byte256VectorTests.expandByte256VectorTests(byte[-i * 5], mask[true]): success [1363ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i * 5], mask[true]): success [6ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i + 1], mask[true]): success [6ms]
test Byte256VectorTests.expandByte256VectorTests(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.expandByte256VectorTests(byte[-i * 5], mask[false]): success [31ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i * 5], mask[false]): success [59ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i + 1], mask[false]): success [22ms]
test Byte256VectorTests.expandByte256VectorTests(byte[cornerCaseValue(i)], mask[false]): success [22ms]
test Byte256VectorTests.getByte256VectorTests(byte[-i * 5]): success [34ms]
test Byte256VectorTests.getByte256VectorTests(byte[i * 5]): success [33ms]
test Byte256VectorTests.getByte256VectorTests(byte[i + 1]): success [228ms]
test Byte256VectorTests.getByte256VectorTests(byte[cornerCaseValue(i)]): success [23ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[-i * 5]): success [40ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[i * 5]): success [1ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[i + 1]): success [1ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [17ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(0): success [80ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(-1): success [7ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(1): success [23ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(2): success [6ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(-2): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(0): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(-1): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(1): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(2): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(-2): success [6ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(0): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(32): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(37): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1024): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1025): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1029): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(0): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(32): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(37): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1024): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1025): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1029): success [0ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i]): success [434ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i - length / 2]): success [264ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i + 1]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i - 2]): success [347ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[zigZag(i)]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[cornerCaseValue(i)]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i]): success [264ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i - length / 2]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i + 1]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i - 2]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i - length / 2]): success [274ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i + 1]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i - 2]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[zigZag(i)]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [286ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i]): success [264ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i - length / 2]): success [263ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i + 1]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i - 2]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[zigZag(i)]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [276ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [268ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i + 1]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i - 2]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i]): success [312ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [280ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [267ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [265ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i]): success [5ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i]): success [106ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [6ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.maskAndByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Byte256VectorTests.maskAndByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskAndNotByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test Byte256VectorTests.maskAndNotByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskCompressByte256VectorTestsSmokeTest(mask[i % 2]): success [803ms]
test Byte256VectorTests.maskCompressByte256VectorTestsSmokeTest(mask[true]): success [581ms]
test Byte256VectorTests.maskCompressByte256VectorTestsSmokeTest(mask[false]): success [598ms]
test Byte256VectorTests.maskEqByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Byte256VectorTests.maskEqByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskEqualsByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Byte256VectorTests.maskEqualsByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskFirstTrueByte256VectorTestsSmokeTest(mask[i % 2]): success [118ms]
test Byte256VectorTests.maskFirstTrueByte256VectorTestsSmokeTest(mask[true]): success [146ms]
test Byte256VectorTests.maskFirstTrueByte256VectorTestsSmokeTest(mask[false]): success [107ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(-1): success [68ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(0): success [0ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Byte256VectorTests.maskHashCodeByte256VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Byte256VectorTests.maskHashCodeByte256VectorTestsSmokeTest(mask[true]): success [0ms]
test Byte256VectorTests.maskHashCodeByte256VectorTestsSmokeTest(mask[false]): success [0ms]
test Byte256VectorTests.maskLastTrueByte256VectorTestsSmokeTest(mask[i % 2]): success [160ms]
test Byte256VectorTests.maskLastTrueByte256VectorTestsSmokeTest(mask[true]): success [144ms]
test Byte256VectorTests.maskLastTrueByte256VectorTestsSmokeTest(mask[false]): success [129ms]
test Byte256VectorTests.maskOrByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [21ms]
test Byte256VectorTests.maskOrByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskTrueCountByte256VectorTestsSmokeTest(mask[i % 2]): success [116ms]
test Byte256VectorTests.maskTrueCountByte256VectorTestsSmokeTest(mask[true]): success [145ms]
test Byte256VectorTests.maskTrueCountByte256VectorTestsSmokeTest(mask[false]): success [106ms]
test Byte256VectorTests.maskXorByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Byte256VectorTests.maskXorByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maxByte256VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte256VectorTests.maxByte256VectorTests(byte[-i * 5], byte[i + 1]): success [5ms]
test Byte256VectorTests.maxByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.maxByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte256VectorTests.maxByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.maxByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.minByte256VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte256VectorTests.minByte256VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte256VectorTests.minByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.minByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte256VectorTests.minByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.minByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.mulByte256VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte256VectorTests.mulByte256VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte256VectorTests.mulByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [7ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [6ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte256VectorTests.negByte256VectorTests(byte[-i * 5]): success [20ms]
test Byte256VectorTests.negByte256VectorTests(byte[i * 5]): success [5ms]
test Byte256VectorTests.negByte256VectorTests(byte[i + 1]): success [102ms]
test Byte256VectorTests.negByte256VectorTests(byte[cornerCaseValue(i)]): success [3ms]
test Byte256VectorTests.notByte256VectorTests(byte[-i * 5]): success [161ms]
test Byte256VectorTests.notByte256VectorTests(byte[i * 5]): success [136ms]
test Byte256VectorTests.notByte256VectorTests(byte[i + 1]): success [266ms]
test Byte256VectorTests.notByte256VectorTests(byte[cornerCaseValue(i)]): success [137ms]
test Byte256VectorTests.orByte256VectorTests(byte[-i * 5], byte[i * 5]): success [12ms]
test Byte256VectorTests.orByte256VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte256VectorTests.orByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.orByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte256VectorTests.orByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.orByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[-i * 5]): success [1ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[i * 5]): success [19ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.shuffleEqualsByte256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [2166ms]
test Byte256VectorTests.shuffleEqualsByte256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [445ms]
test Byte256VectorTests.shuffleMiscellaneousByte256VectorTestsSmokeTest(shuffle[random]): success [88ms]
test Byte256VectorTests.shuffleTest(): success [1037ms]
test Byte256VectorTests.shuffleToStringByte256VectorTestsSmokeTest(shuffle[random]): success [70ms]
test Byte256VectorTests.sliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [2217ms]
test Byte256VectorTests.sliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [1192ms]
test Byte256VectorTests.sliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [2604ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [1642ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1327ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [4239ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1337ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [1323ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1338ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [1374ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [1338ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1332ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[-i * 5]): success [1531ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[i * 5]): success [1089ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[i + 1]): success [1764ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[cornerCaseValue(i)]): success [1073ms]
test Byte256VectorTests.smokeTest1(): success [26ms]
test Byte256VectorTests.smokeTest2(): success [57ms]
test Byte256VectorTests.subByte256VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte256VectorTests.subByte256VectorTests(byte[-i * 5], byte[i + 1]): success [225ms]
test Byte256VectorTests.subByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [192ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [436ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [30ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [34ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[-i * 5]): success [1ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[i + 1]): success [3ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[-i * 5]): success [3ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[i * 5]): success [9ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[i + 1]): success [7ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[-i * 5]): success [21ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[i * 5]): success [13ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[i + 1]): success [60ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.unsliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [1662ms]
test Byte256VectorTests.unsliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [1088ms]
test Byte256VectorTests.unsliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [2328ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [3645ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [2909ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [5867ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [2304ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [2390ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2337ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [2336ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [2333ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2338ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[-i * 5]): success [1522ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[i * 5]): success [1073ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[i + 1]): success [1760ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[cornerCaseValue(i)]): success [1072ms]
test Byte256VectorTests.viewAsFloatingLanesTest(): success [17ms]
test Byte256VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Byte256VectorTests.withByte256VectorTests(byte[-i * 5], byte[i * 5]): success [21ms]
test Byte256VectorTests.withByte256VectorTests(byte[-i * 5], byte[i + 1]): success [21ms]
test Byte256VectorTests.withByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [615ms]

===============================================
jdk/incubator/vector/Byte256VectorTests.java
Total tests run: 3602, Passes: 3601, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/10 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Byte256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/Byte256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/9/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Byte256VectorTests.d/testng.0.jta jdk/incubator/vector/Byte256VectorTests.java false Byte256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
TEST: jdk/incubator/vector/Byte64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   20.624 seconds
messages:
command: build Byte64VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 16:42:55 IST 2025
Test directory:
  compile: Byte64VectorTests
finished: Wed Apr 16 16:43:16 IST 2025
elapsed time (seconds): 20.624

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   20.616 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte64VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 16:42:55 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 7
Process id: 1413416
finished: Wed Apr 16 16:43:16 IST 2025
elapsed time (seconds): 20.616
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/5/jdk/incubator/vector/Byte64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/5/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/9 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Byte64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/5/jdk/incubator/vector/Byte64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/5/jdk/incubator/vector/Byte64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/5/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/5/jdk/incubator/vector/Byte64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/5/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/5/jdk/incubator/vector/Byte64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/5/jdk/incubator/vector/Byte64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/5/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte64VectorTests 
TIME:   965.654 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Byte64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte64VectorTests 
started: Wed Apr 16 16:43:16 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1414768
finished: Wed Apr 16 16:59:22 IST 2025
elapsed time (seconds): 965.654
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -1835851336752387342
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-1835851336752387342" to command line.
test Byte64VectorTests.ABSByte64VectorTests(byte[-i * 5]): success [604ms]
test Byte64VectorTests.ABSByte64VectorTests(byte[i * 5]): success [29ms]
test Byte64VectorTests.ABSByte64VectorTests(byte[i + 1]): success [54ms]
test Byte64VectorTests.ABSByte64VectorTests(byte[cornerCaseValue(i)]): success [10ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[-i * 5], mask[i % 2]): success [257ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[i * 5], mask[i % 2]): success [25ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[i + 1], mask[i % 2]): success [42ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[-i * 5], mask[true]): success [4ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[i * 5], mask[true]): success [4ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[i + 1], mask[true]): success [4ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[cornerCaseValue(i)], mask[true]): success [33ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[-i * 5], mask[false]): success [3ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[i * 5], mask[false]): success [4ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[i + 1], mask[false]): success [4ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[cornerCaseValue(i)], mask[false]): success [4ms]
test Byte64VectorTests.ADDByte64VectorTests(byte[-i * 5], byte[i * 5]): success [270ms]
test Byte64VectorTests.ADDByte64VectorTests(byte[-i * 5], byte[i + 1]): success [30ms]
test Byte64VectorTests.ADDByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5]): success [67ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1]): success [3ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [16ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [34ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [7ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [45ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [4ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [5ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [4ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [60ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [4ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [4ms]
test Byte64VectorTests.ADDByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [154ms]
test Byte64VectorTests.ADDByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [36ms]
test Byte64VectorTests.ADDByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Byte64VectorTests.ADDByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [82ms]
test Byte64VectorTests.ADDByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [3ms]
test Byte64VectorTests.ADDByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [3ms]
test Byte64VectorTests.ADDByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [60ms]
test Byte64VectorTests.ADDByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [3ms]
test Byte64VectorTests.ADDByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [3ms]
test Byte64VectorTests.ADDReduceByte64VectorTests(byte[-i * 5]): success [141ms]
test Byte64VectorTests.ADDReduceByte64VectorTests(byte[i * 5]): success [34ms]
test Byte64VectorTests.ADDReduceByte64VectorTests(byte[i + 1]): success [34ms]
test Byte64VectorTests.ADDReduceByte64VectorTests(byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [128ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[i * 5], mask[i % 2]): success [17ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[i + 1], mask[i % 2]): success [63ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [33ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[-i * 5], mask[true]): success [4ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[i * 5], mask[true]): success [87ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[i + 1], mask[true]): success [6ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[-i * 5], mask[false]): success [6ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[i * 5], mask[false]): success [6ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[i + 1], mask[false]): success [23ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTests(byte[-i * 5]): success [20ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTests(byte[i * 5]): success [7ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTests(byte[i + 1]): success [0ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTests(byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [9ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[i * 5], mask[i % 2]): success [13ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[i + 1], mask[i % 2]): success [0ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[-i * 5], mask[true]): success [3ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[i * 5], mask[true]): success [64ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[-i * 5], mask[false]): success [1ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.ANDByte64VectorTests(byte[-i * 5], byte[i * 5]): success [249ms]
test Byte64VectorTests.ANDByte64VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.ANDByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [61ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [22ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [10ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [4ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [3ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [39ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [29ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [20ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [3ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte64VectorTests.ANDByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [74ms]
test Byte64VectorTests.ANDByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [65ms]
test Byte64VectorTests.ANDByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [19ms]
test Byte64VectorTests.ANDByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [34ms]
test Byte64VectorTests.ANDByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [3ms]
test Byte64VectorTests.ANDByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [4ms]
test Byte64VectorTests.ANDByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [3ms]
test Byte64VectorTests.ANDByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [3ms]
test Byte64VectorTests.ANDByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [3ms]
test Byte64VectorTests.ANDReduceByte64VectorTests(byte[-i * 5]): success [182ms]
test Byte64VectorTests.ANDReduceByte64VectorTests(byte[i * 5]): success [48ms]
test Byte64VectorTests.ANDReduceByte64VectorTests(byte[i + 1]): success [4ms]
test Byte64VectorTests.ANDReduceByte64VectorTests(byte[cornerCaseValue(i)]): success [4ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [103ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[i * 5], mask[i % 2]): success [23ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[i + 1], mask[i % 2]): success [89ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [106ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[-i * 5], mask[true]): success [50ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[i * 5], mask[true]): success [8ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[i + 1], mask[true]): success [5ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[-i * 5], mask[false]): success [5ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[i * 5], mask[false]): success [5ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[i + 1], mask[false]): success [5ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte64VectorTests.AND_NOTByte64VectorTests(byte[-i * 5], byte[i * 5]): success [247ms]
test Byte64VectorTests.AND_NOTByte64VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.AND_NOTByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [67ms]
test Byte64VectorTests.AND_NOTByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [158ms]
test Byte64VectorTests.AND_NOTByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [39ms]
test Byte64VectorTests.AND_NOTByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [41ms]
test Byte64VectorTests.AND_NOTByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [7ms]
test Byte64VectorTests.AND_NOTByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [6ms]
test Byte64VectorTests.AND_NOTByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [7ms]
test Byte64VectorTests.AND_NOTByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [6ms]
test Byte64VectorTests.AND_NOTByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [6ms]
test Byte64VectorTests.AND_NOTByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte64VectorTests.ASHRByte64VectorTests(byte[-i * 5], byte[i * 5]): success [196ms]
test Byte64VectorTests.ASHRByte64VectorTests(byte[-i * 5], byte[i + 1]): success [36ms]
test Byte64VectorTests.ASHRByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [75ms]
test Byte64VectorTests.ASHRByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [182ms]
test Byte64VectorTests.ASHRByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [6ms]
test Byte64VectorTests.ASHRByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Byte64VectorTests.ASHRByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [8ms]
test Byte64VectorTests.ASHRByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [83ms]
test Byte64VectorTests.ASHRByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte64VectorTests.ASHRByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [6ms]
test Byte64VectorTests.ASHRByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [6ms]
test Byte64VectorTests.ASHRByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShift(byte[-i * 5], byte[i * 5]): success [272ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShift(byte[-i * 5], byte[i + 1]): success [4ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShift(byte[-i * 5], byte[cornerCaseValue(i)]): success [46ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftConst(byte[-i * 5]): success [89ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftConst(byte[i * 5]): success [4ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftConst(byte[i + 1]): success [41ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftConst(byte[cornerCaseValue(i)]): success [4ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [134ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [5ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [59ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[true]): success [32ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[true]): success [5ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [42ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[false]): success [7ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[false]): success [7ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [7ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[i % 2]): success [119ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[i % 2]): success [5ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[i % 2]): success [57ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[i % 2]): success [28ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[true]): success [5ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[true]): success [70ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[true]): success [5ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[true]): success [4ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[false]): success [4ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[false]): success [6ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[false]): success [6ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [205ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[i * 5], byte[i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[i * 5], byte[i + 1]): success [83ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [53ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[i + 1], byte[i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[i + 1], byte[i + 1]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [446ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [2ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [5ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [70ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [81ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [7ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [46ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [8ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [40ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [24ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [4ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [59ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [0ms]

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

byte[cornerCaseValue(i)], mask[true]): success [3ms]
test Byte64VectorTests.blendByte64VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [4ms]
test Byte64VectorTests.blendByte64VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [2ms]
test Byte64VectorTests.blendByte64VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte64VectorTests.compressByte64VectorTests(byte[-i * 5], mask[i % 2]): success [479ms]
test Byte64VectorTests.compressByte64VectorTests(byte[i * 5], mask[i % 2]): success [279ms]
test Byte64VectorTests.compressByte64VectorTests(byte[i + 1], mask[i % 2]): success [279ms]
test Byte64VectorTests.compressByte64VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [279ms]
test Byte64VectorTests.compressByte64VectorTests(byte[-i * 5], mask[true]): success [152ms]
test Byte64VectorTests.compressByte64VectorTests(byte[i * 5], mask[true]): success [12ms]
test Byte64VectorTests.compressByte64VectorTests(byte[i + 1], mask[true]): success [11ms]
test Byte64VectorTests.compressByte64VectorTests(byte[cornerCaseValue(i)], mask[true]): success [11ms]
test Byte64VectorTests.compressByte64VectorTests(byte[-i * 5], mask[false]): success [19ms]
test Byte64VectorTests.compressByte64VectorTests(byte[i * 5], mask[false]): success [19ms]
test Byte64VectorTests.compressByte64VectorTests(byte[i + 1], mask[false]): success [19ms]
test Byte64VectorTests.compressByte64VectorTests(byte[cornerCaseValue(i)], mask[false]): success [19ms]
test Byte64VectorTests.divByte64VectorTests(byte[-i * 5], byte[i * 5]): success [474ms]
test Byte64VectorTests.divByte64VectorTests(byte[-i * 5], byte[i + 1]): success [357ms]
test Byte64VectorTests.divByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [324ms]
test Byte64VectorTests.divByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [130ms]
test Byte64VectorTests.divByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [6ms]
test Byte64VectorTests.divByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Byte64VectorTests.divByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [7ms]
test Byte64VectorTests.divByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [6ms]
test Byte64VectorTests.divByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte64VectorTests.divByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [6ms]
test Byte64VectorTests.divByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [6ms]
test Byte64VectorTests.divByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte64VectorTests.divByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [12ms]
test Byte64VectorTests.divByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [3ms]
test Byte64VectorTests.divByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [4ms]
test Byte64VectorTests.divByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [891ms]
test Byte64VectorTests.divByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [636ms]
test Byte64VectorTests.divByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [636ms]
test Byte64VectorTests.divByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [690ms]
test Byte64VectorTests.divByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [646ms]
test Byte64VectorTests.divByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [637ms]
test Byte64VectorTests.divByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [634ms]
test Byte64VectorTests.divByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [634ms]
test Byte64VectorTests.divByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [635ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i], byte[i]): success [411ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i], byte[i - length / 2]): success [320ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i], byte[i + 1]): success [314ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i], byte[i - 2]): success [312ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i], byte[zigZag(i)]): success [315ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i], byte[cornerCaseValue(i)]): success [313ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - length / 2], byte[i]): success [314ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - length / 2], byte[i - length / 2]): success [316ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - length / 2], byte[i + 1]): success [315ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - length / 2], byte[i - 2]): success [312ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [312ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [313ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i + 1], byte[i]): success [313ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i + 1], byte[i - length / 2]): success [313ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i + 1], byte[i + 1]): success [312ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i + 1], byte[i - 2]): success [312ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i + 1], byte[zigZag(i)]): success [315ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [313ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - 2], byte[i]): success [325ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - 2], byte[i - length / 2]): success [312ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - 2], byte[i + 1]): success [312ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - 2], byte[i - 2]): success [312ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - 2], byte[zigZag(i)]): success [314ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [313ms]
test Byte64VectorTests.eqByte64VectorTests(byte[zigZag(i)], byte[i]): success [314ms]
test Byte64VectorTests.eqByte64VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [313ms]
test Byte64VectorTests.eqByte64VectorTests(byte[zigZag(i)], byte[i + 1]): success [314ms]
test Byte64VectorTests.eqByte64VectorTests(byte[zigZag(i)], byte[i - 2]): success [315ms]
test Byte64VectorTests.eqByte64VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [316ms]
test Byte64VectorTests.eqByte64VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [313ms]
test Byte64VectorTests.eqByte64VectorTests(byte[cornerCaseValue(i)], byte[i]): success [312ms]
test Byte64VectorTests.eqByte64VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [311ms]
test Byte64VectorTests.eqByte64VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [311ms]
test Byte64VectorTests.eqByte64VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [311ms]
test Byte64VectorTests.eqByte64VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [312ms]
test Byte64VectorTests.eqByte64VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [311ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i]): success [4ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i + 1]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [63ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i + 1]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i + 1]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i + 1]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i + 1]): success [11ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.expandByte64VectorTests(byte[-i * 5], mask[i % 2]): success [419ms]
test Byte64VectorTests.expandByte64VectorTests(byte[i * 5], mask[i % 2]): success [278ms]
test Byte64VectorTests.expandByte64VectorTests(byte[i + 1], mask[i % 2]): success [292ms]
test Byte64VectorTests.expandByte64VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [277ms]
test Byte64VectorTests.expandByte64VectorTests(byte[-i * 5], mask[true]): success [44ms]
test Byte64VectorTests.expandByte64VectorTests(byte[i * 5], mask[true]): success [52ms]
test Byte64VectorTests.expandByte64VectorTests(byte[i + 1], mask[true]): success [12ms]
test Byte64VectorTests.expandByte64VectorTests(byte[cornerCaseValue(i)], mask[true]): success [12ms]
test Byte64VectorTests.expandByte64VectorTests(byte[-i * 5], mask[false]): success [20ms]
test Byte64VectorTests.expandByte64VectorTests(byte[i * 5], mask[false]): success [20ms]
test Byte64VectorTests.expandByte64VectorTests(byte[i + 1], mask[false]): success [20ms]
test Byte64VectorTests.expandByte64VectorTests(byte[cornerCaseValue(i)], mask[false]): success [20ms]
test Byte64VectorTests.getByte64VectorTests(byte[-i * 5]): success [64ms]
test Byte64VectorTests.getByte64VectorTests(byte[i * 5]): success [9ms]
test Byte64VectorTests.getByte64VectorTests(byte[i + 1]): success [8ms]
test Byte64VectorTests.getByte64VectorTests(byte[cornerCaseValue(i)]): success [8ms]
test Byte64VectorTests.hashCodeByte64VectorTestsSmokeTest(byte[-i * 5]): success [50ms]
test Byte64VectorTests.hashCodeByte64VectorTestsSmokeTest(byte[i * 5]): success [18ms]
test Byte64VectorTests.hashCodeByte64VectorTestsSmokeTest(byte[i + 1]): success [22ms]
test Byte64VectorTests.hashCodeByte64VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [2ms]
test Byte64VectorTests.indexInRangeByte64VectorTestsSmokeTest(0): success [95ms]
test Byte64VectorTests.indexInRangeByte64VectorTestsSmokeTest(-1): success [10ms]
test Byte64VectorTests.indexInRangeByte64VectorTestsSmokeTest(1): success [30ms]
test Byte64VectorTests.indexInRangeByte64VectorTestsSmokeTest(2): success [9ms]
test Byte64VectorTests.indexInRangeByte64VectorTestsSmokeTest(-2): success [9ms]
test Byte64VectorTests.indexInRangeLongByte64VectorTestsSmokeTest(0): success [9ms]
test Byte64VectorTests.indexInRangeLongByte64VectorTestsSmokeTest(-1): success [9ms]
test Byte64VectorTests.indexInRangeLongByte64VectorTestsSmokeTest(1): success [9ms]
test Byte64VectorTests.indexInRangeLongByte64VectorTestsSmokeTest(2): success [19ms]
test Byte64VectorTests.indexInRangeLongByte64VectorTestsSmokeTest(-2): success [8ms]
test Byte64VectorTests.loopBoundByte64VectorTestsSmokeTest(0): success [0ms]
test Byte64VectorTests.loopBoundByte64VectorTestsSmokeTest(1): success [0ms]
test Byte64VectorTests.loopBoundByte64VectorTestsSmokeTest(32): success [0ms]
test Byte64VectorTests.loopBoundByte64VectorTestsSmokeTest(37): success [0ms]
test Byte64VectorTests.loopBoundByte64VectorTestsSmokeTest(1024): success [0ms]
test Byte64VectorTests.loopBoundByte64VectorTestsSmokeTest(1025): success [0ms]
test Byte64VectorTests.loopBoundByte64VectorTestsSmokeTest(1029): success [0ms]
test Byte64VectorTests.loopBoundLongByte64VectorTestsSmokeTest(0): success [0ms]
test Byte64VectorTests.loopBoundLongByte64VectorTestsSmokeTest(1): success [0ms]
test Byte64VectorTests.loopBoundLongByte64VectorTestsSmokeTest(32): success [0ms]
test Byte64VectorTests.loopBoundLongByte64VectorTestsSmokeTest(37): success [0ms]
test Byte64VectorTests.loopBoundLongByte64VectorTestsSmokeTest(1024): success [0ms]
test Byte64VectorTests.loopBoundLongByte64VectorTestsSmokeTest(1025): success [0ms]
test Byte64VectorTests.loopBoundLongByte64VectorTestsSmokeTest(1029): success [0ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i], byte[i]): success [417ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i], byte[i - length / 2]): success [322ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i], byte[i + 1]): success [313ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i], byte[i - 2]): success [313ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i], byte[zigZag(i)]): success [315ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i], byte[cornerCaseValue(i)]): success [315ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - length / 2], byte[i]): success [313ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - length / 2], byte[i - length / 2]): success [315ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - length / 2], byte[i + 1]): success [315ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - length / 2], byte[i - 2]): success [313ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [316ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [317ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i + 1], byte[i]): success [314ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i + 1], byte[i - length / 2]): success [314ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i + 1], byte[i + 1]): success [327ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i + 1], byte[i - 2]): success [314ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i + 1], byte[zigZag(i)]): success [314ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [320ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - 2], byte[i]): success [314ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - 2], byte[i - length / 2]): success [316ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - 2], byte[i + 1]): success [316ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - 2], byte[i - 2]): success [316ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - 2], byte[zigZag(i)]): success [318ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [318ms]
test Byte64VectorTests.ltByte64VectorTests(byte[zigZag(i)], byte[i]): success [316ms]
test Byte64VectorTests.ltByte64VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [315ms]
test Byte64VectorTests.ltByte64VectorTests(byte[zigZag(i)], byte[i + 1]): success [316ms]
test Byte64VectorTests.ltByte64VectorTests(byte[zigZag(i)], byte[i - 2]): success [315ms]
test Byte64VectorTests.ltByte64VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [325ms]
test Byte64VectorTests.ltByte64VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [319ms]
test Byte64VectorTests.ltByte64VectorTests(byte[cornerCaseValue(i)], byte[i]): success [345ms]
test Byte64VectorTests.ltByte64VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [316ms]
test Byte64VectorTests.ltByte64VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [315ms]
test Byte64VectorTests.ltByte64VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [315ms]
test Byte64VectorTests.ltByte64VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [315ms]
test Byte64VectorTests.ltByte64VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [312ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i], byte[i]): success [4ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i], byte[i + 1]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i], byte[i - 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [64ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i + 1]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i + 1]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i + 1], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i + 1]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - 2], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i + 1]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.maskAndByte64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test Byte64VectorTests.maskAndByte64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte64VectorTests.maskAndNotByte64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Byte64VectorTests.maskAndNotByte64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte64VectorTests.maskCompressByte64VectorTestsSmokeTest(mask[i % 2]): success [324ms]
test Byte64VectorTests.maskCompressByte64VectorTestsSmokeTest(mask[true]): success [153ms]
test Byte64VectorTests.maskCompressByte64VectorTestsSmokeTest(mask[false]): success [122ms]
test Byte64VectorTests.maskEqByte64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Byte64VectorTests.maskEqByte64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte64VectorTests.maskEqualsByte64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Byte64VectorTests.maskEqualsByte64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte64VectorTests.maskFirstTrueByte64VectorTestsSmokeTest(mask[i % 2]): success [50ms]
test Byte64VectorTests.maskFirstTrueByte64VectorTestsSmokeTest(mask[true]): success [69ms]
test Byte64VectorTests.maskFirstTrueByte64VectorTestsSmokeTest(mask[false]): success [37ms]
test Byte64VectorTests.maskFromToLongByte64VectorTestsSmokeTest(-1): success [79ms]
test Byte64VectorTests.maskFromToLongByte64VectorTestsSmokeTest(0): success [0ms]
test Byte64VectorTests.maskFromToLongByte64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Byte64VectorTests.maskFromToLongByte64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Byte64VectorTests.maskHashCodeByte64VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Byte64VectorTests.maskHashCodeByte64VectorTestsSmokeTest(mask[true]): success [0ms]
test Byte64VectorTests.maskHashCodeByte64VectorTestsSmokeTest(mask[false]): success [0ms]
test Byte64VectorTests.maskLastTrueByte64VectorTestsSmokeTest(mask[i % 2]): success [91ms]
test Byte64VectorTests.maskLastTrueByte64VectorTestsSmokeTest(mask[true]): success [69ms]
test Byte64VectorTests.maskLastTrueByte64VectorTestsSmokeTest(mask[false]): success [54ms]
test Byte64VectorTests.maskOrByte64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [24ms]
test Byte64VectorTests.maskOrByte64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte64VectorTests.maskTrueCountByte64VectorTestsSmokeTest(mask[i % 2]): success [46ms]
test Byte64VectorTests.maskTrueCountByte64VectorTestsSmokeTest(mask[true]): success [69ms]
test Byte64VectorTests.maskTrueCountByte64VectorTestsSmokeTest(mask[false]): success [37ms]
test Byte64VectorTests.maskXorByte64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Byte64VectorTests.maskXorByte64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte64VectorTests.maxByte64VectorTests(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte64VectorTests.maxByte64VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.maxByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte64VectorTests.maxByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte64VectorTests.maxByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.maxByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.minByte64VectorTests(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte64VectorTests.minByte64VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.minByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte64VectorTests.minByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte64VectorTests.minByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.minByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.mulByte64VectorTests(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte64VectorTests.mulByte64VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.mulByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [7ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [7ms]
test Byte64VectorTests.mulByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.negByte64VectorTests(byte[-i * 5]): success [69ms]
test Byte64VectorTests.negByte64VectorTests(byte[i * 5]): success [0ms]
test Byte64VectorTests.negByte64VectorTests(byte[i + 1]): success [41ms]
test Byte64VectorTests.negByte64VectorTests(byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.notByte64VectorTests(byte[-i * 5]): success [63ms]
test Byte64VectorTests.notByte64VectorTests(byte[i * 5]): success [0ms]
test Byte64VectorTests.notByte64VectorTests(byte[i + 1]): success [47ms]
test Byte64VectorTests.notByte64VectorTests(byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.orByte64VectorTests(byte[-i * 5], byte[i * 5]): success [9ms]
test Byte64VectorTests.orByte64VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.orByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte64VectorTests.orByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte64VectorTests.orByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.orByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.reinterpretAsBytesByte64VectorTestsSmokeTest(byte[-i * 5]): success [17ms]
test Byte64VectorTests.reinterpretAsBytesByte64VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte64VectorTests.reinterpretAsBytesByte64VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte64VectorTests.reinterpretAsBytesByte64VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.shuffleEqualsByte64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [1272ms]
test Byte64VectorTests.shuffleEqualsByte64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [550ms]
test Byte64VectorTests.shuffleMiscellaneousByte64VectorTestsSmokeTest(shuffle[random]): success [759ms]
test Byte64VectorTests.shuffleTest(): success [455ms]
test Byte64VectorTests.shuffleToStringByte64VectorTestsSmokeTest(shuffle[random]): success [44ms]
test Byte64VectorTests.sliceBinaryByte64VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [832ms]
test Byte64VectorTests.sliceBinaryByte64VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [408ms]
test Byte64VectorTests.sliceBinaryByte64VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [384ms]
test Byte64VectorTests.sliceByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [649ms]
test Byte64VectorTests.sliceByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [407ms]
test Byte64VectorTests.sliceByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [380ms]
test Byte64VectorTests.sliceByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [405ms]
test Byte64VectorTests.sliceByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [530ms]
test Byte64VectorTests.sliceByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [376ms]
test Byte64VectorTests.sliceByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [393ms]
test Byte64VectorTests.sliceByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [378ms]
test Byte64VectorTests.sliceByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [377ms]
test Byte64VectorTests.sliceUnaryByte64VectorTests(byte[-i * 5]): success [744ms]
test Byte64VectorTests.sliceUnaryByte64VectorTests(byte[i * 5]): success [346ms]
test Byte64VectorTests.sliceUnaryByte64VectorTests(byte[i + 1]): success [445ms]
test Byte64VectorTests.sliceUnaryByte64VectorTests(byte[cornerCaseValue(i)]): success [358ms]
test Byte64VectorTests.smokeTest1(): success [26ms]
test Byte64VectorTests.smokeTest2(): success [71ms]
test Byte64VectorTests.subByte64VectorTests(byte[-i * 5], byte[i * 5]): success [98ms]
test Byte64VectorTests.subByte64VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.subByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [271ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [27ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [33ms]
test Byte64VectorTests.subByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.toDoubleArrayByte64VectorTestsSmokeTest(byte[-i * 5]): success [1ms]
test Byte64VectorTests.toDoubleArrayByte64VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte64VectorTests.toDoubleArrayByte64VectorTestsSmokeTest(byte[i + 1]): success [3ms]
test Byte64VectorTests.toDoubleArrayByte64VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [22ms]
test Byte64VectorTests.toIntArrayByte64VectorTestsSmokeTest(byte[-i * 5]): success [8ms]
test Byte64VectorTests.toIntArrayByte64VectorTestsSmokeTest(byte[i * 5]): success [1ms]
test Byte64VectorTests.toIntArrayByte64VectorTestsSmokeTest(byte[i + 1]): success [7ms]
test Byte64VectorTests.toIntArrayByte64VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [20ms]
test Byte64VectorTests.toLongArrayByte64VectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test Byte64VectorTests.toLongArrayByte64VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte64VectorTests.toLongArrayByte64VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte64VectorTests.toLongArrayByte64VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [13ms]
test Byte64VectorTests.toStringByte64VectorTestsSmokeTest(byte[-i * 5]): success [22ms]
test Byte64VectorTests.toStringByte64VectorTestsSmokeTest(byte[i * 5]): success [63ms]
test Byte64VectorTests.toStringByte64VectorTestsSmokeTest(byte[i + 1]): success [6ms]
test Byte64VectorTests.toStringByte64VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [1ms]
test Byte64VectorTests.unsliceBinaryByte64VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [730ms]
test Byte64VectorTests.unsliceBinaryByte64VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [350ms]
test Byte64VectorTests.unsliceBinaryByte64VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [713ms]
test Byte64VectorTests.unsliceByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [1493ms]
test Byte64VectorTests.unsliceByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [777ms]
test Byte64VectorTests.unsliceByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [819ms]
test Byte64VectorTests.unsliceByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [732ms]
test Byte64VectorTests.unsliceByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [878ms]
test Byte64VectorTests.unsliceByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [879ms]
test Byte64VectorTests.unsliceByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [728ms]
test Byte64VectorTests.unsliceByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [721ms]
test Byte64VectorTests.unsliceByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [727ms]
test Byte64VectorTests.unsliceUnaryByte64VectorTests(byte[-i * 5]): success [605ms]
test Byte64VectorTests.unsliceUnaryByte64VectorTests(byte[i * 5]): success [410ms]
test Byte64VectorTests.unsliceUnaryByte64VectorTests(byte[i + 1]): success [348ms]
test Byte64VectorTests.unsliceUnaryByte64VectorTests(byte[cornerCaseValue(i)]): success [367ms]
test Byte64VectorTests.viewAsFloatingLanesTest(): success [16ms]
test Byte64VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Byte64VectorTests.withByte64VectorTests(byte[-i * 5], byte[i * 5]): success [148ms]
test Byte64VectorTests.withByte64VectorTests(byte[-i * 5], byte[i + 1]): success [94ms]
test Byte64VectorTests.withByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [87ms]

===============================================
jdk/incubator/vector/Byte64VectorTests.java
Total tests run: 3602, Passes: 3601, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/9 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/5/jdk/incubator/vector/Byte64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/5/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Byte64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/5/jdk/incubator/vector/Byte64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/5/jdk/incubator/vector/Byte64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/5/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/5/jdk/incubator/vector/Byte64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/5/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Byte64VectorTests.d/testng.0.jta jdk/incubator/vector/Byte64VectorTests.java false Byte64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
TEST: jdk/incubator/vector/Byte512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   26.386 seconds
messages:
command: build Byte512VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 16:42:55 IST 2025
Test directory:
  compile: Byte512VectorTests
finished: Wed Apr 16 16:43:22 IST 2025
elapsed time (seconds): 26.386

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   26.381 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 16:42:55 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 13
Process id: 1413972
finished: Wed Apr 16 16:43:22 IST 2025
elapsed time (seconds): 26.381
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/2 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Byte512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte512VectorTests 
TIME:   979.734 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Byte512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte512VectorTests 
started: Wed Apr 16 16:43:22 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1415129
finished: Wed Apr 16 16:59:41 IST 2025
elapsed time (seconds): 979.734
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -869181194477082877
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-869181194477082877" to command line.
test Byte512VectorTests.ABSByte512VectorTests(byte[-i * 5]): success [470ms]
test Byte512VectorTests.ABSByte512VectorTests(byte[i * 5]): success [1154ms]
test Byte512VectorTests.ABSByte512VectorTests(byte[i + 1]): success [33ms]
test Byte512VectorTests.ABSByte512VectorTests(byte[cornerCaseValue(i)]): success [8ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[-i * 5], mask[i % 2]): success [343ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i * 5], mask[i % 2]): success [357ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i + 1], mask[i % 2]): success [243ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [10ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[-i * 5], mask[true]): success [396ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i * 5], mask[true]): success [5ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i + 1], mask[true]): success [5ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[cornerCaseValue(i)], mask[true]): success [7ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[-i * 5], mask[false]): success [4ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i * 5], mask[false]): success [3ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[i + 1], mask[false]): success [3ms]
test Byte512VectorTests.ABSMaskedByte512VectorTests(byte[cornerCaseValue(i)], mask[false]): success [3ms]
test Byte512VectorTests.ADDByte512VectorTests(byte[-i * 5], byte[i * 5]): success [184ms]
test Byte512VectorTests.ADDByte512VectorTests(byte[-i * 5], byte[i + 1]): success [1727ms]
test Byte512VectorTests.ADDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [7ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5]): success [64ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [5ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [24ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [4ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [15ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [7ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [56ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [4ms]
test Byte512VectorTests.ADDByte512VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [4ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [658ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [199ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [12ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [12ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [330ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [7ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [65ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [9ms]
test Byte512VectorTests.ADDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [9ms]
test Byte512VectorTests.ADDReduceByte512VectorTests(byte[-i * 5]): success [241ms]
test Byte512VectorTests.ADDReduceByte512VectorTests(byte[i * 5]): success [8ms]
test Byte512VectorTests.ADDReduceByte512VectorTests(byte[i + 1]): success [105ms]
test Byte512VectorTests.ADDReduceByte512VectorTests(byte[cornerCaseValue(i)]): success [20ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [201ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i * 5], mask[i % 2]): success [13ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i + 1], mask[i % 2]): success [206ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [35ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[-i * 5], mask[true]): success [23ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i * 5], mask[true]): success [9ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i + 1], mask[true]): success [9ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [8ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[-i * 5], mask[false]): success [7ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i * 5], mask[false]): success [7ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[i + 1], mask[false]): success [8ms]
test Byte512VectorTests.ADDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [7ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTests(byte[-i * 5]): success [13ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTests(byte[i * 5]): success [1ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTests(byte[i + 1]): success [11ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTests(byte[cornerCaseValue(i)]): success [16ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [12ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i * 5], mask[i % 2]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i + 1], mask[i % 2]): success [1ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [28ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[-i * 5], mask[true]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i * 5], mask[true]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i + 1], mask[true]): success [108ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[-i * 5], mask[false]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.ADDReduceLongByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.ANDByte512VectorTests(byte[-i * 5], byte[i * 5]): success [1004ms]
test Byte512VectorTests.ANDByte512VectorTests(byte[-i * 5], byte[i + 1]): success [271ms]
test Byte512VectorTests.ANDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [10ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [6ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [3ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [65ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [30ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [4ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.ANDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [10ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [36ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [10ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [7ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [326ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [8ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [6ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [7ms]
test Byte512VectorTests.ANDByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [7ms]
test Byte512VectorTests.ANDReduceByte512VectorTests(byte[-i * 5]): success [415ms]
test Byte512VectorTests.ANDReduceByte512VectorTests(byte[i * 5]): success [4ms]
test Byte512VectorTests.ANDReduceByte512VectorTests(byte[i + 1]): success [102ms]
test Byte512VectorTests.ANDReduceByte512VectorTests(byte[cornerCaseValue(i)]): success [18ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [38ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i * 5], mask[i % 2]): success [6ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i + 1], mask[i % 2]): success [186ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [28ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[-i * 5], mask[true]): success [6ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i * 5], mask[true]): success [5ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i + 1], mask[true]): success [5ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[-i * 5], mask[false]): success [8ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i * 5], mask[false]): success [7ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[i + 1], mask[false]): success [8ms]
test Byte512VectorTests.ANDReduceByte512VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [9ms]
test Byte512VectorTests.AND_NOTByte512VectorTests(byte[-i * 5], byte[i * 5]): success [924ms]
test Byte512VectorTests.AND_NOTByte512VectorTests(byte[-i * 5], byte[i + 1]): success [738ms]
test Byte512VectorTests.AND_NOTByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [130ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [169ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [259ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [134ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [154ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [774ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [149ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [128ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [129ms]
test Byte512VectorTests.AND_NOTByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [128ms]
test Byte512VectorTests.ASHRByte512VectorTests(byte[-i * 5], byte[i * 5]): success [301ms]
test Byte512VectorTests.ASHRByte512VectorTests(byte[-i * 5], byte[i + 1]): success [666ms]
test Byte512VectorTests.ASHRByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [127ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [424ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [312ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [129ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [127ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [773ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [129ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [128ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [140ms]
test Byte512VectorTests.ASHRByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [131ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShift(byte[-i * 5], byte[i * 5]): success [280ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShift(byte[-i * 5], byte[i + 1]): success [910ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShift(byte[-i * 5], byte[cornerCaseValue(i)]): success [5ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftConst(byte[-i * 5]): success [164ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftConst(byte[i * 5]): success [4ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftConst(byte[i + 1]): success [5ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftConst(byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [20ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [104ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[true]): success [8ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[true]): success [204ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [4ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[false]): success [45ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[false]): success [4ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [3ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[i % 2]): success [12ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[i % 2]): success [5ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[i % 2]): success [9ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[i % 2]): success [9ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[true]): success [190ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[true]): success [8ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[true]): success [68ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[true]): success [4ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[false]): success [3ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[false]): success [3ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[false]): success [4ms]
test Byte512VectorTests.ASHRByte512VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[false]): success [4ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [21ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i * 5], byte[i * 5]): success [296ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i * 5], byte[i + 1]): success [15ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [13ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [887ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i + 1], byte[i * 5]): success [12ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i + 1], byte[i + 1]): success [12ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [12ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [12ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [12ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [12ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [12ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [331ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [6ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [68ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [8ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [1ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [46ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [12ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [4ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [4ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [38ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [73ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [9ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [3ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [49ms]
test Byte512VectorTests.BITWISE_BLENDByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

ectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [22ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [23ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [2ms]
test Byte512VectorTests.bitwiseBlendByte512VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.bitwiseDivByZeroSmokeTest(): success [18ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[i * 5], mask[i % 2]): success [26ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[i + 1], mask[i % 2]): success [6ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[i * 5], mask[true]): success [5ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[i + 1], mask[true]): success [313ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[i * 5], mask[false]): success [4ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[i + 1], mask[false]): success [4ms]
test Byte512VectorTests.blendByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [4ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [145ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [172ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [122ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [122ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [409ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [125ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [126ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [125ms]
test Byte512VectorTests.blendByte512VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [124ms]
test Byte512VectorTests.compressByte512VectorTests(byte[-i * 5], mask[i % 2]): success [5226ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i * 5], mask[i % 2]): success [476ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i + 1], mask[i % 2]): success [334ms]
test Byte512VectorTests.compressByte512VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [352ms]
test Byte512VectorTests.compressByte512VectorTests(byte[-i * 5], mask[true]): success [555ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i * 5], mask[true]): success [4226ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i + 1], mask[true]): success [4ms]
test Byte512VectorTests.compressByte512VectorTests(byte[cornerCaseValue(i)], mask[true]): success [4ms]
test Byte512VectorTests.compressByte512VectorTests(byte[-i * 5], mask[false]): success [39ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i * 5], mask[false]): success [39ms]
test Byte512VectorTests.compressByte512VectorTests(byte[i + 1], mask[false]): success [39ms]
test Byte512VectorTests.compressByte512VectorTests(byte[cornerCaseValue(i)], mask[false]): success [39ms]
test Byte512VectorTests.divByte512VectorTests(byte[-i * 5], byte[i * 5]): success [398ms]
test Byte512VectorTests.divByte512VectorTests(byte[-i * 5], byte[i + 1]): success [643ms]
test Byte512VectorTests.divByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [368ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [34ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [8ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [649ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [9ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [8ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [8ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [8ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [8ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [8ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [12ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [5ms]
test Byte512VectorTests.divByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [5ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [749ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1348ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [716ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [729ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [2201ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [717ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [716ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [722ms]
test Byte512VectorTests.divByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [714ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[i]): success [452ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[i - length / 2]): success [267ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[i + 1]): success [272ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[i - 2]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[zigZag(i)]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i], byte[cornerCaseValue(i)]): success [279ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[i]): success [267ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[i - length / 2]): success [267ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[i + 1]): success [277ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[i - 2]): success [276ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[i]): success [286ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[i - length / 2]): success [272ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[i + 1]): success [267ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[i - 2]): success [276ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[zigZag(i)]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [272ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[i]): success [274ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[i - length / 2]): success [272ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[i + 1]): success [282ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[i - 2]): success [267ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[zigZag(i)]): success [272ms]
test Byte512VectorTests.eqByte512VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[i]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[i + 1]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[i - 2]): success [280ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [267ms]
test Byte512VectorTests.eqByte512VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[i]): success [273ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [274ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [270ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [271ms]
test Byte512VectorTests.eqByte512VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [276ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i + 1]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i]): success [180ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i + 1]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i + 1]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - 2]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - length / 2]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i + 1]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - 2]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[zigZag(i)]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i + 1]): success [12ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [3ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.eqByte512VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [3ms]
test Byte512VectorTests.expandByte512VectorTests(byte[-i * 5], mask[i % 2]): success [8464ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i * 5], mask[i % 2]): success [403ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i + 1], mask[i % 2]): success [341ms]
test Byte512VectorTests.expandByte512VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [334ms]
test Byte512VectorTests.expandByte512VectorTests(byte[-i * 5], mask[true]): success [287ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i * 5], mask[true]): success [8150ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i + 1], mask[true]): success [4ms]
test Byte512VectorTests.expandByte512VectorTests(byte[cornerCaseValue(i)], mask[true]): success [4ms]
test Byte512VectorTests.expandByte512VectorTests(byte[-i * 5], mask[false]): success [37ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i * 5], mask[false]): success [38ms]
test Byte512VectorTests.expandByte512VectorTests(byte[i + 1], mask[false]): success [40ms]
test Byte512VectorTests.expandByte512VectorTests(byte[cornerCaseValue(i)], mask[false]): success [85ms]
test Byte512VectorTests.getByte512VectorTests(byte[-i * 5]): success [47ms]
test Byte512VectorTests.getByte512VectorTests(byte[i * 5]): success [46ms]
test Byte512VectorTests.getByte512VectorTests(byte[i + 1]): success [46ms]
test Byte512VectorTests.getByte512VectorTests(byte[cornerCaseValue(i)]): success [46ms]
test Byte512VectorTests.hashCodeByte512VectorTestsSmokeTest(byte[-i * 5]): success [37ms]
test Byte512VectorTests.hashCodeByte512VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte512VectorTests.hashCodeByte512VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte512VectorTests.hashCodeByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [16ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(0): success [72ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(-1): success [7ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(1): success [21ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(2): success [6ms]
test Byte512VectorTests.indexInRangeByte512VectorTestsSmokeTest(-2): success [6ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(0): success [6ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(-1): success [6ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(1): success [6ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(2): success [6ms]
test Byte512VectorTests.indexInRangeLongByte512VectorTestsSmokeTest(-2): success [6ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(0): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(1): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(32): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(37): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(1024): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(1025): success [0ms]
test Byte512VectorTests.loopBoundByte512VectorTestsSmokeTest(1029): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(0): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(1): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(32): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(37): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(1024): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(1025): success [0ms]
test Byte512VectorTests.loopBoundLongByte512VectorTestsSmokeTest(1029): success [0ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[i]): success [453ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[i - length / 2]): success [268ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[i + 1]): success [278ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[i - 2]): success [269ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[zigZag(i)]): success [269ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i], byte[cornerCaseValue(i)]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[i]): success [268ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[i - length / 2]): success [269ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[i + 1]): success [268ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[i - 2]): success [269ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [278ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [269ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[i]): success [269ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[i - length / 2]): success [268ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[i + 1]): success [268ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[i - 2]): success [274ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[zigZag(i)]): success [268ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [284ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[i]): success [268ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[i - length / 2]): success [268ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[i + 1]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[i - 2]): success [274ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[zigZag(i)]): success [270ms]
test Byte512VectorTests.ltByte512VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [269ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[i]): success [268ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [284ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[i + 1]): success [276ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[i - 2]): success [269ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [268ms]
test Byte512VectorTests.ltByte512VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [269ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[i]): success [299ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [269ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [283ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [275ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [269ms]
test Byte512VectorTests.ltByte512VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [268ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[i]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[i + 1]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[i - 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i]): success [180ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i + 1]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - length / 2]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i + 1]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[zigZag(i)]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i + 1]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[zigZag(i)]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i + 1]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - 2]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [3ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [4ms]
test Byte512VectorTests.ltByte512VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [3ms]
test Byte512VectorTests.maskAndByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Byte512VectorTests.maskAndByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskAndNotByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Byte512VectorTests.maskAndNotByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskCompressByte512VectorTestsSmokeTest(mask[i % 2]): success [1540ms]
test Byte512VectorTests.maskCompressByte512VectorTestsSmokeTest(mask[true]): success [1084ms]
test Byte512VectorTests.maskCompressByte512VectorTestsSmokeTest(mask[false]): success [1091ms]
test Byte512VectorTests.maskEqByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Byte512VectorTests.maskEqByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskEqualsByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Byte512VectorTests.maskEqualsByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskFirstTrueByte512VectorTestsSmokeTest(mask[i % 2]): success [208ms]
test Byte512VectorTests.maskFirstTrueByte512VectorTestsSmokeTest(mask[true]): success [248ms]
test Byte512VectorTests.maskFirstTrueByte512VectorTestsSmokeTest(mask[false]): success [198ms]
test Byte512VectorTests.maskFromToLongByte512VectorTestsSmokeTest(-1): success [60ms]
test Byte512VectorTests.maskFromToLongByte512VectorTestsSmokeTest(0): success [0ms]
test Byte512VectorTests.maskFromToLongByte512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Byte512VectorTests.maskFromToLongByte512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Byte512VectorTests.maskHashCodeByte512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Byte512VectorTests.maskHashCodeByte512VectorTestsSmokeTest(mask[true]): success [0ms]
test Byte512VectorTests.maskHashCodeByte512VectorTestsSmokeTest(mask[false]): success [0ms]
test Byte512VectorTests.maskLastTrueByte512VectorTestsSmokeTest(mask[i % 2]): success [266ms]
test Byte512VectorTests.maskLastTrueByte512VectorTestsSmokeTest(mask[true]): success [255ms]
test Byte512VectorTests.maskLastTrueByte512VectorTestsSmokeTest(mask[false]): success [227ms]
test Byte512VectorTests.maskOrByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Byte512VectorTests.maskOrByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maskTrueCountByte512VectorTestsSmokeTest(mask[i % 2]): success [206ms]
test Byte512VectorTests.maskTrueCountByte512VectorTestsSmokeTest(mask[true]): success [249ms]
test Byte512VectorTests.maskTrueCountByte512VectorTestsSmokeTest(mask[false]): success [200ms]
test Byte512VectorTests.maskXorByte512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Byte512VectorTests.maskXorByte512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte512VectorTests.maxByte512VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte512VectorTests.maxByte512VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.maxByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [6ms]
test Byte512VectorTests.maxByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte512VectorTests.maxByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.maxByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.minByte512VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte512VectorTests.minByte512VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.minByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.minByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte512VectorTests.minByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.minByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.mulByte512VectorTests(byte[-i * 5], byte[i * 5]): success [5ms]
test Byte512VectorTests.mulByte512VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.mulByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [6ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [5ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.mulByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.negByte512VectorTests(byte[-i * 5]): success [10ms]
test Byte512VectorTests.negByte512VectorTests(byte[i * 5]): success [19ms]
test Byte512VectorTests.negByte512VectorTests(byte[i + 1]): success [4ms]
test Byte512VectorTests.negByte512VectorTests(byte[cornerCaseValue(i)]): success [3ms]
test Byte512VectorTests.notByte512VectorTests(byte[-i * 5]): success [128ms]
test Byte512VectorTests.notByte512VectorTests(byte[i * 5]): success [152ms]
test Byte512VectorTests.notByte512VectorTests(byte[i + 1]): success [124ms]
test Byte512VectorTests.notByte512VectorTests(byte[cornerCaseValue(i)]): success [123ms]
test Byte512VectorTests.orByte512VectorTests(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte512VectorTests.orByte512VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte512VectorTests.orByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte512VectorTests.orByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte512VectorTests.orByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.orByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.reinterpretAsBytesByte512VectorTestsSmokeTest(byte[-i * 5]): success [4ms]
test Byte512VectorTests.reinterpretAsBytesByte512VectorTestsSmokeTest(byte[i * 5]): success [20ms]
test Byte512VectorTests.reinterpretAsBytesByte512VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte512VectorTests.reinterpretAsBytesByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.shuffleEqualsByte512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [4343ms]
test Byte512VectorTests.shuffleEqualsByte512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [277ms]
test Byte512VectorTests.shuffleMiscellaneousByte512VectorTestsSmokeTest(shuffle[random]): success [225ms]
test Byte512VectorTests.shuffleTest(): success [1912ms]
test Byte512VectorTests.shuffleToStringByte512VectorTestsSmokeTest(shuffle[random]): success [61ms]
test Byte512VectorTests.sliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [1496ms]
test Byte512VectorTests.sliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [3089ms]
test Byte512VectorTests.sliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [1206ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [1284ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [2193ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1378ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1298ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [8983ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1386ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [1335ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [1277ms]
test Byte512VectorTests.sliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1292ms]
test Byte512VectorTests.sliceUnaryByte512VectorTests(byte[-i * 5]): success [1009ms]
test Byte512VectorTests.sliceUnaryByte512VectorTests(byte[i * 5]): success [2079ms]
test Byte512VectorTests.sliceUnaryByte512VectorTests(byte[i + 1]): success [1012ms]
test Byte512VectorTests.sliceUnaryByte512VectorTests(byte[cornerCaseValue(i)]): success [1003ms]
test Byte512VectorTests.smokeTest1(): success [44ms]
test Byte512VectorTests.smokeTest2(): success [57ms]
test Byte512VectorTests.subByte512VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte512VectorTests.subByte512VectorTests(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte512VectorTests.subByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [541ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [381ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [980ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [29ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [33ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte512VectorTests.subByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte512VectorTests.toDoubleArrayByte512VectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test Byte512VectorTests.toDoubleArrayByte512VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte512VectorTests.toDoubleArrayByte512VectorTestsSmokeTest(byte[i + 1]): success [3ms]
test Byte512VectorTests.toDoubleArrayByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.toIntArrayByte512VectorTestsSmokeTest(byte[-i * 5]): success [5ms]
test Byte512VectorTests.toIntArrayByte512VectorTestsSmokeTest(byte[i * 5]): success [9ms]
test Byte512VectorTests.toIntArrayByte512VectorTestsSmokeTest(byte[i + 1]): success [7ms]
test Byte512VectorTests.toIntArrayByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.toLongArrayByte512VectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test Byte512VectorTests.toLongArrayByte512VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte512VectorTests.toLongArrayByte512VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte512VectorTests.toLongArrayByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.toStringByte512VectorTestsSmokeTest(byte[-i * 5]): success [24ms]
test Byte512VectorTests.toStringByte512VectorTestsSmokeTest(byte[i * 5]): success [14ms]
test Byte512VectorTests.toStringByte512VectorTestsSmokeTest(byte[i + 1]): success [61ms]
test Byte512VectorTests.toStringByte512VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte512VectorTests.unsliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [1045ms]
test Byte512VectorTests.unsliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [2466ms]
test Byte512VectorTests.unsliceBinaryByte512VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [1047ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [2275ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [5539ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2348ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [2179ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [14533ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2308ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [2211ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [2199ms]
test Byte512VectorTests.unsliceByte512VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2198ms]
test Byte512VectorTests.unsliceUnaryByte512VectorTests(byte[-i * 5]): success [986ms]
test Byte512VectorTests.unsliceUnaryByte512VectorTests(byte[i * 5]): success [2089ms]
test Byte512VectorTests.unsliceUnaryByte512VectorTests(byte[i + 1]): success [993ms]
test Byte512VectorTests.unsliceUnaryByte512VectorTests(byte[cornerCaseValue(i)]): success [998ms]
test Byte512VectorTests.viewAsFloatingLanesTest(): success [14ms]
test Byte512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Byte512VectorTests.withByte512VectorTests(byte[-i * 5], byte[i * 5]): success [12ms]
test Byte512VectorTests.withByte512VectorTests(byte[-i * 5], byte[i + 1]): success [11ms]
test Byte512VectorTests.withByte512VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [34ms]

===============================================
jdk/incubator/vector/Byte512VectorTests.java
Total tests run: 3602, Passes: 3601, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/2 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Byte512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/jdk/incubator/vector/Byte512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/7/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Byte512VectorTests.d/testng.0.jta jdk/incubator/vector/Byte512VectorTests.java false Byte512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Long64VectorTests.java
Passed: jdk/incubator/vector/Short128VectorTests.java
TEST: jdk/incubator/vector/Short256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.812 seconds
messages:
command: build Short256VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 16:52:43 IST 2025
Test directory:
  compile: Short256VectorTests
finished: Wed Apr 16 16:52:44 IST 2025
elapsed time (seconds): 0.812

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.812 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short256VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 16:52:43 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 5
Process id: 1413269
finished: Wed Apr 16 16:52:44 IST 2025
elapsed time (seconds): 0.812
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Short256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Short256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Short256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short256VectorTests 
TIME:   502.958 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short256VectorTests 
started: Wed Apr 16 16:52:44 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1417978
finished: Wed Apr 16 17:01:07 IST 2025
elapsed time (seconds): 502.958
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 1258817021810945708
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=1258817021810945708" to command line.
test Short256VectorTests.ABSMaskedShort256VectorTests(short[-i * 5], mask[i % 2]): success [694ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i * 5], mask[i % 2]): success [9ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i + 1], mask[i % 2]): success [96ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[-i * 5], mask[true]): success [121ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i * 5], mask[true]): success [19ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i + 1], mask[true]): success [3ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[-i * 5], mask[false]): success [2ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i * 5], mask[false]): success [2ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i + 1], mask[false]): success [2ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short256VectorTests.ABSShort256VectorTests(short[-i * 5]): success [147ms]
test Short256VectorTests.ABSShort256VectorTests(short[i * 5]): success [11ms]
test Short256VectorTests.ABSShort256VectorTests(short[i + 1]): success [52ms]
test Short256VectorTests.ABSShort256VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ADDReduceLongShort256VectorTests(short[-i * 5]): success [66ms]
test Short256VectorTests.ADDReduceLongShort256VectorTests(short[i * 5]): success [21ms]
test Short256VectorTests.ADDReduceLongShort256VectorTests(short[i + 1]): success [2ms]
test Short256VectorTests.ADDReduceLongShort256VectorTests(short[cornerCaseValue(i)]): success [4ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[-i * 5], mask[i % 2]): success [12ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[-i * 5], mask[true]): success [14ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[-i * 5], mask[false]): success [12ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.ADDReduceShort256VectorTests(short[-i * 5]): success [141ms]
test Short256VectorTests.ADDReduceShort256VectorTests(short[i * 5]): success [89ms]
test Short256VectorTests.ADDReduceShort256VectorTests(short[i + 1]): success [3ms]
test Short256VectorTests.ADDReduceShort256VectorTests(short[cornerCaseValue(i)]): success [4ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[-i * 5], mask[i % 2]): success [50ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i * 5], mask[i % 2]): success [89ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i + 1], mask[i % 2]): success [32ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[-i * 5], mask[true]): success [18ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i * 5], mask[true]): success [5ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i + 1], mask[true]): success [7ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[-i * 5], mask[false]): success [4ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i * 5], mask[false]): success [4ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i + 1], mask[false]): success [15ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short256VectorTests.ADDShort256VectorTests(short[-i * 5], short[i * 5]): success [350ms]
test Short256VectorTests.ADDShort256VectorTests(short[-i * 5], short[i + 1]): success [5ms]
test Short256VectorTests.ADDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [81ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [15ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [23ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [7ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [74ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [139ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [88ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short256VectorTests.ANDReduceShort256VectorTests(short[-i * 5]): success [107ms]
test Short256VectorTests.ANDReduceShort256VectorTests(short[i * 5]): success [66ms]
test Short256VectorTests.ANDReduceShort256VectorTests(short[i + 1]): success [23ms]
test Short256VectorTests.ANDReduceShort256VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[-i * 5], mask[i % 2]): success [22ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i * 5], mask[i % 2]): success [85ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i + 1], mask[i % 2]): success [3ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[-i * 5], mask[true]): success [42ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i * 5], mask[true]): success [3ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[-i * 5], mask[false]): success [4ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i * 5], mask[false]): success [5ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i + 1], mask[false]): success [4ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short256VectorTests.ANDShort256VectorTests(short[-i * 5], short[i * 5]): success [345ms]
test Short256VectorTests.ANDShort256VectorTests(short[-i * 5], short[i + 1]): success [7ms]
test Short256VectorTests.ANDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [83ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [17ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [4ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [10ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [7ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [90ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [6ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [42ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [17ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [4ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short256VectorTests.AND_NOTShort256VectorTests(short[-i * 5], short[i * 5]): success [465ms]
test Short256VectorTests.AND_NOTShort256VectorTests(short[-i * 5], short[i + 1]): success [93ms]
test Short256VectorTests.AND_NOTShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [240ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [162ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [93ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [220ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [93ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [93ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [94ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [144ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [93ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [93ms]
test Short256VectorTests.ASHRShort256VectorTests(short[-i * 5], short[i * 5]): success [272ms]
test Short256VectorTests.ASHRShort256VectorTests(short[-i * 5], short[i + 1]): success [92ms]
test Short256VectorTests.ASHRShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [240ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [244ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [93ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [217ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [96ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [96ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [97ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [96ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [96ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [146ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [289ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [5ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [69ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftConst(short[-i * 5]): success [56ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftConst(short[i * 5]): success [6ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftConst(short[i + 1]): success [59ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [136ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [6ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [71ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [13ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [6ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [62ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [8ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [5ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [97ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [13ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [174ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [12ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [13ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [405ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [5ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [103ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [2ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [7ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [45ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [90ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [21ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.BITWISE

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

5], short[cornerCaseValue(i)]): success [110ms]
test Short256VectorTests.UMINShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [13ms]
test Short256VectorTests.UMINShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [6ms]
test Short256VectorTests.UMINShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [89ms]
test Short256VectorTests.UMINShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short256VectorTests.UMINShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.UMINShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short256VectorTests.UMINShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short256VectorTests.UMINShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [4ms]
test Short256VectorTests.UMINShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short256VectorTests.VectorShapeShort256VectorTestsSmokeTest(): success [0ms]
test Short256VectorTests.VectorTypeShort256VectorTestsSmokeTest(): success [0ms]
test Short256VectorTests.WithLanesShort256VectorTestsSmokeTest(): success [0ms]
test Short256VectorTests.WithShapeShort256VectorTestsSmokeTest(): success [0ms]
test Short256VectorTests.XORReduceShort256VectorTests(short[-i * 5]): success [71ms]
test Short256VectorTests.XORReduceShort256VectorTests(short[i * 5]): success [80ms]
test Short256VectorTests.XORReduceShort256VectorTests(short[i + 1]): success [3ms]
test Short256VectorTests.XORReduceShort256VectorTests(short[cornerCaseValue(i)]): success [23ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[-i * 5], mask[i % 2]): success [18ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[i * 5], mask[i % 2]): success [87ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[i + 1], mask[i % 2]): success [3ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[-i * 5], mask[true]): success [16ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[i * 5], mask[true]): success [3ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[i + 1], mask[true]): success [2ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[-i * 5], mask[false]): success [2ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[i * 5], mask[false]): success [2ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[i + 1], mask[false]): success [2ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short256VectorTests.XORShort256VectorTests(short[-i * 5], short[i * 5]): success [13ms]
test Short256VectorTests.XORShort256VectorTests(short[-i * 5], short[i + 1]): success [5ms]
test Short256VectorTests.XORShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [109ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [14ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [6ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [89ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [4ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[-i * 5], mask[i % 2]): success [501ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i * 5], mask[i % 2]): success [458ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i + 1], mask[i % 2]): success [556ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [500ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[-i * 5], mask[true]): success [456ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i * 5], mask[true]): success [456ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i + 1], mask[true]): success [459ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[true]): success [460ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[-i * 5], mask[false]): success [458ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i * 5], mask[false]): success [456ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i + 1], mask[false]): success [456ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[false]): success [457ms]
test Short256VectorTests.ZOMOShort256VectorTests(short[-i * 5]): success [394ms]
test Short256VectorTests.ZOMOShort256VectorTests(short[i * 5]): success [302ms]
test Short256VectorTests.ZOMOShort256VectorTests(short[i + 1]): success [426ms]
test Short256VectorTests.ZOMOShort256VectorTests(short[cornerCaseValue(i)]): success [305ms]
test Short256VectorTests.ZeroShort256VectorTests(short[-i * 5]): success [98ms]
test Short256VectorTests.ZeroShort256VectorTests(short[i * 5]): success [79ms]
test Short256VectorTests.ZeroShort256VectorTests(short[i + 1]): success [107ms]
test Short256VectorTests.ZeroShort256VectorTests(short[cornerCaseValue(i)]): success [80ms]
test Short256VectorTests.absShort256VectorTests(short[-i * 5]): success [22ms]
test Short256VectorTests.absShort256VectorTests(short[i * 5]): success [4ms]
test Short256VectorTests.absShort256VectorTests(short[i + 1]): success [75ms]
test Short256VectorTests.absShort256VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.addShort256VectorTests(short[-i * 5], short[i * 5]): success [67ms]
test Short256VectorTests.addShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.addShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [102ms]
test Short256VectorTests.addShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [32ms]
test Short256VectorTests.addShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.allTrueShort256VectorTests(boolean[i % 2]): success [22ms]
test Short256VectorTests.allTrueShort256VectorTests(boolean[i % 5]): success [22ms]
test Short256VectorTests.andShort256VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short256VectorTests.andShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.andShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.andShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.andShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.andShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.anyTrueShort256VectorTests(boolean[i % 2]): success [12ms]
test Short256VectorTests.anyTrueShort256VectorTests(boolean[i % 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [5ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [51ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [71ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [9ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [71ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [9ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [73ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [2ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [2ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseDivByZeroSmokeTest(): success [13ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [30ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [81ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [128ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [87ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [165ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [87ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [88ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [87ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [89ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [87ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [87ms]
test Short256VectorTests.compressShort256VectorTests(short[-i * 5], mask[i % 2]): success [372ms]
test Short256VectorTests.compressShort256VectorTests(short[i * 5], mask[i % 2]): success [155ms]
test Short256VectorTests.compressShort256VectorTests(short[i + 1], mask[i % 2]): success [235ms]
test Short256VectorTests.compressShort256VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [141ms]
test Short256VectorTests.compressShort256VectorTests(short[-i * 5], mask[true]): success [159ms]
test Short256VectorTests.compressShort256VectorTests(short[i * 5], mask[true]): success [4ms]
test Short256VectorTests.compressShort256VectorTests(short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.compressShort256VectorTests(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short256VectorTests.compressShort256VectorTests(short[-i * 5], mask[false]): success [9ms]
test Short256VectorTests.compressShort256VectorTests(short[i * 5], mask[false]): success [8ms]
test Short256VectorTests.compressShort256VectorTests(short[i + 1], mask[false]): success [9ms]
test Short256VectorTests.compressShort256VectorTests(short[cornerCaseValue(i)], mask[false]): success [9ms]
test Short256VectorTests.divShort256VectorTests(short[-i * 5], short[i * 5]): success [273ms]
test Short256VectorTests.divShort256VectorTests(short[-i * 5], short[i + 1]): success [241ms]
test Short256VectorTests.divShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [411ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [17ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [137ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [5ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [5ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [21ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [5ms]
test Short256VectorTests.divShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [11ms]
test Short256VectorTests.divShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [3ms]
test Short256VectorTests.divShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [3ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [536ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [489ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [773ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [483ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [484ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [480ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [478ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [466ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [482ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[i]): success [255ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[i - length / 2]): success [139ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[i + 1]): success [138ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[i - 2]): success [138ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[zigZag(i)]): success [140ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[cornerCaseValue(i)]): success [139ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[i]): success [139ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[i - length / 2]): success [139ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[i + 1]): success [138ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[i - 2]): success [138ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[zigZag(i)]): success [139ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [150ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[i]): success [139ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[i - length / 2]): success [139ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[i + 1]): success [139ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[i - 2]): success [160ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[zigZag(i)]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[i]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[i - length / 2]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[i + 1]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[i - 2]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[zigZag(i)]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[i]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[i - length / 2]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[i + 1]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[i - 2]): success [140ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[zigZag(i)]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[i]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [139ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [136ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [137ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [3ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [75ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [11ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.expandShort256VectorTests(short[-i * 5], mask[i % 2]): success [374ms]
test Short256VectorTests.expandShort256VectorTests(short[i * 5], mask[i % 2]): success [150ms]
test Short256VectorTests.expandShort256VectorTests(short[i + 1], mask[i % 2]): success [230ms]
test Short256VectorTests.expandShort256VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [146ms]
test Short256VectorTests.expandShort256VectorTests(short[-i * 5], mask[true]): success [153ms]
test Short256VectorTests.expandShort256VectorTests(short[i * 5], mask[true]): success [5ms]
test Short256VectorTests.expandShort256VectorTests(short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.expandShort256VectorTests(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short256VectorTests.expandShort256VectorTests(short[-i * 5], mask[false]): success [11ms]
test Short256VectorTests.expandShort256VectorTests(short[i * 5], mask[false]): success [11ms]
test Short256VectorTests.expandShort256VectorTests(short[i + 1], mask[false]): success [11ms]
test Short256VectorTests.expandShort256VectorTests(short[cornerCaseValue(i)], mask[false]): success [11ms]
test Short256VectorTests.getShort256VectorTests(short[-i * 5]): success [16ms]
test Short256VectorTests.getShort256VectorTests(short[i * 5]): success [16ms]
test Short256VectorTests.getShort256VectorTests(short[i + 1]): success [126ms]
test Short256VectorTests.getShort256VectorTests(short[cornerCaseValue(i)]): success [10ms]
test Short256VectorTests.hashCodeShort256VectorTestsSmokeTest(short[-i * 5]): success [43ms]
test Short256VectorTests.hashCodeShort256VectorTestsSmokeTest(short[i * 5]): success [1ms]
test Short256VectorTests.hashCodeShort256VectorTestsSmokeTest(short[i + 1]): success [1ms]
test Short256VectorTests.hashCodeShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(0): success [73ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(-1): success [4ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(1): success [21ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(2): success [3ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(-2): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(0): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(-1): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(1): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(2): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(-2): success [3ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(0): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(1): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(32): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(37): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(1024): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(1025): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(1029): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(0): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(1): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(32): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(37): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(1024): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(1025): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(1029): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[i]): success [260ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[i - length / 2]): success [139ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[i + 1]): success [157ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[i - 2]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[zigZag(i)]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[cornerCaseValue(i)]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[i]): success [136ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[i - length / 2]): success [136ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[i + 1]): success [136ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[i - 2]): success [136ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[zigZag(i)]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [147ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[i]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[i - length / 2]): success [136ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[i + 1]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[i - 2]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[zigZag(i)]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [142ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[i]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[i - length / 2]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[i + 1]): success [139ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[i - 2]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[zigZag(i)]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[i]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[i - length / 2]): success [139ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[i + 1]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[i - 2]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[zigZag(i)]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[i]): success [172ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [136ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[i]): success [3ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [73ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [5ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.maskAndNotShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Short256VectorTests.maskAndNotShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskAndShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Short256VectorTests.maskAndShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskCompressShort256VectorTestsSmokeTest(mask[i % 2]): success [512ms]
test Short256VectorTests.maskCompressShort256VectorTestsSmokeTest(mask[true]): success [352ms]
test Short256VectorTests.maskCompressShort256VectorTestsSmokeTest(mask[false]): success [331ms]
test Short256VectorTests.maskEqShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Short256VectorTests.maskEqShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskEqualsShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short256VectorTests.maskEqualsShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskFirstTrueShort256VectorTestsSmokeTest(mask[i % 2]): success [73ms]
test Short256VectorTests.maskFirstTrueShort256VectorTestsSmokeTest(mask[true]): success [94ms]
test Short256VectorTests.maskFirstTrueShort256VectorTestsSmokeTest(mask[false]): success [61ms]
test Short256VectorTests.maskFromToLongShort256VectorTestsSmokeTest(-1): success [67ms]
test Short256VectorTests.maskFromToLongShort256VectorTestsSmokeTest(0): success [0ms]
test Short256VectorTests.maskFromToLongShort256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short256VectorTests.maskFromToLongShort256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short256VectorTests.maskHashCodeShort256VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Short256VectorTests.maskHashCodeShort256VectorTestsSmokeTest(mask[true]): success [5ms]
test Short256VectorTests.maskHashCodeShort256VectorTestsSmokeTest(mask[false]): success [0ms]
test Short256VectorTests.maskLastTrueShort256VectorTestsSmokeTest(mask[i % 2]): success [115ms]
test Short256VectorTests.maskLastTrueShort256VectorTestsSmokeTest(mask[true]): success [94ms]
test Short256VectorTests.maskLastTrueShort256VectorTestsSmokeTest(mask[false]): success [81ms]
test Short256VectorTests.maskOrShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [21ms]
test Short256VectorTests.maskOrShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskTrueCountShort256VectorTestsSmokeTest(mask[i % 2]): success [70ms]
test Short256VectorTests.maskTrueCountShort256VectorTestsSmokeTest(mask[true]): success [103ms]
test Short256VectorTests.maskTrueCountShort256VectorTestsSmokeTest(mask[false]): success [61ms]
test Short256VectorTests.maskXorShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Short256VectorTests.maskXorShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maxShort256VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.maxShort256VectorTests(short[-i * 5], short[i + 1]): success [5ms]
test Short256VectorTests.maxShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.maxShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short256VectorTests.maxShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.maxShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.minShort256VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.minShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.minShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.minShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short256VectorTests.minShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.minShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.mulShort256VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.mulShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.mulShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.negShort256VectorTests(short[-i * 5]): success [17ms]
test Short256VectorTests.negShort256VectorTests(short[i * 5]): success [28ms]
test Short256VectorTests.negShort256VectorTests(short[i + 1]): success [80ms]
test Short256VectorTests.negShort256VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.notShort256VectorTests(short[-i * 5]): success [108ms]
test Short256VectorTests.notShort256VectorTests(short[i * 5]): success [91ms]
test Short256VectorTests.notShort256VectorTests(short[i + 1]): success [181ms]
test Short256VectorTests.notShort256VectorTests(short[cornerCaseValue(i)]): success [88ms]
test Short256VectorTests.orShort256VectorTests(short[-i * 5], short[i * 5]): success [14ms]
test Short256VectorTests.orShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.orShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.orShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short256VectorTests.orShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.orShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.shuffleEqualsShort256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [489ms]
test Short256VectorTests.shuffleEqualsShort256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [117ms]
test Short256VectorTests.shuffleMiscellaneousShort256VectorTestsSmokeTest(shuffle[random]): success [204ms]
test Short256VectorTests.shuffleTest(): success [638ms]
test Short256VectorTests.shuffleToStringShort256VectorTestsSmokeTest(shuffle[random]): success [56ms]
test Short256VectorTests.sliceBinaryShort256VectorTestsBinary(short[-i * 5], short[i * 5]): success [1318ms]
test Short256VectorTests.sliceBinaryShort256VectorTestsBinary(short[-i * 5], short[i + 1]): success [669ms]
test Short256VectorTests.sliceBinaryShort256VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [1157ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [942ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [799ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1529ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [846ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [804ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [808ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [768ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [765ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [778ms]
test Short256VectorTests.sliceUnaryShort256VectorTests(short[-i * 5]): success [895ms]
test Short256VectorTests.sliceUnaryShort256VectorTests(short[i * 5]): success [630ms]
test Short256VectorTests.sliceUnaryShort256VectorTests(short[i + 1]): success [930ms]
test Short256VectorTests.sliceUnaryShort256VectorTests(short[cornerCaseValue(i)]): success [641ms]
test Short256VectorTests.smokeTest1(): success [0ms]
test Short256VectorTests.smokeTest2(): success [92ms]
test Short256VectorTests.subShort256VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.subShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.subShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.subShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.toDoubleArrayShort256VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short256VectorTests.toDoubleArrayShort256VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short256VectorTests.toDoubleArrayShort256VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short256VectorTests.toDoubleArrayShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.toIntArrayShort256VectorTestsSmokeTest(short[-i * 5]): success [1ms]
test Short256VectorTests.toIntArrayShort256VectorTestsSmokeTest(short[i * 5]): success [2ms]
test Short256VectorTests.toIntArrayShort256VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short256VectorTests.toIntArrayShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [8ms]
test Short256VectorTests.toLongArrayShort256VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short256VectorTests.toLongArrayShort256VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short256VectorTests.toLongArrayShort256VectorTestsSmokeTest(short[i + 1]): success [2ms]
test Short256VectorTests.toLongArrayShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [16ms]
test Short256VectorTests.toStringShort256VectorTestsSmokeTest(short[-i * 5]): success [9ms]
test Short256VectorTests.toStringShort256VectorTestsSmokeTest(short[i * 5]): success [13ms]
test Short256VectorTests.toStringShort256VectorTestsSmokeTest(short[i + 1]): success [13ms]
test Short256VectorTests.toStringShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [37ms]
test Short256VectorTests.unsliceBinaryShort256VectorTestsBinary(short[-i * 5], short[i * 5]): success [966ms]
test Short256VectorTests.unsliceBinaryShort256VectorTestsBinary(short[-i * 5], short[i + 1]): success [638ms]
test Short256VectorTests.unsliceBinaryShort256VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [1098ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [2065ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [1685ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2604ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [1767ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [1504ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1357ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1441ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1336ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1336ms]
test Short256VectorTests.unsliceUnaryShort256VectorTests(short[-i * 5]): success [889ms]
test Short256VectorTests.unsliceUnaryShort256VectorTests(short[i * 5]): success [632ms]
test Short256VectorTests.unsliceUnaryShort256VectorTests(short[i + 1]): success [925ms]
test Short256VectorTests.unsliceUnaryShort256VectorTests(short[cornerCaseValue(i)]): success [637ms]
test Short256VectorTests.viewAsFloatingLanesTest(): success [25ms]
test Short256VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Short256VectorTests.withShort256VectorTests(short[-i * 5], short[i * 5]): success [19ms]
test Short256VectorTests.withShort256VectorTests(short[-i * 5], short[i + 1]): success [19ms]
test Short256VectorTests.withShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [233ms]

===============================================
jdk/incubator/vector/Short256VectorTests.java
Total tests run: 3598, Passes: 3597, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Short256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/13/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Short256VectorTests.d/testng.0.jta jdk/incubator/vector/Short256VectorTests.java false Short256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Short512VectorTests.java
Passed: jdk/incubator/vector/Vector256ConversionTests.java
Passed: jdk/incubator/vector/Short64VectorTests.java
TEST: jdk/incubator/vector/Vector128ConversionTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.019 seconds
messages:
command: build Vector128ConversionTests
reason: Named class compiled on demand
started: Wed Apr 16 16:54:22 IST 2025
Test directory:
  compile: Vector128ConversionTests
finished: Wed Apr 16 16:54:23 IST 2025
elapsed time (seconds): 1.019

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.018 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector128ConversionTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 16:54:22 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 15
Process id: 1414167
finished: Wed Apr 16 16:54:23 IST 2025
elapsed time (seconds): 1.018
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Vector128ConversionTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/5 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Vector128ConversionTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector128ConversionTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Vector128ConversionTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Vector128ConversionTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Vector128ConversionTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Vector128ConversionTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Vector128ConversionTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector128ConversionTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector128ConversionTests 
TIME:   724.353 seconds
messages:
command: testng -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector128ConversionTests
reason: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector128ConversionTests 
started: Wed Apr 16 16:54:23 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1418383
finished: Wed Apr 16 17:06:28 IST 2025
elapsed time (seconds): 724.353
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 8, S_64_BIT], byte(i)): success [747ms]
castShape took 743 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cab41a5): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 4, S_64_BIT], byte(i)): success [1237ms]
castShape took 1237 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c8e097): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 2, S_64_BIT], byte(i)): success [968ms]
castShape took 968 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5261d331): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 1, S_64_BIT], byte(i)): success [392ms]
castShape took 393 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b024c50): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 2, S_64_BIT], byte(i)): success [134ms]
castShape took 134 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3be09a90): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 1, S_64_BIT], byte(i)): success [135ms]
castShape took 135 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@587a291b): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 16, S_128_BIT], byte(i)): success [1474ms]
castShape took 1475 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f553ca0): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 8, S_128_BIT], byte(i)): success [986ms]
castShape took 985 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@199c0767): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 4, S_128_BIT], byte(i)): success [1202ms]
castShape took 1201 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@601ced8f): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 2, S_128_BIT], byte(i)): success [968ms]
castShape took 968 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d7ea3c7): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 4, S_128_BIT], byte(i)): success [226ms]
castShape took 222 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b255dd9): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 2, S_128_BIT], byte(i)): success [165ms]
castShape took 165 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7fa5e19f): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 32, S_256_BIT], byte(i)): success [3952ms]
castShape took 3952 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ff24c93): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 16, S_256_BIT], byte(i)): success [436ms]
castShape took 436 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61cfed27): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 8, S_256_BIT], byte(i)): success [1015ms]
castShape took 1015 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1a8da75b): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 4, S_256_BIT], byte(i)): success [134ms]
castShape took 134 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5876605a): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 8, S_256_BIT], byte(i)): success [147ms]
castShape took 147 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bba105f): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 4, S_256_BIT], byte(i)): success [724ms]
castShape took 725 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3aef685d): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 64, S_512_BIT], byte(i)): success [10646ms]
castShape took 10646 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@330b599c): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 32, S_512_BIT], byte(i)): success [2815ms]
castShape took 2815 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4ec0d3c5): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 16, S_512_BIT], byte(i)): success [313ms]
castShape took 314 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@23ebbe9b): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 8, S_512_BIT], byte(i)): success [118ms]
castShape took 118 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f31904d): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 16, S_512_BIT], byte(i)): success [137ms]
castShape took 138 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@60302e2f): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 8, S_512_BIT], byte(i)): success [123ms]
castShape took 123 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@635080ac): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 16, S_Max_BIT], byte(i)): success [307ms]
castShape took 307 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21041812): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 8, S_Max_BIT], byte(i)): success [129ms]
castShape took 128 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6ec78b92): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 4, S_Max_BIT], byte(i)): success [428ms]
castShape took 428 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7514785e): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 2, S_Max_BIT], byte(i)): success [119ms]
castShape took 119 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1cd890db): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 4, S_Max_BIT], byte(i)): success [126ms]
castShape took 126 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d2edfc): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 2, S_Max_BIT], byte(i)): success [122ms]
castShape took 123 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25c43ebb): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 8, S_64_BIT], short(i)): success [1473ms]
castShape took 1472 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c8f70a7): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 4, S_64_BIT], short(i)): success [4202ms]
castShape took 4203 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@269d30e): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 2, S_64_BIT], short(i)): success [12ms]
castShape took 13 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@24836f52): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 1, S_64_BIT], short(i)): success [52ms]
castShape took 53 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65e87916): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 2, S_64_BIT], short(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@769c5c70): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 1, S_64_BIT], short(i)): success [18ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3702b375): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 16, S_128_BIT], short(i)): success [1896ms]
castShape took 1896 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3837a5b7): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 8, S_128_BIT], short(i)): success [489ms]
castShape took 489 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@606c340d): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 4, S_128_BIT], short(i)): success [21ms]
castShape took 22 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@630bd20e): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 2, S_128_BIT], short(i)): success [20ms]
castShape took 20 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12ed57a7): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 4, S_128_BIT], short(i)): success [22ms]
castShape took 22 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f2d24f6): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 2, S_128_BIT], short(i)): success [22ms]
castShape took 20 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37603231): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 32, S_256_BIT], short(i)): success [2459ms]
castShape took 2458 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bc54142): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 16, S_256_BIT], short(i)): success [4371ms]
castShape took 4371 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e567a1): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 8, S_256_BIT], short(i)): success [83ms]
castShape took 84 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19dc3e28): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 4, S_256_BIT], short(i)): success [65ms]
castShape took 65 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3de2e4ff): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 8, S_256_BIT], short(i)): success [83ms]
castShape took 84 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@40d0b25): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 4, S_256_BIT], short(i)): success [77ms]
castShape took 66 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@377723a8): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 64, S_512_BIT], short(i)): success [5767ms]
castShape took 5768 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6516338a): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 32, S_512_BIT], short(i)): success [2752ms]
castShape took 2753 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@31ffcfc1): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 16, S_512_BIT], short(i)): success [3608ms]
castShape took 3609 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7fac3958): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 8, S_512_BIT], short(i)): success [1123ms]
castShape took 1124 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12aa0499): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 16, S_512_BIT], short(i)): success [2466ms]
castShape took 2466 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@acc04f5): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 8, S_512_BIT], short(i)): success [85ms]
castShape took 85 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15e41f09): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 16, S_Max_BIT], short(i)): success [1123ms]
castShape took 1123 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c73d6bf): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 8, S_Max_BIT], short(i)): success [457ms]
castShape took 457 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@86b636b): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 4, S_Max_BIT], short(i)): success [26ms]
castShape took 26 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1cc95e51): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 2, S_Max_BIT], short(i)): success [18ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@69062f41): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 4, S_Max_BIT], short(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b0797d8): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 2, S_Max_BIT], short(i)): success [18ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1fde55c6): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 8, S_64_BIT], int(i)): success [2202ms]
castShape took 2202 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@263b3e17): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 4, S_64_BIT], int(i)): success [857ms]
castShape took 857 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19d63f56): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 2, S_64_BIT], int(i)): success [931ms]
castShape took 932 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44b0a7f2): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 1, S_64_BIT], int(i)): success [202ms]
castShape took 203 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@24106675): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 2, S_64_BIT], int(i)): success [9ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@236f95aa): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 1, S_64_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5efab149): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 16, S_128_BIT], int(i)): success [566ms]
castShape took 566 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3fd3b325): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 8, S_128_BIT], int(i)): success [1611ms]
castShape took 1611 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3f43f08e): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 4, S_128_BIT], int(i)): success [935ms]
castShape took 936 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5fe72406): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 2, S_128_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21f61f55): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 4, S_128_BIT], int(i)): success [16ms]
castShape took 16 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3325e54b): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 2, S_128_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b339f99): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 32, S_256_BIT], int(i)): success [3502ms]
castShape took 3502 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18cb82df): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 16, S_256_BIT], int(i)): success [3249ms]
castShape took 3249 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@643f070d): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 8, S_256_BIT], int(i)): success [3699ms]
castShape took 3700 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@653e4509): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 4, S_256_BIT], int(i)): success [106ms]
castShape took 107 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2839d331): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 8, S_256_BIT], int(i)): success [2477ms]
castShape took 2477 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37078c85): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 4, S_256_BIT], int(i)): success [173ms]
castShape took 173 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76efca29): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 64, S_512_BIT], int(i)): success [6935ms]
castShape took 6935 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b5f7bb5): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 32, S_512_BIT], int(i)): success [3891ms]
castShape took 3890 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f9918c7): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 16, S_512_BIT], int(i)): success [2289ms]
castShape took 2289 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19345d92): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 8, S_512_BIT], int(i)): success [3215ms]
castShape took 3216 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49d8e1d8): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 16, S_512_BIT], int(i)): success [2382ms]
castShape took 2382 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29a2fa79): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 8, S_512_BIT], int(i)): success [2492ms]
castShape took 2492 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2659de2b): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 16, S_Max_BIT], int(i)): success [510ms]
castShape took 510 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5675465e): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 8, S_Max_BIT], int(i)): success [1008ms]
castShape took 1008 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b2a4a82): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 4, S_Max_BIT], int(i)): success [223ms]
castShape took 223 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@38212d6d): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5e3358da): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 4, S_Max_BIT], int(i)): success [11ms]
castShape took 12 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1127a9e1): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43ace159): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 8, S_64_BIT], long(i)): success [798ms]
castShape took 799 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6371010b): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 4, S_64_BIT], long(i)): success [1040ms]
castShape took 1041 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f1a9567): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 2, S_64_BIT], long(i)): success [839ms]
castShape took 840 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@170549c7): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 1, S_64_BIT], long(i)): success [1277ms]
castShape took 1277 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@124d2b42): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 2, S_64_BIT], long(i)): success [18ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75b96cb8): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 1, S_64_BIT], long(i)): success [21ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e6da30a): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 16, S_128_BIT], long(i)): success [1085ms]
castShape took 1085 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e481f14): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 8, S_128_BIT], long(i)): success [583ms]
castShape took 583 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34ac9d6d): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 4, S_128_BIT], long(i)): success [1259ms]
castShape took 1259 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19137dfa): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 2, S_128_BIT], long(i)): success [1965ms]
castShape took 1965 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4068a139): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 4, S_128_BIT], long(i)): success [1256ms]
castShape took 1256 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5d2ea27e): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 2, S_128_BIT], long(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42642d30): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 32, S_256_BIT], long(i)): success [6975ms]
castShape took 6975 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@41f2d159): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 16, S_256_BIT], long(i)): success [4212ms]
castShape took 4212 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8040dfb): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 8, S_256_BIT], long(i)): success [3895ms]
castShape took 3896 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2dd5b0c1): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 4, S_256_BIT], long(i)): success [4605ms]
castShape took 4605 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bc29b56): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 8, S_256_BIT], long(i)): success [3640ms]
castShape took 3640 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3da5771b): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 4, S_256_BIT], long(i)): success [3065ms]
castShape took 3065 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b928f24): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 64, S_512_BIT], long(i)): success [13313ms]
castShape took 13313 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@53d438dd): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 32, S_512_BIT], long(i)): success [7235ms]
castShape took 7236 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e9e124f): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 16, S_512_BIT], long(i)): success [4159ms]
castShape took 4161 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3767d1fe): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 8, S_512_BIT], long(i)): success [3071ms]
castShape took 3056 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16658144): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 16, S_512_BIT], long(i)): success [4822ms]
castShape took 4822 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e488490): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 8, S_512_BIT], long(i)): success [3144ms]
castShape took 3143 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@207051a): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 16, S_Max_BIT], long(i)): success [1014ms]
castShape took 1014 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1684bed8): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 8, S_Max_BIT], long(i)): success [590ms]
castShape took 590 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6c6e507c): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 4, S_Max_BIT], long(i)): success [1083ms]
castShape took 1084 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1529045f): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 2, S_Max_BIT], long(i)): success [307ms]
castShape took 307 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b90aeb7): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 4, S_Max_BIT], long(i)): success [1221ms]
castShape took 1222 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d930031): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 2, S_Max_BIT], long(i)): success [21ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@838508): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[byte, 8, S_64_BIT], float(i)): success [1456ms]
castShape took 1456 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1d21acd5): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[short, 4, S_64_BIT], float(i)): success [1780ms]
castShape took 1780 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c17510f): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[int, 2, S_64_BIT], float(i)): success [8ms]
castShape took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13587957): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[long, 1, S_64_BIT], float(i)): success [1004ms]
castShape took 1004 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4fa6b2a5): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[float, 2, S_64_BIT], float(i)): success [581ms]
castShape took 581 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@79362e86): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[double, 1, S_64_BIT], float(i)): success [7ms]
castShape took 7 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d200a30): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[byte, 16, S_128_BIT], float(i)): success [523ms]
castShape took 523 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@571838c): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[short, 8, S_128_BIT], float(i)): success [289ms]
castShape took 289 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b89077f): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[int, 4, S_128_BIT], float(i)): success [9ms]
castShape took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@265bfffc): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[long, 2, S_128_BIT], float(i)): success [8ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b94a991): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[float, 4, S_128_BIT], float(i)): success [258ms]
castShape took 258 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5235bec2): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[double, 2, S_128_BIT], float(i)): success [8ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d2cf589): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[byte, 32, S_256_BIT], float(i)): success [3459ms]
castShape took 3460 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@62f11d82): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], 

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

S_Max_BIT]): success [1ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ef944f8): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[float, 4, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCast took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bc51306): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[int, 2, S_64_BIT]): success [2ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49fd216e): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[float, 2, S_64_BIT]): success [27ms]
shuffleCast took 28 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1384eb87): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[long, 2, S_128_BIT]): success [3ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15c672de): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[double, 2, S_128_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55b9f94e): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[long, 2, S_Max_BIT]): success [2ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4076fced): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[double, 2, S_Max_BIT]): success [3ms]
shuffleCast took 4 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14f5c5a9): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e77565): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5103825a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@167a7081): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e72c4eb): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@198647f7): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@361e5553): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2fd76e9b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@693954e1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50a63192): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 6 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17f0e87c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b06ce01): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76d7bdef): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4ba2a3c4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@463142d5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16da3050): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4219c83b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d863fcd): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1f18e4b1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27321f76): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@99a4da7): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14a4f797): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@666c1382): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@224314a2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1dfb4134): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7496b2ca): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45563d04): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@188caa7b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77ca5b48): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@390db554): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18fd0f5e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@701bc385): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7d444216): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34c85df8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f3cb131): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e8d1c80): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c93a156): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@67821d4e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12d3c83): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 26 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c820ef5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@491d4183): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46df943c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21550842): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77aa4c20): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@466dc5c5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5cacb27e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25fea54b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7403ac38): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e150e1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b496a1d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a208eb4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b0a79e4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29812350): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25838d8c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@86a45d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@74779344): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dd24a2a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d369f8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e80a3ef): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5c7cbdb6): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@277354b5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@219fe42e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@389fdeba): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45b7e819): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@216f5222): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e9e4164): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5bd5a86d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f7104ce): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39c11e76): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7af8d8a7): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e165d44): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48e07e11): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65977dc6): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@573ae6a8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6f12f8f8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bf63723): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ca34cbb): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61e2481c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7652041a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@171dcd5c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13b8c413): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@68a34a82): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2bb7efc2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@207054d6): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b5a9bf3): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44bcaa50): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39229018): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3aa271dc): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21b29cc2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e9a9a6f): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2cd91c5f): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2865f6ed): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13e4446c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@246e3c69): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e214d63): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1319af93): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@157c2890): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b8ae83): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43daa5ab): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@47292319): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57438fd4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6628a0cd): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78c44a0e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8b487c6): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@739d3d0b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3f47c415): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10fe1ffa): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dbd1524): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6fb99235): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5eb9a353): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@30c81a1d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5c663160): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@279510cc): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@303e321a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7612d72): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6cb56024): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@508fb1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b4e64be): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10d15b43): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48a586d9): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5809466): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@520d679c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42d3e00a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18a4ca36): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d6e637d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@718b30d4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f66a0b7): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d7a71f2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 16, S_256_BIT]): success [15ms]
shuffleCastNeg took 16 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c0607e5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15ce859f): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@529cf764): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e239d9b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e80c493): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@438e98dd): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61b0eeb1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7ff46da2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2028cad4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e946b66): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@151408c8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66b68443): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@405e2a9f): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@198ffaff): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@144407fa): success [0ms]

===============================================
jdk/incubator/vector/Vector128ConversionTests.java
Total tests run: 936, Passes: 935, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/5 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Vector128ConversionTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Vector128ConversionTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector128ConversionTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Vector128ConversionTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Vector128ConversionTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/8/jdk/incubator/vector/Vector128ConversionTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -XX:-TieredCompilation \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Vector128ConversionTests.d/testng.0.jta jdk/incubator/vector/Vector128ConversionTests.java false Vector128ConversionTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#id0
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#Z
TEST: jdk/incubator/vector/VectorReshapeTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   4.491 seconds
messages:
command: build VectorReshapeTests
reason: Named class compiled on demand
started: Wed Apr 16 16:58:13 IST 2025
Test directory:
  compile: VectorReshapeTests
finished: Wed Apr 16 16:58:17 IST 2025
elapsed time (seconds): 4.491

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   4.491 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 16:58:13 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 16
Process id: 1414255
finished: Wed Apr 16 16:58:17 IST 2025
elapsed time (seconds): 4.491
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/0 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 7
REASON: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
TIME:   774.65 seconds
messages:
command: testng --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests
reason: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
started: Wed Apr 16 16:58:17 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1419223
finished: Wed Apr 16 17:11:12 IST 2025
elapsed time (seconds): 774.65
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorReshapeTests.testCastFromByte(byte(i)): success [39931ms]
test VectorReshapeTests.testCastFromDouble(double(i)): success [3336ms]
test VectorReshapeTests.testCastFromFloat(float(i)): success [4076ms]
test VectorReshapeTests.testCastFromInt(int(i)): success [4093ms]
test VectorReshapeTests.testCastFromLong(long(i)): success [3098ms]
test VectorReshapeTests.testCastFromShort(short(i)): success [3967ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[int, 4, S_128_BIT]->Species[short, 8, S_128_BIT] (lanewise), partLimit=-2, block=8, part=-1, origin=8
expect: [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 5, 6, 9, 10, 13, 14]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket128(byte(i)): failure [9664ms]
java.lang.AssertionError: arrays differ firstly at element [8]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket128(VectorReshapeTests.java:914)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
Failing with Species[long, 4, S_256_BIT]->Species[byte, 32, S_256_BIT] (lanewise), partLimit=-8, block=4, part=-2, origin=8
expect: [0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 17, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket256(byte(i)): failure [79873ms]
java.lang.AssertionError: arrays differ firstly at element [8]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket256(VectorReshapeTests.java:969)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testRebracket512(byte(i)): success [167082ms]
test VectorReshapeTests.testRebracket64(byte(i)): success [16772ms]
test VectorReshapeTests.testRebracketMax(byte(i)): success [23158ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[byte, 8, S_64_BIT]->Species[byte, 64, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-4, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeByte(byte(i)): failure [128452ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeByte(VectorReshapeTests.java:441)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[double, 2, S_128_BIT]->Species[double, 8, S_512_BIT] (lanewise), partLimit=-4, block=16, part=-3, origin=48
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeDouble(byte(i)): failure [23482ms]
java.lang.AssertionError: arrays differ firstly at element [48]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeDouble(VectorReshapeTests.java:677)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testReshapeFloat(byte(i)): success [156577ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[int, 2, S_64_BIT]->Species[int, 16, S_512_BIT] (reinterpret), partLimit=-8, block=8, part=-7, origin=56
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeInt(byte(i)): failure [24695ms]
java.lang.AssertionError: arrays differ firstly at element [56]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeInt(VectorReshapeTests.java:533)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[long, 1, S_64_BIT]->Species[long, 8, S_512_BIT] (reinterpret), partLimit=-8, block=8, part=-1, origin=8
expect: [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeLong(byte(i)): failure [6940ms]
java.lang.AssertionError: arrays differ firstly at element [8]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeLong(VectorReshapeTests.java:579)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[short, 8, S_Max_BIT]->Species[short, 32, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-1, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeShort(byte(i)): failure [39757ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeShort(VectorReshapeTests.java:511)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testUCastFromByte(byte(i)): success [22556ms]
test VectorReshapeTests.testUCastFromInt(int(i)): success [1ms]
test VectorReshapeTests.testUCastFromShort(short(i)): success [11385ms]

===============================================
jdk/incubator/vector/VectorReshapeTests.java
Total tests run: 20, Passes: 13, Failures: 7, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 7
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 7
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 7
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/0 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/VectorReshapeTests.d/testng.0.jta jdk/incubator/vector/VectorReshapeTests.java false VectorReshapeTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 7
--------------------------------------------------
TEST: jdk/incubator/vector/Vector64ConversionTests.java#id0
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.952 seconds
messages:
command: build Vector64ConversionTests
reason: Named class compiled on demand
started: Wed Apr 16 16:54:41 IST 2025
Test directory:
  compile: Vector64ConversionTests
finished: Wed Apr 16 16:54:42 IST 2025
elapsed time (seconds): 0.952

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.951 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 16:54:41 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 8
Process id: 1413518
finished: Wed Apr 16 16:54:42 IST 2025
elapsed time (seconds): 0.951
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/7 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Vector64ConversionTests.java#id0 \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
REASON: User specified action: run testng/othervm/timeout=300 -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector64ConversionTests 
TIME:   1377.526 seconds
messages:
command: testng -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector64ConversionTests
reason: User specified action: run testng/othervm/timeout=300 -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector64ConversionTests 
started: Wed Apr 16 16:54:42 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1418514
finished: Wed Apr 16 17:17:40 IST 2025
elapsed time (seconds): 1377.526
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 8, S_64_BIT], byte(i)): success [1309ms]
castShape took 1303 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cab41a5): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 4, S_64_BIT], byte(i)): success [697ms]
castShape took 698 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@32f13c0c): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 2, S_64_BIT], byte(i)): success [569ms]
castShape took 569 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@177ba401): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 1, S_64_BIT], byte(i)): success [387ms]
castShape took 387 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55e9fd9b): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 2, S_64_BIT], byte(i)): success [214ms]
castShape took 214 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bf43dcb): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 1, S_64_BIT], byte(i)): success [371ms]
castShape took 371 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@64cc2f05): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 16, S_128_BIT], byte(i)): success [2231ms]
castShape took 2227 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7d3c5dca): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 8, S_128_BIT], byte(i)): success [972ms]
castShape took 972 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54302f60): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 4, S_128_BIT], byte(i)): success [855ms]
castShape took 855 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@160cc352): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 2, S_128_BIT], byte(i)): success [1101ms]
castShape took 1101 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@759369ce): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 4, S_128_BIT], byte(i)): success [197ms]
castShape took 197 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@23821e96): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 2, S_128_BIT], byte(i)): success [176ms]
castShape took 176 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4c93395e): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 32, S_256_BIT], byte(i)): success [5188ms]
castShape took 5188 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@64daf28): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 16, S_256_BIT], byte(i)): success [4141ms]
castShape took 4141 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7453c2ce): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 8, S_256_BIT], byte(i)): success [198ms]
castShape took 199 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2911fcc7): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 4, S_256_BIT], byte(i)): success [819ms]
castShape took 819 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@69a30bb8): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 8, S_256_BIT], byte(i)): success [502ms]
castShape took 502 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@695191ca): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 4, S_256_BIT], byte(i)): success [176ms]
castShape took 176 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4bf40f8): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 64, S_512_BIT], byte(i)): success [7140ms]
castShape took 7141 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bd98d4a): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 32, S_512_BIT], byte(i)): success [5452ms]
castShape took 5452 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@51e62310): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 16, S_512_BIT], byte(i)): success [3132ms]
castShape took 3132 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18ef793): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 8, S_512_BIT], byte(i)): success [1078ms]
castShape took 1079 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54eca994): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 16, S_512_BIT], byte(i)): success [2673ms]
castShape took 2673 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d9ec089): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 8, S_512_BIT], byte(i)): success [182ms]
castShape took 182 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4cd54fd1): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 16, S_Max_BIT], byte(i)): success [1692ms]
castShape took 1692 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@630bd20e): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 8, S_Max_BIT], byte(i)): success [476ms]
castShape took 474 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bc54142): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 4, S_Max_BIT], byte(i)): success [137ms]
castShape took 138 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@618b78f4): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 2, S_Max_BIT], byte(i)): success [134ms]
castShape took 134 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c7674c6): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 4, S_Max_BIT], byte(i)): success [142ms]
castShape took 143 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@72fd6e22): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 2, S_Max_BIT], byte(i)): success [140ms]
castShape took 141 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@40d0b25): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 8, S_64_BIT], short(i)): success [3177ms]
castShape took 3177 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@9ae45b9): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 4, S_64_BIT], short(i)): success [4679ms]
castShape took 4679 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7fac3958): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 2, S_64_BIT], short(i)): success [9ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19d0a0ec): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 1, S_64_BIT], short(i)): success [80ms]
castShape took 80 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7eff441c): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 2, S_64_BIT], short(i)): success [8ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b6a37d2): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 1, S_64_BIT], short(i)): success [7ms]
castShape took 7 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48b7f47e): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 16, S_128_BIT], short(i)): success [876ms]
castShape took 875 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c4697bc): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 8, S_128_BIT], short(i)): success [1702ms]
castShape took 1702 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5353824d): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 4, S_128_BIT], short(i)): success [12ms]
castShape took 13 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61517fb2): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 2, S_128_BIT], short(i)): success [14ms]
castShape took 14 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5bb27146): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 4, S_128_BIT], short(i)): success [13ms]
castShape took 13 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@412dc1a2): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 2, S_128_BIT], short(i)): success [14ms]
castShape took 12 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@321f317): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 32, S_256_BIT], short(i)): success [6614ms]
castShape took 6615 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b0ecc95): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 16, S_256_BIT], short(i)): success [2529ms]
castShape took 2529 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10363f91): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 8, S_256_BIT], short(i)): success [3195ms]
castShape took 3196 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42e578c0): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 4, S_256_BIT], short(i)): success [103ms]
castShape took 103 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cfc7fce): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 8, S_256_BIT], short(i)): success [2324ms]
castShape took 2325 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f84d03b): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 4, S_256_BIT], short(i)): success [112ms]
castShape took 102 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15e41f09): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 64, S_512_BIT], short(i)): success [6590ms]
castShape took 6590 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c73d6bf): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 32, S_512_BIT], short(i)): success [4814ms]
castShape took 4815 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1d5c1d58): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 16, S_512_BIT], short(i)): success [2074ms]
castShape took 2073 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@a049c7d): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 8, S_512_BIT], short(i)): success [3024ms]
castShape took 3024 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61a38c6c): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 16, S_512_BIT], short(i)): success [2382ms]
castShape took 2383 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@236f95aa): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 8, S_512_BIT], short(i)): success [2496ms]
castShape took 2497 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5efab149): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 16, S_Max_BIT], short(i)): success [572ms]
castShape took 573 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18cb82df): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 8, S_Max_BIT], short(i)): success [1445ms]
castShape took 1446 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@643f070d): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 4, S_Max_BIT], short(i)): success [7ms]
castShape took 7 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4934c96b): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 2, S_Max_BIT], short(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e059ab7): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 4, S_Max_BIT], short(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5897749f): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 2, S_Max_BIT], short(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c1371b8): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 8, S_64_BIT], int(i)): success [2280ms]
castShape took 2280 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@442b18f7): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 4, S_64_BIT], int(i)): success [1104ms]
castShape took 1104 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@272f2089): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 2, S_64_BIT], int(i)): success [865ms]
castShape took 865 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@47411d55): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 1, S_64_BIT], int(i)): success [156ms]
castShape took 156 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14ce104e): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 2, S_64_BIT], int(i)): success [67ms]
castShape took 68 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5594fce7): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 1, S_64_BIT], int(i)): success [19ms]
castShape took 20 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@385c781e): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 16, S_128_BIT], int(i)): success [1207ms]
castShape took 1207 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b49f91b): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 8, S_128_BIT], int(i)): success [610ms]
castShape took 610 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ef954c2): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 4, S_128_BIT], int(i)): success [1959ms]
castShape took 1959 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@41d7eadd): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 2, S_128_BIT], int(i)): success [25ms]
castShape took 25 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77875646): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 4, S_128_BIT], int(i)): success [1272ms]
castShape took 1273 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75410c4d): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 2, S_128_BIT], int(i)): success [23ms]
castShape took 23 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2659de2b): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 32, S_256_BIT], int(i)): success [7137ms]
castShape took 7137 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2965864e): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 16, S_256_BIT], int(i)): success [4196ms]
castShape took 4195 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2120f2e3): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 8, S_256_BIT], int(i)): success [3624ms]
castShape took 3624 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@652689d6): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 4, S_256_BIT], int(i)): success [3765ms]
castShape took 3766 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4da521da): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 8, S_256_BIT], int(i)): success [3491ms]
castShape took 3492 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b83faf6): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 4, S_256_BIT], int(i)): success [3081ms]
castShape took 3082 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5403a76a): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 64, S_512_BIT], int(i)): success [12975ms]
castShape took 12976 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f69c681): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 32, S_512_BIT], int(i)): success [7293ms]
castShape took 7294 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@38212d6d): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 16, S_512_BIT], int(i)): success [4594ms]
castShape took 4594 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b356941): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 8, S_512_BIT], int(i)): success [3031ms]
castShape took 3031 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5e3358da): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 16, S_512_BIT], int(i)): success [4792ms]
castShape took 4792 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1127a9e1): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 8, S_512_BIT], int(i)): success [3164ms]
castShape took 3164 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43ace159): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 16, S_Max_BIT], int(i)): success [1019ms]
castShape took 1019 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6371010b): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 8, S_Max_BIT], int(i)): success [610ms]
castShape took 610 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2ce2b52d): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 4, S_Max_BIT], int(i)): success [1442ms]
castShape took 1442 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26a91840): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 2, S_Max_BIT], int(i)): success [17ms]
castShape took 17 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@124d2b42): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 4, S_Max_BIT], int(i)): success [1194ms]
castShape took 1194 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39a660cb): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 2, S_Max_BIT], int(i)): success [17ms]
castShape took 17 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54f2c322): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 8, S_64_BIT], long(i)): success [1551ms]
castShape took 1551 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@a058e25): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 4, S_64_BIT], long(i)): success [808ms]
castShape took 809 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2fd72c2): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 2, S_64_BIT], long(i)): success [1168ms]
castShape took 1168 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@702a7105): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 1, S_64_BIT], long(i)): success [1363ms]
castShape took 1363 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17ad70a4): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 2, S_64_BIT], long(i)): success [1353ms]
castShape took 1353 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75abf337): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 1, S_64_BIT], long(i)): success [299ms]
castShape took 299 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a7adece): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 16, S_128_BIT], long(i)): success [2255ms]
castShape took 2256 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13013718): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 8, S_128_BIT], long(i)): success [1236ms]
castShape took 1236 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17e2be4e): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 4, S_128_BIT], long(i)): success [876ms]
castShape took 876 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d921bd2): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 2, S_128_BIT], long(i)): success [2911ms]
castShape took 2911 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2037f3c9): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 4, S_128_BIT], long(i)): success [1145ms]
castShape took 1145 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@276164a0): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 2, S_128_BIT], long(i)): success [1388ms]
castShape took 1388 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8c06a5d): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 32, S_256_BIT], long(i)): success [13986ms]
castShape took 13987 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@28d7f27b): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 16, S_256_BIT], long(i)): success [8213ms]
castShape took 8214 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6b454dd8): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 8, S_256_BIT], long(i)): success [5314ms]
castShape took 5314 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75f7eb6a): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 4, S_256_BIT], long(i)): success [4804ms]
castShape took 4804 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e488490): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 8, S_256_BIT], long(i)): success [5979ms]
castShape took 5979 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5ca2ddd8): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 4, S_256_BIT], long(i)): success [4250ms]
castShape took 4251 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@56fbb06c): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 64, S_512_BIT], long(i)): success [25796ms]
castShape took 25796 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26680c34): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 32, S_512_BIT], long(i)): success [14084ms]
castShape took 14084 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e5aae46): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 16, S_512_BIT], long(i)): success [8270ms]
castShape took 8270 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66c655cc): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 8, S_512_BIT], long(i)): success [5896ms]
castShape took 5877 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@70731f1d): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 16, S_512_BIT], long(i)): success [9403ms]
castShape took 9403 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c1007ab): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 8, S_512_BIT], long(i)): success [5971ms]
castShape took 5972 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5d5cf24a): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 16, S_Max_BIT], long(i)): success [2193ms]
castShape took 2194 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44fa8ea1): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 8, S_Max_BIT], long(i)): success [1308ms]
castShape took 1309 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3af7f9f0): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 4, S_Max_BIT], long(i)): success [873ms]
castShape took 873 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d3eb656): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 2, S_Max_BIT], long(i)): success [1739ms]
castShape took 1740 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14b48a94): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 4, S_Max_BIT], long(i)): success [1181ms]
castShape took 1182 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2974683e): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 2, S_Max_BIT], long(i)): success [1307ms]
castShape took 1307 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@81586e9): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[byte, 8, S_64_BIT], float(i)): success [1749ms]
castShape took 1749 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63b8ddc6): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[short, 4, S_64_BIT], float(i)): success [2118ms]
castShape took 2118 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@283174d3): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[int, 2, S_64_BIT], float(i)): success [21ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2109f79c): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[long, 1, S_64_BIT], float(i)): success [150ms]
castShape took 150 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26c5e81d): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[float, 2, S_64_BIT], float(i)): success [592ms]
castShape took 592 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7552b685): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[double, 1, S_64_BIT], float(i)): success [12ms]
castShape took 13 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@62f11d82): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[byte, 16, S_128_BIT], float(i)): success [1048ms]
castShape took 1049 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@110d084): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[short, 8, S_128_BIT], float(i)): success [570ms]
castShape took 570 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2d4bbd01): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[int, 4, S_128_BIT], float(i)): success [399ms]
castShape took 399 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@74ce726a): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[long, 2, S_128_BIT], float(i)): success [28ms]
castShape took 28 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@68438483): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[float, 4, S_128_BIT], float(i)): success [970ms]
castShape took 971 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49d570): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[double, 2, S_128_BIT], float(i)): success [13ms]
castShape took 13 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8233c99): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[byte, 32, S_256_BIT], float(i)): success [7023ms]
castShape took 7024 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f4c0e1b): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[short, 16, S_256_BIT], float(i)): success [4098ms]
castShape took 4098 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c9f6571): success [0ms]
test Vector64ConversionTests.castShape(Species[float,

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

at, 2, S_64_BIT], Species[double, 2, S_128_BIT]): success [8ms]
shuffleCast took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ef944f8): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[float, 2, S_64_BIT], Species[long, 2, S_Max_BIT]): success [28ms]
shuffleCast took 29 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bc51306): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[float, 2, S_64_BIT], Species[double, 2, S_Max_BIT]): success [2ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49fd216e): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[double, 1, S_64_BIT], Species[long, 1, S_64_BIT]): success [1ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1384eb87): success [0ms]
test Vector64ConversionTests.shuffleCast(Species[double, 1, S_64_BIT], Species[double, 1, S_64_BIT]): success [1ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15c672de): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55b9f94e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4076fced): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14f5c5a9): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e77565): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5103825a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@167a7081): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e72c4eb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@198647f7): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@361e5553): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2fd76e9b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@693954e1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50a63192): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17f0e87c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b06ce01): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76d7bdef): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4ba2a3c4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@463142d5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 5 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16da3050): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4219c83b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d863fcd): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1f18e4b1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27321f76): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@99a4da7): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14a4f797): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@666c1382): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@224314a2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1dfb4134): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7496b2ca): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45563d04): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@188caa7b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77ca5b48): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@390db554): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18fd0f5e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@701bc385): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7d444216): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34c85df8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f3cb131): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e8d1c80): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c93a156): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@67821d4e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12d3c83): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c820ef5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@491d4183): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46df943c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21550842): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77aa4c20): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 27 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@466dc5c5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5cacb27e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25fea54b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7403ac38): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e150e1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b496a1d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a208eb4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b0a79e4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29812350): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25838d8c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@86a45d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@74779344): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dd24a2a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d369f8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e80a3ef): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5c7cbdb6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@277354b5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@219fe42e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@389fdeba): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45b7e819): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@216f5222): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e9e4164): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5bd5a86d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f7104ce): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39c11e76): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7af8d8a7): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e165d44): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48e07e11): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65977dc6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@573ae6a8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6f12f8f8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bf63723): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ca34cbb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61e2481c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7652041a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@171dcd5c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13b8c413): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@68a34a82): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2bb7efc2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@207054d6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b5a9bf3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44bcaa50): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39229018): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3aa271dc): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21b29cc2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e9a9a6f): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2cd91c5f): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2865f6ed): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13e4446c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@246e3c69): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e214d63): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1319af93): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@157c2890): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b8ae83): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43daa5ab): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@47292319): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57438fd4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6628a0cd): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78c44a0e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8b487c6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@739d3d0b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3f47c415): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10fe1ffa): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dbd1524): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6fb99235): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5eb9a353): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@30c81a1d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5c663160): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@279510cc): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@303e321a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7612d72): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6cb56024): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@508fb1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b4e64be): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10d15b43): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48a586d9): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5809466): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@520d679c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42d3e00a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18a4ca36): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d6e637d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 8, S_128_BIT]): success [10ms]
shuffleCastNeg took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@718b30d4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15dffe0d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@760f628b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7643adfe): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15ce859f): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@529cf764): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e239d9b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e80c493): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@438e98dd): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61b0eeb1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7ff46da2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2028cad4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e946b66): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@151408c8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66b68443): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@405e2a9f): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@198ffaff): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@144407fa): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@766dfd7f): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@195ef63e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@db37e07): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@447938a0): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@218c5f42): success [0ms]

===============================================
jdk/incubator/vector/Vector64ConversionTests.java#id0
Total tests run: 936, Passes: 934, Failures: 2, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/scratch/7 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Vector64ConversionTests.java#id0 \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -XX:-TieredCompilation \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector/jdk/incubator/vector/Vector64ConversionTests_id0.d/testng.0.jta jdk/incubator/vector/Vector64ConversionTests.java#id0 false Vector64ConversionTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
--------------------------------------------------
Test results: passed: 68; failed: 12; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_incubator_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_incubator_vector
Finished running test 'jtreg:test/jdk/jdk/incubator/vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_incubator_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk/jdk/incubator/vector                  83    68    12     0     3 <<
==============================
TEST FAILURE

