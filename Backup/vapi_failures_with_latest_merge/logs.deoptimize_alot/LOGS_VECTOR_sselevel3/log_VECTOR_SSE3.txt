Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_1', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_1
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_1

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Passed: compiler/codegen/Test6797305.java
Passed: compiler/codegen/IntRotateWithImmediate.java
Passed: compiler/codegen/Test6814842.java
Passed: compiler/codegen/ShiftByZero.java
Passed: compiler/codegen/LoadWithMask2.java
Passed: compiler/codegen/Test6378821.java
Passed: compiler/codegen/C1NullCheckOfNullStore.java
Passed: compiler/codegen/LoadWithMask.java
Passed: compiler/codegen/Test6431242.java
Passed: compiler/codegen/BMI1.java
Passed: compiler/codegen/ClearArrayTest.java
Passed: compiler/codegen/BMI2.java
Passed: compiler/codegen/CRCTest.java
Passed: compiler/codegen/BitTests.java
Passed: compiler/codegen/ShiftTest.java
Passed: compiler/codegen/TestByteIntVect.java
Passed: compiler/codegen/Test7009231.java
Passed: compiler/codegen/Test8005033.java
Passed: compiler/codegen/BadLogicCode.java
Passed: compiler/codegen/Test8011901.java
Passed: compiler/codegen/Test6909839.java
Passed: compiler/codegen/TestBooleanVect.java
Passed: compiler/codegen/Test6879902.java
Passed: compiler/codegen/TestByteLongVect.java
Passed: compiler/codegen/TestByteShortVect.java
Passed: compiler/codegen/TestCharShortVect.java
Passed: compiler/codegen/TestConvertImplicitNullCheck.java
Passed: compiler/codegen/TestByteDoubleVect.java
Passed: compiler/codegen/TestByteVect.java
Passed: compiler/codegen/TestCharVect.java
Passed: compiler/codegen/TestCharVect2.java#id0
Passed: compiler/codegen/TestDoubleVect.java
Passed: compiler/codegen/Test6823354.java
Passed: compiler/codegen/TestByteFloatVect.java
Passed: compiler/codegen/TestMultiMemInstructionMatching.java
Passed: compiler/codegen/Test7100757.java
Passed: compiler/codegen/TestFloatVect.java
Passed: compiler/codegen/TestFloatDoubleVect.java
Passed: compiler/codegen/TestLongDoubleVect.java
Passed: compiler/codegen/TestIntFloatVect.java
Passed: compiler/codegen/TestShortDoubleVect.java
Passed: compiler/codegen/TestIntVect.java
Passed: compiler/codegen/TestLongVect.java
Passed: compiler/codegen/TestOopCmp.java
Passed: compiler/loopopts/superword/AlignmentOnePack.java
Passed: compiler/loopopts/superword/CoLocatePackMemoryState.java
Passed: compiler/loopopts/superword/CoLocatePack.java
Passed: compiler/codegen/TestGCMLoadPlacement.java
Passed: compiler/codegen/TestCharVect2.java#id1
Passed: compiler/codegen/TestIntDoubleVect.java
Passed: compiler/codegen/TestShortIntVect.java
Passed: compiler/codegen/TestIntLongVect.java
Passed: compiler/codegen/Test6942326.java
Passed: compiler/codegen/TestLongFloatVect.java
Passed: compiler/codegen/TestShortVect.java
Passed: compiler/loopopts/superword/ReductionPerf.java
Passed: compiler/codegen/TestShortFloatVect.java
Passed: compiler/codegen/TestShortLongVect.java
Passed: compiler/codegen/TestSignedMultiplyLong.java
Passed: compiler/loopopts/superword/MinMaxRed_Long.java
Passed: compiler/loopopts/superword/SuperWordIntermediateUse.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage.java
Passed: compiler/loopopts/superword/MinMaxRed_Int.java
Passed: compiler/loopopts/superword/TestAlignVector.java#AlignVector
Passed: compiler/loopopts/superword/TestAlignVector.java#VerifyAlignVector
Passed: compiler/loopopts/superword/RedTest_int.java
Passed: compiler/loopopts/superword/RedTest_long.java
Passed: compiler/loopopts/superword/TestAlignVector.java#NoAlignVector
Passed: compiler/loopopts/superword/TestBestAlign.java
Passed: compiler/loopopts/superword/TestCmpInvar.java
Passed: compiler/loopopts/superword/SumRed_Long.java
Passed: compiler/loopopts/superword/TestCompatibleUseDefTypeSize.java
Passed: compiler/loopopts/superword/TestCyclicDependency.java
Passed: compiler/loopopts/superword/SumRed_Int.java
Passed: compiler/loopopts/superword/TestEliminateAllocationWithCastP2XUse.java
Passed: compiler/loopopts/superword/SumRed_Float.java
Passed: compiler/loopopts/superword/TestFuzzPreLoop.java
Passed: compiler/loopopts/superword/ProdRed_Double.java
Passed: compiler/loopopts/superword/ProdRed_Int.java
Passed: compiler/loopopts/superword/TestHoistedReductionNode.java
Passed: compiler/loopopts/superword/ProdRed_Float.java
Passed: compiler/loopopts/superword/TestIndependentPacksWithCyclicDependency2.java
Passed: compiler/loopopts/superword/TestGeneralizedReductions.java
Passed: compiler/loopopts/superword/TestLargeCompilation.java
Passed: compiler/loopopts/superword/SumRedAbsNeg_Double.java
Passed: compiler/loopopts/superword/SumRedAbsNeg_Float.java
Passed: compiler/loopopts/superword/SumRed_Double.java
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-Align16
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-NoTieredCompilation-Xbatch
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestMemorySegment.java#double-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#char-array
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#Vanilla
Passed: compiler/loopopts/superword/TestMemorySegment.java#float-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array
Passed: compiler/loopopts/superword/TestMemorySegmentMainLoopAlignment.java
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#native
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-A
Passed: compiler/loopopts/superword/TestMemorySegment.java#native-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-AlignVector
Passed: compiler/loopopts/superword/SumRedSqrt_Double.java
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-VerifyAlignVector
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-U
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-AlignVector
Passed: compiler/loopopts/superword/TestMultiversionRemoveUselessSlowLoop.java
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithFlags
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithMoreFlags
Passed: compiler/loopopts/superword/TestMemorySegment.java#short-array
Passed: compiler/loopopts/superword/TestNegBaseOffset.java
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#Vanilla
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-VerifyAlignVector
Passed: compiler/loopopts/superword/TestSearchAlignment.java
Passed: compiler/loopopts/superword/TestPeeledReductionNode.java
Passed: compiler/loopopts/superword/TestPickLastMemoryState.java
Passed: compiler/loopopts/superword/TestPickFirstMemoryState.java
Passed: compiler/loopopts/superword/TestParallelReduction.java
Passed: compiler/loopopts/superword/TestReductionWithLoopVariantUse.java
Passed: compiler/loopopts/superword/TestVectorizationWithInvariant.java
Passed: compiler/loopopts/superword/TestWronglyMarkedReduction.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize16-Unaligned
Passed: compiler/loopopts/superword/TestVectorizeTypeConversionWithUnsafe.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize32-Aligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Aligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Unaligned
Passed: compiler/vectorapi/TestIsLoadVector.java
Passed: compiler/vectorapi/Test8303508.java
Passed: compiler/loopopts/superword/TestVectorFPReduction.java
Passed: compiler/vectorapi/TestLongVectorNeg.java
Passed: compiler/vectorapi/TestBiMorphicMismatchedMemSegment.java
Passed: compiler/vectorapi/Test8259353.java
Passed: compiler/vectorapi/TestNoInline.java
Passed: compiler/vectorapi/TestLoopStoreVector.java#id1
Passed: compiler/vectorapi/TestLoopStoreVector.java#id0
Passed: compiler/vectorapi/TestIntrinsicBailOut.java#id0
Passed: compiler/vectorapi/TestVectorErgonomics.java
Passed: compiler/vectorapi/Test8278948.java
Passed: compiler/vectorapi/VectorBoxExpandTest.java
Passed: compiler/vectorapi/TestVectorShuffleIota.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#StoreToLoadForwardingFailureDetection
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#AlignVector
Passed: compiler/vectorapi/TestVectorAddMulReduction.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#vanilla
Passed: compiler/loopopts/superword/TestMovingLoadBeforeStore.java
Passed: compiler/vectorapi/TestVectorShiftImm.java
Passed: compiler/vectorapi/VectorFPtoIntCastTest.java
Passed: compiler/vectorapi/TestVectorShuffleIotaByte.java
Passed: compiler/vectorapi/TestReverseByteTransforms.java
Passed: compiler/vectorapi/VectorCommutativeOperSharingTest.java
Passed: compiler/vectorapi/VectorMemoryAlias.java
Passed: compiler/vectorapi/VectorMaskCastTest.java
Passed: compiler/loopopts/superword/TestEquivalentInvariants.java
Passed: compiler/vectorapi/TestTwoVectorPermute.java
Passed: compiler/c2/cr6340864/TestFloatVect.java
Passed: compiler/c2/cr6340864/TestDoubleVect.java
Passed: compiler/vectorapi/TestRawOopAtSafepoint.java
Passed: compiler/c2/cr6340864/TestByteVect.java
Passed: compiler/c2/irTests/blackhole/BlackholeHotInlineTest.java
Passed: compiler/c2/cr6340864/TestLongVectRotate.java
Passed: compiler/c2/cr6340864/TestIntVect.java
Passed: compiler/c2/irTests/blackhole/BlackholeStoreStoreEATest.java
Passed: compiler/c2/cr6340864/TestIntVectRotate.java
Passed: compiler/c2/cr6340864/TestShortVect.java
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id0
Passed: compiler/c2/irTests/blackhole/BlackholeLoadOptoTest.java
Passed: compiler/c2/irTests/blackhole/BlackholeSyncEATest.java
Passed: compiler/c2/irTests/igvn/TestCleanMemPhi.java
Passed: compiler/c2/irTests/igvn/TestCombineAddPWithConstantOffsets.java
Passed: compiler/c2/cr6340864/TestLongVect.java
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id1
Passed: compiler/c2/irTests/igvn/TestIntegerMulRing.java
Passed: compiler/c2/irTests/igvn/TestLoadNIdeal.java
Passed: compiler/c2/irTests/loopOpts/LoopIdealizationTests.java
Passed: compiler/vectorapi/VectorGatherMaskFoldingTest.java
Passed: compiler/c2/irTests/scalarReplacement/ScalarReplacementTests.java
Passed: compiler/vectorapi/VectorCastShape128Test.java
Passed: compiler/c2/irTests/stringopts/TestNegativeArraySize.java
Passed: compiler/vectorapi/VectorCastShape64Test.java
Passed: compiler/c2/irTests/AddINodeIdealizationTests.java
Passed: compiler/vectorapi/VectorSaturatedOperationsTest.java
Passed: compiler/c2/irTests/stable/StablePrimFinalTest.java
Passed: compiler/c2/irTests/AndINodeIdealizationTests.java
Passed: compiler/c2/irTests/AddLNodeIdealizationTests.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage2.java
Passed: compiler/c2/irTests/CMoveLConstants.java
Passed: compiler/c2/irTests/CmpUWithZero.java
Passed: compiler/c2/irTests/stable/StablePrimPlainTest.java
Passed: compiler/c2/irTests/AndLNodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StablePrimArrayTest.java
Passed: compiler/vectorapi/VectorMultiplyOpt.java
Passed: compiler/c2/irTests/stable/StablePrimVolatileTest.java
Passed: compiler/c2/irTests/stable/StableRefArrayTest.java
Passed: compiler/c2/irTests/stable/StableRefFinalTest.java
Passed: compiler/c2/irTests/stable/StableRefVolatileTest.java
Passed: compiler/c2/irTests/DeMorganLawLongTests.java
Passed: compiler/c2/irTests/LShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/LShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/DeMorganLawIntTests.java
Passed: compiler/c2/irTests/DivINodeIdealizationTests.java
Passed: compiler/c2/irTests/MaxMinINodeIdealizationTests.java
Passed: compiler/c2/irTests/ConstructorBarriers.java
Passed: compiler/c2/irTests/stable/StableRefPlainTest.java
Passed: compiler/c2/irTests/DivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/ModDNodeTests.java
Passed: compiler/c2/irTests/ModFNodeTests.java
Passed: compiler/c2/irTests/ModINodeIdealizationTests.java
Passed: compiler/c2/irTests/ModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/MulINodeIdealizationTests.java
Passed: compiler/c2/irTests/MulHFNodeIdealizationTests.java
Passed: compiler/c2/irTests/OrLNodeIdealizationTests.java
Passed: compiler/c2/irTests/MulLNodeIdealizationTests.java
Passed: compiler/c2/irTests/OrINodeIdealizationTests.java
Passed: compiler/c2/irTests/RShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/RShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/SubINodeIdealizationTests.java
Passed: compiler/c2/irTests/SubLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestArrayElementTypeLoad.java
Passed: compiler/c2/irTests/TestAutoVecCountingDownLoop.java
Passed: compiler/c2/irTests/TestAutoVectorization2DArray.java
Passed: compiler/c2/irTests/TestBackToBackIfs.java
Passed: compiler/c2/irTests/TestCMoveCCP.java
Passed: compiler/c2/irTests/TestBackToBackMustBeNotNull.java
Passed: compiler/c2/irTests/TestConv2BExpansion.java
Passed: compiler/c2/irTests/TestConvI2LCastLongLoop.java
Passed: compiler/c2/irTests/TestDebugInfo.java
Passed: compiler/c2/irTests/TestEnumFinalFold.java
Passed: compiler/c2/irTests/TestCountedLoopPhiValue.java
Passed: compiler/c2/irTests/TestFPConversion.java
Passed: compiler/c2/irTests/TestGetAndAdd.java
Passed: compiler/c2/irTests/TestFewIterationsCountedLoop.java
Passed: compiler/c2/irTests/TestFPComparison.java
Passed: compiler/c2/irTests/TestCountedLoopSafepoint.java
Passed: compiler/c2/irTests/TestIRLShiftIdeal_XPlusX_LShiftC.java
Passed: compiler/c2/irTests/TestIterativeEA.java
Passed: compiler/c2/irTests/TestIRAbs.java
Passed: compiler/c2/irTests/TestIfMinMax.java
Passed: compiler/c2/irTests/TestMulNodeIdealization.java
Passed: compiler/c2/irTests/TestMinMaxIdentities.java
Passed: compiler/c2/irTests/TestOptimizeUnstableIf.java
Passed: compiler/c2/irTests/TestPadding.java
Passed: compiler/c2/irTests/TestPhiDuplicatedConversion.java
Passed: compiler/c2/irTests/TestPushAddThruCast.java
Passed: compiler/c2/irTests/TestScalarReplacement.java
Passed: compiler/c2/irTests/TestIRFma.java
Passed: compiler/c2/irTests/TestRemixAddressExpressions.java
Passed: compiler/c2/irTests/TestLongRangeChecks.java
Passed: compiler/c2/irTests/gc/ReferenceClearTests.java
Passed: compiler/c2/irTests/TestPostParseCallDevirtualization.java
Passed: compiler/c2/irTests/TestScheduleSmallMethod.java
Passed: compiler/c2/irTests/TestLSMMissedEmptyLoop.java
Passed: compiler/c2/irTests/TestShiftAndMask.java
Passed: compiler/c2/irTests/TestSpecialCasesOf_AMinusB_Plus_CMinusD_InAddIdeal.java
Passed: compiler/c2/irTests/TestSkeletonPredicates.java
Passed: compiler/c2/irTests/TestTestRemovalPeephole.java
Passed: compiler/c2/irTests/TestVectorizationMultiInvar.java
Passed: compiler/c2/irTests/TestTypeSpeculation.java
Passed: compiler/c2/irTests/TestSuperwordFailsUnrolling.java
Passed: compiler/c2/irTests/gc/ReferenceRefersToTests.java
Passed: compiler/c2/irTests/TestFloat16ScalarOperations.java
Passed: compiler/c2/irTests/TestStripMiningDropsSafepoint.java
Passed: compiler/c2/irTests/UDivINodeIdealizationTests.java
Passed: compiler/c2/irTests/TestUnsignedComparison.java
Passed: compiler/c2/irTests/UDivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/UModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/UModINodeIdealizationTests.java
Passed: compiler/c2/irTests/URShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/URShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/XorINodeIdealizationTests.java
Passed: compiler/c2/irTests/XorLNodeIdealizationTests.java
Passed: compiler/vectorization/runner/ArrayIndexFillTest.java
Passed: compiler/vectorization/runner/ArrayCopyTest.java
Passed: compiler/vectorization/runner/BasicBooleanOpTest.java
Passed: compiler/vectorization/runner/ArrayUnsafeOpTest.java
Passed: compiler/vectorization/runner/ArrayShiftOpTest.java
Passed: compiler/vectorization/runner/BasicByteOpTest.java
Passed: compiler/vectorization/runner/BasicCharOpTest.java
Passed: compiler/vectorization/runner/BasicIntOpTest.java
Passed: compiler/vectorization/runner/BasicLongOpTest.java
Passed: compiler/vectorization/runner/BasicShortOpTest.java
Passed: compiler/vectorization/TestAbsCharVector.java
Passed: compiler/vectorization/TestCMoveWithoutBoolPack.java
Passed: compiler/vectorization/runner/LoopLiveOutNodesTest.java
Passed: compiler/vectorization/runner/LoopControlFlowTest.java
Passed: compiler/vectorization/runner/ArrayInvariantFillTest.java
Passed: compiler/vectorization/runner/LoopReductionOpTest.java
Passed: compiler/vectorization/runner/LoopRangeStrideTest.java
Passed: compiler/vectorization/runner/MultipleLoopsTest.java
Passed: compiler/vectorization/runner/StripMinedLoopTest.java
Passed: compiler/c2/irTests/ProfileAtTypeCheck.java
Passed: compiler/vectorization/TestMemoryVectorMismatched.java
Passed: compiler/vectorization/TestOptionVectorize.java
Passed: compiler/vectorization/TestMacroLogicVector.java
Passed: compiler/vectorization/TestNaNVector.java
Passed: compiler/c2/irTests/ConvF2HFIdealizationTests.java
Passed: compiler/vectorization/TestNarrowedIntegerReverseBytes.java
Passed: compiler/vectorization/TestMaskedVectors.java
Passed: compiler/vectorization/runner/LoopArrayIndexComputeTest.java
Passed: compiler/vectorization/TestComplexAddrExpr.java
Passed: compiler/vectorization/TestSmallVectorPopIndex.java
Passed: compiler/vectorization/TestOverlappingMismatchedAccesses.java
Passed: compiler/vectorization/TestReplicateLoopIV.java
Passed: compiler/vectorization/TestRotateByteAndShortVector.java
Passed: compiler/vectorization/TestReplicateAtConv.java
Passed: compiler/vectorization/TestUnexpectedLoadOrdering.java
Passed: compiler/vectorization/TestPopCountVector.java
Passed: compiler/vectorization/TestOffsetSorting.java
Passed: compiler/vectorization/TestVectorUnalignedOffset.java
Passed: compiler/vectorization/TestVectorizationNegativeScale.java
Passed: compiler/vectorization/TestFloat16ToFloatConv.java
Passed: compiler/vectorization/TestOptionVectorizeIR.java
Passed: compiler/vectorization/runner/BasicFloatOpTest.java
Passed: compiler/vectorization/TestForEachRem.java
Passed: compiler/vectorization/TestSubwordReverseBytes.java
Passed: compiler/vectorization/TestVectorsNotSavedAtSafepoint.java
Passed: compiler/vectorization/TestBufferVectorization.java
Passed: compiler/vectorization/runner/BasicDoubleOpTest.java
Passed: compiler/vectorization/TestVectorZeroCount.java
--------------------------------------------------
TEST: compiler/vectorapi/TestMaskedMacroLogicVector.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.011 seconds
messages:
command: build compiler.vectorapi.TestMaskedMacroLogicVector
reason: Named class compiled on demand
started: Wed Apr 16 21:27:37 IST 2025
Test directory:
  compile: compiler.vectorapi.TestMaskedMacroLogicVector
finished: Wed Apr 16 21:27:38 IST 2025
elapsed time (seconds): 1.011

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.011 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java
reason: .class file out of date or does not exist
started: Wed Apr 16 21:27:37 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 14
Process id: 1609175
finished: Wed Apr 16 21:27:38 IST 2025
elapsed time (seconds): 1.011
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/compiler/vectorapi/TestMaskedMacroLogicVector.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/test/lib
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/scratch/2 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp \
        -J-Dtest.vm.opts='-XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -J-Dtest.tool.vm.opts='-J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -J-Dtest.name=compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/compiler/vectorapi/TestMaskedMacroLogicVector.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4 \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4 \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/compiler/vectorapi/TestMaskedMacroLogicVector.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4 \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 warning

ACTION: driver -- Failed. Execution failed: `main' threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
REASON: User specified action: run driver compiler.vectorapi.TestMaskedMacroLogicVector 
TIME:   280.772 seconds
messages:
command: driver compiler.vectorapi.TestMaskedMacroLogicVector
reason: User specified action: run driver compiler.vectorapi.TestMaskedMacroLogicVector 
started: Wed Apr 16 21:27:38 IST 2025
Mode: othervm [test requires --enable-preview, test requires non-default system module]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1618876
finished: Wed Apr 16 21:32:19 IST 2025
elapsed time (seconds): 280.772
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 5074655442691743127
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=5074655442691743127" to command line.
IR verification disabled due to the following reason(s):
- Using non-whitelisted JTreg VM or Javaoptions flag(s):
  - DeoptimizeALot
  - SafepointALot

Skip Flag VM due to not performing IR verification.
Run Test VM - [-XX:-TieredCompilation, -XX:UseAVX=3, --add-modules=jdk.incubator.vector, -XX:CompileThresholdScaling=0.3]:
Command line: [/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -cp /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp -XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot -Dir.framework.server.port=43595 -XX:-TieredCompilation -XX:UseAVX=3 --add-modules=jdk.incubator.vector -XX:CompileThresholdScaling=0.3 -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.vectorapi.TestMaskedMacroLogicVector ]
[2025-04-16T15:57:39.460649801Z] Gathering output for process 1618973
[2025-04-16T15:57:39.605601068Z] Waiting for completion for process 1618973
[2025-04-16T16:02:18.998823627Z] Waiting for completion finished for process 1618973
Output and diagnostic info for process 1618973 was saved into 'pid-1618973-output.log'

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector

TestFramework test VM exited with code 1

Command Line:
/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -DReproduce=true -cp /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp -XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot -Dir.framework.server.port=43595 -XX:-TieredCompilation -XX:UseAVX=3 --add-modules=jdk.incubator.vector -XX:CompileThresholdScaling=0.3 -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.vectorapi.TestMaskedMacroLogicVector


Error Output
------------
OpenJDK 64-Bit Server VM warning: UseAVX=3 requires UseSSE=4, setting it to UseAVX=0
WARNING: Using incubator modules: jdk.incubator.vector
Exception in thread "main" compiler.lib.ir_framework.shared.TestRunException: 

Test Failures (3)
-----------------
Custom Run Test: @Run: kernel_testInt2_Int256 - @Test: testInt2_Int256:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public void compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt2_Int256()
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:87)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:867)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 4 more
Caused by: java.lang.AssertionError: testInt2: at #200: r=1107564544, expected = -2070764229 = intFunc2(-963199685,1260673024,1579380566,false)
	at compiler.vectorapi.TestMaskedMacroLogicVector.verifyInt2(TestMaskedMacroLogicVector.java:205)
	at compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt2_Int256(TestMaskedMacroLogicVector.java:681)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 6 more


Custom Run Test: @Run: kernel_testInt4_Int256 - @Test: testInt4_Int256:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public void compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt4_Int256()
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:87)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:867)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 4 more
Caused by: java.lang.AssertionError: testInt4: at #392: r=780664137, expected = -740427107 = intFunc4(1001955149,780664137,-44431404,false)
	at compiler.vectorapi.TestMaskedMacroLogicVector.verifyInt4(TestMaskedMacroLogicVector.java:309)
	at compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt4_Int256(TestMaskedMacroLogicVector.java:621)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 6 more


Custom Run Test: @Run: kernel_testInt8_Int128 - @Test: testInt8_Int128:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public void compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt8_Int128()
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:87)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:867)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 4 more
Caused by: java.lang.AssertionError: testInt8: at #220: r=0, expected = 473902205 = intFunc8(1858139841,473902205,1271897033,false)
	at compiler.vectorapi.TestMaskedMacroLogicVector.verifyInt8(TestMaskedMacroLogicVector.java:502)
	at compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt8_Int128(TestMaskedMacroLogicVector.java:784)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 6 more



	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:903)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.TestVMProcess.throwTestVMException(TestVMProcess.java:245)
	at compiler.lib.ir_framework.driver.TestVMProcess.checkTestVMExitCode(TestVMProcess.java:226)
	at compiler.lib.ir_framework.driver.TestVMProcess.<init>(TestVMProcess.java:76)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:787)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:758)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:351)
	at compiler.lib.ir_framework.TestFramework.runWithFlags(TestFramework.java:248)
	at compiler.vectorapi.TestMaskedMacroLogicVector.main(TestMaskedMacroLogicVector.java:843)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/scratch/2 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -Dtest.tool.vm.opts='-J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -Dtest.name=compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/compiler/vectorapi/TestMaskedMacroLogicVector.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4 \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/4 \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/compiler/vectorapi/TestMaskedMacroLogicVector.d/driver.0.jta

TEST RESULT: Failed. Execution failed: `main' threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
--------------------------------------------------
Test results: passed: 324; failed: 1; excluded: 18; did not meet platform requirements: 82
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/hotspot/jtreg:hotspot_vector_1           425   324     1     0   100 <<
==============================
TEST FAILURE

Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_2', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_2
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_2

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Passed: compiler/intrinsics/string/TestStringIndexOfCharIntrinsics.java
Passed: compiler/intrinsics/string/TestStringConstruction.java
Passed: compiler/intrinsics/string/TestStringEqualsBadLength.java
Passed: compiler/intrinsics/string/TestCopyValueOf.java
Passed: compiler/intrinsics/string/TestStringIntrinsicRangeChecks.java
Passed: compiler/intrinsics/Test8005419.java
Passed: compiler/intrinsics/string/TestStringIntrinsicMemoryFlow.java
Passed: compiler/intrinsics/Test6982370.java
Passed: compiler/intrinsics/Test8237524.java
Passed: compiler/intrinsics/TestArrayGuardWithInterfaces.java
Passed: compiler/intrinsics/Test8215792.java
Passed: compiler/intrinsics/IntrinsicDisabledTest.java
Passed: compiler/intrinsics/IntrinsicAvailableTest.java
Passed: compiler/intrinsics/string/TestStringIntrinsics2.java
Passed: compiler/intrinsics/TestArraysHashCode.java
Passed: compiler/intrinsics/string/TestStringConstructionIntrinsics.java#id0
Passed: compiler/codegen/Test6875866.java
Passed: compiler/intrinsics/TestContinuationPinningAndEA.java
Passed: compiler/intrinsics/TestReferenceGetWithNull.java
Passed: compiler/intrinsics/TestCheckIndex.java
Passed: compiler/intrinsics/TestCompareUnsigned.java
Passed: compiler/intrinsics/TestReferenceRefersTo.java
Passed: compiler/intrinsics/string/TestStringUTF16IntrinsicRangeChecks.java
Passed: compiler/codegen/aes/Test8299817.java
Passed: compiler/intrinsics/string/TestHasNegatives.java#id0
Passed: compiler/intrinsics/TestRotate.java
Passed: compiler/codegen/aes/Test8292158.java
Passed: compiler/intrinsics/TestIntegerUnsignedDivMod.java
Passed: compiler/intrinsics/string/TestCountPositives.java#id0
Passed: compiler/intrinsics/base64/TestBase64.java
Passed: compiler/intrinsics/bigInteger/TestMulAdd.java
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLenReturnProfile.java
Passed: compiler/intrinsics/bigInteger/TestSquareToLen.java
Passed: compiler/intrinsics/bmi/verifycode/AndnTestI.java
Passed: compiler/intrinsics/bmi/verifycode/AndnTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestI.java
Passed: compiler/intrinsics/string/TestEncodeIntrinsics.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestI.java
Passed: compiler/codegen/Test6935535.java#id0
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestL.java
Passed: compiler/intrinsics/bigInteger/MontgomeryMultiplyTest.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestL.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestI.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestI.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestL.java
Passed: compiler/codegen/Test6935535.java#id1
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLen.java
Passed: compiler/intrinsics/bigInteger/TestShift.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestI.java
Passed: compiler/intrinsics/string/TestStringIntrinsics.java
Passed: compiler/intrinsics/bmi/verifycode/BzhiTestI2L.java
Passed: compiler/intrinsics/TestLongUnsignedDivMod.java
Passed: compiler/intrinsics/bmi/TestBlsiI.java
Passed: compiler/intrinsics/bmi/TestBlsrI.java
Passed: compiler/intrinsics/bmi/TestBlsrL.java
Passed: compiler/intrinsics/bmi/TestBlsmskI.java
Passed: compiler/intrinsics/bmi/TestLzcntI.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id0
Passed: compiler/intrinsics/bmi/TestTzcntI.java
Passed: compiler/intrinsics/bmi/TestLzcntL.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id1
Passed: compiler/intrinsics/bmi/TestAndnI.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id2
Passed: compiler/intrinsics/math/Test8210461.java
Passed: compiler/intrinsics/bmi/TestBlsmskL.java
Passed: compiler/intrinsics/bmi/TestAndnL.java
Passed: compiler/intrinsics/bmi/TestTzcntL.java
Passed: compiler/intrinsics/math/TestMinMaxIntrinsics.java
Passed: compiler/intrinsics/bmi/TestBlsiL.java
Passed: compiler/intrinsics/TestBitShuffleOpers.java
Passed: compiler/intrinsics/math/TestPow2Opt.java
Passed: compiler/intrinsics/math/TestPow0Dot5Opt.java
Passed: compiler/intrinsics/math/TestFpMinMaxIntrinsics.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactIntTest.java
Passed: compiler/intrinsics/klass/TestIsPrimitive.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactLongTest.java
Passed: compiler/intrinsics/math/TestMinMaxInlining.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactLongTest.java
Passed: compiler/intrinsics/math/TestMinMaxOpt.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactIntTest.java
Passed: compiler/intrinsics/mathexact/AddExactICondTest.java
Passed: compiler/intrinsics/mathexact/AddExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoadTest.java
Passed: compiler/intrinsics/math/MaxMinOptimizeTest.java
Passed: compiler/intrinsics/klass/CastNullCheckDroppingsTest.java
Passed: compiler/intrinsics/mathexact/AddExactINonConstantTest.java
Passed: compiler/intrinsics/bmi/TestBzhiI2L.java
Passed: compiler/intrinsics/mathexact/CompareTest.java
Passed: compiler/intrinsics/mathexact/GVNTest.java
Passed: compiler/intrinsics/mathexact/AddExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/AddExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactICondTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/DecExactLTest.java
Passed: compiler/codegen/aes/TestCipherBlockChainingEncrypt.java
Passed: compiler/intrinsics/mathexact/IncExactLTest.java
Passed: compiler/intrinsics/mathexact/AddExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/DecExactITest.java
Passed: compiler/intrinsics/mathexact/IncExactITest.java
Passed: compiler/intrinsics/mathexact/NegExactILoadTest.java
Passed: compiler/intrinsics/mathexact/NegExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/MulExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/NegExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/NestedMathExactTest.java
Passed: compiler/intrinsics/mathexact/SubExactICondTest.java
Passed: compiler/intrinsics/mathexact/SplitThruPhiTest.java
Passed: compiler/intrinsics/mathexact/NegExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoadTest.java
Passed: compiler/intrinsics/mathexact/MulExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/MulExactILoadTest.java
Passed: compiler/intrinsics/SortingDeoptimizationTest.java
Passed: compiler/intrinsics/object/TestHashCode.java
Passed: compiler/intrinsics/mathexact/LongMulOverflowTest.java
Passed: compiler/intrinsics/mathexact/MulExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/SubExactIConstantTest.java
Passed: compiler/intrinsics/math/TestSignumIntrinsic.java
Passed: compiler/intrinsics/mathexact/SubExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactLConstantTest.java
Passed: compiler/intrinsics/sha/sanity/TestMD5MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestMD5Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1Intrinsics.java
Passed: compiler/intrinsics/mathexact/MulExactLNonConstantTest.java
Passed: compiler/intrinsics/unsafe/TestCAEAntiDep.java
Passed: compiler/intrinsics/unsafe/TestUnsafeMismatchedArrayFieldAccess.java
Passed: compiler/intrinsics/unsafe/UnsafeGetAddressTest.java
Passed: compiler/intrinsics/object/TestClone.java
Passed: compiler/intrinsics/sha/sanity/TestSHA256Intrinsics.java
Passed: compiler/intrinsics/unsafe/TestUnsafeUnalignedMismatchedAccesses.java
Passed: compiler/loopopts/superword/Vec_MulAddS2I.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512Intrinsics.java
Passed: compiler/intrinsics/unsafe/UnsafeTwoCASLong.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512MultiBlockIntrinsics.java
Passed: compiler/intrinsics/zip/TestCRC32.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3Intrinsics.java
Passed: compiler/intrinsics/zip/TestFpRegsABI.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/AllocateUninitializedArray.java
Passed: compiler/intrinsics/zip/TestCRC32C.java
Passed: compiler/intrinsics/zip/TestAdler32.java
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id1
Passed: compiler/intrinsics/unsafe/DirectByteBufferTest.java
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id0
Passed: compiler/intrinsics/sha/sanity/TestSHA256MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/TestDigest.java
Passed: compiler/codegen/aes/TestAESMain.java
Test results: passed: 163; skipped: 4; excluded: 1; did not meet platform requirements: 28
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_2
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
   jtreg:test/hotspot/jtreg:hotspot_vector_2           192   159     0     0    33   
==============================
TEST SUCCESS

Finished building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/:jdk_vector', will run:
* jtreg:test/jdk:jdk_vector
Clean up dirs for jtreg_test_jdk_jdk_vector

Running test 'jtreg:test/jdk:jdk_vector'
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorTests.java
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorTests.java
Passed: jdk/incubator/vector/Double128VectorTests.java
Passed: jdk/incubator/vector/Double256VectorTests.java
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorTests.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float512VectorTests.java
Passed: jdk/incubator/vector/FloatMaxVectorTests.java
Passed: jdk/incubator/vector/Float256VectorTests.java
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ByteMaxVectorTests.java
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorTests.java
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorTests.java
--------------------------------------------------
TEST: jdk/incubator/vector/Int256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.531 seconds
messages:
command: build Int256VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 21:43:38 IST 2025
Test directory:
  compile: Int256VectorTests
finished: Wed Apr 16 21:43:40 IST 2025
elapsed time (seconds): 1.531

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.531 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int256VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 21:43:38 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 15
Process id: 1652682
finished: Wed Apr 16 21:43:40 IST 2025
elapsed time (seconds): 1.531
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/14 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int256VectorTests 
TIME:   315.416 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int256VectorTests 
started: Wed Apr 16 21:43:40 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1654987
finished: Wed Apr 16 21:48:55 IST 2025
elapsed time (seconds): 315.416
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 9034167913960582768
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=9034167913960582768" to command line.
test Int256VectorTests.ABSInt256VectorTests(int[-i * 5]): success [656ms]
test Int256VectorTests.ABSInt256VectorTests(int[i * 5]): success [8ms]
test Int256VectorTests.ABSInt256VectorTests(int[i + 1]): success [53ms]
test Int256VectorTests.ABSInt256VectorTests(int[cornerCaseValue(i)]): success [6ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[-i * 5], mask[i % 2]): success [208ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[i * 5], mask[i % 2]): success [80ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[i + 1], mask[i % 2]): success [82ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[-i * 5], mask[true]): success [28ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[i * 5], mask[true]): success [2ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[i + 1], mask[true]): success [2ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[-i * 5], mask[false]): success [2ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[i * 5], mask[false]): success [2ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[i + 1], mask[false]): success [2ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int256VectorTests.ADDInt256VectorTests(int[-i * 5], int[i * 5]): success [320ms]
test Int256VectorTests.ADDInt256VectorTests(int[-i * 5], int[i + 1]): success [5ms]
test Int256VectorTests.ADDInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [70ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [16ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [8ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [22ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [15ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [9ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [169ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [6ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [74ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [5ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [6ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [6ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [7ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int256VectorTests.ADDReduceInt256VectorTests(int[-i * 5]): success [105ms]
test Int256VectorTests.ADDReduceInt256VectorTests(int[i * 5]): success [63ms]
test Int256VectorTests.ADDReduceInt256VectorTests(int[i + 1]): success [4ms]
test Int256VectorTests.ADDReduceInt256VectorTests(int[cornerCaseValue(i)]): success [13ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[-i * 5], mask[i % 2]): success [69ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[i * 5], mask[i % 2]): success [107ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[i + 1], mask[i % 2]): success [22ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[-i * 5], mask[true]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[i * 5], mask[true]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[i + 1], mask[true]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [14ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[-i * 5], mask[false]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[i * 5], mask[false]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int256VectorTests.ADDReduceLongInt256VectorTests(int[-i * 5]): success [9ms]
test Int256VectorTests.ADDReduceLongInt256VectorTests(int[i * 5]): success [10ms]
test Int256VectorTests.ADDReduceLongInt256VectorTests(int[i + 1]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[-i * 5], mask[i % 2]): success [8ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [12ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.ANDInt256VectorTests(int[-i * 5], int[i * 5]): success [253ms]
test Int256VectorTests.ANDInt256VectorTests(int[-i * 5], int[i + 1]): success [4ms]
test Int256VectorTests.ANDInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [70ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [18ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [6ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [74ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [6ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [4ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int256VectorTests.ANDReduceInt256VectorTests(int[-i * 5]): success [100ms]
test Int256VectorTests.ANDReduceInt256VectorTests(int[i * 5]): success [61ms]
test Int256VectorTests.ANDReduceInt256VectorTests(int[i + 1]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[-i * 5], mask[i % 2]): success [41ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[i * 5], mask[i % 2]): success [106ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[i + 1], mask[i % 2]): success [4ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[i * 5], mask[true]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [15ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int256VectorTests.AND_NOTInt256VectorTests(int[-i * 5], int[i * 5]): success [359ms]
test Int256VectorTests.AND_NOTInt256VectorTests(int[-i * 5], int[i + 1]): success [69ms]
test Int256VectorTests.AND_NOTInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [199ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [144ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [81ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [171ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [69ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [70ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [69ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [110ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [68ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): failure [102ms]
java.lang.AssertionError: at index #208, input1 = -1040, input2 = 2147483647, mask = false expected [-1040] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:907)
	at Int256VectorTests.assertArraysEquals(Int256VectorTests.java:455)
	at Int256VectorTests.assertArraysEquals(Int256VectorTests.java:445)
	at Int256VectorTests.AND_NOTInt256VectorTestsMasked(Int256VectorTests.java:1904)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Int256VectorTests.ASHRInt256VectorTests(int[-i * 5], int[i * 5]): success [199ms]
test Int256VectorTests.ASHRInt256VectorTests(int[-i * 5], int[i + 1]): success [66ms]
test Int256VectorTests.ASHRInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [154ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [249ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [72ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [163ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [69ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [69ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [69ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [69ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [69ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [69ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [237ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [4ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [59ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftConst(int[-i * 5]): success [17ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftConst(int[i * 5]): success [4ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftConst(int[i + 1]): success [50ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [2ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [64ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [61ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [11ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [4ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [53ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [6ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [76ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [10ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [130ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [9ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [9ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [9ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [10ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [409ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [51ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [56ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLEN

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

Support.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.lanewiseTemplate(IntVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Int256Vector.lanewise(Int256Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Int256Vector.lanewise(Int256Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.IntVector.div(IntVector.java:1732)
	at Int256VectorTests.divInt256VectorTestsMasked(Int256VectorTests.java:1758)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Int256VectorTests.divInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [295ms]
test Int256VectorTests.divInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [305ms]
test Int256VectorTests.divInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [293ms]
test Int256VectorTests.divInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [300ms]
test Int256VectorTests.divInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [293ms]
test Int256VectorTests.divInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [300ms]
test Int256VectorTests.eqInt256VectorTests(int[i], int[i]): success [178ms]
test Int256VectorTests.eqInt256VectorTests(int[i], int[i - length / 2]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i], int[i + 1]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i], int[i - 2]): success [81ms]
test Int256VectorTests.eqInt256VectorTests(int[i], int[zigZag(i)]): success [81ms]
test Int256VectorTests.eqInt256VectorTests(int[i], int[cornerCaseValue(i)]): success [94ms]
test Int256VectorTests.eqInt256VectorTests(int[i - length / 2], int[i]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i - length / 2], int[i - length / 2]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i - length / 2], int[i + 1]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i - length / 2], int[i - 2]): success [81ms]
test Int256VectorTests.eqInt256VectorTests(int[i - length / 2], int[zigZag(i)]): success [95ms]
test Int256VectorTests.eqInt256VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i + 1], int[i]): success [86ms]
test Int256VectorTests.eqInt256VectorTests(int[i + 1], int[i - length / 2]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i + 1], int[i + 1]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i + 1], int[i - 2]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i + 1], int[zigZag(i)]): success [81ms]
test Int256VectorTests.eqInt256VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i - 2], int[i]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i - 2], int[i - length / 2]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i - 2], int[i + 1]): success [87ms]
test Int256VectorTests.eqInt256VectorTests(int[i - 2], int[i - 2]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[i - 2], int[zigZag(i)]): success [81ms]
test Int256VectorTests.eqInt256VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[zigZag(i)], int[i]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[zigZag(i)], int[i - length / 2]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[zigZag(i)], int[i + 1]): success [87ms]
test Int256VectorTests.eqInt256VectorTests(int[zigZag(i)], int[i - 2]): success [81ms]
test Int256VectorTests.eqInt256VectorTests(int[zigZag(i)], int[zigZag(i)]): success [86ms]
test Int256VectorTests.eqInt256VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[cornerCaseValue(i)], int[i]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [86ms]
test Int256VectorTests.eqInt256VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [80ms]
test Int256VectorTests.eqInt256VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [80ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [4ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [5ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [10ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [61ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.expandInt256VectorTests(int[-i * 5], mask[i % 2]): success [184ms]
test Int256VectorTests.expandInt256VectorTests(int[i * 5], mask[i % 2]): success [83ms]
test Int256VectorTests.expandInt256VectorTests(int[i + 1], mask[i % 2]): success [144ms]
test Int256VectorTests.expandInt256VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test Int256VectorTests.expandInt256VectorTests(int[-i * 5], mask[true]): success [51ms]
test Int256VectorTests.expandInt256VectorTests(int[i * 5], mask[true]): success [4ms]
test Int256VectorTests.expandInt256VectorTests(int[i + 1], mask[true]): success [4ms]
test Int256VectorTests.expandInt256VectorTests(int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int256VectorTests.expandInt256VectorTests(int[-i * 5], mask[false]): success [6ms]
test Int256VectorTests.expandInt256VectorTests(int[i * 5], mask[false]): success [6ms]
test Int256VectorTests.expandInt256VectorTests(int[i + 1], mask[false]): success [6ms]
test Int256VectorTests.expandInt256VectorTests(int[cornerCaseValue(i)], mask[false]): success [38ms]
test Int256VectorTests.getInt256VectorTests(int[-i * 5]): success [7ms]
test Int256VectorTests.getInt256VectorTests(int[i * 5]): success [7ms]
test Int256VectorTests.getInt256VectorTests(int[i + 1]): success [80ms]
test Int256VectorTests.getInt256VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int256VectorTests.hashCodeInt256VectorTestsSmokeTest(int[-i * 5]): success [38ms]
test Int256VectorTests.hashCodeInt256VectorTestsSmokeTest(int[i * 5]): success [1ms]
test Int256VectorTests.hashCodeInt256VectorTestsSmokeTest(int[i + 1]): success [1ms]
test Int256VectorTests.hashCodeInt256VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.indexInRangeInt256VectorTestsSmokeTest(0): success [68ms]
test Int256VectorTests.indexInRangeInt256VectorTestsSmokeTest(-1): success [2ms]
test Int256VectorTests.indexInRangeInt256VectorTestsSmokeTest(1): success [18ms]
test Int256VectorTests.indexInRangeInt256VectorTestsSmokeTest(2): success [2ms]
test Int256VectorTests.indexInRangeInt256VectorTestsSmokeTest(-2): success [3ms]
test Int256VectorTests.indexInRangeLongInt256VectorTestsSmokeTest(0): success [2ms]
test Int256VectorTests.indexInRangeLongInt256VectorTestsSmokeTest(-1): success [2ms]
test Int256VectorTests.indexInRangeLongInt256VectorTestsSmokeTest(1): success [2ms]
test Int256VectorTests.indexInRangeLongInt256VectorTestsSmokeTest(2): success [2ms]
test Int256VectorTests.indexInRangeLongInt256VectorTestsSmokeTest(-2): success [2ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(0): success [0ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(1): success [0ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(32): success [0ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(37): success [0ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(1024): success [0ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(1025): success [0ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(1029): success [0ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(0): success [0ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(1): success [3ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(32): success [0ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(37): success [0ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(1024): success [1ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(1025): success [0ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(1029): success [0ms]
test Int256VectorTests.ltInt256VectorTests(int[i], int[i]): success [181ms]
test Int256VectorTests.ltInt256VectorTests(int[i], int[i - length / 2]): success [87ms]
test Int256VectorTests.ltInt256VectorTests(int[i], int[i + 1]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[i], int[i - 2]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[i], int[zigZag(i)]): success [82ms]
test Int256VectorTests.ltInt256VectorTests(int[i], int[cornerCaseValue(i)]): success [88ms]
test Int256VectorTests.ltInt256VectorTests(int[i - length / 2], int[i]): success [132ms]
test Int256VectorTests.ltInt256VectorTests(int[i - length / 2], int[i - length / 2]): success [81ms]
test Int256VectorTests.ltInt256VectorTests(int[i - length / 2], int[i + 1]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[i - length / 2], int[i - 2]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[i - length / 2], int[zigZag(i)]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [81ms]
test Int256VectorTests.ltInt256VectorTests(int[i + 1], int[i]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[i + 1], int[i - length / 2]): success [86ms]
test Int256VectorTests.ltInt256VectorTests(int[i + 1], int[i + 1]): success [81ms]
test Int256VectorTests.ltInt256VectorTests(int[i + 1], int[i - 2]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[i + 1], int[zigZag(i)]): success [81ms]
test Int256VectorTests.ltInt256VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [81ms]
test Int256VectorTests.ltInt256VectorTests(int[i - 2], int[i]): success [81ms]
test Int256VectorTests.ltInt256VectorTests(int[i - 2], int[i - length / 2]): success [81ms]
test Int256VectorTests.ltInt256VectorTests(int[i - 2], int[i + 1]): success [88ms]
test Int256VectorTests.ltInt256VectorTests(int[i - 2], int[i - 2]): success [86ms]
test Int256VectorTests.ltInt256VectorTests(int[i - 2], int[zigZag(i)]): success [81ms]
test Int256VectorTests.ltInt256VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [81ms]
test Int256VectorTests.ltInt256VectorTests(int[zigZag(i)], int[i]): success [96ms]
test Int256VectorTests.ltInt256VectorTests(int[zigZag(i)], int[i - length / 2]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[zigZag(i)], int[i + 1]): success [81ms]
test Int256VectorTests.ltInt256VectorTests(int[zigZag(i)], int[i - 2]): success [81ms]
test Int256VectorTests.ltInt256VectorTests(int[zigZag(i)], int[zigZag(i)]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [87ms]
test Int256VectorTests.ltInt256VectorTests(int[cornerCaseValue(i)], int[i]): success [83ms]
test Int256VectorTests.ltInt256VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [81ms]
test Int256VectorTests.ltInt256VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [81ms]
test Int256VectorTests.ltInt256VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [81ms]
test Int256VectorTests.ltInt256VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [81ms]
test Int256VectorTests.ltInt256VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [80ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i], int[i]): success [2ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [6ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [3ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [61ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.maskAndInt256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Int256VectorTests.maskAndInt256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int256VectorTests.maskAndNotInt256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Int256VectorTests.maskAndNotInt256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int256VectorTests.maskCompressInt256VectorTestsSmokeTest(mask[i % 2]): success [396ms]
test Int256VectorTests.maskCompressInt256VectorTestsSmokeTest(mask[true]): success [237ms]
test Int256VectorTests.maskCompressInt256VectorTestsSmokeTest(mask[false]): success [209ms]
test Int256VectorTests.maskEqInt256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Int256VectorTests.maskEqInt256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int256VectorTests.maskEqualsInt256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int256VectorTests.maskEqualsInt256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int256VectorTests.maskFirstTrueInt256VectorTestsSmokeTest(mask[i % 2]): success [50ms]
test Int256VectorTests.maskFirstTrueInt256VectorTestsSmokeTest(mask[true]): success [71ms]
test Int256VectorTests.maskFirstTrueInt256VectorTestsSmokeTest(mask[false]): success [38ms]
test Int256VectorTests.maskFromToLongInt256VectorTestsSmokeTest(-1): success [64ms]
test Int256VectorTests.maskFromToLongInt256VectorTestsSmokeTest(0): success [0ms]
test Int256VectorTests.maskFromToLongInt256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int256VectorTests.maskFromToLongInt256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int256VectorTests.maskHashCodeInt256VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int256VectorTests.maskHashCodeInt256VectorTestsSmokeTest(mask[true]): success [0ms]
test Int256VectorTests.maskHashCodeInt256VectorTestsSmokeTest(mask[false]): success [0ms]
test Int256VectorTests.maskLastTrueInt256VectorTestsSmokeTest(mask[i % 2]): success [88ms]
test Int256VectorTests.maskLastTrueInt256VectorTestsSmokeTest(mask[true]): success [76ms]
test Int256VectorTests.maskLastTrueInt256VectorTestsSmokeTest(mask[false]): success [56ms]
test Int256VectorTests.maskOrInt256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Int256VectorTests.maskOrInt256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int256VectorTests.maskTrueCountInt256VectorTestsSmokeTest(mask[i % 2]): success [47ms]
test Int256VectorTests.maskTrueCountInt256VectorTestsSmokeTest(mask[true]): success [71ms]
test Int256VectorTests.maskTrueCountInt256VectorTestsSmokeTest(mask[false]): success [39ms]
test Int256VectorTests.maskXorInt256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Int256VectorTests.maskXorInt256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int256VectorTests.maxInt256VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int256VectorTests.maxInt256VectorTests(int[-i * 5], int[i + 1]): success [19ms]
test Int256VectorTests.maxInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.maxInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int256VectorTests.maxInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int256VectorTests.maxInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.minInt256VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int256VectorTests.minInt256VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.minInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.minInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int256VectorTests.minInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.minInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [40ms]
test Int256VectorTests.mulInt256VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int256VectorTests.mulInt256VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.mulInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.negInt256VectorTests(int[-i * 5]): success [14ms]
test Int256VectorTests.negInt256VectorTests(int[i * 5]): success [38ms]
test Int256VectorTests.negInt256VectorTests(int[i + 1]): success [37ms]
test Int256VectorTests.negInt256VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int256VectorTests.notInt256VectorTests(int[-i * 5]): success [80ms]
test Int256VectorTests.notInt256VectorTests(int[i * 5]): success [71ms]
test Int256VectorTests.notInt256VectorTests(int[i + 1]): success [109ms]
test Int256VectorTests.notInt256VectorTests(int[cornerCaseValue(i)]): success [63ms]
test Int256VectorTests.orInt256VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int256VectorTests.orInt256VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.orInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.orInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int256VectorTests.orInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.orInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.shuffleEqualsInt256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [10ms]
test Int256VectorTests.shuffleEqualsInt256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [8ms]
test Int256VectorTests.shuffleMiscellaneousInt256VectorTestsSmokeTest(shuffle[random]): success [2ms]
test Int256VectorTests.shuffleTest(): success [421ms]
test Int256VectorTests.shuffleToStringInt256VectorTestsSmokeTest(shuffle[random]): success [37ms]
test Int256VectorTests.sliceBinaryInt256VectorTestsBinary(int[-i * 5], int[i * 5]): success [986ms]
test Int256VectorTests.sliceBinaryInt256VectorTestsBinary(int[-i * 5], int[i + 1]): success [470ms]
test Int256VectorTests.sliceBinaryInt256VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [935ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [658ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [551ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [919ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [527ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [522ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [519ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [523ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [684ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [520ms]
test Int256VectorTests.sliceUnaryInt256VectorTests(int[-i * 5]): success [628ms]
test Int256VectorTests.sliceUnaryInt256VectorTests(int[i * 5]): success [433ms]
test Int256VectorTests.sliceUnaryInt256VectorTests(int[i + 1]): success [667ms]
test Int256VectorTests.sliceUnaryInt256VectorTests(int[cornerCaseValue(i)]): success [435ms]
test Int256VectorTests.smokeTest1(): success [0ms]
test Int256VectorTests.smokeTest2(): success [95ms]
test Int256VectorTests.subInt256VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int256VectorTests.subInt256VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.subInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int256VectorTests.subInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int256VectorTests.subInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.toDoubleArrayInt256VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int256VectorTests.toDoubleArrayInt256VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int256VectorTests.toDoubleArrayInt256VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int256VectorTests.toDoubleArrayInt256VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.toIntArrayInt256VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int256VectorTests.toIntArrayInt256VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int256VectorTests.toIntArrayInt256VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int256VectorTests.toIntArrayInt256VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.toLongArrayInt256VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int256VectorTests.toLongArrayInt256VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int256VectorTests.toLongArrayInt256VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int256VectorTests.toLongArrayInt256VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.toStringInt256VectorTestsSmokeTest(int[-i * 5]): success [1ms]
test Int256VectorTests.toStringInt256VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int256VectorTests.toStringInt256VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int256VectorTests.toStringInt256VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.unsliceBinaryInt256VectorTestsBinary(int[-i * 5], int[i * 5]): success [688ms]
test Int256VectorTests.unsliceBinaryInt256VectorTestsBinary(int[-i * 5], int[i + 1]): success [507ms]
test Int256VectorTests.unsliceBinaryInt256VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [811ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [1537ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [917ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1723ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [925ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [944ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [941ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [945ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [910ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1023ms]
test Int256VectorTests.unsliceUnaryInt256VectorTests(int[-i * 5]): success [613ms]
test Int256VectorTests.unsliceUnaryInt256VectorTests(int[i * 5]): success [435ms]
test Int256VectorTests.unsliceUnaryInt256VectorTests(int[i + 1]): success [634ms]
test Int256VectorTests.unsliceUnaryInt256VectorTests(int[cornerCaseValue(i)]): success [444ms]
test Int256VectorTests.viewAsFloatingLanesTest(): success [440ms]
test Int256VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int256VectorTests.withInt256VectorTests(int[-i * 5], int[i * 5]): success [37ms]
test Int256VectorTests.withInt256VectorTests(int[-i * 5], int[i + 1]): success [19ms]
test Int256VectorTests.withInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [141ms]

===============================================
jdk/incubator/vector/Int256VectorTests.java
Total tests run: 3622, Passes: 3620, Failures: 2, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/14 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/jdk/incubator/vector/Int256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/2/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Int256VectorTests.d/testng.0.jta jdk/incubator/vector/Int256VectorTests.java false Int256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
--------------------------------------------------
Passed: jdk/incubator/vector/Float64VectorTests.java
Passed: jdk/incubator/vector/Int128VectorTests.java
Passed: jdk/incubator/vector/MethodOverideTest.java
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
Passed: jdk/incubator/vector/Int512VectorTests.java
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
TEST: jdk/incubator/vector/Long256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.921 seconds
messages:
command: build Long256VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 21:46:26 IST 2025
Test directory:
  compile: Long256VectorTests
finished: Wed Apr 16 21:46:27 IST 2025
elapsed time (seconds): 0.921

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.92 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 21:46:26 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 4
Process id: 1651702
finished: Wed Apr 16 21:46:27 IST 2025
elapsed time (seconds): 0.92
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Long256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/15 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Long256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Long256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long256VectorTests 
TIME:   218.451 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long256VectorTests 
started: Wed Apr 16 21:46:27 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1655558
finished: Wed Apr 16 21:50:05 IST 2025
elapsed time (seconds): 218.451
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 3428732052322822570
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=3428732052322822570" to command line.
test Long256VectorTests.ABSLong256VectorTests(long[-i * 5]): success [585ms]
test Long256VectorTests.ABSLong256VectorTests(long[i * 5]): success [6ms]
test Long256VectorTests.ABSLong256VectorTests(long[i + 1]): success [49ms]
test Long256VectorTests.ABSLong256VectorTests(long[cornerCaseValue(i)]): success [6ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[-i * 5], mask[i % 2]): success [245ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i * 5], mask[i % 2]): success [73ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i + 1], mask[i % 2]): success [75ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[-i * 5], mask[true]): success [6ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[-i * 5], mask[false]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i * 5], mask[false]): success [6ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.ABSMaskedLong256VectorTests(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.ADDLong256VectorTests(long[-i * 5], long[i * 5]): success [234ms]
test Long256VectorTests.ADDLong256VectorTests(long[-i * 5], long[i + 1]): success [32ms]
test Long256VectorTests.ADDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [64ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [20ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.ADDLong256VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [140ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [6ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [68ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [11ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [4ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [4ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [4ms]
test Long256VectorTests.ADDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [8ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[-i * 5]): success [92ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[i * 5]): success [62ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[i + 1]): success [4ms]
test Long256VectorTests.ADDReduceLong256VectorTests(long[cornerCaseValue(i)]): success [13ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[-i * 5], mask[i % 2]): success [61ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i * 5], mask[i % 2]): success [103ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[-i * 5], mask[true]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[-i * 5], mask[false]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i * 5], mask[false]): success [1ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.ADDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[-i * 5]): success [5ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[i * 5]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[i + 1]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i + 1], mask[i % 2]): success [13ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.ADDReduceLongLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.ANDLong256VectorTests(long[-i * 5], long[i * 5]): success [210ms]
test Long256VectorTests.ANDLong256VectorTests(long[-i * 5], long[i + 1]): success [4ms]
test Long256VectorTests.ANDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [63ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [17ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [3ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [4ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [68ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.ANDLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[-i * 5]): success [101ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[i * 5]): success [59ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[i + 1]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTests(long[cornerCaseValue(i)]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[-i * 5], mask[i % 2]): success [22ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i * 5], mask[i % 2]): success [80ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i + 1], mask[i % 2]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[-i * 5], mask[true]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i * 5], mask[true]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i + 1], mask[true]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[-i * 5], mask[false]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i * 5], mask[false]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[i + 1], mask[false]): success [3ms]
test Long256VectorTests.ANDReduceLong256VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [4ms]
test Long256VectorTests.AND_NOTLong256VectorTests(long[-i * 5], long[i * 5]): success [294ms]
test Long256VectorTests.AND_NOTLong256VectorTests(long[-i * 5], long[i + 1]): success [56ms]
test Long256VectorTests.AND_NOTLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [138ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [128ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [68ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [149ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [54ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [54ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [54ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [54ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [54ms]
test Long256VectorTests.AND_NOTLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [54ms]
test Long256VectorTests.ASHRLong256VectorTests(long[-i * 5], long[i * 5]): success [190ms]
test Long256VectorTests.ASHRLong256VectorTests(long[-i * 5], long[i + 1]): success [52ms]
test Long256VectorTests.ASHRLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [132ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [128ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [53ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [149ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [63ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [54ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [54ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [54ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [53ms]
test Long256VectorTests.ASHRLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [53ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [217ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [57ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[-i * 5]): success [7ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[i * 5]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[i + 1]): success [48ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [59ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [4ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [59ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [13ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [4ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [51ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [3ms]
test Long256VectorTests.ASHRLong256VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [76ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [10ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [117ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [8ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [7ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [498ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [4ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [6ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [6ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [67ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [4ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [1ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.BITWISE_BLENDLong256VectorTestsBro

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

BroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [6ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long256VectorTests.bitwiseBlendLong256VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.bitwiseDivByZeroSmokeTest(): success [11ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i * 5], mask[i % 2]): success [35ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [61ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.blendLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.compressLong256VectorTests(long[-i * 5], mask[i % 2]): success [167ms]
test Long256VectorTests.compressLong256VectorTests(long[i * 5], mask[i % 2]): success [39ms]
test Long256VectorTests.compressLong256VectorTests(long[i + 1], mask[i % 2]): success [112ms]
test Long256VectorTests.compressLong256VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [38ms]
test Long256VectorTests.compressLong256VectorTests(long[-i * 5], mask[true]): success [80ms]
test Long256VectorTests.compressLong256VectorTests(long[i * 5], mask[true]): success [3ms]
test Long256VectorTests.compressLong256VectorTests(long[i + 1], mask[true]): success [3ms]
test Long256VectorTests.compressLong256VectorTests(long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.compressLong256VectorTests(long[-i * 5], mask[false]): success [4ms]
test Long256VectorTests.compressLong256VectorTests(long[i * 5], mask[false]): success [4ms]
test Long256VectorTests.compressLong256VectorTests(long[i + 1], mask[false]): success [4ms]
test Long256VectorTests.compressLong256VectorTests(long[cornerCaseValue(i)], mask[false]): success [5ms]
test Long256VectorTests.divLong256VectorTests(long[-i * 5], long[i * 5]): success [187ms]
test Long256VectorTests.divLong256VectorTests(long[-i * 5], long[i + 1]): success [108ms]
test Long256VectorTests.divLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [196ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [10ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [98ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long256VectorTests.divLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [9ms]
test Long256VectorTests.divLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long256VectorTests.divLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [325ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [211ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [362ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [211ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [212ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [269ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [210ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [219ms]
test Long256VectorTests.divLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [210ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i]): success [125ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i - length / 2]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i + 1]): success [57ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[i - 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[zigZag(i)]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i], long[cornerCaseValue(i)]): success [52ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i]): success [57ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i - length / 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i + 1]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[i - 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[zigZag(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [57ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i]): success [52ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i - length / 2]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i + 1]): success [78ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[i - 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[zigZag(i)]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [59ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i]): success [66ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i - length / 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i + 1]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[i - 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[zigZag(i)]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i]): success [59ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i - length / 2]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i + 1]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[i - 2]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[zigZag(i)]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i]): success [60ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [50ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [51ms]
test Long256VectorTests.eqLong256VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [3ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [4ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.eqLong256VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.expandLong256VectorTests(long[-i * 5], mask[i % 2]): success [130ms]
test Long256VectorTests.expandLong256VectorTests(long[i * 5], mask[i % 2]): success [39ms]
test Long256VectorTests.expandLong256VectorTests(long[i + 1], mask[i % 2]): success [107ms]
test Long256VectorTests.expandLong256VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [38ms]
test Long256VectorTests.expandLong256VectorTests(long[-i * 5], mask[true]): success [28ms]
test Long256VectorTests.expandLong256VectorTests(long[i * 5], mask[true]): success [4ms]
test Long256VectorTests.expandLong256VectorTests(long[i + 1], mask[true]): success [4ms]
test Long256VectorTests.expandLong256VectorTests(long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long256VectorTests.expandLong256VectorTests(long[-i * 5], mask[false]): success [4ms]
test Long256VectorTests.expandLong256VectorTests(long[i * 5], mask[false]): success [4ms]
test Long256VectorTests.expandLong256VectorTests(long[i + 1], mask[false]): success [4ms]
test Long256VectorTests.expandLong256VectorTests(long[cornerCaseValue(i)], mask[false]): success [4ms]
test Long256VectorTests.getLong256VectorTests(long[-i * 5]): success [9ms]
test Long256VectorTests.getLong256VectorTests(long[i * 5]): success [4ms]
test Long256VectorTests.getLong256VectorTests(long[i + 1]): success [65ms]
test Long256VectorTests.getLong256VectorTests(long[cornerCaseValue(i)]): success [2ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[-i * 5]): success [35ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[i * 5]): success [1ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[i + 1]): success [1ms]
test Long256VectorTests.hashCodeLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(0): success [67ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(-1): success [2ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(1): success [16ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(2): success [1ms]
test Long256VectorTests.indexInRangeLong256VectorTestsSmokeTest(-2): success [1ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(0): success [2ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(-1): success [1ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(1): success [1ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(2): success [3ms]
test Long256VectorTests.indexInRangeLongLong256VectorTestsSmokeTest(-2): success [1ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(0): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(32): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(37): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1024): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1025): success [0ms]
test Long256VectorTests.loopBoundLong256VectorTestsSmokeTest(1029): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(0): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(32): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(37): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1024): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1025): success [0ms]
test Long256VectorTests.loopBoundLongLong256VectorTestsSmokeTest(1029): success [0ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i]): success [118ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i - length / 2]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i + 1]): success [58ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[i - 2]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[zigZag(i)]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i], long[cornerCaseValue(i)]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i - length / 2]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i + 1]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[i - 2]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[zigZag(i)]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i - length / 2]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i + 1]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[i - 2]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[zigZag(i)]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [52ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i - length / 2]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i + 1]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[i - 2]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[zigZag(i)]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i - length / 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i + 1]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[i - 2]): success [50ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[zigZag(i)]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [51ms]
test Long256VectorTests.ltLong256VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [51ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i]): success [2ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [1ms]
test Long256VectorTests.ltLong256VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.maskAndLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Long256VectorTests.maskAndLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskAndNotLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Long256VectorTests.maskAndNotLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskCompressLong256VectorTestsSmokeTest(mask[i % 2]): success [329ms]
test Long256VectorTests.maskCompressLong256VectorTestsSmokeTest(mask[true]): success [147ms]
test Long256VectorTests.maskCompressLong256VectorTestsSmokeTest(mask[false]): success [148ms]
test Long256VectorTests.maskEqLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Long256VectorTests.maskEqLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskEqualsLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long256VectorTests.maskEqualsLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskFirstTrueLong256VectorTestsSmokeTest(mask[i % 2]): success [36ms]
test Long256VectorTests.maskFirstTrueLong256VectorTestsSmokeTest(mask[true]): success [59ms]
test Long256VectorTests.maskFirstTrueLong256VectorTestsSmokeTest(mask[false]): success [26ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(-1): success [58ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(0): success [0ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long256VectorTests.maskFromToLongLong256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long256VectorTests.maskHashCodeLong256VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long256VectorTests.maskHashCodeLong256VectorTestsSmokeTest(mask[true]): success [0ms]
test Long256VectorTests.maskHashCodeLong256VectorTestsSmokeTest(mask[false]): success [0ms]
test Long256VectorTests.maskLastTrueLong256VectorTestsSmokeTest(mask[i % 2]): success [70ms]
test Long256VectorTests.maskLastTrueLong256VectorTestsSmokeTest(mask[true]): success [66ms]
test Long256VectorTests.maskLastTrueLong256VectorTestsSmokeTest(mask[false]): success [40ms]
test Long256VectorTests.maskOrLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [18ms]
test Long256VectorTests.maskOrLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maskTrueCountLong256VectorTestsSmokeTest(mask[i % 2]): success [34ms]
test Long256VectorTests.maskTrueCountLong256VectorTestsSmokeTest(mask[true]): success [66ms]
test Long256VectorTests.maskTrueCountLong256VectorTestsSmokeTest(mask[false]): success [26ms]
test Long256VectorTests.maskXorLong256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long256VectorTests.maskXorLong256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long256VectorTests.maxLong256VectorTests(long[-i * 5], long[i * 5]): success [6ms]
test Long256VectorTests.maxLong256VectorTests(long[-i * 5], long[i + 1]): success [16ms]
test Long256VectorTests.maxLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.maxLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long256VectorTests.maxLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.maxLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.minLong256VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.minLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.minLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.minLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.minLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.minLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.mulLong256VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.mulLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.mulLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.mulLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.negLong256VectorTests(long[-i * 5]): success [16ms]
test Long256VectorTests.negLong256VectorTests(long[i * 5]): success [3ms]
test Long256VectorTests.negLong256VectorTests(long[i + 1]): success [67ms]
test Long256VectorTests.negLong256VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long256VectorTests.notLong256VectorTests(long[-i * 5]): success [66ms]
test Long256VectorTests.notLong256VectorTests(long[i * 5]): success [49ms]
test Long256VectorTests.notLong256VectorTests(long[i + 1]): success [124ms]
test Long256VectorTests.notLong256VectorTests(long[cornerCaseValue(i)]): success [50ms]
test Long256VectorTests.orLong256VectorTests(long[-i * 5], long[i * 5]): success [8ms]
test Long256VectorTests.orLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.orLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.orLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long256VectorTests.orLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.orLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.shuffleEqualsLong256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [409ms]
test Long256VectorTests.shuffleEqualsLong256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [27ms]
test Long256VectorTests.shuffleMiscellaneousLong256VectorTestsSmokeTest(shuffle[random]): success [15ms]
test Long256VectorTests.shuffleTest(): success [383ms]
test Long256VectorTests.shuffleToStringLong256VectorTestsSmokeTest(shuffle[random]): success [86ms]
test Long256VectorTests.sliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i * 5]): success [840ms]
test Long256VectorTests.sliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i + 1]): success [363ms]
test Long256VectorTests.sliceBinaryLong256VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [605ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [499ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [418ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [697ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [401ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [402ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [401ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [402ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [400ms]
test Long256VectorTests.sliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [417ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[-i * 5]): success [504ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[i * 5]): success [330ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[i + 1]): success [509ms]
test Long256VectorTests.sliceUnaryLong256VectorTests(long[cornerCaseValue(i)]): success [332ms]
test Long256VectorTests.smokeTest1(): success [0ms]
test Long256VectorTests.smokeTest2(): success [44ms]
test Long256VectorTests.subLong256VectorTests(long[-i * 5], long[i * 5]): success [7ms]
test Long256VectorTests.subLong256VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.subLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [7ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [65ms]
test Long256VectorTests.subLong256VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long256VectorTests.subLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long256VectorTests.subLong256VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long256VectorTests.subLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long256VectorTests.toDoubleArrayLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[-i * 5]): success [5ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[i * 5]): success [5ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[i + 1]): success [5ms]
test Long256VectorTests.toIntArrayLong256VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [5ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long256VectorTests.toLongArrayLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[-i * 5]): success [1ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[i * 5]): success [10ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[i + 1]): success [54ms]
test Long256VectorTests.toStringLong256VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long256VectorTests.unsliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i * 5]): success [547ms]
test Long256VectorTests.unsliceBinaryLong256VectorTestsBinary(long[-i * 5], long[i + 1]): success [405ms]
test Long256VectorTests.unsliceBinaryLong256VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [609ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [1211ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [694ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1327ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [708ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [698ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [706ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [746ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [696ms]
test Long256VectorTests.unsliceLong256VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [943ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[-i * 5]): success [493ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[i * 5]): success [332ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[i + 1]): success [506ms]
test Long256VectorTests.unsliceUnaryLong256VectorTests(long[cornerCaseValue(i)]): success [332ms]
test Long256VectorTests.viewAsFloatingLanesTest(): success [218ms]
test Long256VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long256VectorTests.withLong256VectorTests(long[-i * 5], long[i * 5]): success [27ms]
test Long256VectorTests.withLong256VectorTests(long[-i * 5], long[i + 1]): success [18ms]
test Long256VectorTests.withLong256VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [108ms]

===============================================
jdk/incubator/vector/Long256VectorTests.java
Total tests run: 3321, Passes: 3320, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/15 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Long256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/jdk/incubator/vector/Long256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/3/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Long256VectorTests.d/testng.0.jta jdk/incubator/vector/Long256VectorTests.java false Long256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
TEST: jdk/incubator/vector/Long512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.792 seconds
messages:
command: build Long512VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 21:47:18 IST 2025
Test directory:
  compile: Long512VectorTests
finished: Wed Apr 16 21:47:19 IST 2025
elapsed time (seconds): 0.792

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.792 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long512VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 21:47:18 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 3
Process id: 1651672
finished: Wed Apr 16 21:47:19 IST 2025
elapsed time (seconds): 0.792
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Long512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Long512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Long512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long512VectorTests 
TIME:   175.633 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long512VectorTests 
started: Wed Apr 16 21:47:19 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1655667
finished: Wed Apr 16 21:50:15 IST 2025
elapsed time (seconds): 175.633
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -4440801387707575146
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-4440801387707575146" to command line.
test Long512VectorTests.ABSLong512VectorTests(long[-i * 5]): success [339ms]
test Long512VectorTests.ABSLong512VectorTests(long[i * 5]): success [318ms]
test Long512VectorTests.ABSLong512VectorTests(long[i + 1]): success [9ms]
test Long512VectorTests.ABSLong512VectorTests(long[cornerCaseValue(i)]): success [5ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[-i * 5], mask[i % 2]): success [166ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i * 5], mask[i % 2]): success [95ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i + 1], mask[i % 2]): success [80ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[-i * 5], mask[true]): success [83ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i * 5], mask[true]): success [1ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i + 1], mask[true]): success [1ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[-i * 5], mask[false]): success [1ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i * 5], mask[false]): success [5ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.ADDLong512VectorTests(long[-i * 5], long[i * 5]): success [76ms]
test Long512VectorTests.ADDLong512VectorTests(long[-i * 5], long[i + 1]): success [234ms]
test Long512VectorTests.ADDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [14ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [20ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [125ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [52ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [11ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [74ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long512VectorTests.ADDReduceLong512VectorTests(long[-i * 5]): success [103ms]
test Long512VectorTests.ADDReduceLong512VectorTests(long[i * 5]): success [3ms]
test Long512VectorTests.ADDReduceLong512VectorTests(long[i + 1]): success [63ms]
test Long512VectorTests.ADDReduceLong512VectorTests(long[cornerCaseValue(i)]): success [2ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[-i * 5], mask[i % 2]): success [66ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i * 5], mask[i % 2]): success [3ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i + 1], mask[i % 2]): success [81ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[-i * 5], mask[true]): success [2ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i * 5], mask[true]): success [2ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i + 1], mask[true]): success [2ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [13ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[-i * 5], mask[false]): success [1ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i + 1], mask[false]): success [2ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.ADDReduceLongLong512VectorTests(long[-i * 5]): success [5ms]
test Long512VectorTests.ADDReduceLongLong512VectorTests(long[i * 5]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTests(long[i + 1]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [16ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.ANDLong512VectorTests(long[-i * 5], long[i * 5]): success [214ms]
test Long512VectorTests.ANDLong512VectorTests(long[-i * 5], long[i + 1]): success [45ms]
test Long512VectorTests.ANDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [17ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [2ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [4ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [72ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTests(long[-i * 5]): success [132ms]
test Long512VectorTests.ANDReduceLong512VectorTests(long[i * 5]): success [2ms]
test Long512VectorTests.ANDReduceLong512VectorTests(long[i + 1]): success [60ms]
test Long512VectorTests.ANDReduceLong512VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[-i * 5], mask[i % 2]): success [19ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i * 5], mask[i % 2]): success [2ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i + 1], mask[i % 2]): success [79ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[-i * 5], mask[true]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i * 5], mask[true]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i + 1], mask[true]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[-i * 5], mask[false]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long512VectorTests.AND_NOTLong512VectorTests(long[-i * 5], long[i * 5]): success [202ms]
test Long512VectorTests.AND_NOTLong512VectorTests(long[-i * 5], long[i + 1]): success [150ms]
test Long512VectorTests.AND_NOTLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [36ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [66ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [67ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [36ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [37ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [134ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [37ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [37ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [79ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [37ms]
test Long512VectorTests.ASHRLong512VectorTests(long[-i * 5], long[i * 5]): success [114ms]
test Long512VectorTests.ASHRLong512VectorTests(long[-i * 5], long[i + 1]): success [118ms]
test Long512VectorTests.ASHRLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [34ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [79ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [80ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [36ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [36ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [132ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [36ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [36ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [35ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [35ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [76ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [169ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftConst(long[-i * 5]): success [6ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftConst(long[i * 5]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftConst(long[i + 1]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [16ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [22ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [60ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [12ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [5ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [54ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [12ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [65ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [4ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [4ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [128ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [5ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [5ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [484ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [4ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [1ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [1ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [3ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBr

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

mpressLong512VectorTests(long[-i * 5], mask[false]): success [3ms]
test Long512VectorTests.compressLong512VectorTests(long[i * 5], mask[false]): success [3ms]
test Long512VectorTests.compressLong512VectorTests(long[i + 1], mask[false]): success [3ms]
test Long512VectorTests.compressLong512VectorTests(long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long512VectorTests.divLong512VectorTests(long[-i * 5], long[i * 5]): success [92ms]
test Long512VectorTests.divLong512VectorTests(long[-i * 5], long[i + 1]): success [95ms]
test Long512VectorTests.divLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [74ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [9ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [109ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.divLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [7ms]
test Long512VectorTests.divLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long512VectorTests.divLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [162ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [263ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [158ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [147ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): failure [225ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$7(LongVector.java:914)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.bOpTemplateMF(LongVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Long512Vector.bOpMF(Long512Vector.java:204)
	at jdk.incubator.vector/jdk.incubator.vector.Long512Vector.bOpMF(Long512Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$6(LongVector.java:914)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lanewiseTemplate(LongVector.java:895)
	at jdk.incubator.vector/jdk.incubator.vector.Long512Vector.lanewise(Long512Vector.java:281)
	at jdk.incubator.vector/jdk.incubator.vector.Long512Vector.lanewise(Long512Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.div(LongVector.java:1645)
	at Long512VectorTests.divLong512VectorTestsMasked(Long512VectorTests.java:1780)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [213ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [165ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [147ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [148ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[i]): success [109ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[i - length / 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[i + 1]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[i - 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[zigZag(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[i]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[i - length / 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[i + 1]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[i - 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[zigZag(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [47ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[i]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[i - length / 2]): success [43ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[i + 1]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[i - 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[zigZag(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[i]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[i - length / 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[i + 1]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[i - 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[zigZag(i)]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[i]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[i - length / 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[i + 1]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[i - 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[zigZag(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[i]): success [50ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [72ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [1ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.expandLong512VectorTests(long[-i * 5], mask[i % 2]): success [130ms]
test Long512VectorTests.expandLong512VectorTests(long[i * 5], mask[i % 2]): success [56ms]
test Long512VectorTests.expandLong512VectorTests(long[i + 1], mask[i % 2]): success [37ms]
test Long512VectorTests.expandLong512VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [37ms]
test Long512VectorTests.expandLong512VectorTests(long[-i * 5], mask[true]): success [74ms]
test Long512VectorTests.expandLong512VectorTests(long[i * 5], mask[true]): success [40ms]
test Long512VectorTests.expandLong512VectorTests(long[i + 1], mask[true]): success [2ms]
test Long512VectorTests.expandLong512VectorTests(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long512VectorTests.expandLong512VectorTests(long[-i * 5], mask[false]): success [3ms]
test Long512VectorTests.expandLong512VectorTests(long[i * 5], mask[false]): success [3ms]
test Long512VectorTests.expandLong512VectorTests(long[i + 1], mask[false]): success [3ms]
test Long512VectorTests.expandLong512VectorTests(long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long512VectorTests.getLong512VectorTests(long[-i * 5]): success [4ms]
test Long512VectorTests.getLong512VectorTests(long[i * 5]): success [4ms]
test Long512VectorTests.getLong512VectorTests(long[i + 1]): success [4ms]
test Long512VectorTests.getLong512VectorTests(long[cornerCaseValue(i)]): success [3ms]
test Long512VectorTests.hashCodeLong512VectorTestsSmokeTest(long[-i * 5]): success [31ms]
test Long512VectorTests.hashCodeLong512VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long512VectorTests.hashCodeLong512VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long512VectorTests.hashCodeLong512VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(0): success [60ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(-1): success [1ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(1): success [14ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(2): success [1ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(-2): success [1ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(0): success [1ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(-1): success [1ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(1): success [1ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(2): success [2ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(-2): success [1ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(0): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(1): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(32): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(37): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(1024): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(1025): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(1029): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(0): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(1): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(32): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(37): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(1024): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(1025): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(1029): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[i]): success [108ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[i - length / 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[i + 1]): success [39ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[i - 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[zigZag(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[i]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[i - length / 2]): success [39ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[i + 1]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[i - 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[zigZag(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[i]): success [47ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[i - length / 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[i + 1]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[i - 2]): success [39ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[zigZag(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[i]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[i - length / 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[i + 1]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[i - 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[zigZag(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[i]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[i - length / 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[i + 1]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[i - 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[zigZag(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[i]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [49ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[i]): success [1ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.maskAndLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [11ms]
test Long512VectorTests.maskAndLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskAndNotLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [4ms]
test Long512VectorTests.maskAndNotLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskCompressLong512VectorTestsSmokeTest(mask[i % 2]): success [395ms]
test Long512VectorTests.maskCompressLong512VectorTestsSmokeTest(mask[true]): success [219ms]
test Long512VectorTests.maskCompressLong512VectorTestsSmokeTest(mask[false]): success [227ms]
test Long512VectorTests.maskEqLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long512VectorTests.maskEqLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskEqualsLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long512VectorTests.maskEqualsLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskFirstTrueLong512VectorTestsSmokeTest(mask[i % 2]): success [48ms]
test Long512VectorTests.maskFirstTrueLong512VectorTestsSmokeTest(mask[true]): success [71ms]
test Long512VectorTests.maskFirstTrueLong512VectorTestsSmokeTest(mask[false]): success [38ms]
test Long512VectorTests.maskFromToLongLong512VectorTestsSmokeTest(-1): success [53ms]
test Long512VectorTests.maskFromToLongLong512VectorTestsSmokeTest(0): success [0ms]
test Long512VectorTests.maskFromToLongLong512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long512VectorTests.maskFromToLongLong512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long512VectorTests.maskHashCodeLong512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long512VectorTests.maskHashCodeLong512VectorTestsSmokeTest(mask[true]): success [0ms]
test Long512VectorTests.maskHashCodeLong512VectorTestsSmokeTest(mask[false]): success [0ms]
test Long512VectorTests.maskLastTrueLong512VectorTestsSmokeTest(mask[i % 2]): success [86ms]
test Long512VectorTests.maskLastTrueLong512VectorTestsSmokeTest(mask[true]): success [70ms]
test Long512VectorTests.maskLastTrueLong512VectorTestsSmokeTest(mask[false]): success [56ms]
test Long512VectorTests.maskOrLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [16ms]
test Long512VectorTests.maskOrLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskTrueCountLong512VectorTestsSmokeTest(mask[i % 2]): success [46ms]
test Long512VectorTests.maskTrueCountLong512VectorTestsSmokeTest(mask[true]): success [71ms]
test Long512VectorTests.maskTrueCountLong512VectorTestsSmokeTest(mask[false]): success [39ms]
test Long512VectorTests.maskXorLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long512VectorTests.maskXorLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maxLong512VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.maxLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.maxLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [19ms]
test Long512VectorTests.maxLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.maxLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.maxLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.minLong512VectorTests(long[-i * 5], long[i * 5]): success [4ms]
test Long512VectorTests.minLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.minLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.minLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.minLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.minLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.mulLong512VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.mulLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.mulLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [4ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.negLong512VectorTests(long[-i * 5]): success [7ms]
test Long512VectorTests.negLong512VectorTests(long[i * 5]): success [7ms]
test Long512VectorTests.negLong512VectorTests(long[i + 1]): success [2ms]
test Long512VectorTests.negLong512VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long512VectorTests.notLong512VectorTests(long[-i * 5]): success [38ms]
test Long512VectorTests.notLong512VectorTests(long[i * 5]): success [41ms]
test Long512VectorTests.notLong512VectorTests(long[i + 1]): success [32ms]
test Long512VectorTests.notLong512VectorTests(long[cornerCaseValue(i)]): success [32ms]
test Long512VectorTests.orLong512VectorTests(long[-i * 5], long[i * 5]): success [7ms]
test Long512VectorTests.orLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.orLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.orLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.orLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.orLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.shuffleEqualsLong512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [353ms]
test Long512VectorTests.shuffleEqualsLong512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [25ms]
test Long512VectorTests.shuffleMiscellaneousLong512VectorTestsSmokeTest(shuffle[random]): success [7ms]
test Long512VectorTests.shuffleTest(): success [484ms]
test Long512VectorTests.shuffleToStringLong512VectorTestsSmokeTest(shuffle[random]): success [52ms]
test Long512VectorTests.sliceBinaryLong512VectorTestsBinary(long[-i * 5], long[i * 5]): success [366ms]
test Long512VectorTests.sliceBinaryLong512VectorTestsBinary(long[-i * 5], long[i + 1]): success [640ms]
test Long512VectorTests.sliceBinaryLong512VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [230ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [278ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [374ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [263ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [279ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [660ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [279ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [264ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [272ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [263ms]
test Long512VectorTests.sliceUnaryLong512VectorTests(long[-i * 5]): success [228ms]
test Long512VectorTests.sliceUnaryLong512VectorTests(long[i * 5]): success [400ms]
test Long512VectorTests.sliceUnaryLong512VectorTests(long[i + 1]): success [218ms]
test Long512VectorTests.sliceUnaryLong512VectorTests(long[cornerCaseValue(i)]): success [217ms]
test Long512VectorTests.smokeTest1(): success [0ms]
test Long512VectorTests.smokeTest2(): success [40ms]
test Long512VectorTests.subLong512VectorTests(long[-i * 5], long[i * 5]): success [4ms]
test Long512VectorTests.subLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.subLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [45ms]
test Long512VectorTests.subLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [7ms]
test Long512VectorTests.subLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [13ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.toDoubleArrayLong512VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long512VectorTests.toDoubleArrayLong512VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long512VectorTests.toDoubleArrayLong512VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long512VectorTests.toDoubleArrayLong512VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.toIntArrayLong512VectorTestsSmokeTest(long[-i * 5]): success [5ms]
test Long512VectorTests.toIntArrayLong512VectorTestsSmokeTest(long[i * 5]): success [7ms]
test Long512VectorTests.toIntArrayLong512VectorTestsSmokeTest(long[i + 1]): success [4ms]
test Long512VectorTests.toIntArrayLong512VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [12ms]
test Long512VectorTests.toLongArrayLong512VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long512VectorTests.toLongArrayLong512VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long512VectorTests.toLongArrayLong512VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long512VectorTests.toLongArrayLong512VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.toStringLong512VectorTestsSmokeTest(long[-i * 5]): success [1ms]
test Long512VectorTests.toStringLong512VectorTestsSmokeTest(long[i * 5]): success [6ms]
test Long512VectorTests.toStringLong512VectorTestsSmokeTest(long[i + 1]): success [42ms]
test Long512VectorTests.toStringLong512VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.unsliceBinaryLong512VectorTestsBinary(long[-i * 5], long[i * 5]): success [232ms]
test Long512VectorTests.unsliceBinaryLong512VectorTestsBinary(long[-i * 5], long[i + 1]): success [455ms]
test Long512VectorTests.unsliceBinaryLong512VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [227ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [474ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [1007ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [550ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [516ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1367ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [466ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [456ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [471ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [755ms]
test Long512VectorTests.unsliceUnaryLong512VectorTests(long[-i * 5]): success [221ms]
test Long512VectorTests.unsliceUnaryLong512VectorTests(long[i * 5]): success [436ms]
test Long512VectorTests.unsliceUnaryLong512VectorTests(long[i + 1]): success [218ms]
test Long512VectorTests.unsliceUnaryLong512VectorTests(long[cornerCaseValue(i)]): success [217ms]
test Long512VectorTests.viewAsFloatingLanesTest(): success [198ms]
test Long512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long512VectorTests.withLong512VectorTests(long[-i * 5], long[i * 5]): success [11ms]
test Long512VectorTests.withLong512VectorTests(long[-i * 5], long[i + 1]): success [22ms]
test Long512VectorTests.withLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [9ms]

===============================================
jdk/incubator/vector/Long512VectorTests.java
Total tests run: 3321, Passes: 3320, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Long512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Long512VectorTests.d/testng.0.jta jdk/incubator/vector/Long512VectorTests.java false Long512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Long128VectorTests.java
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/UnalignedHeapTest.java
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/LongMaxVectorTests.java
TEST: jdk/incubator/vector/Int64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.182 seconds
messages:
command: build Int64VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 21:45:26 IST 2025
Test directory:
  compile: Int64VectorTests
finished: Wed Apr 16 21:45:27 IST 2025
elapsed time (seconds): 1.182

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.182 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 21:45:26 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 10
Process id: 1652205
finished: Wed Apr 16 21:45:27 IST 2025
elapsed time (seconds): 1.182
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/4 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests 
TIME:   459.229 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests 
started: Wed Apr 16 21:45:27 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1655232
finished: Wed Apr 16 21:53:07 IST 2025
elapsed time (seconds): 459.229
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 4069434168001354530
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=4069434168001354530" to command line.
test Int64VectorTests.ABSInt64VectorTests(int[-i * 5]): success [591ms]
test Int64VectorTests.ABSInt64VectorTests(int[i * 5]): success [23ms]
test Int64VectorTests.ABSInt64VectorTests(int[i + 1]): success [28ms]
test Int64VectorTests.ABSInt64VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[i % 2]): success [219ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[i % 2]): success [26ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[i % 2]): success [95ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[true]): success [29ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[false]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[i * 5]): success [293ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[i + 1]): success [27ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [17ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [9ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [25ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [10ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [6ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [6ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [45ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [147ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [6ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [71ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [16ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[-i * 5]): success [141ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[i + 1]): success [52ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[cornerCaseValue(i)]): success [64ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [119ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [61ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [72ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [11ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[-i * 5]): success [20ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [8ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[true]): success [8ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[i * 5]): success [194ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [54ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [28ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [37ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [20ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [4ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [68ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [36ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [5ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[-i * 5]): success [153ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[i + 1]): success [52ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[cornerCaseValue(i)]): success [66ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [81ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [63ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [43ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [76ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [14ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [18ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[i * 5]): success [174ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [62ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [129ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [77ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [39ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[i * 5]): success [164ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[i + 1]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [58ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [146ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [36ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [76ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [214ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [50ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[-i * 5]): success [43ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[i * 5]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[i + 1]): success [39ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [112ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [55ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [60ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [59ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [57ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [54ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [7ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [177ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [77ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [91ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [366ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [84ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [103ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [23ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [60ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [44ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

uccess [282ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[i - 2], int[cornerCaseValue(i)], mask[false]): success [279ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[i], mask[false]): success [284ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[i - length / 2], mask[false]): success [278ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[i + 1], mask[false]): success [278ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[i - 2], mask[false]): success [277ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[zigZag(i)], mask[false]): success [277ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[cornerCaseValue(i)], mask[false]): success [278ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i], mask[false]): success [277ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i - length / 2], mask[false]): success [280ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i + 1], mask[false]): success [278ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i - 2], mask[false]): success [283ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[zigZag(i)], mask[false]): success [276ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [278ms]
test Int64VectorTests.UMAXInt64VectorTests(int[-i * 5], int[i * 5]): success [142ms]
test Int64VectorTests.UMAXInt64VectorTests(int[-i * 5], int[i + 1]): success [16ms]
test Int64VectorTests.UMAXInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [51ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [74ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [4ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [32ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[-i * 5]): success [110ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[i * 5]): success [5ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[i + 1]): success [44ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[cornerCaseValue(i)]): success [16ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [80ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [65ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [122ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [62ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [13ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[i * 5]): success [138ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[i + 1]): success [55ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [44ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [74ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [67ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[-i * 5]): success [104ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[i * 5]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[i + 1]): success [47ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[cornerCaseValue(i)]): success [93ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [80ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [64ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [114ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [63ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [13ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.VectorShapeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.VectorTypeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.WithLanesInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.WithShapeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[i * 5]): success [63ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [53ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [74ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [32ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [67ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[-i * 5]): success [130ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[i + 1]): success [52ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[cornerCaseValue(i)]): success [101ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [80ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [46ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [124ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [4ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [16ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[-i * 5]): success [229ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[i * 5]): success [162ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[i + 1]): success [177ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[i % 2]): success [402ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[i % 2]): success [275ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[i % 2]): success [275ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [308ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[true]): success [279ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[true]): success [274ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[true]): success [275ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [273ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[false]): success [273ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[false]): success [274ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[false]): success [272ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [275ms]
test Int64VectorTests.ZeroInt64VectorTests(int[-i * 5]): success [118ms]
test Int64VectorTests.ZeroInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ZeroInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.ZeroInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.absInt64VectorTests(int[-i * 5]): success [51ms]
test Int64VectorTests.absInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.absInt64VectorTests(int[i + 1]): success [37ms]
test Int64VectorTests.absInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[i * 5]): success [31ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [37ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.allTrueInt64VectorTests(boolean[i % 2]): success [31ms]
test Int64VectorTests.allTrueInt64VectorTests(boolean[i % 5]): success [19ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.anyTrueInt64VectorTests(boolean[i % 2]): success [7ms]
test Int64VectorTests.anyTrueInt64VectorTests(boolean[i % 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [12ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [15ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [7ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [15ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [7ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [15ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseDivByZeroSmokeTest(): success [13ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[i % 2]): success [89ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [58ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[true]): success [62ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [79ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [28ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [93ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[i % 2]): success [254ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[i % 2]): success [83ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[i % 2]): success [83ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [84ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[true]): success [74ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[true]): success [11ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[true]): success [11ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [11ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[false]): success [14ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[false]): success [14ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[false]): success [14ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [14ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[i * 5]): success [309ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[i + 1]): success [220ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [175ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [112ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [10ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [532ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [343ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [345ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [289ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [298ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [289ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [290ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [344ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [290ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i]): success [235ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i - length / 2]): success [176ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i + 1]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i - 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[zigZag(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i - length / 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i + 1]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i - 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[zigZag(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [141ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i - length / 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i + 1]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i - 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[zigZag(i)]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i - length / 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i + 1]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i - 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[zigZag(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [140ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i - length / 2]): success [142ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i + 1]): success [151ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i - 2]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[zigZag(i)]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [135ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [135ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [136ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [2ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [9ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [57ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[i % 2]): success [197ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[i % 2]): success [83ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[i % 2]): success [84ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [84ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[true]): success [29ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[true]): success [11ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [11ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [14ms]
test Int64VectorTests.getInt64VectorTests(int[-i * 5]): success [35ms]
test Int64VectorTests.getInt64VectorTests(int[i * 5]): success [3ms]
test Int64VectorTests.getInt64VectorTests(int[i + 1]): success [2ms]
test Int64VectorTests.getInt64VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[-i * 5]): success [50ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[i * 5]): success [21ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[i + 1]): success [2ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [3ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(0): success [93ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(-1): success [5ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(1): success [25ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(2): success [5ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(-2): success [8ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(0): success [7ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(-1): success [7ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(1): success [8ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(2): success [19ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(-2): success [5ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(32): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(37): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1024): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1025): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1029): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1): success [4ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(32): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(37): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1024): success [1ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1025): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1029): success [0ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i]): success [234ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i - length / 2]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i + 1]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i - 2]): success [144ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[zigZag(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[cornerCaseValue(i)]): success [173ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i]): success [170ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i - length / 2]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i + 1]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i - 2]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[zigZag(i)]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i - length / 2]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i + 1]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i - 2]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[zigZag(i)]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i - length / 2]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i + 1]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i - 2]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[zigZag(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i - length / 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i + 1]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i - 2]): success [140ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[zigZag(i)]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i]): success [152ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i]): success [2ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [6ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [65ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.maskAndInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Int64VectorTests.maskAndInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskAndNotInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int64VectorTests.maskAndNotInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[i % 2]): success [228ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[true]): success [78ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[false]): success [59ms]
test Int64VectorTests.maskEqInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Int64VectorTests.maskEqInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskEqualsInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int64VectorTests.maskEqualsInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[i % 2]): success [36ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[true]): success [53ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[false]): success [20ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(-1): success [81ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[true]): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[false]): success [0ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[i % 2]): success [66ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[true]): success [53ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[false]): success [33ms]
test Int64VectorTests.maskOrInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [27ms]
test Int64VectorTests.maskOrInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[i % 2]): success [29ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[true]): success [53ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[false]): success [20ms]
test Int64VectorTests.maskXorInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Int64VectorTests.maskXorInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [31ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[i * 5]): success [9ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.negInt64VectorTests(int[-i * 5]): success [54ms]
test Int64VectorTests.negInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.negInt64VectorTests(int[i + 1]): success [38ms]
test Int64VectorTests.negInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.notInt64VectorTests(int[-i * 5]): success [69ms]
test Int64VectorTests.notInt64VectorTests(int[i * 5]): success [22ms]
test Int64VectorTests.notInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.notInt64VectorTests(int[cornerCaseValue(i)]): success [71ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[i * 5]): success [9ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.shuffleEqualsInt64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [17ms]
test Int64VectorTests.shuffleEqualsInt64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [14ms]
test Int64VectorTests.shuffleMiscellaneousInt64VectorTestsSmokeTest(shuffle[random]): success [10ms]
test Int64VectorTests.shuffleTest(): success [278ms]
test Int64VectorTests.shuffleToStringInt64VectorTestsSmokeTest(shuffle[random]): success [66ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i * 5]): success [842ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i + 1]): success [164ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [162ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [460ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [166ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [294ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [165ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [165ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [179ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [192ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [165ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [172ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[-i * 5]): success [432ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[i * 5]): success [152ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[i + 1]): success [153ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[cornerCaseValue(i)]): success [158ms]
test Int64VectorTests.smokeTest1(): success [0ms]
test Int64VectorTests.smokeTest2(): success [89ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [17ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[-i * 5]): success [15ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[i * 5]): success [16ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[i + 1]): success [18ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [12ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i * 5]): success [462ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i + 1]): success [156ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [397ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [1142ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [330ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [314ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [318ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [314ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [336ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [498ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [332ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [313ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[-i * 5]): success [407ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[i * 5]): success [153ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[i + 1]): success [153ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[cornerCaseValue(i)]): success [153ms]
test Int64VectorTests.viewAsFloatingLanesTest(): success [549ms]
test Int64VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[i * 5]): success [123ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[i + 1]): success [65ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [66ms]

===============================================
jdk/incubator/vector/Int64VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/4 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Int64VectorTests.d/testng.0.jta jdk/incubator/vector/Int64VectorTests.java false Int64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/VectorMathTest.java
Passed: jdk/incubator/vector/Byte128VectorTests.java
Passed: jdk/incubator/vector/AddTest.java
Passed: jdk/incubator/vector/Vector512ConversionTests.java
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/ShortMaxVectorTests.java
TEST: jdk/incubator/vector/Byte256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   23.759 seconds
messages:
command: build Byte256VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 21:39:28 IST 2025
Test directory:
  compile: Byte256VectorTests
finished: Wed Apr 16 21:39:52 IST 2025
elapsed time (seconds): 23.759

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   23.754 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 21:39:28 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 9
Process id: 1652133
finished: Wed Apr 16 21:39:52 IST 2025
elapsed time (seconds): 23.754
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Byte256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/2 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Byte256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Byte256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Byte256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte256VectorTests 
TIME:   922.713 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Byte256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte256VectorTests 
started: Wed Apr 16 21:39:52 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1653467
finished: Wed Apr 16 21:55:14 IST 2025
elapsed time (seconds): 922.713
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 5347513359958652671
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=5347513359958652671" to command line.
test Byte256VectorTests.ABSByte256VectorTests(byte[-i * 5]): success [903ms]
test Byte256VectorTests.ABSByte256VectorTests(byte[i * 5]): success [14ms]
test Byte256VectorTests.ABSByte256VectorTests(byte[i + 1]): success [94ms]
test Byte256VectorTests.ABSByte256VectorTests(byte[cornerCaseValue(i)]): success [8ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[-i * 5], mask[i % 2]): success [377ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i * 5], mask[i % 2]): success [132ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i + 1], mask[i % 2]): success [152ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [12ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[-i * 5], mask[true]): success [8ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i * 5], mask[true]): success [7ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i + 1], mask[true]): success [8ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[cornerCaseValue(i)], mask[true]): success [10ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[-i * 5], mask[false]): success [6ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[i + 1], mask[false]): success [6ms]
test Byte256VectorTests.ABSMaskedByte256VectorTests(byte[cornerCaseValue(i)], mask[false]): success [7ms]
test Byte256VectorTests.ADDByte256VectorTests(byte[-i * 5], byte[i * 5]): success [821ms]
test Byte256VectorTests.ADDByte256VectorTests(byte[-i * 5], byte[i + 1]): success [13ms]
test Byte256VectorTests.ADDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [153ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5]): success [71ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [5ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [24ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [4ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [12ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [17ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [190ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [2ms]
test Byte256VectorTests.ADDByte256VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [242ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [10ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [156ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [8ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [8ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [8ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [64ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [7ms]
test Byte256VectorTests.ADDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [7ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[-i * 5]): success [176ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[i * 5]): success [76ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[i + 1]): success [28ms]
test Byte256VectorTests.ADDReduceByte256VectorTests(byte[cornerCaseValue(i)]): success [19ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [116ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i * 5], mask[i % 2]): success [181ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i + 1], mask[i % 2]): success [44ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [30ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[-i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i * 5], mask[true]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i + 1], mask[true]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[-i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i * 5], mask[false]): success [4ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.ADDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[-i * 5]): success [9ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[i * 5]): success [11ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[i + 1]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTests(byte[cornerCaseValue(i)]): success [16ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [9ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i * 5], mask[i % 2]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i + 1], mask[i % 2]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [25ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[-i * 5], mask[true]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i * 5], mask[true]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i + 1], mask[true]): success [80ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[-i * 5], mask[false]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i * 5], mask[false]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[i + 1], mask[false]): success [0ms]
test Byte256VectorTests.ADDReduceLongByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte256VectorTests.ANDByte256VectorTests(byte[-i * 5], byte[i * 5]): success [559ms]
test Byte256VectorTests.ANDByte256VectorTests(byte[-i * 5], byte[i + 1]): success [8ms]
test Byte256VectorTests.ANDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [207ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [7ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [30ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [3ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [30ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [5ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [14ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [38ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [154ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [8ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [8ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [8ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [8ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [8ms]
test Byte256VectorTests.ANDByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [8ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[-i * 5]): success [137ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[i * 5]): success [78ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[i + 1]): success [28ms]
test Byte256VectorTests.ANDReduceByte256VectorTests(byte[cornerCaseValue(i)]): success [20ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [33ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i * 5], mask[i % 2]): success [125ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i + 1], mask[i % 2]): success [7ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[-i * 5], mask[true]): success [7ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i + 1], mask[true]): success [6ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[-i * 5], mask[false]): success [6ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i * 5], mask[false]): success [6ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[i + 1], mask[false]): success [6ms]
test Byte256VectorTests.ANDReduceByte256VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [8ms]
test Byte256VectorTests.AND_NOTByte256VectorTests(byte[-i * 5], byte[i * 5]): success [787ms]
test Byte256VectorTests.AND_NOTByte256VectorTests(byte[-i * 5], byte[i + 1]): success [163ms]
test Byte256VectorTests.AND_NOTByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [498ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [248ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [149ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [400ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [148ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [148ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [148ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [146ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [146ms]
test Byte256VectorTests.AND_NOTByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [147ms]
test Byte256VectorTests.ASHRByte256VectorTests(byte[-i * 5], byte[i * 5]): success [456ms]
test Byte256VectorTests.ASHRByte256VectorTests(byte[-i * 5], byte[i + 1]): success [145ms]
test Byte256VectorTests.ASHRByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [471ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [386ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [147ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [405ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [150ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [245ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [149ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [151ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [168ms]
test Byte256VectorTests.ASHRByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [169ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShift(byte[-i * 5], byte[i * 5]): success [542ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShift(byte[-i * 5], byte[i + 1]): success [7ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShift(byte[-i * 5], byte[cornerCaseValue(i)]): success [85ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[-i * 5]): success [85ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[i * 5]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[i + 1]): success [73ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftConst(byte[cornerCaseValue(i)]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [253ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [8ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [112ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[true]): success [7ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[false]): success [39ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[i % 2]): success [16ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[i % 2]): success [8ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[i % 2]): success [104ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[true]): success [68ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[false]): success [6ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[false]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.ASHRByte256VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [150ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[i * 5]): success [17ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[i + 1]): success [297ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[i * 5]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[i + 1]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [14ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [15ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [344ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [6ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [68ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [9ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [45ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [9ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [6ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [37ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [3ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [63ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [175ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [6ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [2ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [47ms]
test Byte256VectorTests.BITWISE_BLENDByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): succe

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

e256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [24ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [3ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [3ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [2ms]
test Byte256VectorTests.bitwiseBlendByte256VectorTestsDoubleBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.bitwiseDivByZeroSmokeTest(): success [19ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i * 5], mask[i % 2]): success [29ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i + 1], mask[i % 2]): success [7ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [147ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i * 5], mask[true]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i + 1], mask[true]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i * 5], mask[false]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[i + 1], mask[false]): success [5ms]
test Byte256VectorTests.blendByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [182ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [143ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [269ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [137ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [136ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [136ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [138ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [136ms]
test Byte256VectorTests.blendByte256VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [135ms]
test Byte256VectorTests.compressByte256VectorTests(byte[-i * 5], mask[i % 2]): success [1240ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i * 5], mask[i % 2]): success [292ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i + 1], mask[i % 2]): success [533ms]
test Byte256VectorTests.compressByte256VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [293ms]
test Byte256VectorTests.compressByte256VectorTests(byte[-i * 5], mask[true]): success [693ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i * 5], mask[true]): success [6ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i + 1], mask[true]): success [6ms]
test Byte256VectorTests.compressByte256VectorTests(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.compressByte256VectorTests(byte[-i * 5], mask[false]): success [31ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i * 5], mask[false]): success [84ms]
test Byte256VectorTests.compressByte256VectorTests(byte[i + 1], mask[false]): success [23ms]
test Byte256VectorTests.compressByte256VectorTests(byte[cornerCaseValue(i)], mask[false]): success [22ms]
test Byte256VectorTests.divByte256VectorTests(byte[-i * 5], byte[i * 5]): success [576ms]
test Byte256VectorTests.divByte256VectorTests(byte[-i * 5], byte[i + 1]): success [397ms]
test Byte256VectorTests.divByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [688ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [36ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [285ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [10ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [9ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [13ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [6ms]
test Byte256VectorTests.divByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [6ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): failure [787ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lambda$binaryOperationsMF$7(ByteVector.java:956)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.bOpTemplateMF(ByteVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Byte256Vector.bOpMF(Byte256Vector.java:209)
	at jdk.incubator.vector/jdk.incubator.vector.Byte256Vector.bOpMF(Byte256Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lambda$binaryOperationsMF$6(ByteVector.java:956)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lanewiseTemplate(ByteVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Byte256Vector.lanewise(Byte256Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Byte256Vector.lanewise(Byte256Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.div(ByteVector.java:1729)
	at Byte256VectorTests.divByte256VectorTestsMasked(Byte256VectorTests.java:1796)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [929ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1350ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1009ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [801ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [798ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [800ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [797ms]
test Byte256VectorTests.divByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [806ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i]): success [435ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i - length / 2]): success [262ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i + 1]): success [263ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[i - 2]): success [323ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[zigZag(i)]): success [272ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i], byte[cornerCaseValue(i)]): success [264ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i]): success [264ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i - length / 2]): success [266ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i + 1]): success [262ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[i - 2]): success [262ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [267ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [261ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i]): success [261ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i - length / 2]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i + 1]): success [271ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[i - 2]): success [263ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[zigZag(i)]): success [261ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [277ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i]): success [268ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i - length / 2]): success [261ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i + 1]): success [261ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[i - 2]): success [262ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[zigZag(i)]): success [263ms]
test Byte256VectorTests.eqByte256VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [261ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i]): success [265ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [276ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i + 1]): success [262ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[i - 2]): success [264ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [262ms]
test Byte256VectorTests.eqByte256VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [262ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i]): success [261ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [262ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [261ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [267ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [262ms]
test Byte256VectorTests.eqByte256VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [273ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i]): success [103ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - 2]): success [12ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.eqByte256VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.expandByte256VectorTests(byte[-i * 5], mask[i % 2]): success [1956ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i * 5], mask[i % 2]): success [300ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i + 1], mask[i % 2]): success [412ms]
test Byte256VectorTests.expandByte256VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [378ms]
test Byte256VectorTests.expandByte256VectorTests(byte[-i * 5], mask[true]): success [1552ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i * 5], mask[true]): success [6ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i + 1], mask[true]): success [6ms]
test Byte256VectorTests.expandByte256VectorTests(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte256VectorTests.expandByte256VectorTests(byte[-i * 5], mask[false]): success [22ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i * 5], mask[false]): success [22ms]
test Byte256VectorTests.expandByte256VectorTests(byte[i + 1], mask[false]): success [22ms]
test Byte256VectorTests.expandByte256VectorTests(byte[cornerCaseValue(i)], mask[false]): success [23ms]
test Byte256VectorTests.getByte256VectorTests(byte[-i * 5]): success [34ms]
test Byte256VectorTests.getByte256VectorTests(byte[i * 5]): success [41ms]
test Byte256VectorTests.getByte256VectorTests(byte[i + 1]): success [228ms]
test Byte256VectorTests.getByte256VectorTests(byte[cornerCaseValue(i)]): success [23ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[-i * 5]): success [41ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[i * 5]): success [1ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[i + 1]): success [1ms]
test Byte256VectorTests.hashCodeByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [17ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(0): success [82ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(-1): success [7ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(1): success [23ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(2): success [6ms]
test Byte256VectorTests.indexInRangeByte256VectorTestsSmokeTest(-2): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(0): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(-1): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(1): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(2): success [6ms]
test Byte256VectorTests.indexInRangeLongByte256VectorTestsSmokeTest(-2): success [6ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(0): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(32): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(37): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1024): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1025): success [0ms]
test Byte256VectorTests.loopBoundByte256VectorTestsSmokeTest(1029): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(0): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(32): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(37): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1024): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1025): success [0ms]
test Byte256VectorTests.loopBoundLongByte256VectorTestsSmokeTest(1029): success [0ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i]): success [434ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i - length / 2]): success [273ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i + 1]): success [263ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[i - 2]): success [263ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[zigZag(i)]): success [272ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i], byte[cornerCaseValue(i)]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i]): success [264ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i - length / 2]): success [264ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i + 1]): success [264ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[i - 2]): success [264ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [321ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [271ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i]): success [272ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i - length / 2]): success [263ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i + 1]): success [262ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[i - 2]): success [263ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[zigZag(i)]): success [263ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [278ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i]): success [268ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i - length / 2]): success [268ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i + 1]): success [262ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[i - 2]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[zigZag(i)]): success [272ms]
test Byte256VectorTests.ltByte256VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i]): success [264ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [266ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i + 1]): success [269ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[i - 2]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [264ms]
test Byte256VectorTests.ltByte256VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [264ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i]): success [309ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [265ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [274ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [264ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [268ms]
test Byte256VectorTests.ltByte256VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [262ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i]): success [104ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [6ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [4ms]
test Byte256VectorTests.ltByte256VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [4ms]
test Byte256VectorTests.maskAndByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [15ms]
test Byte256VectorTests.maskAndByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskAndNotByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test Byte256VectorTests.maskAndNotByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskCompressByte256VectorTestsSmokeTest(mask[i % 2]): success [805ms]
test Byte256VectorTests.maskCompressByte256VectorTestsSmokeTest(mask[true]): success [592ms]
test Byte256VectorTests.maskCompressByte256VectorTestsSmokeTest(mask[false]): success [569ms]
test Byte256VectorTests.maskEqByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Byte256VectorTests.maskEqByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskEqualsByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Byte256VectorTests.maskEqualsByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskFirstTrueByte256VectorTestsSmokeTest(mask[i % 2]): success [120ms]
test Byte256VectorTests.maskFirstTrueByte256VectorTestsSmokeTest(mask[true]): success [153ms]
test Byte256VectorTests.maskFirstTrueByte256VectorTestsSmokeTest(mask[false]): success [106ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(-1): success [68ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(0): success [0ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Byte256VectorTests.maskFromToLongByte256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Byte256VectorTests.maskHashCodeByte256VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Byte256VectorTests.maskHashCodeByte256VectorTestsSmokeTest(mask[true]): success [0ms]
test Byte256VectorTests.maskHashCodeByte256VectorTestsSmokeTest(mask[false]): success [0ms]
test Byte256VectorTests.maskLastTrueByte256VectorTestsSmokeTest(mask[i % 2]): success [158ms]
test Byte256VectorTests.maskLastTrueByte256VectorTestsSmokeTest(mask[true]): success [169ms]
test Byte256VectorTests.maskLastTrueByte256VectorTestsSmokeTest(mask[false]): success [129ms]
test Byte256VectorTests.maskOrByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [21ms]
test Byte256VectorTests.maskOrByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maskTrueCountByte256VectorTestsSmokeTest(mask[i % 2]): success [116ms]
test Byte256VectorTests.maskTrueCountByte256VectorTestsSmokeTest(mask[true]): success [167ms]
test Byte256VectorTests.maskTrueCountByte256VectorTestsSmokeTest(mask[false]): success [106ms]
test Byte256VectorTests.maskXorByte256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Byte256VectorTests.maskXorByte256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte256VectorTests.maxByte256VectorTests(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte256VectorTests.maxByte256VectorTests(byte[-i * 5], byte[i + 1]): success [5ms]
test Byte256VectorTests.maxByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.maxByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte256VectorTests.maxByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [2ms]
test Byte256VectorTests.maxByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.minByte256VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte256VectorTests.minByte256VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte256VectorTests.minByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.minByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte256VectorTests.minByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.minByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.mulByte256VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte256VectorTests.mulByte256VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte256VectorTests.mulByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [7ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.mulByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [6ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte256VectorTests.mulByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte256VectorTests.negByte256VectorTests(byte[-i * 5]): success [20ms]
test Byte256VectorTests.negByte256VectorTests(byte[i * 5]): success [5ms]
test Byte256VectorTests.negByte256VectorTests(byte[i + 1]): success [102ms]
test Byte256VectorTests.negByte256VectorTests(byte[cornerCaseValue(i)]): success [3ms]
test Byte256VectorTests.notByte256VectorTests(byte[-i * 5]): success [168ms]
test Byte256VectorTests.notByte256VectorTests(byte[i * 5]): success [138ms]
test Byte256VectorTests.notByte256VectorTests(byte[i + 1]): success [356ms]
test Byte256VectorTests.notByte256VectorTests(byte[cornerCaseValue(i)]): success [253ms]
test Byte256VectorTests.orByte256VectorTests(byte[-i * 5], byte[i * 5]): success [9ms]
test Byte256VectorTests.orByte256VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte256VectorTests.orByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.orByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [9ms]
test Byte256VectorTests.orByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.orByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[-i * 5]): success [1ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[i * 5]): success [28ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte256VectorTests.reinterpretAsBytesByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.shuffleEqualsByte256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [2671ms]
test Byte256VectorTests.shuffleEqualsByte256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [429ms]
test Byte256VectorTests.shuffleMiscellaneousByte256VectorTestsSmokeTest(shuffle[random]): success [88ms]
test Byte256VectorTests.shuffleTest(): success [1035ms]
test Byte256VectorTests.shuffleToStringByte256VectorTestsSmokeTest(shuffle[random]): success [70ms]
test Byte256VectorTests.sliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [2237ms]
test Byte256VectorTests.sliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [1222ms]
test Byte256VectorTests.sliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [2595ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [1667ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [1348ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [3548ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1331ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [1345ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1341ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [1402ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [1345ms]
test Byte256VectorTests.sliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1346ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[-i * 5]): success [1535ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[i * 5]): success [1081ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[i + 1]): success [1792ms]
test Byte256VectorTests.sliceUnaryByte256VectorTests(byte[cornerCaseValue(i)]): success [1098ms]
test Byte256VectorTests.smokeTest1(): success [28ms]
test Byte256VectorTests.smokeTest2(): success [60ms]
test Byte256VectorTests.subByte256VectorTests(byte[-i * 5], byte[i * 5]): success [6ms]
test Byte256VectorTests.subByte256VectorTests(byte[-i * 5], byte[i + 1]): success [226ms]
test Byte256VectorTests.subByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [193ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [435ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [2ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [29ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [1ms]
test Byte256VectorTests.subByte256VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [2ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [34ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte256VectorTests.subByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[i + 1]): success [3ms]
test Byte256VectorTests.toDoubleArrayByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[-i * 5]): success [3ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[i * 5]): success [9ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[i + 1]): success [7ms]
test Byte256VectorTests.toIntArrayByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte256VectorTests.toLongArrayByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[-i * 5]): success [35ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[i * 5]): success [13ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[i + 1]): success [61ms]
test Byte256VectorTests.toStringByte256VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte256VectorTests.unsliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [1673ms]
test Byte256VectorTests.unsliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [1245ms]
test Byte256VectorTests.unsliceBinaryByte256VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [3214ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [3852ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [2345ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [5824ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [2361ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [2522ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [2352ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [2508ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [2417ms]
test Byte256VectorTests.unsliceByte256VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [2345ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[-i * 5]): success [1532ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[i * 5]): success [1077ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[i + 1]): success [1770ms]
test Byte256VectorTests.unsliceUnaryByte256VectorTests(byte[cornerCaseValue(i)]): success [1090ms]
test Byte256VectorTests.viewAsFloatingLanesTest(): success [15ms]
test Byte256VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Byte256VectorTests.withByte256VectorTests(byte[-i * 5], byte[i * 5]): success [21ms]
test Byte256VectorTests.withByte256VectorTests(byte[-i * 5], byte[i + 1]): success [20ms]
test Byte256VectorTests.withByte256VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [619ms]

===============================================
jdk/incubator/vector/Byte256VectorTests.java
Total tests run: 3602, Passes: 3601, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/2 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Byte256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Byte256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Byte256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Byte256VectorTests.d/testng.0.jta jdk/incubator/vector/Byte256VectorTests.java false Byte256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Byte64VectorTests.java
Passed: jdk/incubator/vector/Byte512VectorTests.java
Passed: jdk/incubator/vector/Long64VectorTests.java
Passed: jdk/incubator/vector/Short128VectorTests.java
TEST: jdk/incubator/vector/Short256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.788 seconds
messages:
command: build Short256VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 21:49:16 IST 2025
Test directory:
  compile: Short256VectorTests
finished: Wed Apr 16 21:49:17 IST 2025
elapsed time (seconds): 0.788

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.788 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short256VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 21:49:16 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 11
Process id: 1652301
finished: Wed Apr 16 21:49:17 IST 2025
elapsed time (seconds): 0.788
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/Short256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/7 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/Short256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/Short256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short256VectorTests 
TIME:   506.992 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short256VectorTests 
started: Wed Apr 16 21:49:17 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1656439
finished: Wed Apr 16 21:57:44 IST 2025
elapsed time (seconds): 506.992
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -189228202004316558
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-189228202004316558" to command line.
test Short256VectorTests.ABSMaskedShort256VectorTests(short[-i * 5], mask[i % 2]): success [770ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i * 5], mask[i % 2]): success [9ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i + 1], mask[i % 2]): success [97ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [9ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[-i * 5], mask[true]): success [132ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i * 5], mask[true]): success [19ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i + 1], mask[true]): success [3ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[-i * 5], mask[false]): success [2ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i * 5], mask[false]): success [2ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[i + 1], mask[false]): success [2ms]
test Short256VectorTests.ABSMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short256VectorTests.ABSShort256VectorTests(short[-i * 5]): success [153ms]
test Short256VectorTests.ABSShort256VectorTests(short[i * 5]): success [11ms]
test Short256VectorTests.ABSShort256VectorTests(short[i + 1]): success [52ms]
test Short256VectorTests.ABSShort256VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ADDReduceLongShort256VectorTests(short[-i * 5]): success [66ms]
test Short256VectorTests.ADDReduceLongShort256VectorTests(short[i * 5]): success [20ms]
test Short256VectorTests.ADDReduceLongShort256VectorTests(short[i + 1]): success [2ms]
test Short256VectorTests.ADDReduceLongShort256VectorTests(short[cornerCaseValue(i)]): success [4ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[-i * 5], mask[i % 2]): success [11ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[-i * 5], mask[true]): success [14ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[-i * 5], mask[false]): success [12ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.ADDReduceLongShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.ADDReduceShort256VectorTests(short[-i * 5]): success [142ms]
test Short256VectorTests.ADDReduceShort256VectorTests(short[i * 5]): success [66ms]
test Short256VectorTests.ADDReduceShort256VectorTests(short[i + 1]): success [3ms]
test Short256VectorTests.ADDReduceShort256VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[-i * 5], mask[i % 2]): success [50ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i * 5], mask[i % 2]): success [88ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i + 1], mask[i % 2]): success [5ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[-i * 5], mask[true]): success [44ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i * 5], mask[true]): success [4ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i + 1], mask[true]): success [5ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[-i * 5], mask[false]): success [4ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i * 5], mask[false]): success [4ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[i + 1], mask[false]): success [4ms]
test Short256VectorTests.ADDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short256VectorTests.ADDShort256VectorTests(short[-i * 5], short[i * 5]): success [361ms]
test Short256VectorTests.ADDShort256VectorTests(short[-i * 5], short[i + 1]): success [5ms]
test Short256VectorTests.ADDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [81ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [15ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [22ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [6ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [72ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.ADDShort256VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [140ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [87ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [7ms]
test Short256VectorTests.ADDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [5ms]
test Short256VectorTests.ANDReduceShort256VectorTests(short[-i * 5]): success [106ms]
test Short256VectorTests.ANDReduceShort256VectorTests(short[i * 5]): success [65ms]
test Short256VectorTests.ANDReduceShort256VectorTests(short[i + 1]): success [3ms]
test Short256VectorTests.ANDReduceShort256VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[-i * 5], mask[i % 2]): success [24ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i * 5], mask[i % 2]): success [85ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i + 1], mask[i % 2]): success [3ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [29ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[-i * 5], mask[true]): success [15ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i * 5], mask[true]): success [3ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i + 1], mask[true]): success [3ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i * 5], mask[false]): success [3ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[i + 1], mask[false]): success [4ms]
test Short256VectorTests.ANDReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short256VectorTests.ANDShort256VectorTests(short[-i * 5], short[i * 5]): success [343ms]
test Short256VectorTests.ANDShort256VectorTests(short[-i * 5], short[i + 1]): success [7ms]
test Short256VectorTests.ANDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [82ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [17ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [3ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [10ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [7ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [89ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [6ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [42ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [5ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [5ms]
test Short256VectorTests.ANDShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [6ms]
test Short256VectorTests.AND_NOTShort256VectorTests(short[-i * 5], short[i * 5]): success [465ms]
test Short256VectorTests.AND_NOTShort256VectorTests(short[-i * 5], short[i + 1]): success [107ms]
test Short256VectorTests.AND_NOTShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [238ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [162ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [93ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [217ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [93ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [93ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [94ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [93ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [143ms]
test Short256VectorTests.AND_NOTShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [93ms]
test Short256VectorTests.ASHRShort256VectorTests(short[-i * 5], short[i * 5]): success [274ms]
test Short256VectorTests.ASHRShort256VectorTests(short[-i * 5], short[i + 1]): success [93ms]
test Short256VectorTests.ASHRShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [239ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [245ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [94ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [219ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [96ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [95ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [96ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [94ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [94ms]
test Short256VectorTests.ASHRShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [95ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [285ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [6ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [69ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftConst(short[-i * 5]): success [55ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftConst(short[i * 5]): success [6ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftConst(short[i + 1]): success [60ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [136ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [6ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [69ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [12ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [6ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [61ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [8ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [4ms]
test Short256VectorTests.ASHRShort256VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [96ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [13ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [174ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [11ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [10ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [391ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [5ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [103ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [2ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [7ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [5ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [45ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [89ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLENDShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.BITWISE_BLE

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

i * 5], short[cornerCaseValue(i)]): success [108ms]
test Short256VectorTests.UMINShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [13ms]
test Short256VectorTests.UMINShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [6ms]
test Short256VectorTests.UMINShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [88ms]
test Short256VectorTests.UMINShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short256VectorTests.UMINShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.UMINShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short256VectorTests.UMINShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short256VectorTests.UMINShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [4ms]
test Short256VectorTests.UMINShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short256VectorTests.VectorShapeShort256VectorTestsSmokeTest(): success [0ms]
test Short256VectorTests.VectorTypeShort256VectorTestsSmokeTest(): success [0ms]
test Short256VectorTests.WithLanesShort256VectorTestsSmokeTest(): success [0ms]
test Short256VectorTests.WithShapeShort256VectorTestsSmokeTest(): success [0ms]
test Short256VectorTests.XORReduceShort256VectorTests(short[-i * 5]): success [70ms]
test Short256VectorTests.XORReduceShort256VectorTests(short[i * 5]): success [66ms]
test Short256VectorTests.XORReduceShort256VectorTests(short[i + 1]): success [3ms]
test Short256VectorTests.XORReduceShort256VectorTests(short[cornerCaseValue(i)]): success [23ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[-i * 5], mask[i % 2]): success [17ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[i * 5], mask[i % 2]): success [86ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[i + 1], mask[i % 2]): success [3ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [16ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[-i * 5], mask[true]): success [16ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[i * 5], mask[true]): success [3ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[i + 1], mask[true]): success [3ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[i * 5], mask[false]): success [2ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short256VectorTests.XORReduceShort256VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short256VectorTests.XORShort256VectorTests(short[-i * 5], short[i * 5]): success [13ms]
test Short256VectorTests.XORShort256VectorTests(short[-i * 5], short[i + 1]): success [5ms]
test Short256VectorTests.XORShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [108ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [13ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [87ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short256VectorTests.XORShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[-i * 5], mask[i % 2]): success [501ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i * 5], mask[i % 2]): success [443ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i + 1], mask[i % 2]): success [548ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [444ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[-i * 5], mask[true]): success [443ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i * 5], mask[true]): success [444ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i + 1], mask[true]): success [445ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[true]): success [447ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[-i * 5], mask[false]): success [443ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i * 5], mask[false]): success [443ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[i + 1], mask[false]): success [443ms]
test Short256VectorTests.ZOMOMaskedShort256VectorTests(short[cornerCaseValue(i)], mask[false]): success [447ms]
test Short256VectorTests.ZOMOShort256VectorTests(short[-i * 5]): success [398ms]
test Short256VectorTests.ZOMOShort256VectorTests(short[i * 5]): success [310ms]
test Short256VectorTests.ZOMOShort256VectorTests(short[i + 1]): success [431ms]
test Short256VectorTests.ZOMOShort256VectorTests(short[cornerCaseValue(i)]): success [310ms]
test Short256VectorTests.ZeroShort256VectorTests(short[-i * 5]): success [95ms]
test Short256VectorTests.ZeroShort256VectorTests(short[i * 5]): success [80ms]
test Short256VectorTests.ZeroShort256VectorTests(short[i + 1]): success [107ms]
test Short256VectorTests.ZeroShort256VectorTests(short[cornerCaseValue(i)]): success [80ms]
test Short256VectorTests.absShort256VectorTests(short[-i * 5]): success [21ms]
test Short256VectorTests.absShort256VectorTests(short[i * 5]): success [4ms]
test Short256VectorTests.absShort256VectorTests(short[i + 1]): success [75ms]
test Short256VectorTests.absShort256VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.addShort256VectorTests(short[-i * 5], short[i * 5]): success [67ms]
test Short256VectorTests.addShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.addShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.addShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [101ms]
test Short256VectorTests.addShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [31ms]
test Short256VectorTests.addShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.addShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.allTrueShort256VectorTests(boolean[i % 2]): success [21ms]
test Short256VectorTests.allTrueShort256VectorTests(boolean[i % 5]): success [21ms]
test Short256VectorTests.andShort256VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short256VectorTests.andShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.andShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.andShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.andShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.andShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.anyTrueShort256VectorTests(boolean[i % 2]): success [11ms]
test Short256VectorTests.anyTrueShort256VectorTests(boolean[i % 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [5ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [51ms]
test Short256VectorTests.bitwiseBlendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [72ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [9ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [71ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [9ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [73ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short256VectorTests.bitwiseBlendShort256VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.bitwiseDivByZeroSmokeTest(): success [12ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [30ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [81ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short256VectorTests.blendShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [127ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [88ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [163ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [89ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [88ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [88ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [89ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [88ms]
test Short256VectorTests.blendShort256VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [89ms]
test Short256VectorTests.compressShort256VectorTests(short[-i * 5], mask[i % 2]): success [374ms]
test Short256VectorTests.compressShort256VectorTests(short[i * 5], mask[i % 2]): success [145ms]
test Short256VectorTests.compressShort256VectorTests(short[i + 1], mask[i % 2]): success [242ms]
test Short256VectorTests.compressShort256VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [144ms]
test Short256VectorTests.compressShort256VectorTests(short[-i * 5], mask[true]): success [162ms]
test Short256VectorTests.compressShort256VectorTests(short[i * 5], mask[true]): success [4ms]
test Short256VectorTests.compressShort256VectorTests(short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.compressShort256VectorTests(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short256VectorTests.compressShort256VectorTests(short[-i * 5], mask[false]): success [9ms]
test Short256VectorTests.compressShort256VectorTests(short[i * 5], mask[false]): success [9ms]
test Short256VectorTests.compressShort256VectorTests(short[i + 1], mask[false]): success [9ms]
test Short256VectorTests.compressShort256VectorTests(short[cornerCaseValue(i)], mask[false]): success [9ms]
test Short256VectorTests.divShort256VectorTests(short[-i * 5], short[i * 5]): success [342ms]
test Short256VectorTests.divShort256VectorTests(short[-i * 5], short[i + 1]): success [234ms]
test Short256VectorTests.divShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [412ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [16ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [136ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [6ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [5ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [21ms]
test Short256VectorTests.divShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [5ms]
test Short256VectorTests.divShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [11ms]
test Short256VectorTests.divShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [3ms]
test Short256VectorTests.divShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [3ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [623ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [484ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [690ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [486ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [487ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [484ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [483ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [484ms]
test Short256VectorTests.divShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [481ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[i]): success [246ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[i - length / 2]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[i + 1]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[i - 2]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[zigZag(i)]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i], short[cornerCaseValue(i)]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[i]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[i - length / 2]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[i + 1]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[i - 2]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[zigZag(i)]): success [146ms]
test Short256VectorTests.eqShort256VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[i]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[i - length / 2]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[i + 1]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[i - 2]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[zigZag(i)]): success [141ms]
test Short256VectorTests.eqShort256VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [152ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[i]): success [140ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[i - length / 2]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[i + 1]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[i - 2]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[zigZag(i)]): success [138ms]
test Short256VectorTests.eqShort256VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[i]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[i - length / 2]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[i + 1]): success [140ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[i - 2]): success [138ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[zigZag(i)]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[i]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [140ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [137ms]
test Short256VectorTests.eqShort256VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [137ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [69ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [4ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [4ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [11ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short256VectorTests.eqShort256VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.expandShort256VectorTests(short[-i * 5], mask[i % 2]): success [362ms]
test Short256VectorTests.expandShort256VectorTests(short[i * 5], mask[i % 2]): success [146ms]
test Short256VectorTests.expandShort256VectorTests(short[i + 1], mask[i % 2]): success [223ms]
test Short256VectorTests.expandShort256VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [146ms]
test Short256VectorTests.expandShort256VectorTests(short[-i * 5], mask[true]): success [151ms]
test Short256VectorTests.expandShort256VectorTests(short[i * 5], mask[true]): success [5ms]
test Short256VectorTests.expandShort256VectorTests(short[i + 1], mask[true]): success [4ms]
test Short256VectorTests.expandShort256VectorTests(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short256VectorTests.expandShort256VectorTests(short[-i * 5], mask[false]): success [9ms]
test Short256VectorTests.expandShort256VectorTests(short[i * 5], mask[false]): success [9ms]
test Short256VectorTests.expandShort256VectorTests(short[i + 1], mask[false]): success [9ms]
test Short256VectorTests.expandShort256VectorTests(short[cornerCaseValue(i)], mask[false]): success [9ms]
test Short256VectorTests.getShort256VectorTests(short[-i * 5]): success [14ms]
test Short256VectorTests.getShort256VectorTests(short[i * 5]): success [14ms]
test Short256VectorTests.getShort256VectorTests(short[i + 1]): success [120ms]
test Short256VectorTests.getShort256VectorTests(short[cornerCaseValue(i)]): success [9ms]
test Short256VectorTests.hashCodeShort256VectorTestsSmokeTest(short[-i * 5]): success [41ms]
test Short256VectorTests.hashCodeShort256VectorTestsSmokeTest(short[i * 5]): success [1ms]
test Short256VectorTests.hashCodeShort256VectorTestsSmokeTest(short[i + 1]): success [1ms]
test Short256VectorTests.hashCodeShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(0): success [74ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(-1): success [4ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(1): success [20ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(2): success [3ms]
test Short256VectorTests.indexInRangeLongShort256VectorTestsSmokeTest(-2): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(0): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(-1): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(1): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(2): success [3ms]
test Short256VectorTests.indexInRangeShort256VectorTestsSmokeTest(-2): success [3ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(0): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(1): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(32): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(37): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(1024): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(1025): success [0ms]
test Short256VectorTests.loopBoundLongShort256VectorTestsSmokeTest(1029): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(0): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(1): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(32): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(37): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(1024): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(1025): success [0ms]
test Short256VectorTests.loopBoundShort256VectorTestsSmokeTest(1029): success [0ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[i]): success [246ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[i - length / 2]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[i + 1]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[i - 2]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[zigZag(i)]): success [152ms]
test Short256VectorTests.ltShort256VectorTests(short[i], short[cornerCaseValue(i)]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[i]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[i - length / 2]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[i + 1]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[i - 2]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[zigZag(i)]): success [140ms]
test Short256VectorTests.ltShort256VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [147ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[i]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[i - length / 2]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[i + 1]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[i - 2]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[zigZag(i)]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[i]): success [141ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[i - length / 2]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[i + 1]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[i - 2]): success [139ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[zigZag(i)]): success [141ms]
test Short256VectorTests.ltShort256VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[i]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[i - length / 2]): success [139ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[i + 1]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[i - 2]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[zigZag(i)]): success [137ms]
test Short256VectorTests.ltShort256VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[i]): success [171ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [138ms]
test Short256VectorTests.ltShort256VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [137ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[i]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [69ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [4ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short256VectorTests.ltShort256VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.maskAndNotShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Short256VectorTests.maskAndNotShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskAndShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Short256VectorTests.maskAndShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskCompressShort256VectorTestsSmokeTest(mask[i % 2]): success [506ms]
test Short256VectorTests.maskCompressShort256VectorTestsSmokeTest(mask[true]): success [332ms]
test Short256VectorTests.maskCompressShort256VectorTestsSmokeTest(mask[false]): success [332ms]
test Short256VectorTests.maskEqShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short256VectorTests.maskEqShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskEqualsShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short256VectorTests.maskEqualsShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskFirstTrueShort256VectorTestsSmokeTest(mask[i % 2]): success [72ms]
test Short256VectorTests.maskFirstTrueShort256VectorTestsSmokeTest(mask[true]): success [93ms]
test Short256VectorTests.maskFirstTrueShort256VectorTestsSmokeTest(mask[false]): success [60ms]
test Short256VectorTests.maskFromToLongShort256VectorTestsSmokeTest(-1): success [63ms]
test Short256VectorTests.maskFromToLongShort256VectorTestsSmokeTest(0): success [0ms]
test Short256VectorTests.maskFromToLongShort256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short256VectorTests.maskFromToLongShort256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short256VectorTests.maskHashCodeShort256VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Short256VectorTests.maskHashCodeShort256VectorTestsSmokeTest(mask[true]): success [4ms]
test Short256VectorTests.maskHashCodeShort256VectorTestsSmokeTest(mask[false]): success [0ms]
test Short256VectorTests.maskLastTrueShort256VectorTestsSmokeTest(mask[i % 2]): success [111ms]
test Short256VectorTests.maskLastTrueShort256VectorTestsSmokeTest(mask[true]): success [93ms]
test Short256VectorTests.maskLastTrueShort256VectorTestsSmokeTest(mask[false]): success [79ms]
test Short256VectorTests.maskOrShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Short256VectorTests.maskOrShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maskTrueCountShort256VectorTestsSmokeTest(mask[i % 2]): success [69ms]
test Short256VectorTests.maskTrueCountShort256VectorTestsSmokeTest(mask[true]): success [93ms]
test Short256VectorTests.maskTrueCountShort256VectorTestsSmokeTest(mask[false]): success [61ms]
test Short256VectorTests.maskXorShort256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Short256VectorTests.maskXorShort256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short256VectorTests.maxShort256VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.maxShort256VectorTests(short[-i * 5], short[i + 1]): success [5ms]
test Short256VectorTests.maxShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.maxShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.maxShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.maxShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.minShort256VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short256VectorTests.minShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.minShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.minShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.minShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.minShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.mulShort256VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short256VectorTests.mulShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.mulShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.mulShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.negShort256VectorTests(short[-i * 5]): success [16ms]
test Short256VectorTests.negShort256VectorTests(short[i * 5]): success [4ms]
test Short256VectorTests.negShort256VectorTests(short[i + 1]): success [74ms]
test Short256VectorTests.negShort256VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short256VectorTests.notShort256VectorTests(short[-i * 5]): success [106ms]
test Short256VectorTests.notShort256VectorTests(short[i * 5]): success [88ms]
test Short256VectorTests.notShort256VectorTests(short[i + 1]): success [190ms]
test Short256VectorTests.notShort256VectorTests(short[cornerCaseValue(i)]): success [88ms]
test Short256VectorTests.orShort256VectorTests(short[-i * 5], short[i * 5]): success [8ms]
test Short256VectorTests.orShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.orShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.orShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.orShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [2ms]
test Short256VectorTests.orShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.shuffleEqualsShort256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [477ms]
test Short256VectorTests.shuffleEqualsShort256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [114ms]
test Short256VectorTests.shuffleMiscellaneousShort256VectorTestsSmokeTest(shuffle[random]): success [205ms]
test Short256VectorTests.shuffleTest(): success [637ms]
test Short256VectorTests.shuffleToStringShort256VectorTestsSmokeTest(shuffle[random]): success [54ms]
test Short256VectorTests.sliceBinaryShort256VectorTestsBinary(short[-i * 5], short[i * 5]): success [1319ms]
test Short256VectorTests.sliceBinaryShort256VectorTestsBinary(short[-i * 5], short[i + 1]): success [669ms]
test Short256VectorTests.sliceBinaryShort256VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [1144ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [933ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [786ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1419ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [804ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [769ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [770ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [767ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [782ms]
test Short256VectorTests.sliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [767ms]
test Short256VectorTests.sliceUnaryShort256VectorTests(short[-i * 5]): success [886ms]
test Short256VectorTests.sliceUnaryShort256VectorTests(short[i * 5]): success [632ms]
test Short256VectorTests.sliceUnaryShort256VectorTests(short[i + 1]): success [993ms]
test Short256VectorTests.sliceUnaryShort256VectorTests(short[cornerCaseValue(i)]): success [661ms]
test Short256VectorTests.smokeTest1(): success [0ms]
test Short256VectorTests.smokeTest2(): success [89ms]
test Short256VectorTests.subShort256VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short256VectorTests.subShort256VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short256VectorTests.subShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short256VectorTests.subShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short256VectorTests.subShort256VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short256VectorTests.subShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short256VectorTests.toDoubleArrayShort256VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short256VectorTests.toDoubleArrayShort256VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short256VectorTests.toDoubleArrayShort256VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short256VectorTests.toDoubleArrayShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short256VectorTests.toIntArrayShort256VectorTestsSmokeTest(short[-i * 5]): success [1ms]
test Short256VectorTests.toIntArrayShort256VectorTestsSmokeTest(short[i * 5]): success [2ms]
test Short256VectorTests.toIntArrayShort256VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short256VectorTests.toIntArrayShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [8ms]
test Short256VectorTests.toLongArrayShort256VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short256VectorTests.toLongArrayShort256VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short256VectorTests.toLongArrayShort256VectorTestsSmokeTest(short[i + 1]): success [2ms]
test Short256VectorTests.toLongArrayShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [16ms]
test Short256VectorTests.toStringShort256VectorTestsSmokeTest(short[-i * 5]): success [8ms]
test Short256VectorTests.toStringShort256VectorTestsSmokeTest(short[i * 5]): success [13ms]
test Short256VectorTests.toStringShort256VectorTestsSmokeTest(short[i + 1]): success [13ms]
test Short256VectorTests.toStringShort256VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [36ms]
test Short256VectorTests.unsliceBinaryShort256VectorTestsBinary(short[-i * 5], short[i * 5]): success [980ms]
test Short256VectorTests.unsliceBinaryShort256VectorTestsBinary(short[-i * 5], short[i + 1]): success [666ms]
test Short256VectorTests.unsliceBinaryShort256VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [1364ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [2188ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [1332ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2554ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [1339ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [1482ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1764ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1442ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1340ms]
test Short256VectorTests.unsliceShort256VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1340ms]
test Short256VectorTests.unsliceUnaryShort256VectorTests(short[-i * 5]): success [872ms]
test Short256VectorTests.unsliceUnaryShort256VectorTests(short[i * 5]): success [629ms]
test Short256VectorTests.unsliceUnaryShort256VectorTests(short[i + 1]): success [923ms]
test Short256VectorTests.unsliceUnaryShort256VectorTests(short[cornerCaseValue(i)]): success [830ms]
test Short256VectorTests.viewAsFloatingLanesTest(): success [24ms]
test Short256VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Short256VectorTests.withShort256VectorTests(short[-i * 5], short[i * 5]): success [31ms]
test Short256VectorTests.withShort256VectorTests(short[-i * 5], short[i + 1]): success [19ms]
test Short256VectorTests.withShort256VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [232ms]

===============================================
jdk/incubator/vector/Short256VectorTests.java
Total tests run: 3598, Passes: 3597, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/7 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/Short256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/Short256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Short256VectorTests.d/testng.0.jta jdk/incubator/vector/Short256VectorTests.java false Short256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Short512VectorTests.java
Passed: jdk/incubator/vector/Vector256ConversionTests.java
TEST: jdk/incubator/vector/Short64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.837 seconds
messages:
command: build Short64VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 21:50:15 IST 2025
Test directory:
  compile: Short64VectorTests
finished: Wed Apr 16 21:50:15 IST 2025
elapsed time (seconds): 0.837

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.837 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 21:50:15 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 3
Process id: 1651672
finished: Wed Apr 16 21:50:15 IST 2025
elapsed time (seconds): 0.837
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Short64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Short64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Short64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short64VectorTests 
TIME:   650.705 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short64VectorTests 
started: Wed Apr 16 21:50:15 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1656667
finished: Wed Apr 16 22:01:06 IST 2025
elapsed time (seconds): 650.705
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -7830778014826128929
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-7830778014826128929" to command line.
test Short64VectorTests.ABSMaskedShort64VectorTests(short[-i * 5], mask[i % 2]): success [629ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i * 5], mask[i % 2]): success [30ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i + 1], mask[i % 2]): success [43ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [30ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[-i * 5], mask[true]): success [29ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i * 5], mask[true]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i + 1], mask[true]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[-i * 5], mask[false]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[i + 1], mask[false]): success [2ms]
test Short64VectorTests.ABSMaskedShort64VectorTests(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short64VectorTests.ABSShort64VectorTests(short[-i * 5]): success [132ms]
test Short64VectorTests.ABSShort64VectorTests(short[i * 5]): success [8ms]
test Short64VectorTests.ABSShort64VectorTests(short[i + 1]): success [41ms]
test Short64VectorTests.ABSShort64VectorTests(short[cornerCaseValue(i)]): success [23ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[-i * 5]): success [87ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[i * 5]): success [2ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[i + 1]): success [3ms]
test Short64VectorTests.ADDReduceLongShort64VectorTests(short[cornerCaseValue(i)]): success [12ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[-i * 5], mask[i % 2]): success [13ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i * 5], mask[i % 2]): success [2ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i + 1], mask[i % 2]): success [2ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[-i * 5], mask[true]): success [4ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i * 5], mask[true]): success [12ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i + 1], mask[true]): success [1ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[-i * 5], mask[false]): success [1ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i * 5], mask[false]): success [10ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[i + 1], mask[false]): success [63ms]
test Short64VectorTests.ADDReduceLongShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[-i * 5]): success [131ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[i * 5]): success [4ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[i + 1]): success [87ms]
test Short64VectorTests.ADDReduceShort64VectorTests(short[cornerCaseValue(i)]): success [66ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[-i * 5], mask[i % 2]): success [98ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i * 5], mask[i % 2]): success [6ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i + 1], mask[i % 2]): success [5ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [86ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[-i * 5], mask[true]): success [42ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i * 5], mask[true]): success [5ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i + 1], mask[true]): success [16ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short64VectorTests.ADDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short64VectorTests.ADDShort64VectorTests(short[-i * 5], short[i * 5]): success [258ms]
test Short64VectorTests.ADDShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ADDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [53ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [17ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [26ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [6ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [6ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [14ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [33ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [9ms]
test Short64VectorTests.ADDShort64VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [148ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [60ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short64VectorTests.ADDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[-i * 5]): success [141ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[i * 5]): success [3ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[i + 1]): success [4ms]
test Short64VectorTests.ANDReduceShort64VectorTests(short[cornerCaseValue(i)]): success [62ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[-i * 5], mask[i % 2]): success [99ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i * 5], mask[i % 2]): success [6ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i + 1], mask[i % 2]): success [6ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [75ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[-i * 5], mask[true]): success [75ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i * 5], mask[true]): success [6ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i + 1], mask[true]): success [5ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[-i * 5], mask[false]): success [5ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i * 5], mask[false]): success [5ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[i + 1], mask[false]): success [5ms]
test Short64VectorTests.ANDReduceShort64VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [43ms]
test Short64VectorTests.ANDShort64VectorTests(short[-i * 5], short[i * 5]): success [156ms]
test Short64VectorTests.ANDShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ANDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [54ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [20ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [2ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [37ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [21ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [84ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [31ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [33ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [39ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short64VectorTests.ANDShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short64VectorTests.AND_NOTShort64VectorTests(short[-i * 5], short[i * 5]): success [217ms]
test Short64VectorTests.AND_NOTShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.AND_NOTShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [62ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [142ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [74ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [77ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short64VectorTests.AND_NOTShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short64VectorTests.ASHRShort64VectorTests(short[-i * 5], short[i * 5]): success [166ms]
test Short64VectorTests.ASHRShort64VectorTests(short[-i * 5], short[i + 1]): success [3ms]
test Short64VectorTests.ASHRShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [59ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [173ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [37ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short64VectorTests.ASHRShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [247ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [57ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[-i * 5]): success [89ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[i * 5]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[i + 1]): success [52ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [119ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [57ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [6ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [63ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [106ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [53ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [58ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [46ms]
test Short64VectorTests.ASHRShort64VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [24ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [194ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [39ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [95ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [434ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [4ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [103ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [81ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [11ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [9ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [45ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [22ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [4ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.BITWISE_BLENDShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.B

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

 success [0ms]
test Short64VectorTests.addShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [76ms]
test Short64VectorTests.addShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [39ms]
test Short64VectorTests.addShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [8ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.addShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.allTrueShort64VectorTests(boolean[i % 2]): success [26ms]
test Short64VectorTests.allTrueShort64VectorTests(boolean[i % 5]): success [21ms]
test Short64VectorTests.andShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.andShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.andShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.andShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short64VectorTests.andShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short64VectorTests.andShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.anyTrueShort64VectorTests(boolean[i % 2]): success [7ms]
test Short64VectorTests.anyTrueShort64VectorTests(boolean[i % 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [6ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [43ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [55ms]
test Short64VectorTests.bitwiseBlendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [8ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [70ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [15ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [9ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [67ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [15ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [8ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [68ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [15ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short64VectorTests.bitwiseBlendShort64VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.bitwiseDivByZeroSmokeTest(): success [14ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [93ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [29ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i * 5], mask[true]): success [62ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short64VectorTests.blendShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [106ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [31ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [32ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short64VectorTests.blendShort64VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short64VectorTests.compressShort64VectorTests(short[-i * 5], mask[i % 2]): success [313ms]
test Short64VectorTests.compressShort64VectorTests(short[i * 5], mask[i % 2]): success [146ms]
test Short64VectorTests.compressShort64VectorTests(short[i + 1], mask[i % 2]): success [178ms]
test Short64VectorTests.compressShort64VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [145ms]
test Short64VectorTests.compressShort64VectorTests(short[-i * 5], mask[true]): success [89ms]
test Short64VectorTests.compressShort64VectorTests(short[i * 5], mask[true]): success [11ms]
test Short64VectorTests.compressShort64VectorTests(short[i + 1], mask[true]): success [12ms]
test Short64VectorTests.compressShort64VectorTests(short[cornerCaseValue(i)], mask[true]): success [11ms]
test Short64VectorTests.compressShort64VectorTests(short[-i * 5], mask[false]): success [16ms]
test Short64VectorTests.compressShort64VectorTests(short[i * 5], mask[false]): success [78ms]
test Short64VectorTests.compressShort64VectorTests(short[i + 1], mask[false]): success [15ms]
test Short64VectorTests.compressShort64VectorTests(short[cornerCaseValue(i)], mask[false]): success [15ms]
test Short64VectorTests.divShort64VectorTests(short[-i * 5], short[i * 5]): success [366ms]
test Short64VectorTests.divShort64VectorTests(short[-i * 5], short[i + 1]): success [212ms]
test Short64VectorTests.divShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [212ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [112ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [20ms]
test Short64VectorTests.divShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short64VectorTests.divShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [12ms]
test Short64VectorTests.divShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [2ms]
test Short64VectorTests.divShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [654ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [470ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [416ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [438ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [492ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [416ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [418ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [415ms]
test Short64VectorTests.divShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [416ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i]): success [305ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i - length / 2]): success [206ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i + 1]): success [201ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[i - 2]): success [202ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[zigZag(i)]): success [203ms]
test Short64VectorTests.eqShort64VectorTests(short[i], short[cornerCaseValue(i)]): success [201ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i]): success [202ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i - length / 2]): success [202ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i + 1]): success [203ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[i - 2]): success [206ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[zigZag(i)]): success [201ms]
test Short64VectorTests.eqShort64VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [202ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i]): success [202ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i - length / 2]): success [202ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i + 1]): success [202ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[i - 2]): success [201ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[zigZag(i)]): success [203ms]
test Short64VectorTests.eqShort64VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [202ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i]): success [201ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i - length / 2]): success [206ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i + 1]): success [202ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[i - 2]): success [202ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[zigZag(i)]): success [203ms]
test Short64VectorTests.eqShort64VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [203ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i]): success [202ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i - length / 2]): success [203ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i + 1]): success [203ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[i - 2]): success [203ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[zigZag(i)]): success [215ms]
test Short64VectorTests.eqShort64VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [202ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i]): success [203ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [201ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [202ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [203ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [203ms]
test Short64VectorTests.eqShort64VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [202ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [59ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [32ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [10ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [1ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short64VectorTests.eqShort64VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.expandShort64VectorTests(short[-i * 5], mask[i % 2]): success [273ms]
test Short64VectorTests.expandShort64VectorTests(short[i * 5], mask[i % 2]): success [148ms]
test Short64VectorTests.expandShort64VectorTests(short[i + 1], mask[i % 2]): success [147ms]
test Short64VectorTests.expandShort64VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [181ms]
test Short64VectorTests.expandShort64VectorTests(short[-i * 5], mask[true]): success [34ms]
test Short64VectorTests.expandShort64VectorTests(short[i * 5], mask[true]): success [12ms]
test Short64VectorTests.expandShort64VectorTests(short[i + 1], mask[true]): success [12ms]
test Short64VectorTests.expandShort64VectorTests(short[cornerCaseValue(i)], mask[true]): success [12ms]
test Short64VectorTests.expandShort64VectorTests(short[-i * 5], mask[false]): success [16ms]
test Short64VectorTests.expandShort64VectorTests(short[i * 5], mask[false]): success [16ms]
test Short64VectorTests.expandShort64VectorTests(short[i + 1], mask[false]): success [77ms]
test Short64VectorTests.expandShort64VectorTests(short[cornerCaseValue(i)], mask[false]): success [16ms]
test Short64VectorTests.getShort64VectorTests(short[-i * 5]): success [55ms]
test Short64VectorTests.getShort64VectorTests(short[i * 5]): success [0ms]
test Short64VectorTests.getShort64VectorTests(short[i + 1]): success [0ms]
test Short64VectorTests.getShort64VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[-i * 5]): success [15ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[i * 5]): success [11ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[i + 1]): success [23ms]
test Short64VectorTests.hashCodeShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [10ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(0): success [93ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(-1): success [7ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(1): success [28ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(2): success [7ms]
test Short64VectorTests.indexInRangeLongShort64VectorTestsSmokeTest(-2): success [7ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(0): success [7ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(-1): success [7ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(1): success [7ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(2): success [17ms]
test Short64VectorTests.indexInRangeShort64VectorTestsSmokeTest(-2): success [6ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(0): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(32): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(37): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1024): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1025): success [0ms]
test Short64VectorTests.loopBoundLongShort64VectorTestsSmokeTest(1029): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(0): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(32): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(37): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1024): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1025): success [0ms]
test Short64VectorTests.loopBoundShort64VectorTestsSmokeTest(1029): success [0ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i]): success [312ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i - length / 2]): success [201ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i + 1]): success [203ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[i - 2]): success [207ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[zigZag(i)]): success [205ms]
test Short64VectorTests.ltShort64VectorTests(short[i], short[cornerCaseValue(i)]): success [204ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i]): success [202ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i - length / 2]): success [202ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i + 1]): success [203ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[i - 2]): success [202ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[zigZag(i)]): success [202ms]
test Short64VectorTests.ltShort64VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [203ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i]): success [203ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i - length / 2]): success [207ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i + 1]): success [203ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[i - 2]): success [202ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[zigZag(i)]): success [202ms]
test Short64VectorTests.ltShort64VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [204ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i]): success [206ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i - length / 2]): success [206ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i + 1]): success [205ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[i - 2]): success [206ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[zigZag(i)]): success [221ms]
test Short64VectorTests.ltShort64VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [202ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i]): success [207ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i - length / 2]): success [204ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i + 1]): success [203ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[i - 2]): success [203ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[zigZag(i)]): success [202ms]
test Short64VectorTests.ltShort64VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [204ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i]): success [234ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [202ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [203ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [204ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [203ms]
test Short64VectorTests.ltShort64VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [202ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [59ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [31ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short64VectorTests.ltShort64VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.maskAndNotShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test Short64VectorTests.maskAndNotShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskAndShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Short64VectorTests.maskAndShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskCompressShort64VectorTestsSmokeTest(mask[i % 2]): success [257ms]
test Short64VectorTests.maskCompressShort64VectorTestsSmokeTest(mask[true]): success [120ms]
test Short64VectorTests.maskCompressShort64VectorTestsSmokeTest(mask[false]): success [82ms]
test Short64VectorTests.maskEqShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Short64VectorTests.maskEqShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskEqualsShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short64VectorTests.maskEqualsShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskFirstTrueShort64VectorTestsSmokeTest(mask[i % 2]): success [41ms]
test Short64VectorTests.maskFirstTrueShort64VectorTestsSmokeTest(mask[true]): success [59ms]
test Short64VectorTests.maskFirstTrueShort64VectorTestsSmokeTest(mask[false]): success [27ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(-1): success [80ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(0): success [0ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short64VectorTests.maskFromToLongShort64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short64VectorTests.maskHashCodeShort64VectorTestsSmokeTest(mask[i % 2]): success [5ms]
test Short64VectorTests.maskHashCodeShort64VectorTestsSmokeTest(mask[true]): success [0ms]
test Short64VectorTests.maskHashCodeShort64VectorTestsSmokeTest(mask[false]): success [0ms]
test Short64VectorTests.maskLastTrueShort64VectorTestsSmokeTest(mask[i % 2]): success [74ms]
test Short64VectorTests.maskLastTrueShort64VectorTestsSmokeTest(mask[true]): success [59ms]
test Short64VectorTests.maskLastTrueShort64VectorTestsSmokeTest(mask[false]): success [41ms]
test Short64VectorTests.maskOrShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [23ms]
test Short64VectorTests.maskOrShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maskTrueCountShort64VectorTestsSmokeTest(mask[i % 2]): success [36ms]
test Short64VectorTests.maskTrueCountShort64VectorTestsSmokeTest(mask[true]): success [59ms]
test Short64VectorTests.maskTrueCountShort64VectorTestsSmokeTest(mask[false]): success [27ms]
test Short64VectorTests.maskXorShort64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short64VectorTests.maskXorShort64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short64VectorTests.maxShort64VectorTests(short[-i * 5], short[i * 5]): success [8ms]
test Short64VectorTests.maxShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.maxShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.maxShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.maxShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short64VectorTests.maxShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.minShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.minShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.minShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.minShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.minShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short64VectorTests.minShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.mulShort64VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.mulShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.mulShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.mulShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.negShort64VectorTests(short[-i * 5]): success [53ms]
test Short64VectorTests.negShort64VectorTests(short[i * 5]): success [0ms]
test Short64VectorTests.negShort64VectorTests(short[i + 1]): success [40ms]
test Short64VectorTests.negShort64VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.notShort64VectorTests(short[-i * 5]): success [62ms]
test Short64VectorTests.notShort64VectorTests(short[i * 5]): success [21ms]
test Short64VectorTests.notShort64VectorTests(short[i + 1]): success [0ms]
test Short64VectorTests.notShort64VectorTests(short[cornerCaseValue(i)]): success [47ms]
test Short64VectorTests.orShort64VectorTests(short[-i * 5], short[i * 5]): success [9ms]
test Short64VectorTests.orShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.orShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.orShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.orShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.orShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.shuffleEqualsShort64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [727ms]
test Short64VectorTests.shuffleEqualsShort64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [179ms]
test Short64VectorTests.shuffleMiscellaneousShort64VectorTestsSmokeTest(shuffle[random]): success [275ms]
test Short64VectorTests.shuffleTest(): success [351ms]
test Short64VectorTests.shuffleToStringShort64VectorTestsSmokeTest(shuffle[random]): success [178ms]
test Short64VectorTests.sliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i * 5]): success [756ms]
test Short64VectorTests.sliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i + 1]): success [209ms]
test Short64VectorTests.sliceBinaryShort64VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [291ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [482ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [339ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [214ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [313ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [215ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [213ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [213ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [243ms]
test Short64VectorTests.sliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [321ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[-i * 5]): success [467ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[i * 5]): success [271ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[i + 1]): success [204ms]
test Short64VectorTests.sliceUnaryShort64VectorTests(short[cornerCaseValue(i)]): success [204ms]
test Short64VectorTests.smokeTest1(): success [0ms]
test Short64VectorTests.smokeTest2(): success [112ms]
test Short64VectorTests.subShort64VectorTests(short[-i * 5], short[i * 5]): success [8ms]
test Short64VectorTests.subShort64VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.subShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [7ms]
test Short64VectorTests.subShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short64VectorTests.subShort64VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short64VectorTests.subShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short64VectorTests.toDoubleArrayShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[-i * 5]): success [8ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short64VectorTests.toIntArrayShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [1ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[-i * 5]): success [22ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short64VectorTests.toLongArrayShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[-i * 5]): success [9ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[i * 5]): success [27ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[i + 1]): success [54ms]
test Short64VectorTests.toStringShort64VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short64VectorTests.unsliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i * 5]): success [505ms]
test Short64VectorTests.unsliceBinaryShort64VectorTestsBinary(short[-i * 5], short[i + 1]): success [206ms]
test Short64VectorTests.unsliceBinaryShort64VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [422ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [1104ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [412ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [487ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [415ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [417ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [565ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [415ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [429ms]
test Short64VectorTests.unsliceShort64VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [414ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[-i * 5]): success [460ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[i * 5]): success [204ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[i + 1]): success [204ms]
test Short64VectorTests.unsliceUnaryShort64VectorTests(short[cornerCaseValue(i)]): success [279ms]
test Short64VectorTests.viewAsFloatingLanesTest(): success [29ms]
test Short64VectorTests.viewAsIntegeralLanesTest(): success [7ms]
test Short64VectorTests.withShort64VectorTests(short[-i * 5], short[i * 5]): success [130ms]
test Short64VectorTests.withShort64VectorTests(short[-i * 5], short[i + 1]): success [64ms]
test Short64VectorTests.withShort64VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [65ms]

===============================================
jdk/incubator/vector/Short64VectorTests.java
Total tests run: 3598, Passes: 3597, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Short64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/jdk/incubator/vector/Short64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/10/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Short64VectorTests.d/testng.0.jta jdk/incubator/vector/Short64VectorTests.java false Short64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Vector128ConversionTests.java
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#id0
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#Z
TEST: jdk/incubator/vector/VectorReshapeTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   3.892 seconds
messages:
command: build VectorReshapeTests
reason: Named class compiled on demand
started: Wed Apr 16 21:54:23 IST 2025
Test directory:
  compile: VectorReshapeTests
finished: Wed Apr 16 21:54:27 IST 2025
elapsed time (seconds): 3.892

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   3.891 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 21:54:23 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 1
Process id: 1651615
finished: Wed Apr 16 21:54:27 IST 2025
elapsed time (seconds): 3.891
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/VectorReshapeTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/VectorReshapeTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 8
REASON: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
TIME:   911.577 seconds
messages:
command: testng --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests
reason: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
started: Wed Apr 16 21:54:27 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1657341
finished: Wed Apr 16 22:09:39 IST 2025
elapsed time (seconds): 911.577
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorReshapeTests.testCastFromByte(byte(i)): success [40863ms]
test VectorReshapeTests.testCastFromDouble(double(i)): success [3401ms]
test VectorReshapeTests.testCastFromFloat(float(i)): success [4146ms]
test VectorReshapeTests.testCastFromInt(int(i)): success [4135ms]
test VectorReshapeTests.testCastFromLong(long(i)): success [3103ms]
test VectorReshapeTests.testCastFromShort(short(i)): success [4002ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[long, 2, S_128_BIT]->Species[byte, 16, S_128_BIT] (lanewise), partLimit=-8, block=2, part=-7, origin=14
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket128(byte(i)): failure [21603ms]
java.lang.AssertionError: arrays differ firstly at element [14]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket128(VectorReshapeTests.java:920)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testRebracket256(byte(i)): success [101229ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64]
Failing with Species[long, 8, S_512_BIT]->Species[short, 32, S_512_BIT] (lanewise), partLimit=-4, block=16, part=-2, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 9, 10, 17, 18, 25, 26, 33, 34, 41, 42, 49, 50, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket512(byte(i)): failure [148782ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket512(VectorReshapeTests.java:1019)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testRebracket64(byte(i)): success [16790ms]
test VectorReshapeTests.testRebracketMax(byte(i)): success [22850ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[byte, 16, S_Max_BIT]->Species[byte, 64, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-1, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeByte(byte(i)): failure [129453ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeByte(VectorReshapeTests.java:465)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
Failing with Species[double, 4, S_256_BIT]->Species[double, 8, S_512_BIT] (lanewise), partLimit=-2, block=32, part=-1, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeDouble(byte(i)): failure [15322ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeDouble(VectorReshapeTests.java:683)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[float, 4, S_Max_BIT]->Species[float, 16, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-1, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeFloat(byte(i)): failure [128667ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeFloat(VectorReshapeTests.java:649)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[int, 2, S_64_BIT]->Species[int, 8, S_256_BIT] (reinterpret), partLimit=-4, block=8, part=-1, origin=8
expect: [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeInt(byte(i)): failure [42698ms]
java.lang.AssertionError: arrays differ firstly at element [8]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeInt(VectorReshapeTests.java:532)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[long, 2, S_Max_BIT]->Species[long, 8, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-2, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeLong(byte(i)): failure [60228ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeLong(VectorReshapeTests.java:603)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[short, 4, S_64_BIT]->Species[short, 32, S_512_BIT] (reinterpret), partLimit=-8, block=8, part=-5, origin=40
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeShort(byte(i)): failure [124847ms]
java.lang.AssertionError: arrays differ firstly at element [40]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeShort(VectorReshapeTests.java:487)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testUCastFromByte(byte(i)): success [22356ms]
test VectorReshapeTests.testUCastFromInt(int(i)): success [1ms]
test VectorReshapeTests.testUCastFromShort(short(i)): success [11332ms]

===============================================
jdk/incubator/vector/VectorReshapeTests.java
Total tests run: 20, Passes: 12, Failures: 8, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 8
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 8
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 8
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/VectorReshapeTests.d/testng.0.jta jdk/incubator/vector/VectorReshapeTests.java false VectorReshapeTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 8
--------------------------------------------------
Passed: jdk/incubator/vector/Vector64ConversionTests.java#id0
Test results: passed: 72; failed: 8; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector
Finished running test 'jtreg:test/jdk:jdk_vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk:jdk_vector                            83    72     8     0     3 <<
==============================
TEST FAILURE

