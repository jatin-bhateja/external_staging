Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_1', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_1
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_1

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Passed: compiler/codegen/Test6797305.java
Passed: compiler/codegen/BMI2.java
Passed: compiler/codegen/BMI1.java
Passed: compiler/codegen/ClearArrayTest.java
Passed: compiler/codegen/IntRotateWithImmediate.java
Passed: compiler/codegen/Test6814842.java
Passed: compiler/codegen/C1NullCheckOfNullStore.java
Passed: compiler/codegen/Test6378821.java
Passed: compiler/codegen/Test6431242.java
Passed: compiler/codegen/ShiftTest.java
Passed: compiler/codegen/ShiftByZero.java
Passed: compiler/codegen/LoadWithMask2.java
Passed: compiler/codegen/LoadWithMask.java
Passed: compiler/codegen/BitTests.java
Passed: compiler/codegen/Test8005033.java
Passed: compiler/codegen/Test8011901.java
Passed: compiler/codegen/TestByteIntVect.java
Passed: compiler/codegen/Test6909839.java
Passed: compiler/codegen/CRCTest.java
Passed: compiler/codegen/BadLogicCode.java
Passed: compiler/codegen/Test7009231.java
Passed: compiler/codegen/TestBooleanVect.java
Passed: compiler/codegen/Test6879902.java
Passed: compiler/codegen/TestConvertImplicitNullCheck.java
Passed: compiler/codegen/TestByteVect.java
Passed: compiler/codegen/TestByteShortVect.java
Passed: compiler/codegen/TestCharShortVect.java
Passed: compiler/codegen/TestCharVect.java
Passed: compiler/codegen/TestDoubleVect.java
Passed: compiler/codegen/TestByteLongVect.java
Passed: compiler/codegen/Test6823354.java
Passed: compiler/codegen/TestCharVect2.java#id0
Passed: compiler/codegen/TestByteDoubleVect.java
Passed: compiler/codegen/TestByteFloatVect.java
Passed: compiler/codegen/Test7100757.java
Passed: compiler/codegen/TestMultiMemInstructionMatching.java
Passed: compiler/codegen/TestLongDoubleVect.java
Passed: compiler/codegen/TestIntFloatVect.java
Passed: compiler/codegen/TestFloatDoubleVect.java
Passed: compiler/codegen/TestShortDoubleVect.java
Passed: compiler/codegen/TestOopCmp.java
Passed: compiler/codegen/TestLongVect.java
Passed: compiler/codegen/TestIntVect.java
Passed: compiler/codegen/TestFloatVect.java
Passed: compiler/loopopts/superword/AlignmentOnePack.java
Passed: compiler/loopopts/superword/CoLocatePack.java
Passed: compiler/loopopts/superword/CoLocatePackMemoryState.java
Passed: compiler/codegen/TestGCMLoadPlacement.java
Passed: compiler/codegen/TestIntDoubleVect.java
Passed: compiler/codegen/TestCharVect2.java#id1
Passed: compiler/codegen/Test6942326.java
Passed: compiler/codegen/TestShortIntVect.java
Passed: compiler/codegen/TestShortFloatVect.java
Passed: compiler/codegen/TestShortLongVect.java
Passed: compiler/codegen/TestLongFloatVect.java
Passed: compiler/codegen/TestIntLongVect.java
Passed: compiler/codegen/TestShortVect.java
Passed: compiler/loopopts/superword/ReductionPerf.java
Passed: compiler/loopopts/superword/MinMaxRed_Int.java
Passed: compiler/codegen/TestSignedMultiplyLong.java
Passed: compiler/loopopts/superword/MinMaxRed_Long.java
Passed: compiler/loopopts/superword/SuperWordIntermediateUse.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage.java
Passed: compiler/loopopts/superword/TestAlignVector.java#AlignVector
Passed: compiler/loopopts/superword/TestAlignVector.java#NoAlignVector
Passed: compiler/loopopts/superword/TestAlignVector.java#VerifyAlignVector
Passed: compiler/loopopts/superword/SumRed_Long.java
Passed: compiler/loopopts/superword/RedTest_long.java
Passed: compiler/loopopts/superword/TestBestAlign.java
Passed: compiler/loopopts/superword/TestCmpInvar.java
Passed: compiler/loopopts/superword/RedTest_int.java
Passed: compiler/loopopts/superword/TestCompatibleUseDefTypeSize.java
Passed: compiler/loopopts/superword/TestCyclicDependency.java
Passed: compiler/loopopts/superword/ProdRed_Int.java
Passed: compiler/loopopts/superword/SumRed_Int.java
Passed: compiler/loopopts/superword/TestEliminateAllocationWithCastP2XUse.java
Passed: compiler/loopopts/superword/TestFuzzPreLoop.java
Passed: compiler/loopopts/superword/SumRed_Float.java
Passed: compiler/loopopts/superword/TestHoistedReductionNode.java
Passed: compiler/loopopts/superword/TestIndependentPacksWithCyclicDependency2.java
Passed: compiler/loopopts/superword/TestGeneralizedReductions.java
Passed: compiler/loopopts/superword/ProdRed_Float.java
Passed: compiler/loopopts/superword/TestLargeCompilation.java
Passed: compiler/loopopts/superword/SumRedAbsNeg_Double.java
Passed: compiler/loopopts/superword/SumRed_Double.java
Passed: compiler/loopopts/superword/ProdRed_Double.java
Passed: compiler/loopopts/superword/SumRedAbsNeg_Float.java
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#Vanilla
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#char-array
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-NoTieredCompilation-Xbatch
Passed: compiler/loopopts/superword/TestMemorySegment.java#float-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestMemorySegment.java#double-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array
Passed: compiler/loopopts/superword/TestMemorySegmentMainLoopAlignment.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-A
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-U
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#native
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-Align16
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#short-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#native-AlignVector
Passed: compiler/loopopts/superword/TestNegBaseOffset.java
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#Vanilla
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-VerifyAlignVector
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithMoreFlags
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array-AlignVector
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithFlags
Passed: compiler/loopopts/superword/TestParallelReduction.java
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-AlignVector
Passed: compiler/loopopts/superword/TestSearchAlignment.java
Passed: compiler/loopopts/superword/TestPeeledReductionNode.java
Passed: compiler/loopopts/superword/TestReductionWithLoopVariantUse.java
Passed: compiler/loopopts/superword/TestMultiversionRemoveUselessSlowLoop.java
Passed: compiler/loopopts/superword/TestPickFirstMemoryState.java
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-VerifyAlignVector
Passed: compiler/loopopts/superword/SumRedSqrt_Double.java
Passed: compiler/loopopts/superword/TestVectorizeTypeConversionWithUnsafe.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize32-Aligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize16-Unaligned
Passed: compiler/loopopts/superword/TestPickLastMemoryState.java
Passed: compiler/loopopts/superword/TestWronglyMarkedReduction.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Unaligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Aligned
Passed: compiler/vectorapi/TestIsLoadVector.java
Passed: compiler/vectorapi/Test8303508.java
Passed: compiler/loopopts/superword/TestVectorizationWithInvariant.java
Passed: compiler/loopopts/superword/TestVectorFPReduction.java
Passed: compiler/vectorapi/TestBiMorphicMismatchedMemSegment.java
Passed: compiler/vectorapi/TestLongVectorNeg.java
Passed: compiler/vectorapi/Test8259353.java
Passed: compiler/vectorapi/TestNoInline.java
Passed: compiler/vectorapi/TestLoopStoreVector.java#id0
Passed: compiler/vectorapi/TestLoopStoreVector.java#id1
Passed: compiler/vectorapi/TestIntrinsicBailOut.java#id0
Passed: compiler/vectorapi/TestVectorErgonomics.java
Passed: compiler/vectorapi/Test8278948.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#StoreToLoadForwardingFailureDetection
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#AlignVector
Passed: compiler/vectorapi/VectorBoxExpandTest.java
Passed: compiler/vectorapi/TestVectorShuffleIota.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#vanilla
Passed: compiler/vectorapi/TestVectorAddMulReduction.java
Passed: compiler/loopopts/superword/TestMovingLoadBeforeStore.java
Passed: compiler/vectorapi/VectorFPtoIntCastTest.java
Passed: compiler/vectorapi/TestVectorShiftImm.java
Passed: compiler/vectorapi/TestVectorShuffleIotaByte.java
Passed: compiler/vectorapi/VectorCommutativeOperSharingTest.java
Passed: compiler/vectorapi/VectorMemoryAlias.java
Passed: compiler/vectorapi/TestReverseByteTransforms.java
Passed: compiler/loopopts/superword/TestEquivalentInvariants.java
Passed: compiler/vectorapi/VectorMaskCastTest.java
Passed: compiler/c2/cr6340864/TestFloatVect.java
Passed: compiler/vectorapi/TestTwoVectorPermute.java
Passed: compiler/c2/cr6340864/TestDoubleVect.java
Passed: compiler/vectorapi/TestRawOopAtSafepoint.java
Passed: compiler/c2/cr6340864/TestByteVect.java
Passed: compiler/c2/cr6340864/TestIntVectRotate.java
Passed: compiler/c2/irTests/blackhole/BlackholeHotInlineTest.java
Passed: compiler/c2/cr6340864/TestIntVect.java
Passed: compiler/c2/cr6340864/TestLongVectRotate.java
Passed: compiler/c2/irTests/blackhole/BlackholeSyncEATest.java
Passed: compiler/c2/irTests/blackhole/BlackholeStoreStoreEATest.java
Passed: compiler/c2/cr6340864/TestShortVect.java
Passed: compiler/c2/irTests/blackhole/BlackholeLoadOptoTest.java
Passed: compiler/c2/irTests/igvn/TestCombineAddPWithConstantOffsets.java
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id0
Passed: compiler/c2/irTests/igvn/TestCleanMemPhi.java
Passed: compiler/c2/irTests/igvn/TestLoadNIdeal.java
Passed: compiler/c2/irTests/loopOpts/LoopIdealizationTests.java
Passed: compiler/c2/cr6340864/TestLongVect.java
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id1
Passed: compiler/vectorapi/VectorCastShape128Test.java
Passed: compiler/vectorapi/VectorGatherMaskFoldingTest.java
Passed: compiler/c2/irTests/igvn/TestIntegerMulRing.java
Passed: compiler/c2/irTests/scalarReplacement/ScalarReplacementTests.java
Passed: compiler/c2/irTests/stringopts/TestNegativeArraySize.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage2.java
Passed: compiler/vectorapi/VectorCastShape64Test.java
Passed: compiler/c2/irTests/AddINodeIdealizationTests.java
Passed: compiler/vectorapi/VectorSaturatedOperationsTest.java
Passed: compiler/c2/irTests/stable/StablePrimFinalTest.java
Passed: compiler/c2/irTests/AndLNodeIdealizationTests.java
Passed: compiler/c2/irTests/AndINodeIdealizationTests.java
Passed: compiler/c2/irTests/CmpUWithZero.java
Passed: compiler/c2/irTests/CMoveLConstants.java
Passed: compiler/vectorapi/VectorMultiplyOpt.java
Passed: compiler/c2/irTests/stable/StablePrimPlainTest.java
Passed: compiler/c2/irTests/stable/StablePrimArrayTest.java
Passed: compiler/c2/irTests/stable/StableRefArrayTest.java
Passed: compiler/c2/irTests/DeMorganLawLongTests.java
Passed: compiler/c2/irTests/AddLNodeIdealizationTests.java
Passed: compiler/c2/irTests/DeMorganLawIntTests.java
Passed: compiler/c2/irTests/stable/StableRefVolatileTest.java
Passed: compiler/c2/irTests/ConstructorBarriers.java
Passed: compiler/c2/irTests/DivINodeIdealizationTests.java
Passed: compiler/c2/irTests/LShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/DivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/LShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/MaxMinINodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StablePrimVolatileTest.java
Passed: compiler/c2/irTests/ModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/ModINodeIdealizationTests.java
Passed: compiler/c2/irTests/ModFNodeTests.java
Passed: compiler/c2/irTests/MulINodeIdealizationTests.java
Passed: compiler/c2/irTests/MulLNodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StableRefPlainTest.java
Passed: compiler/c2/irTests/ModDNodeTests.java
Passed: compiler/c2/irTests/OrINodeIdealizationTests.java
Passed: compiler/c2/irTests/MulHFNodeIdealizationTests.java
Passed: compiler/c2/irTests/OrLNodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StableRefFinalTest.java
Passed: compiler/c2/irTests/RShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/RShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestAutoVecCountingDownLoop.java
Passed: compiler/c2/irTests/TestArrayElementTypeLoad.java
Passed: compiler/c2/irTests/TestBackToBackIfs.java
Passed: compiler/c2/irTests/SubLNodeIdealizationTests.java
Passed: compiler/c2/irTests/SubINodeIdealizationTests.java
Passed: compiler/c2/irTests/TestAutoVectorization2DArray.java
Passed: compiler/c2/irTests/TestBackToBackMustBeNotNull.java
Passed: compiler/c2/irTests/TestCMoveCCP.java
Passed: compiler/c2/irTests/TestConv2BExpansion.java
Passed: compiler/c2/irTests/TestConvI2LCastLongLoop.java
Passed: compiler/c2/irTests/TestEnumFinalFold.java
Passed: compiler/c2/irTests/TestCountedLoopPhiValue.java
Passed: compiler/c2/irTests/TestDebugInfo.java
Passed: compiler/c2/irTests/TestFPConversion.java
Passed: compiler/c2/irTests/TestGetAndAdd.java
Passed: compiler/c2/irTests/TestFPComparison.java
Passed: compiler/c2/irTests/TestFewIterationsCountedLoop.java
Passed: compiler/c2/irTests/TestCountedLoopSafepoint.java
Passed: compiler/c2/irTests/TestIRLShiftIdeal_XPlusX_LShiftC.java
Passed: compiler/c2/irTests/TestIterativeEA.java
Passed: compiler/c2/irTests/TestIRAbs.java
Passed: compiler/c2/irTests/TestMulNodeIdealization.java
Passed: compiler/c2/irTests/TestMinMaxIdentities.java
Passed: compiler/c2/irTests/TestPadding.java
Passed: compiler/c2/irTests/TestOptimizeUnstableIf.java
Passed: compiler/c2/irTests/TestIfMinMax.java
Passed: compiler/c2/irTests/gc/ReferenceClearTests.java
Passed: compiler/c2/irTests/TestPhiDuplicatedConversion.java
Passed: compiler/c2/irTests/TestPushAddThruCast.java
Passed: compiler/c2/irTests/TestIRFma.java
Passed: compiler/c2/irTests/TestScalarReplacement.java
Passed: compiler/c2/irTests/TestRemixAddressExpressions.java
Passed: compiler/c2/irTests/TestLongRangeChecks.java
Passed: compiler/c2/irTests/TestSpecialCasesOf_AMinusB_Plus_CMinusD_InAddIdeal.java
Passed: compiler/c2/irTests/TestScheduleSmallMethod.java
Passed: compiler/c2/irTests/TestPostParseCallDevirtualization.java
Passed: compiler/c2/irTests/gc/ReferenceRefersToTests.java
Passed: compiler/c2/irTests/TestSkeletonPredicates.java
Passed: compiler/c2/irTests/TestLSMMissedEmptyLoop.java
Passed: compiler/c2/irTests/TestShiftAndMask.java
Passed: compiler/c2/irTests/TestVectorizationMultiInvar.java
Passed: compiler/c2/irTests/TestTypeSpeculation.java
Passed: compiler/c2/irTests/TestTestRemovalPeephole.java
Passed: compiler/c2/irTests/TestSuperwordFailsUnrolling.java
Passed: compiler/c2/irTests/TestStripMiningDropsSafepoint.java
Passed: compiler/c2/irTests/TestUnsignedComparison.java
Passed: compiler/c2/irTests/TestFloat16ScalarOperations.java
Passed: compiler/c2/irTests/UDivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/UDivINodeIdealizationTests.java
Passed: compiler/c2/irTests/URShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/UModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/ConvF2HFIdealizationTests.java
Passed: compiler/c2/irTests/UModINodeIdealizationTests.java
Passed: compiler/c2/irTests/URShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/XorINodeIdealizationTests.java
Passed: compiler/c2/irTests/XorLNodeIdealizationTests.java
Passed: compiler/vectorization/runner/ArrayCopyTest.java
Passed: compiler/vectorization/runner/ArrayIndexFillTest.java
Passed: compiler/vectorization/runner/BasicBooleanOpTest.java
Passed: compiler/vectorization/runner/ArrayUnsafeOpTest.java
Passed: compiler/vectorization/runner/ArrayShiftOpTest.java
Passed: compiler/vectorization/runner/BasicByteOpTest.java
Passed: compiler/vectorization/runner/BasicIntOpTest.java
Passed: compiler/vectorization/runner/BasicCharOpTest.java
Passed: compiler/vectorization/runner/BasicLongOpTest.java
Passed: compiler/vectorization/TestAbsCharVector.java
Passed: compiler/vectorization/runner/LoopLiveOutNodesTest.java
Passed: compiler/vectorization/TestCMoveWithoutBoolPack.java
Passed: compiler/vectorization/runner/LoopControlFlowTest.java
Passed: compiler/vectorization/runner/BasicShortOpTest.java
Passed: compiler/c2/irTests/ProfileAtTypeCheck.java
Passed: compiler/vectorization/runner/StripMinedLoopTest.java
Passed: compiler/vectorization/runner/ArrayInvariantFillTest.java
Passed: compiler/vectorization/TestNarrowedIntegerReverseBytes.java
Passed: compiler/vectorization/TestMemoryVectorMismatched.java
Passed: compiler/vectorization/runner/LoopArrayIndexComputeTest.java
Passed: compiler/vectorization/runner/MultipleLoopsTest.java
Passed: compiler/vectorization/runner/LoopReductionOpTest.java
Passed: compiler/vectorization/runner/LoopRangeStrideTest.java
Passed: compiler/vectorization/TestMacroLogicVector.java
Passed: compiler/vectorization/TestOptionVectorize.java
Passed: compiler/vectorization/TestPopCountVector.java
Passed: compiler/vectorization/TestReplicateAtConv.java
Passed: compiler/vectorization/TestOverlappingMismatchedAccesses.java
Passed: compiler/vectorization/TestNaNVector.java
Passed: compiler/vectorization/TestMaskedVectors.java
Passed: compiler/vectorization/TestSmallVectorPopIndex.java
Passed: compiler/vectorization/TestComplexAddrExpr.java
Passed: compiler/vectorization/TestUnexpectedLoadOrdering.java
Passed: compiler/vectorization/TestReplicateLoopIV.java
Passed: compiler/vectorization/TestRotateByteAndShortVector.java
Passed: compiler/vectorization/TestVectorUnalignedOffset.java
Passed: compiler/vectorization/TestOffsetSorting.java
Passed: compiler/vectorization/TestVectorizationNegativeScale.java
Passed: compiler/vectorization/TestFloat16ToFloatConv.java
Passed: compiler/vectorization/TestOptionVectorizeIR.java
Passed: compiler/vectorization/runner/BasicFloatOpTest.java
Passed: compiler/vectorization/TestForEachRem.java
Passed: compiler/vectorization/TestSubwordReverseBytes.java
Passed: compiler/vectorization/TestVectorsNotSavedAtSafepoint.java
Passed: compiler/vectorization/TestBufferVectorization.java
Passed: compiler/vectorization/runner/BasicDoubleOpTest.java
Passed: compiler/vectorization/TestVectorZeroCount.java
--------------------------------------------------
TEST: compiler/vectorapi/TestMaskedMacroLogicVector.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.895 seconds
messages:
command: build compiler.vectorapi.TestMaskedMacroLogicVector
reason: Named class compiled on demand
started: Wed Apr 16 17:20:22 IST 2025
Test directory:
  compile: compiler.vectorapi.TestMaskedMacroLogicVector
finished: Wed Apr 16 17:20:23 IST 2025
elapsed time (seconds): 0.895

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.895 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java
reason: .class file out of date or does not exist
started: Wed Apr 16 17:20:22 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 4
Process id: 1422786
finished: Wed Apr 16 17:20:23 IST 2025
elapsed time (seconds): 0.895
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/compiler/vectorapi/TestMaskedMacroLogicVector.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/test/lib
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/scratch/1 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp \
        -J-Dtest.vm.opts='-XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -J-Dtest.tool.vm.opts='-J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -J-Dtest.name=compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/compiler/vectorapi/TestMaskedMacroLogicVector.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3 \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3 \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/compiler/vectorapi/TestMaskedMacroLogicVector.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3 \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 warning

ACTION: driver -- Failed. Execution failed: `main' threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
REASON: User specified action: run driver compiler.vectorapi.TestMaskedMacroLogicVector 
TIME:   314.394 seconds
messages:
command: driver compiler.vectorapi.TestMaskedMacroLogicVector
reason: User specified action: run driver compiler.vectorapi.TestMaskedMacroLogicVector 
started: Wed Apr 16 17:20:23 IST 2025
Mode: othervm [test requires --enable-preview, test requires non-default system module]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1433779
finished: Wed Apr 16 17:25:38 IST 2025
elapsed time (seconds): 314.394
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -5714021945051564090
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-5714021945051564090" to command line.
IR verification disabled due to the following reason(s):
- Using non-whitelisted JTreg VM or Javaoptions flag(s):
  - DeoptimizeALot
  - SafepointALot

Skip Flag VM due to not performing IR verification.
Run Test VM - [-XX:-TieredCompilation, -XX:UseAVX=3, --add-modules=jdk.incubator.vector, -XX:CompileThresholdScaling=0.3]:
Command line: [/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -cp /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp -XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot -Dir.framework.server.port=39555 -XX:-TieredCompilation -XX:UseAVX=3 --add-modules=jdk.incubator.vector -XX:CompileThresholdScaling=0.3 -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.vectorapi.TestMaskedMacroLogicVector ]
[2025-04-16T11:50:24.743547555Z] Gathering output for process 1433917
[2025-04-16T11:50:24.831592354Z] Waiting for completion for process 1433917
[2025-04-16T11:55:37.870769729Z] Waiting for completion finished for process 1433917
Output and diagnostic info for process 1433917 was saved into 'pid-1433917-output.log'

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector

TestFramework test VM exited with code 1

Command Line:
/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -DReproduce=true -cp /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp -XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot -Dir.framework.server.port=39555 -XX:-TieredCompilation -XX:UseAVX=3 --add-modules=jdk.incubator.vector -XX:CompileThresholdScaling=0.3 -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.vectorapi.TestMaskedMacroLogicVector


Error Output
------------
OpenJDK 64-Bit Server VM warning: UseAVX=3 requires UseSSE=4, setting it to UseAVX=0
WARNING: Using incubator modules: jdk.incubator.vector
Exception in thread "main" compiler.lib.ir_framework.shared.TestRunException: 

Test Failures (2)
-----------------
Custom Run Test: @Run: kernel_testInt8_Int128 - @Test: testInt8_Int128:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public void compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt8_Int128()
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:87)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:867)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 4 more
Caused by: java.lang.AssertionError: testInt8: at #39: r=0, expected = 475828733 = intFunc8(-230705342,475828733,820370632,false)
	at compiler.vectorapi.TestMaskedMacroLogicVector.verifyInt8(TestMaskedMacroLogicVector.java:502)
	at compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt8_Int128(TestMaskedMacroLogicVector.java:784)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 6 more


Custom Run Test: @Run: kernel_testInt7_Int512 - @Test: testInt7_Int512:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public void compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt7_Int512()
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:87)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:867)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 4 more
Caused by: java.lang.AssertionError: testInt7: at #497: r=0, expected = 273676915 = intFunc7(273676915,-380852730,-518055382,false)
	at compiler.vectorapi.TestMaskedMacroLogicVector.verifyInt7(TestMaskedMacroLogicVector.java:454)
	at compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt7_Int512(TestMaskedMacroLogicVector.java:776)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 6 more



	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:903)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.TestVMProcess.throwTestVMException(TestVMProcess.java:245)
	at compiler.lib.ir_framework.driver.TestVMProcess.checkTestVMExitCode(TestVMProcess.java:226)
	at compiler.lib.ir_framework.driver.TestVMProcess.<init>(TestVMProcess.java:76)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:787)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:758)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:351)
	at compiler.lib.ir_framework.TestFramework.runWithFlags(TestFramework.java:248)
	at compiler.vectorapi.TestMaskedMacroLogicVector.main(TestMaskedMacroLogicVector.java:843)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/scratch/1 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -Dtest.tool.vm.opts='-J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -Dtest.name=compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/compiler/vectorapi/TestMaskedMacroLogicVector.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3 \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/3 \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/compiler/vectorapi/TestMaskedMacroLogicVector.d/driver.0.jta

TEST RESULT: Failed. Execution failed: `main' threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
--------------------------------------------------
Test results: passed: 325; failed: 1; excluded: 18; did not meet platform requirements: 82
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/hotspot/jtreg:hotspot_vector_1           426   325     1     0   100 <<
==============================
TEST FAILURE

Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_2', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_2
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_2

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Passed: compiler/intrinsics/string/TestStringConstruction.java
Passed: compiler/intrinsics/string/TestStringEqualsBadLength.java
Passed: compiler/intrinsics/string/TestStringIntrinsicMemoryFlow.java
Passed: compiler/intrinsics/string/TestCopyValueOf.java
Passed: compiler/intrinsics/string/TestStringIndexOfCharIntrinsics.java
Passed: compiler/intrinsics/Test8005419.java
Passed: compiler/intrinsics/Test6982370.java
Passed: compiler/intrinsics/Test8237524.java
Passed: compiler/intrinsics/Test8215792.java
Passed: compiler/intrinsics/string/TestStringConstructionIntrinsics.java#id0
Passed: compiler/intrinsics/string/TestStringIntrinsicRangeChecks.java
Passed: compiler/intrinsics/IntrinsicDisabledTest.java
Passed: compiler/intrinsics/string/TestStringIntrinsics2.java
Passed: compiler/intrinsics/IntrinsicAvailableTest.java
Passed: compiler/intrinsics/TestArraysHashCode.java
Passed: compiler/intrinsics/TestArrayGuardWithInterfaces.java
Passed: compiler/intrinsics/TestContinuationPinningAndEA.java
Passed: compiler/intrinsics/TestReferenceRefersTo.java
Passed: compiler/intrinsics/TestReferenceGetWithNull.java
Passed: compiler/intrinsics/TestCheckIndex.java
Passed: compiler/intrinsics/string/TestHasNegatives.java#id0
Passed: compiler/intrinsics/string/TestStringUTF16IntrinsicRangeChecks.java
Passed: compiler/intrinsics/TestCompareUnsigned.java
Passed: compiler/codegen/aes/Test8292158.java
Passed: compiler/codegen/aes/TestCipherBlockChainingEncrypt.java
Passed: compiler/codegen/aes/Test8299817.java
Passed: compiler/intrinsics/TestRotate.java
Passed: compiler/codegen/Test6875866.java
Passed: compiler/intrinsics/string/TestCountPositives.java#id0
Passed: compiler/intrinsics/TestIntegerUnsignedDivMod.java
Passed: compiler/intrinsics/base64/TestBase64.java
Passed: compiler/intrinsics/bigInteger/TestMulAdd.java
Passed: compiler/intrinsics/bmi/verifycode/AndnTestI.java
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLenReturnProfile.java
Passed: compiler/intrinsics/string/TestEncodeIntrinsics.java
Passed: compiler/intrinsics/bigInteger/TestSquareToLen.java
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestI.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestL.java
Passed: compiler/intrinsics/bmi/verifycode/AndnTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestI.java
Passed: compiler/codegen/Test6935535.java#id0
Passed: compiler/intrinsics/bmi/verifycode/BzhiTestI2L.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestI.java
Passed: compiler/intrinsics/bigInteger/MontgomeryMultiplyTest.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestI.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestI.java
Passed: compiler/intrinsics/bigInteger/TestShift.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestL.java
Passed: compiler/codegen/Test6935535.java#id1
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestL.java
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLen.java
Passed: compiler/intrinsics/string/TestStringIntrinsics.java
Passed: compiler/intrinsics/bmi/TestBlsiI.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestL.java
Passed: compiler/intrinsics/bmi/TestBlsiL.java
Passed: compiler/intrinsics/TestLongUnsignedDivMod.java
Passed: compiler/intrinsics/bmi/TestBlsmskL.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id0
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id1
Passed: compiler/intrinsics/bmi/TestBlsmskI.java
Passed: compiler/intrinsics/bmi/TestBlsrL.java
Passed: compiler/intrinsics/bmi/TestTzcntI.java
Passed: compiler/intrinsics/bmi/TestAndnI.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id2
Passed: compiler/intrinsics/bmi/TestTzcntL.java
Passed: compiler/intrinsics/bmi/TestLzcntL.java
Passed: compiler/intrinsics/bmi/TestAndnL.java
Passed: compiler/intrinsics/math/Test8210461.java
Passed: compiler/intrinsics/bmi/TestLzcntI.java
Passed: compiler/intrinsics/math/TestMinMaxIntrinsics.java
Passed: compiler/intrinsics/math/TestPow2Opt.java
Passed: compiler/intrinsics/TestBitShuffleOpers.java
Passed: compiler/intrinsics/math/TestPow0Dot5Opt.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactIntTest.java
Passed: compiler/intrinsics/math/TestFpMinMaxIntrinsics.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactLongTest.java
Passed: compiler/intrinsics/klass/TestIsPrimitive.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactIntTest.java
Passed: compiler/intrinsics/bmi/TestBlsrI.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactLongTest.java
Passed: compiler/intrinsics/math/TestMinMaxInlining.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactLongTest.java
Passed: compiler/intrinsics/math/TestMinMaxOpt.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactIntTest.java
Passed: compiler/intrinsics/mathexact/AddExactICondTest.java
Passed: compiler/intrinsics/bmi/TestBzhiI2L.java
Passed: compiler/intrinsics/mathexact/AddExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/AddExactLNonConstantTest.java
Passed: compiler/intrinsics/math/MaxMinOptimizeTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/AddExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/CompareTest.java
Passed: compiler/intrinsics/klass/CastNullCheckDroppingsTest.java
Passed: compiler/intrinsics/mathexact/MulExactICondTest.java
Passed: compiler/intrinsics/mathexact/GVNTest.java
Passed: compiler/codegen/aes/TestAESMain.java
Passed: compiler/intrinsics/mathexact/AddExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/DecExactITest.java
Passed: compiler/intrinsics/mathexact/AddExactILoadTest.java
Passed: compiler/intrinsics/mathexact/AddExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/IncExactITest.java
Passed: compiler/intrinsics/mathexact/NegExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/NegExactILoadTest.java
Passed: compiler/intrinsics/mathexact/MulExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/DecExactLTest.java
Passed: compiler/intrinsics/mathexact/NestedMathExactTest.java
Passed: compiler/intrinsics/mathexact/SplitThruPhiTest.java
Passed: compiler/intrinsics/mathexact/SubExactICondTest.java
Passed: compiler/intrinsics/mathexact/MulExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/NegExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/IncExactLTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoadTest.java
Passed: compiler/intrinsics/mathexact/NegExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactILoadTest.java
Passed: compiler/intrinsics/object/TestHashCode.java
Passed: compiler/intrinsics/mathexact/MulExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/LongMulOverflowTest.java
Passed: compiler/intrinsics/mathexact/MulExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactIRepeatTest.java
Passed: compiler/intrinsics/math/TestSignumIntrinsic.java
Passed: compiler/intrinsics/SortingDeoptimizationTest.java
Passed: compiler/intrinsics/mathexact/SubExactLNonConstantTest.java
Passed: compiler/intrinsics/sha/sanity/TestMD5Intrinsics.java
Passed: compiler/intrinsics/mathexact/SubExactLConstantTest.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestMD5MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/TestCAEAntiDep.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/TestUnsafeMismatchedArrayFieldAccess.java
Passed: compiler/intrinsics/unsafe/UnsafeGetAddressTest.java
Passed: compiler/intrinsics/mathexact/MulExactLNonConstantTest.java
Passed: compiler/intrinsics/unsafe/TestUnsafeUnalignedMismatchedAccesses.java
Passed: compiler/intrinsics/object/TestClone.java
Passed: compiler/loopopts/superword/Vec_MulAddS2I.java
Passed: compiler/intrinsics/sha/sanity/TestSHA256Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512Intrinsics.java
Passed: compiler/intrinsics/unsafe/UnsafeTwoCASLong.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3Intrinsics.java
Passed: compiler/intrinsics/zip/TestFpRegsABI.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/AllocateUninitializedArray.java
Passed: compiler/intrinsics/zip/TestCRC32C.java
Passed: compiler/intrinsics/zip/TestAdler32.java
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id1
Passed: compiler/intrinsics/zip/TestCRC32.java
Passed: compiler/intrinsics/unsafe/DirectByteBufferTest.java
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id0
Passed: compiler/intrinsics/sha/sanity/TestSHA256MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/TestDigest.java
Test results: passed: 163; skipped: 5; excluded: 1; did not meet platform requirements: 28
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_2
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
   jtreg:test/hotspot/jtreg:hotspot_vector_2           192   158     0     0    34   
==============================
TEST SUCCESS

Finished building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/:jdk_vector', will run:
* jtreg:test/jdk:jdk_vector
Clean up dirs for jtreg_test_jdk_jdk_vector

Running test 'jtreg:test/jdk:jdk_vector'
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorTests.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
--------------------------------------------------
TEST: jdk/incubator/vector/Double512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   2.048 seconds
messages:
command: build Double512VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 17:31:05 IST 2025
Test directory:
  compile: Double512VectorTests
finished: Wed Apr 16 17:31:07 IST 2025
elapsed time (seconds): 2.048

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   2.046 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double512VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 17:31:05 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 12
Process id: 1466456
finished: Wed Apr 16 17:31:07 IST 2025
elapsed time (seconds): 2.046
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Double512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/6 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Double512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Double512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Double512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double512VectorTests 
TIME:   165.702 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Double512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double512VectorTests 
started: Wed Apr 16 17:31:07 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1467979
finished: Wed Apr 16 17:33:53 IST 2025
elapsed time (seconds): 165.702
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -1768534787041283676
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-1768534787041283676" to command line.
test Double512VectorTests.ABSDouble512VectorTests(double[-i * 5]): success [350ms]
test Double512VectorTests.ABSDouble512VectorTests(double[i * 5]): success [362ms]
test Double512VectorTests.ABSDouble512VectorTests(double[i + 1]): success [11ms]
test Double512VectorTests.ABSDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [4ms]
test Double512VectorTests.ABSDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [49ms]
test Double512VectorTests.ABSDouble512VectorTests(double[cornerCaseValue(i)]): success [4ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[-i * 5], mask[i % 2]): success [155ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i * 5], mask[i % 2]): success [182ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i + 1], mask[i % 2]): success [38ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [68ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[-i * 5], mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i * 5], mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(AbstractVectorTest$1@25daae7f, mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[cornerCaseValue(i)], mask[true]): success [5ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[-i * 5], mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i * 5], mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i + 1], mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[-i * 5]): success [94ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[i * 5]): success [34ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[i + 1]): success [8ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [5ms]
test Double512VectorTests.ACOSDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [60ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], double[i * 5]): success [84ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], double[i + 1]): success [261ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [3ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [3ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [68ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5]): success [16ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [32ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [8ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [3ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [14ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [123ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [53ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [7ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [72ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[-i * 5]): success [115ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[i * 5]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[i + 1]): success [71ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[-i * 5], mask[i % 2]): success [69ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i * 5], mask[i % 2]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i + 1], mask[i % 2]): success [89ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[-i * 5], mask[true]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i * 5], mask[true]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i + 1], mask[true]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [3ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[-i * 5], mask[false]): success [3ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i * 5], mask[false]): success [22ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i + 1], mask[false]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [12ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [3ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[-i * 5]): success [10ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[i * 5]): success [1ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[i + 1]): success [1ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [2ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[-i * 5], mask[i % 2]): success [9ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i * 5], mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[-i * 5], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[-i * 5], mask[false]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i * 5], mask[false]): success [1ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [10ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.ASINDouble512VectorTests(double[-i * 5]): success [131ms]
test Double512VectorTests.ASINDouble512VectorTests(double[i * 5]): success [81ms]
test Double512VectorTests.ASINDouble512VectorTests(double[i + 1]): success [8ms]
test Double512VectorTests.ASINDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [3ms]
test Double512VectorTests.ASINDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [55ms]
test Double512VectorTests.ASINDouble512VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], double[i * 5]): success [268ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], double[i + 1]): success [64ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [9ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [14ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [78ms]
test Double512VectorTests.ATANDouble512VectorTests(double[-i * 5]): success [19ms]
test Double512VectorTests.ATANDouble512VectorTests(double[i * 5]): success [69ms]
test Double512VectorTests.ATANDouble512VectorTests(double[i + 1]): success [8ms]
test Double512VectorTests.ATANDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [10ms]
test Double512VectorTests.ATANDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [62ms]
test Double512VectorTests.ATANDouble512VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[-i * 5]): success [44ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[i * 5]): success [62ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[i + 1]): success [28ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [28ms]
test Double512VectorTests.BroadcastDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [92ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[cornerCaseValue(i)]): success [28ms]
test Double512VectorTests.BroadcastLongDouble512VectorTestsSmokeTest(double[-i * 5]): success [2ms]
test Double512VectorTests.BroadcastLongDouble512VectorTestsSmokeTest(double[i * 5]): success [2ms]
test Double512VectorTests.BroadcastLongDouble512VectorTestsSmokeTest(double[i + 1]): success [2ms]
test Double512VectorTests.BroadcastLongDouble512VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [2ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[-i * 5]): success [37ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[i * 5]): success [107ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[i + 1]): success [3ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [3ms]
test Double512VectorTests.CBRTDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [89ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[cornerCaseValue(i)]): success [49ms]
test Double512VectorTests.COSDouble512VectorTests(double[-i * 5]): success [16ms]
test Double512VectorTests.COSDouble512VectorTests(double[i * 5]): success [73ms]
test Double512VectorTests.COSDouble512VectorTests(double[i + 1]): success [2ms]
test Double512VectorTests.COSDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double512VectorTests.COSDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [76ms]
test Double512VectorTests.COSDouble512VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.COSHDouble512VectorTests(double[-i * 5]): success [50ms]
test Double512VectorTests.COSHDouble512VectorTests(double[i * 5]): success [128ms]
test Double512VectorTests.COSHDouble512VectorTests(double[i + 1]): success [8ms]
test Double512VectorTests.COSHDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [3ms]
test Double512VectorTests.COSHDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [77ms]
test Double512VectorTests.COSHDouble512VectorTests(double[cornerCaseValue(i)]): success [62ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], double[i * 5]): success [163ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], double[i + 1]): success [146ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [3ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [4ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [73ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [18ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [21ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [3ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [3ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [78ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [3ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [3ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): failure [43ms]
java.lang.AssertionError: at index #136, input1 = -680.0, input2 = 1.7976931348623157E308, mask = false expected [-680.0] but found [0.0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEquals(Assert.java:701)
	at Double512VectorTests.assertArraysEquals(Double512VectorTests.java:473)
	at Double512VectorTests.assertArraysEquals(Double512VectorTests.java:463)
	at Double512VectorTests.DIVDouble512VectorTestsMasked(Double512VectorTests.java:1811)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [3ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[i]): success [301ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[i - length / 2]): success [187ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[i + 1]): success [54ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[i - 2]): success [46ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[zigZag(i)]): success [75ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[cornerCaseValue(i)]): success [45ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[i]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[i - length / 2]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[i + 1]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[i - 2]): success [79ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[zigZag(i)]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[i]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[i - length / 2]): success [47ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[i + 1]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[i - 2]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[zigZag(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[i]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[i - length / 2]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[i + 1]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[i - 2]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[zigZag(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[i]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[i - length / 2]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[i + 1]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[i - 2]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[zigZag(i)]): success [47ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[i]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [47ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [42ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[i % 2]): success [16ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[i % 2]): success [2ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[i % 2]): success [3ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[i % 2]): success [2ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[i % 2]): success [2ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[i % 2]): success [62ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[i % 2]): success [3ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[i % 2]): success [4ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2], mask[i % 2]): success [5ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[true]): success [82ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[true]):

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

e(i)], AbstractVectorTest$1@25daae7f): success [47ms]
test Double512VectorTests.fmaDouble512VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.getDouble512VectorTests(double[-i * 5]): success [4ms]
test Double512VectorTests.getDouble512VectorTests(double[i * 5]): success [4ms]
test Double512VectorTests.getDouble512VectorTests(double[i + 1]): success [19ms]
test Double512VectorTests.getDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [3ms]
test Double512VectorTests.getDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [78ms]
test Double512VectorTests.getDouble512VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[-i * 5]): success [34ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[i * 5]): success [0ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[i + 1]): success [0ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(0): success [63ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(-1): success [15ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(1): success [15ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(2): success [1ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(-2): success [1ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(0): success [1ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(-1): success [1ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(1): success [1ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(2): success [2ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(-2): success [1ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(0): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(1): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(32): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(37): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(1024): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(1025): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(1029): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(0): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(1): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(32): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(37): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(1024): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(1025): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(1029): success [0ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[i]): success [107ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[i - length / 2]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[i + 1]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[i - 2]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[zigZag(i)]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[cornerCaseValue(i)]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[i]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[i - length / 2]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[i + 1]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[i - 2]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[zigZag(i)]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[i]): success [48ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[i - length / 2]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[i + 1]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[i - 2]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[zigZag(i)]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[i]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[i - length / 2]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[i + 1]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[i - 2]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[zigZag(i)]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[i]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[i - length / 2]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[i + 1]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[i - 2]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[zigZag(i)]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[i]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [40ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[i]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[i - 2]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[zigZag(i)]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[i]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[i - 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[i]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[i - length / 2]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[i - 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - 2]): success [45ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.maskAndDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [20ms]
test Double512VectorTests.maskAndDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskAndNotDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Double512VectorTests.maskAndNotDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskCompressDouble512VectorTestsSmokeTest(mask[i % 2]): success [499ms]
test Double512VectorTests.maskCompressDouble512VectorTestsSmokeTest(mask[true]): success [212ms]
test Double512VectorTests.maskCompressDouble512VectorTestsSmokeTest(mask[false]): success [211ms]
test Double512VectorTests.maskEqDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Double512VectorTests.maskEqDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskEqualsDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Double512VectorTests.maskEqualsDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskFirstTrueDouble512VectorTestsSmokeTest(mask[i % 2]): success [83ms]
test Double512VectorTests.maskFirstTrueDouble512VectorTestsSmokeTest(mask[true]): success [71ms]
test Double512VectorTests.maskFirstTrueDouble512VectorTestsSmokeTest(mask[false]): success [39ms]
test Double512VectorTests.maskFromToLongDouble512VectorTestsSmokeTest(-1): success [52ms]
test Double512VectorTests.maskFromToLongDouble512VectorTestsSmokeTest(0): success [0ms]
test Double512VectorTests.maskFromToLongDouble512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Double512VectorTests.maskFromToLongDouble512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Double512VectorTests.maskHashCodeDouble512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Double512VectorTests.maskHashCodeDouble512VectorTestsSmokeTest(mask[true]): success [0ms]
test Double512VectorTests.maskHashCodeDouble512VectorTestsSmokeTest(mask[false]): success [0ms]
test Double512VectorTests.maskLastTrueDouble512VectorTestsSmokeTest(mask[i % 2]): success [88ms]
test Double512VectorTests.maskLastTrueDouble512VectorTestsSmokeTest(mask[true]): success [71ms]
test Double512VectorTests.maskLastTrueDouble512VectorTestsSmokeTest(mask[false]): success [63ms]
test Double512VectorTests.maskOrDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [46ms]
test Double512VectorTests.maskOrDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskTrueCountDouble512VectorTestsSmokeTest(mask[i % 2]): success [56ms]
test Double512VectorTests.maskTrueCountDouble512VectorTestsSmokeTest(mask[true]): success [71ms]
test Double512VectorTests.maskTrueCountDouble512VectorTestsSmokeTest(mask[false]): success [39ms]
test Double512VectorTests.maskXorDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Double512VectorTests.maskXorDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [28ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [5ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.negDouble512VectorTests(double[-i * 5]): success [7ms]
test Double512VectorTests.negDouble512VectorTests(double[i * 5]): success [7ms]
test Double512VectorTests.negDouble512VectorTests(double[i + 1]): success [1ms]
test Double512VectorTests.negDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double512VectorTests.negDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [48ms]
test Double512VectorTests.negDouble512VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], double[i * 5]): success [17ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], double[i + 1]): success [11ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [3ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [88ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [13ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.shuffleEqualsDouble512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [219ms]
test Double512VectorTests.shuffleEqualsDouble512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [23ms]
test Double512VectorTests.shuffleMiscellaneousDouble512VectorTestsSmokeTest(shuffle[random]): success [6ms]
test Double512VectorTests.shuffleTest(): success [921ms]
test Double512VectorTests.shuffleToStringDouble512VectorTestsSmokeTest(shuffle[random]): success [36ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[i * 5]): success [494ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[i + 1]): success [948ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [303ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [286ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [688ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [313ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [406ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [301ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [310ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [874ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [298ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [369ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [305ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [322ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [303ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [302ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [294ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [302ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [301ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [302ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[-i * 5]): success [260ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[i * 5]): success [464ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[i + 1]): success [252ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [251ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [482ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[cornerCaseValue(i)]): success [261ms]
test Double512VectorTests.smokeTest1(): success [0ms]
test Double512VectorTests.smokeTest2(): success [52ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[-i * 5]): success [7ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[i * 5]): success [7ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[i + 1]): success [1ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double512VectorTests.sqrtDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [61ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], double[i * 5]): success [8ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [7ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [38ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [8ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.toIntArrayDouble512VectorTestsSmokeTest(double[-i * 5]): success [5ms]
test Double512VectorTests.toIntArrayDouble512VectorTestsSmokeTest(double[i * 5]): success [5ms]
test Double512VectorTests.toIntArrayDouble512VectorTestsSmokeTest(double[i + 1]): success [5ms]
test Double512VectorTests.toIntArrayDouble512VectorTestsSmokeTest(double[intCornerCaseValue(i)]): success [5ms]
test Double512VectorTests.toLongArrayDouble512VectorTestsSmokeTest(double[-i * 5]): success [0ms]
test Double512VectorTests.toLongArrayDouble512VectorTestsSmokeTest(double[i * 5]): success [2ms]
test Double512VectorTests.toLongArrayDouble512VectorTestsSmokeTest(double[i + 1]): success [0ms]
test Double512VectorTests.toLongArrayDouble512VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[-i * 5]): success [1ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[i * 5]): success [1ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[i + 1]): success [1ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [19ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [1ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [22ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[i * 5]): success [274ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[i + 1]): success [505ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [330ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [258ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [671ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [539ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [1206ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [535ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [525ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [1304ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [515ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [510ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [517ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [509ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [529ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [547ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [554ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [561ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [509ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [509ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[-i * 5]): success [261ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[i * 5]): success [447ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[i + 1]): success [268ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [245ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [462ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[cornerCaseValue(i)]): success [247ms]
test Double512VectorTests.viewAsFloatingLanesTest(): success [20ms]
test Double512VectorTests.viewAsIntegeralLanesTest(): success [22ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], double[i * 5]): success [11ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], double[i + 1]): success [32ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [10ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [10ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [205ms]

===============================================
jdk/incubator/vector/Double512VectorTests.java
Total tests run: 3209, Passes: 3208, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/6 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Double512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Double512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Double512VectorTests.d/testng.0.jta jdk/incubator/vector/Double512VectorTests.java false Double512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Double256VectorTests.java
Passed: jdk/incubator/vector/Double128VectorTests.java
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorTests.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/FloatMaxVectorTests.java
Passed: jdk/incubator/vector/Float512VectorTests.java
TEST: jdk/incubator/vector/Float256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.879 seconds
messages:
command: build Float256VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 17:31:51 IST 2025
Test directory:
  compile: Float256VectorTests
finished: Wed Apr 16 17:31:53 IST 2025
elapsed time (seconds): 1.879

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.878 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float256VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 17:31:51 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 2
Process id: 1465731
finished: Wed Apr 16 17:31:53 IST 2025
elapsed time (seconds): 1.878
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Float256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/14 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Float256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Float256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Float256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Float256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Float256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Float256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Float256VectorTests 
TIME:   278.537 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Float256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Float256VectorTests 
started: Wed Apr 16 17:31:53 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1468424
finished: Wed Apr 16 17:36:31 IST 2025
elapsed time (seconds): 278.537
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -2686985062605348696
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-2686985062605348696" to command line.
test Float256VectorTests.ABSFloat256VectorTests(float[-i * 5]): success [676ms]
test Float256VectorTests.ABSFloat256VectorTests(float[i * 5]): success [6ms]
test Float256VectorTests.ABSFloat256VectorTests(float[i + 1]): success [49ms]
test Float256VectorTests.ABSFloat256VectorTests(float[0.01 + (i / (i + 1))]): success [5ms]
test Float256VectorTests.ABSFloat256VectorTests(AbstractVectorTest$1@6ed11085): success [5ms]
test Float256VectorTests.ABSFloat256VectorTests(float[cornerCaseValue(i)]): success [5ms]
test Float256VectorTests.ABSMaskedFloat256VectorTests(float[-i * 5], mask[i % 2]): success [298ms]
test Float256VectorTests.ABSMaskedFloat256VectorTests(float[i * 5], mask[i % 2]): success [4ms]
test Float256VectorTests.ABSMaskedFloat256VectorTests(float[i + 1], mask[i % 2]): success [73ms]
test Float256VectorTests.ABSMaskedFloat256VectorTests(float[0.01 + (i / (i + 1))], mask[i % 2]): success [4ms]
test Float256VectorTests.ABSMaskedFloat256VectorTests(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [3ms]
test Float256VectorTests.ABSMaskedFloat256VectorTests(float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Float256VectorTests.ABSMaskedFloat256VectorTests(float[-i * 5], mask[true]): success [2ms]
test Float256VectorTests.ABSMaskedFloat256VectorTests(float[i * 5], mask[true]): success [1ms]
test Float256VectorTests.ABSMaskedFloat256VectorTests(float[i + 1], mask[true]): success [2ms]
test Float256VectorTests.ABSMaskedFloat256VectorTests(float[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Float256VectorTests.ABSMaskedFloat256VectorTests(AbstractVectorTest$1@6ed11085, mask[true]): success [1ms]
test Float256VectorTests.ABSMaskedFloat256VectorTests(float[cornerCaseValue(i)], mask[true]): success [3ms]
test Float256VectorTests.ABSMaskedFloat256VectorTests(float[-i * 5], mask[false]): success [1ms]
test Float256VectorTests.ABSMaskedFloat256VectorTests(float[i * 5], mask[false]): success [1ms]
test Float256VectorTests.ABSMaskedFloat256VectorTests(float[i + 1], mask[false]): success [3ms]
test Float256VectorTests.ABSMaskedFloat256VectorTests(float[0.01 + (i / (i + 1))], mask[false]): success [3ms]
test Float256VectorTests.ABSMaskedFloat256VectorTests(AbstractVectorTest$1@6ed11085, mask[false]): success [3ms]
test Float256VectorTests.ABSMaskedFloat256VectorTests(float[cornerCaseValue(i)], mask[false]): success [2ms]
test Float256VectorTests.ACOSFloat256VectorTests(float[-i * 5]): success [210ms]
test Float256VectorTests.ACOSFloat256VectorTests(float[i * 5]): success [5ms]
test Float256VectorTests.ACOSFloat256VectorTests(float[i + 1]): success [70ms]
test Float256VectorTests.ACOSFloat256VectorTests(float[0.01 + (i / (i + 1))]): success [6ms]
test Float256VectorTests.ACOSFloat256VectorTests(AbstractVectorTest$1@6ed11085): success [4ms]
test Float256VectorTests.ACOSFloat256VectorTests(float[cornerCaseValue(i)]): success [4ms]
test Float256VectorTests.ADDFloat256VectorTests(float[-i * 5], float[i * 5]): success [319ms]
test Float256VectorTests.ADDFloat256VectorTests(float[-i * 5], float[i + 1]): success [6ms]
test Float256VectorTests.ADDFloat256VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [79ms]
test Float256VectorTests.ADDFloat256VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [4ms]
test Float256VectorTests.ADDFloat256VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [2ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[i * 5]): success [16ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[i + 1]): success [1ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [1ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [1ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [1ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [21ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [2ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [16ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [3ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [3ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [4ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [12ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [6ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [9ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [52ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [1ms]
test Float256VectorTests.ADDFloat256VectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [1ms]
test Float256VectorTests.ADDFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [122ms]
test Float256VectorTests.ADDFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [4ms]
test Float256VectorTests.ADDFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [70ms]
test Float256VectorTests.ADDFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [2ms]
test Float256VectorTests.ADDFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Float256VectorTests.ADDFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [2ms]
test Float256VectorTests.ADDFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [2ms]
test Float256VectorTests.ADDFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Float256VectorTests.ADDFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [3ms]
test Float256VectorTests.ADDFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [3ms]
test Float256VectorTests.ADDFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [3ms]
test Float256VectorTests.ADDFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [3ms]
test Float256VectorTests.ADDFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Float256VectorTests.ADDFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [2ms]
test Float256VectorTests.ADDFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [2ms]
test Float256VectorTests.ADDReduceFloat256VectorTests(float[-i * 5]): success [107ms]
test Float256VectorTests.ADDReduceFloat256VectorTests(float[i * 5]): success [72ms]
test Float256VectorTests.ADDReduceFloat256VectorTests(float[i + 1]): success [2ms]
test Float256VectorTests.ADDReduceFloat256VectorTests(float[0.01 + (i / (i + 1))]): success [3ms]
test Float256VectorTests.ADDReduceFloat256VectorTests(AbstractVectorTest$1@6ed11085): success [3ms]
test Float256VectorTests.ADDReduceFloat256VectorTests(float[cornerCaseValue(i)]): success [3ms]
test Float256VectorTests.ADDReduceFloat256VectorTestsMasked(float[-i * 5], mask[i % 2]): success [73ms]
test Float256VectorTests.ADDReduceFloat256VectorTestsMasked(float[i * 5], mask[i % 2]): success [90ms]
test Float256VectorTests.ADDReduceFloat256VectorTestsMasked(float[i + 1], mask[i % 2]): success [3ms]
test Float256VectorTests.ADDReduceFloat256VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[i % 2]): success [4ms]
test Float256VectorTests.ADDReduceFloat256VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [3ms]
test Float256VectorTests.ADDReduceFloat256VectorTestsMasked(float[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Float256VectorTests.ADDReduceFloat256VectorTestsMasked(float[-i * 5], mask[true]): success [3ms]
test Float256VectorTests.ADDReduceFloat256VectorTestsMasked(float[i * 5], mask[true]): success [14ms]
test Float256VectorTests.ADDReduceFloat256VectorTestsMasked(float[i + 1], mask[true]): success [3ms]
test Float256VectorTests.ADDReduceFloat256VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Float256VectorTests.ADDReduceFloat256VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[true]): success [3ms]
test Float256VectorTests.ADDReduceFloat256VectorTestsMasked(float[cornerCaseValue(i)], mask[true]): success [30ms]
test Float256VectorTests.ADDReduceFloat256VectorTestsMasked(float[-i * 5], mask[false]): success [3ms]
test Float256VectorTests.ADDReduceFloat256VectorTestsMasked(float[i * 5], mask[false]): success [3ms]
test Float256VectorTests.ADDReduceFloat256VectorTestsMasked(float[i + 1], mask[false]): success [3ms]
test Float256VectorTests.ADDReduceFloat256VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[false]): success [3ms]
test Float256VectorTests.ADDReduceFloat256VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[false]): success [3ms]
test Float256VectorTests.ADDReduceFloat256VectorTestsMasked(float[cornerCaseValue(i)], mask[false]): success [3ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTests(float[-i * 5]): success [11ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTests(float[i * 5]): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTests(float[i + 1]): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTests(AbstractVectorTest$1@6ed11085): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTests(float[cornerCaseValue(i)]): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTestsMasked(float[-i * 5], mask[i % 2]): success [23ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTestsMasked(float[i * 5], mask[i % 2]): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTestsMasked(float[i + 1], mask[i % 2]): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTestsMasked(float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTestsMasked(float[-i * 5], mask[true]): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTestsMasked(float[i * 5], mask[true]): success [10ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTestsMasked(float[i + 1], mask[true]): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTestsMasked(float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTestsMasked(float[-i * 5], mask[false]): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTestsMasked(float[i * 5], mask[false]): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTestsMasked(float[i + 1], mask[false]): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTestsMasked(float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTestsMasked(AbstractVectorTest$1@6ed11085, mask[false]): success [1ms]
test Float256VectorTests.ADDReduceLongFloat256VectorTestsMasked(float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float256VectorTests.ASINFloat256VectorTests(float[-i * 5]): success [178ms]
test Float256VectorTests.ASINFloat256VectorTests(float[i * 5]): success [4ms]
test Float256VectorTests.ASINFloat256VectorTests(float[i + 1]): success [63ms]
test Float256VectorTests.ASINFloat256VectorTests(float[0.01 + (i / (i + 1))]): success [3ms]
test Float256VectorTests.ASINFloat256VectorTests(AbstractVectorTest$1@6ed11085): success [2ms]
test Float256VectorTests.ASINFloat256VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float256VectorTests.ATAN2Float256VectorTests(float[-i * 5], float[i * 5]): success [306ms]
test Float256VectorTests.ATAN2Float256VectorTests(float[-i * 5], float[i + 1]): success [21ms]
test Float256VectorTests.ATAN2Float256VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [86ms]
test Float256VectorTests.ATAN2Float256VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [16ms]
test Float256VectorTests.ATAN2Float256VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [3ms]
test Float256VectorTests.ATANFloat256VectorTests(float[-i * 5]): success [89ms]
test Float256VectorTests.ATANFloat256VectorTests(float[i * 5]): success [8ms]
test Float256VectorTests.ATANFloat256VectorTests(float[i + 1]): success [64ms]
test Float256VectorTests.ATANFloat256VectorTests(float[0.01 + (i / (i + 1))]): success [10ms]
test Float256VectorTests.ATANFloat256VectorTests(AbstractVectorTest$1@6ed11085): success [11ms]
test Float256VectorTests.ATANFloat256VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float256VectorTests.BroadcastFloat256VectorTests(float[-i * 5]): success [98ms]
test Float256VectorTests.BroadcastFloat256VectorTests(float[i * 5]): success [58ms]
test Float256VectorTests.BroadcastFloat256VectorTests(float[i + 1]): success [127ms]
test Float256VectorTests.BroadcastFloat256VectorTests(float[0.01 + (i / (i + 1))]): success [56ms]
test Float256VectorTests.BroadcastFloat256VectorTests(AbstractVectorTest$1@6ed11085): success [56ms]
test Float256VectorTests.BroadcastFloat256VectorTests(float[cornerCaseValue(i)]): success [56ms]
test Float256VectorTests.BroadcastLongFloat256VectorTestsSmokeTest(float[-i * 5]): success [3ms]
test Float256VectorTests.BroadcastLongFloat256VectorTestsSmokeTest(float[i * 5]): success [2ms]
test Float256VectorTests.BroadcastLongFloat256VectorTestsSmokeTest(float[i + 1]): success [3ms]
test Float256VectorTests.BroadcastLongFloat256VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [2ms]
test Float256VectorTests.CBRTFloat256VectorTests(float[-i * 5]): success [134ms]
test Float256VectorTests.CBRTFloat256VectorTests(float[i * 5]): success [65ms]
test Float256VectorTests.CBRTFloat256VectorTests(float[i + 1]): success [52ms]
test Float256VectorTests.CBRTFloat256VectorTests(float[0.01 + (i / (i + 1))]): success [5ms]
test Float256VectorTests.CBRTFloat256VectorTests(AbstractVectorTest$1@6ed11085): success [61ms]
test Float256VectorTests.CBRTFloat256VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float256VectorTests.COSFloat256VectorTests(float[-i * 5]): success [96ms]
test Float256VectorTests.COSFloat256VectorTests(float[i * 5]): success [6ms]
test Float256VectorTests.COSFloat256VectorTests(float[i + 1]): success [52ms]
test Float256VectorTests.COSFloat256VectorTests(float[0.01 + (i / (i + 1))]): success [4ms]
test Float256VectorTests.COSFloat256VectorTests(AbstractVectorTest$1@6ed11085): success [3ms]
test Float256VectorTests.COSFloat256VectorTests(float[cornerCaseValue(i)]): success [3ms]
test Float256VectorTests.COSHFloat256VectorTests(float[-i * 5]): success [147ms]
test Float256VectorTests.COSHFloat256VectorTests(float[i * 5]): success [4ms]
test Float256VectorTests.COSHFloat256VectorTests(float[i + 1]): success [57ms]
test Float256VectorTests.COSHFloat256VectorTests(float[0.01 + (i / (i + 1))]): success [5ms]
test Float256VectorTests.COSHFloat256VectorTests(AbstractVectorTest$1@6ed11085): success [68ms]
test Float256VectorTests.COSHFloat256VectorTests(float[cornerCaseValue(i)]): success [4ms]
test Float256VectorTests.DIVFloat256VectorTests(float[-i * 5], float[i * 5]): success [257ms]
test Float256VectorTests.DIVFloat256VectorTests(float[-i * 5], float[i + 1]): success [4ms]
test Float256VectorTests.DIVFloat256VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [67ms]
test Float256VectorTests.DIVFloat256VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [2ms]
test Float256VectorTests.DIVFloat256VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [3ms]
test Float256VectorTests.DIVFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [34ms]
test Float256VectorTests.DIVFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [4ms]
test Float256VectorTests.DIVFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [71ms]
test Float256VectorTests.DIVFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [3ms]
test Float256VectorTests.DIVFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Float256VectorTests.DIVFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [4ms]
test Float256VectorTests.DIVFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [5ms]
test Float256VectorTests.DIVFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [4ms]
test Float256VectorTests.DIVFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [5ms]
test Float256VectorTests.DIVFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [7ms]
test Float256VectorTests.DIVFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [4ms]
test Float256VectorTests.DIVFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [24ms]
test Float256VectorTests.DIVFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [4ms]
test Float256VectorTests.DIVFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [4ms]
test Float256VectorTests.DIVFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [4ms]
test Float256VectorTests.EQFloat256VectorTests(float[i], float[i]): success [346ms]
test Float256VectorTests.EQFloat256VectorTests(float[i], float[i - length / 2]): success [153ms]
test Float256VectorTests.EQFloat256VectorTests(float[i], float[i + 1]): success [148ms]
test Float256VectorTests.EQFloat256VectorTests(float[i], float[i - 2]): success [85ms]
test Float256VectorTests.EQFloat256VectorTests(float[i], float[zigZag(i)]): success [85ms]
test Float256VectorTests.EQFloat256VectorTests(float[i], float[cornerCaseValue(i)]): success [91ms]
test Float256VectorTests.EQFloat256VectorTests(float[i - length / 2], float[i]): success [81ms]
test Float256VectorTests.EQFloat256VectorTests(float[i - length / 2], float[i - length / 2]): success [117ms]
test Float256VectorTests.EQFloat256VectorTests(float[i - length / 2], float[i + 1]): success [82ms]
test Float256VectorTests.EQFloat256VectorTests(float[i - length / 2], float[i - 2]): success [81ms]
test Float256VectorTests.EQFloat256VectorTests(float[i - length / 2], float[zigZag(i)]): success [81ms]
test Float256VectorTests.EQFloat256VectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [82ms]
test Float256VectorTests.EQFloat256VectorTests(float[i + 1], float[i]): success [88ms]
test Float256VectorTests.EQFloat256VectorTests(float[i + 1], float[i - length / 2]): success [83ms]
test Float256VectorTests.EQFloat256VectorTests(float[i + 1], float[i + 1]): success [87ms]
test Float256VectorTests.EQFloat256VectorTests(float[i + 1], float[i - 2]): success [82ms]
test Float256VectorTests.EQFloat256VectorTests(float[i + 1], float[zigZag(i)]): success [82ms]
test Float256VectorTests.EQFloat256VectorTests(float[i + 1], float[cornerCaseValue(i)]): success [92ms]
test Float256VectorTests.EQFloat256VectorTests(float[i - 2], float[i]): success [81ms]
test Float256VectorTests.EQFloat256VectorTests(float[i - 2], float[i - length / 2]): success [87ms]
test Float256VectorTests.EQFloat256VectorTests(float[i - 2], float[i + 1]): success [83ms]
test Float256VectorTests.EQFloat256VectorTests(float[i - 2], float[i - 2]): success [83ms]
test Float256VectorTests.EQFloat256VectorTests(float[i - 2], float[zigZag(i)]): success [84ms]
test Float256VectorTests.EQFloat256VectorTests(float[i - 2], float[cornerCaseValue(i)]): success [81ms]
test Float256VectorTests.EQFloat256VectorTests(float[zigZag(i)], float[i]): success [81ms]
test Float256VectorTests.EQFloat256VectorTests(float[zigZag(i)], float[i - length / 2]): success [81ms]
test Float256VectorTests.EQFloat256VectorTests(float[zigZag(i)], float[i + 1]): success [81ms]
test Float256VectorTests.EQFloat256VectorTests(float[zigZag(i)], float[i - 2]): success [92ms]
test Float256VectorTests.EQFloat256VectorTests(float[zigZag(i)], float[zigZag(i)]): success [84ms]
test Float256VectorTests.EQFloat256VectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [81ms]
test Float256VectorTests.EQFloat256VectorTests(float[cornerCaseValue(i)], float[i]): success [81ms]
test Float256VectorTests.EQFloat256VectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [81ms]
test Float256VectorTests.EQFloat256VectorTests(float[cornerCaseValue(i)], float[i + 1]): success [105ms]
test Float256VectorTests.EQFloat256VectorTests(float[cornerCaseValue(i)], float[i - 2]): success [83ms]
test Float256VectorTests.EQFloat256VectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [90ms]
test Float256VectorTests.EQFloat256VectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [80ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[i % 2]): success [16ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[i % 2]): success [3ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i + 1], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - 2], mask[i % 2]): success [3ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[zigZag(i)], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i], mask[i % 2]): success [3ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - length / 2], mask[i % 2]): success [3ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i + 1], mask[i % 2]): success [7ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - 2], mask[i % 2]): success [3ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[zigZag(i)], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - length / 2], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i + 1], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - 2], mask[i % 2]): success [6ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[zigZag(i)], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - length / 2], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i + 1], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - 2], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[zigZag(i)], mask[i % 2]): success [3ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)], mask[i % 2]): success [139ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i], mask[i % 2]): success [3ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - length / 2], mask[i % 2]): success [3ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i + 1], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - 2], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2], mask[i % 2]): success [3ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[true]): success [3ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i + 1], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - 2], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[zigZag(i)], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - length / 2], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i + 1], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - 2], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[zigZag(i)], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - length / 2], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i + 1], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - 2], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[zigZag(i)], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)], mask[true]): success [3ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - length / 2], mask[true]): success [3ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i + 1], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - 2], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[zigZag(i)], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i], mask[true]): success [3ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - length / 2], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i + 1], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - 2], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)], mask[true]): success [3ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2], mask[true]): success [25ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)], mask[true]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[false]): success [2ms]
test Float256VectorTests.EQFloat256VectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[false]): success [2ms]
test

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

 5], float[i + 1]): success [0ms]
test Float256VectorTests.divFloat256VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float256VectorTests.divFloat256VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float256VectorTests.divFloat256VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [27ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [8ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [1ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [1ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [35ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [7ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [1ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float256VectorTests.divFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [5ms]
test Float256VectorTests.divFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float256VectorTests.divFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float256VectorTests.eqFloat256VectorTests(float[i], float[i]): success [185ms]
test Float256VectorTests.eqFloat256VectorTests(float[i], float[i - length / 2]): success [80ms]
test Float256VectorTests.eqFloat256VectorTests(float[i], float[i + 1]): success [80ms]
test Float256VectorTests.eqFloat256VectorTests(float[i], float[i - 2]): success [80ms]
test Float256VectorTests.eqFloat256VectorTests(float[i], float[zigZag(i)]): success [80ms]
test Float256VectorTests.eqFloat256VectorTests(float[i], float[cornerCaseValue(i)]): success [87ms]
test Float256VectorTests.eqFloat256VectorTests(float[i - length / 2], float[i]): success [80ms]
test Float256VectorTests.eqFloat256VectorTests(float[i - length / 2], float[i - length / 2]): success [80ms]
test Float256VectorTests.eqFloat256VectorTests(float[i - length / 2], float[i + 1]): success [80ms]
test Float256VectorTests.eqFloat256VectorTests(float[i - length / 2], float[i - 2]): success [80ms]
test Float256VectorTests.eqFloat256VectorTests(float[i - length / 2], float[zigZag(i)]): success [80ms]
test Float256VectorTests.eqFloat256VectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [84ms]
test Float256VectorTests.eqFloat256VectorTests(float[i + 1], float[i]): success [81ms]
test Float256VectorTests.eqFloat256VectorTests(float[i + 1], float[i - length / 2]): success [81ms]
test Float256VectorTests.eqFloat256VectorTests(float[i + 1], float[i + 1]): success [81ms]
test Float256VectorTests.eqFloat256VectorTests(float[i + 1], float[i - 2]): success [81ms]
test Float256VectorTests.eqFloat256VectorTests(float[i + 1], float[zigZag(i)]): success [81ms]
test Float256VectorTests.eqFloat256VectorTests(float[i + 1], float[cornerCaseValue(i)]): success [81ms]
test Float256VectorTests.eqFloat256VectorTests(float[i - 2], float[i]): success [81ms]
test Float256VectorTests.eqFloat256VectorTests(float[i - 2], float[i - length / 2]): success [81ms]
test Float256VectorTests.eqFloat256VectorTests(float[i - 2], float[i + 1]): success [81ms]
test Float256VectorTests.eqFloat256VectorTests(float[i - 2], float[i - 2]): success [81ms]
test Float256VectorTests.eqFloat256VectorTests(float[i - 2], float[zigZag(i)]): success [81ms]
test Float256VectorTests.eqFloat256VectorTests(float[i - 2], float[cornerCaseValue(i)]): success [81ms]
test Float256VectorTests.eqFloat256VectorTests(float[zigZag(i)], float[i]): success [81ms]
test Float256VectorTests.eqFloat256VectorTests(float[zigZag(i)], float[i - length / 2]): success [81ms]
test Float256VectorTests.eqFloat256VectorTests(float[zigZag(i)], float[i + 1]): success [81ms]
test Float256VectorTests.eqFloat256VectorTests(float[zigZag(i)], float[i - 2]): success [81ms]
test Float256VectorTests.eqFloat256VectorTests(float[zigZag(i)], float[zigZag(i)]): success [96ms]
test Float256VectorTests.eqFloat256VectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [80ms]
test Float256VectorTests.eqFloat256VectorTests(float[cornerCaseValue(i)], float[i]): success [80ms]
test Float256VectorTests.eqFloat256VectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [80ms]
test Float256VectorTests.eqFloat256VectorTests(float[cornerCaseValue(i)], float[i + 1]): success [80ms]
test Float256VectorTests.eqFloat256VectorTests(float[cornerCaseValue(i)], float[i - 2]): success [80ms]
test Float256VectorTests.eqFloat256VectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [80ms]
test Float256VectorTests.eqFloat256VectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [80ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i], float[i]): success [2ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i], float[i - length / 2]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i], float[i + 1]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i], float[i - 2]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i], float[zigZag(i)]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i], float[cornerCaseValue(i)]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i - length / 2]): success [36ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i + 1]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i - 2]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[zigZag(i)]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i - length / 2]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i + 1]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i - 2]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[zigZag(i)]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i - length / 2]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i + 1]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i - 2]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[zigZag(i)]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)]): success [61ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i - length / 2]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i + 1]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i - 2]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)]): success [1ms]
test Float256VectorTests.eqFloat256VectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [1ms]
test Float256VectorTests.expandFloat256VectorTests(float[-i * 5], mask[i % 2]): success [194ms]
test Float256VectorTests.expandFloat256VectorTests(float[i * 5], mask[i % 2]): success [79ms]
test Float256VectorTests.expandFloat256VectorTests(float[i + 1], mask[i % 2]): success [157ms]
test Float256VectorTests.expandFloat256VectorTests(float[0.01 + (i / (i + 1))], mask[i % 2]): success [79ms]
test Float256VectorTests.expandFloat256VectorTests(AbstractVectorTest$1@6ed11085, mask[i % 2]): success [79ms]
test Float256VectorTests.expandFloat256VectorTests(float[cornerCaseValue(i)], mask[i % 2]): success [79ms]
test Float256VectorTests.expandFloat256VectorTests(float[-i * 5], mask[true]): success [57ms]
test Float256VectorTests.expandFloat256VectorTests(float[i * 5], mask[true]): success [4ms]
test Float256VectorTests.expandFloat256VectorTests(float[i + 1], mask[true]): success [4ms]
test Float256VectorTests.expandFloat256VectorTests(float[0.01 + (i / (i + 1))], mask[true]): success [4ms]
test Float256VectorTests.expandFloat256VectorTests(AbstractVectorTest$1@6ed11085, mask[true]): success [4ms]
test Float256VectorTests.expandFloat256VectorTests(float[cornerCaseValue(i)], mask[true]): success [4ms]
test Float256VectorTests.expandFloat256VectorTests(float[-i * 5], mask[false]): success [7ms]
test Float256VectorTests.expandFloat256VectorTests(float[i * 5], mask[false]): success [6ms]
test Float256VectorTests.expandFloat256VectorTests(float[i + 1], mask[false]): success [6ms]
test Float256VectorTests.expandFloat256VectorTests(float[0.01 + (i / (i + 1))], mask[false]): success [6ms]
test Float256VectorTests.expandFloat256VectorTests(AbstractVectorTest$1@6ed11085, mask[false]): success [7ms]
test Float256VectorTests.expandFloat256VectorTests(float[cornerCaseValue(i)], mask[false]): success [7ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[i * 5], float[-i * 5]): success [9ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[i * 5], float[i * 5]): success [0ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[i * 5], float[i + 1]): success [0ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[i * 5], float[0.01 + (i / (i + 1))]): success [2ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[i * 5], AbstractVectorTest$1@6ed11085): success [1ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[i + 1], float[-i * 5]): success [0ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[i + 1], float[i * 5]): success [0ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[i + 1], float[i + 1]): success [57ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[i + 1], float[0.01 + (i / (i + 1))]): success [3ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[i + 1], AbstractVectorTest$1@6ed11085): success [2ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[-i * 5]): success [2ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[i * 5]): success [1ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[i + 1]): success [1ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[0.01 + (i / (i + 1))]): success [2ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], AbstractVectorTest$1@6ed11085): success [2ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[cornerCaseValue(i)]): success [1ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[-i * 5]): success [1ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i * 5]): success [1ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i + 1]): success [1ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[0.01 + (i / (i + 1))]): success [2ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, AbstractVectorTest$1@6ed11085): success [2ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085, float[cornerCaseValue(i)]): success [1ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[-i * 5]): success [0ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[i * 5]): success [0ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[0.01 + (i / (i + 1))]): success [0ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[cornerCaseValue(i)], AbstractVectorTest$1@6ed11085): success [0ms]
test Float256VectorTests.fmaFloat256VectorTests(float[-i * 5], float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[-i * 5]): success [10ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[i * 5]): success [19ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[i + 1]): success [1ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[0.01 + (i / (i + 1))]): success [3ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], AbstractVectorTest$1@6ed11085): success [3ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[cornerCaseValue(i)]): success [2ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[-i * 5]): success [1ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[i * 5]): success [1ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[i + 1]): success [1ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[0.01 + (i / (i + 1))]): success [3ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], AbstractVectorTest$1@6ed11085): success [3ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[cornerCaseValue(i)]): success [2ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[-i * 5]): success [3ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[i * 5]): success [3ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[i + 1]): success [2ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[0.01 + (i / (i + 1))]): success [3ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], AbstractVectorTest$1@6ed11085): success [3ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[cornerCaseValue(i)]): success [3ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[-i * 5]): success [2ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i * 5]): success [3ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[i + 1]): success [2ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[0.01 + (i / (i + 1))]): success [3ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, AbstractVectorTest$1@6ed11085): success [3ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, float[cornerCaseValue(i)]): success [3ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[-i * 5]): success [2ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[i * 5]): success [2ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[i + 1]): success [1ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[0.01 + (i / (i + 1))]): success [2ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], AbstractVectorTest$1@6ed11085): success [2ms]
test Float256VectorTests.fmaFloat256VectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [2ms]
test Float256VectorTests.getFloat256VectorTests(float[-i * 5]): success [7ms]
test Float256VectorTests.getFloat256VectorTests(float[i * 5]): success [7ms]
test Float256VectorTests.getFloat256VectorTests(float[i + 1]): success [77ms]
test Float256VectorTests.getFloat256VectorTests(float[0.01 + (i / (i + 1))]): success [4ms]
test Float256VectorTests.getFloat256VectorTests(AbstractVectorTest$1@6ed11085): success [3ms]
test Float256VectorTests.getFloat256VectorTests(float[cornerCaseValue(i)]): success [3ms]
test Float256VectorTests.hashCodeFloat256VectorTestsSmokeTest(float[-i * 5]): success [37ms]
test Float256VectorTests.hashCodeFloat256VectorTestsSmokeTest(float[i * 5]): success [1ms]
test Float256VectorTests.hashCodeFloat256VectorTestsSmokeTest(float[i + 1]): success [1ms]
test Float256VectorTests.hashCodeFloat256VectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [1ms]
test Float256VectorTests.hashCodeFloat256VectorTestsSmokeTest(AbstractVectorTest$1@6ed11085): success [5ms]
test Float256VectorTests.hashCodeFloat256VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [3ms]
test Float256VectorTests.indexInRangeFloat256VectorTestsSmokeTest(0): success [70ms]
test Float256VectorTests.indexInRangeFloat256VectorTestsSmokeTest(-1): success [18ms]
test Float256VectorTests.indexInRangeFloat256VectorTestsSmokeTest(1): success [18ms]
test Float256VectorTests.indexInRangeFloat256VectorTestsSmokeTest(2): success [2ms]
test Float256VectorTests.indexInRangeFloat256VectorTestsSmokeTest(-2): success [3ms]
test Float256VectorTests.indexInRangeLongFloat256VectorTestsSmokeTest(0): success [2ms]
test Float256VectorTests.indexInRangeLongFloat256VectorTestsSmokeTest(-1): success [2ms]
test Float256VectorTests.indexInRangeLongFloat256VectorTestsSmokeTest(1): success [2ms]
test Float256VectorTests.indexInRangeLongFloat256VectorTestsSmokeTest(2): success [2ms]
test Float256VectorTests.indexInRangeLongFloat256VectorTestsSmokeTest(-2): success [2ms]
test Float256VectorTests.loopBoundFloat256VectorTestsSmokeTest(0): success [0ms]
test Float256VectorTests.loopBoundFloat256VectorTestsSmokeTest(1): success [0ms]
test Float256VectorTests.loopBoundFloat256VectorTestsSmokeTest(32): success [0ms]
test Float256VectorTests.loopBoundFloat256VectorTestsSmokeTest(37): success [0ms]
test Float256VectorTests.loopBoundFloat256VectorTestsSmokeTest(1024): success [0ms]
test Float256VectorTests.loopBoundFloat256VectorTestsSmokeTest(1025): success [0ms]
test Float256VectorTests.loopBoundFloat256VectorTestsSmokeTest(1029): success [0ms]
test Float256VectorTests.loopBoundLongFloat256VectorTestsSmokeTest(0): success [0ms]
test Float256VectorTests.loopBoundLongFloat256VectorTestsSmokeTest(1): success [0ms]
test Float256VectorTests.loopBoundLongFloat256VectorTestsSmokeTest(32): success [0ms]
test Float256VectorTests.loopBoundLongFloat256VectorTestsSmokeTest(37): success [0ms]
test Float256VectorTests.loopBoundLongFloat256VectorTestsSmokeTest(1024): success [0ms]
test Float256VectorTests.loopBoundLongFloat256VectorTestsSmokeTest(1025): success [0ms]
test Float256VectorTests.loopBoundLongFloat256VectorTestsSmokeTest(1029): success [0ms]
test Float256VectorTests.ltFloat256VectorTests(float[i], float[i]): success [185ms]
test Float256VectorTests.ltFloat256VectorTests(float[i], float[i - length / 2]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i], float[i + 1]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i], float[i - 2]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i], float[zigZag(i)]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i], float[cornerCaseValue(i)]): success [87ms]
test Float256VectorTests.ltFloat256VectorTests(float[i - length / 2], float[i]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i - length / 2], float[i - length / 2]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i - length / 2], float[i + 1]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i - length / 2], float[i - 2]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i - length / 2], float[zigZag(i)]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i + 1], float[i]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i + 1], float[i - length / 2]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i + 1], float[i + 1]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i + 1], float[i - 2]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i + 1], float[zigZag(i)]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i + 1], float[cornerCaseValue(i)]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i - 2], float[i]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i - 2], float[i - length / 2]): success [95ms]
test Float256VectorTests.ltFloat256VectorTests(float[i - 2], float[i + 1]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i - 2], float[i - 2]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i - 2], float[zigZag(i)]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[i - 2], float[cornerCaseValue(i)]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[zigZag(i)], float[i]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[zigZag(i)], float[i - length / 2]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[zigZag(i)], float[i + 1]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[zigZag(i)], float[i - 2]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[zigZag(i)], float[zigZag(i)]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[cornerCaseValue(i)], float[i]): success [81ms]
test Float256VectorTests.ltFloat256VectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[cornerCaseValue(i)], float[i + 1]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[cornerCaseValue(i)], float[i - 2]): success [88ms]
test Float256VectorTests.ltFloat256VectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [80ms]
test Float256VectorTests.ltFloat256VectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [80ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i], float[i]): success [2ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i], float[i - length / 2]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i], float[i + 1]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i], float[i - 2]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i], float[zigZag(i)]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i], float[cornerCaseValue(i)]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i - length / 2]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i + 1]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i - length / 2], float[i - 2]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i - length / 2], float[zigZag(i)]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i - length / 2], float[cornerCaseValue(i)]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i + 1], float[i]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i + 1], float[i - length / 2]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i + 1], float[i + 1]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i + 1], float[i - 2]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i + 1], float[zigZag(i)]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i + 1], float[cornerCaseValue(i)]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i - 2], float[i]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i - 2], float[i - length / 2]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i - 2], float[i + 1]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i - 2], float[i - 2]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i - 2], float[zigZag(i)]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[i - 2], float[cornerCaseValue(i)]): success [60ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i - length / 2]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i + 1]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i - 2]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[zigZag(i)]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i - length / 2]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i + 1]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i - 2]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)]): success [1ms]
test Float256VectorTests.ltFloat256VectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [1ms]
test Float256VectorTests.maskAndFloat256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Float256VectorTests.maskAndFloat256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float256VectorTests.maskAndNotFloat256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Float256VectorTests.maskAndNotFloat256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float256VectorTests.maskCompressFloat256VectorTestsSmokeTest(mask[i % 2]): success [415ms]
test Float256VectorTests.maskCompressFloat256VectorTestsSmokeTest(mask[true]): success [229ms]
test Float256VectorTests.maskCompressFloat256VectorTestsSmokeTest(mask[false]): success [209ms]
test Float256VectorTests.maskEqFloat256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Float256VectorTests.maskEqFloat256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float256VectorTests.maskEqualsFloat256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Float256VectorTests.maskEqualsFloat256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float256VectorTests.maskFirstTrueFloat256VectorTestsSmokeTest(mask[i % 2]): success [88ms]
test Float256VectorTests.maskFirstTrueFloat256VectorTestsSmokeTest(mask[true]): success [72ms]
test Float256VectorTests.maskFirstTrueFloat256VectorTestsSmokeTest(mask[false]): success [39ms]
test Float256VectorTests.maskFromToLongFloat256VectorTestsSmokeTest(-1): success [57ms]
test Float256VectorTests.maskFromToLongFloat256VectorTestsSmokeTest(0): success [0ms]
test Float256VectorTests.maskFromToLongFloat256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Float256VectorTests.maskFromToLongFloat256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Float256VectorTests.maskHashCodeFloat256VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Float256VectorTests.maskHashCodeFloat256VectorTestsSmokeTest(mask[true]): success [0ms]
test Float256VectorTests.maskHashCodeFloat256VectorTestsSmokeTest(mask[false]): success [0ms]
test Float256VectorTests.maskLastTrueFloat256VectorTestsSmokeTest(mask[i % 2]): success [89ms]
test Float256VectorTests.maskLastTrueFloat256VectorTestsSmokeTest(mask[true]): success [72ms]
test Float256VectorTests.maskLastTrueFloat256VectorTestsSmokeTest(mask[false]): success [57ms]
test Float256VectorTests.maskOrFloat256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [45ms]
test Float256VectorTests.maskOrFloat256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float256VectorTests.maskTrueCountFloat256VectorTestsSmokeTest(mask[i % 2]): success [47ms]
test Float256VectorTests.maskTrueCountFloat256VectorTestsSmokeTest(mask[true]): success [72ms]
test Float256VectorTests.maskTrueCountFloat256VectorTestsSmokeTest(mask[false]): success [40ms]
test Float256VectorTests.maskXorFloat256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Float256VectorTests.maskXorFloat256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Float256VectorTests.maxFloat256VectorTests(float[-i * 5], float[i * 5]): success [6ms]
test Float256VectorTests.maxFloat256VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float256VectorTests.maxFloat256VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float256VectorTests.maxFloat256VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float256VectorTests.maxFloat256VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float256VectorTests.maxFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [6ms]
test Float256VectorTests.maxFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float256VectorTests.maxFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [1ms]
test Float256VectorTests.maxFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [2ms]
test Float256VectorTests.maxFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float256VectorTests.minFloat256VectorTests(float[-i * 5], float[i * 5]): success [5ms]
test Float256VectorTests.minFloat256VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float256VectorTests.minFloat256VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float256VectorTests.minFloat256VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float256VectorTests.minFloat256VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float256VectorTests.minFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [9ms]
test Float256VectorTests.minFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [29ms]
test Float256VectorTests.minFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float256VectorTests.minFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [1ms]
test Float256VectorTests.minFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float256VectorTests.mulFloat256VectorTests(float[-i * 5], float[i * 5]): success [7ms]
test Float256VectorTests.mulFloat256VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float256VectorTests.mulFloat256VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float256VectorTests.mulFloat256VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float256VectorTests.mulFloat256VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [6ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [1ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [6ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [5ms]
test Float256VectorTests.mulFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [111ms]
test Float256VectorTests.mulFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float256VectorTests.mulFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float256VectorTests.negFloat256VectorTests(float[-i * 5]): success [16ms]
test Float256VectorTests.negFloat256VectorTests(float[i * 5]): success [3ms]
test Float256VectorTests.negFloat256VectorTests(float[i + 1]): success [60ms]
test Float256VectorTests.negFloat256VectorTests(float[0.01 + (i / (i + 1))]): success [2ms]
test Float256VectorTests.negFloat256VectorTests(AbstractVectorTest$1@6ed11085): success [2ms]
test Float256VectorTests.negFloat256VectorTests(float[cornerCaseValue(i)]): success [1ms]
test Float256VectorTests.powFloat256VectorTests(float[-i * 5], float[i * 5]): success [29ms]
test Float256VectorTests.powFloat256VectorTests(float[-i * 5], float[i + 1]): success [7ms]
test Float256VectorTests.powFloat256VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [79ms]
test Float256VectorTests.powFloat256VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [3ms]
test Float256VectorTests.powFloat256VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [3ms]
test Float256VectorTests.powFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [13ms]
test Float256VectorTests.powFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [1ms]
test Float256VectorTests.powFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float256VectorTests.powFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [1ms]
test Float256VectorTests.powFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float256VectorTests.shuffleEqualsFloat256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [11ms]
test Float256VectorTests.shuffleEqualsFloat256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [8ms]
test Float256VectorTests.shuffleMiscellaneousFloat256VectorTestsSmokeTest(shuffle[random]): success [39ms]
test Float256VectorTests.shuffleTest(): success [1003ms]
test Float256VectorTests.shuffleToStringFloat256VectorTestsSmokeTest(shuffle[random]): success [34ms]
test Float256VectorTests.sliceBinaryFloat256VectorTestsBinary(float[-i * 5], float[i * 5]): success [1387ms]
test Float256VectorTests.sliceBinaryFloat256VectorTestsBinary(float[-i * 5], float[i + 1]): success [516ms]
test Float256VectorTests.sliceBinaryFloat256VectorTestsBinary(float[-i * 5], float[0.01 + (i / (i + 1))]): success [985ms]
test Float256VectorTests.sliceBinaryFloat256VectorTestsBinary(float[-i * 5], AbstractVectorTest$1@6ed11085): success [746ms]
test Float256VectorTests.sliceBinaryFloat256VectorTestsBinary(float[-i * 5], float[cornerCaseValue(i)]): success [520ms]
test Float256VectorTests.sliceFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [705ms]
test Float256VectorTests.sliceFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [605ms]
test Float256VectorTests.sliceFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [1121ms]
test Float256VectorTests.sliceFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [840ms]
test Float256VectorTests.sliceFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [591ms]
test Float256VectorTests.sliceFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [610ms]
test Float256VectorTests.sliceFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [614ms]
test Float256VectorTests.sliceFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [644ms]
test Float256VectorTests.sliceFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [601ms]
test Float256VectorTests.sliceFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [600ms]
test Float256VectorTests.sliceFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [595ms]
test Float256VectorTests.sliceFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [594ms]
test Float256VectorTests.sliceFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [593ms]
test Float256VectorTests.sliceFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [607ms]
test Float256VectorTests.sliceFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [588ms]
test Float256VectorTests.sliceUnaryFloat256VectorTests(float[-i * 5]): success [706ms]
test Float256VectorTests.sliceUnaryFloat256VectorTests(float[i * 5]): success [491ms]
test Float256VectorTests.sliceUnaryFloat256VectorTests(float[i + 1]): success [700ms]
test Float256VectorTests.sliceUnaryFloat256VectorTests(float[0.01 + (i / (i + 1))]): success [492ms]
test Float256VectorTests.sliceUnaryFloat256VectorTests(AbstractVectorTest$1@6ed11085): success [488ms]
test Float256VectorTests.sliceUnaryFloat256VectorTests(float[cornerCaseValue(i)]): success [487ms]
test Float256VectorTests.smokeTest1(): success [0ms]
test Float256VectorTests.smokeTest2(): success [46ms]
test Float256VectorTests.sqrtFloat256VectorTests(float[-i * 5]): success [15ms]
test Float256VectorTests.sqrtFloat256VectorTests(float[i * 5]): success [3ms]
test Float256VectorTests.sqrtFloat256VectorTests(float[i + 1]): success [61ms]
test Float256VectorTests.sqrtFloat256VectorTests(float[0.01 + (i / (i + 1))]): success [2ms]
test Float256VectorTests.sqrtFloat256VectorTests(AbstractVectorTest$1@6ed11085): success [2ms]
test Float256VectorTests.sqrtFloat256VectorTests(float[cornerCaseValue(i)]): success [2ms]
test Float256VectorTests.subFloat256VectorTests(float[-i * 5], float[i * 5]): success [8ms]
test Float256VectorTests.subFloat256VectorTests(float[-i * 5], float[i + 1]): success [0ms]
test Float256VectorTests.subFloat256VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float256VectorTests.subFloat256VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float256VectorTests.subFloat256VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [7ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [1ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [50ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [7ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@6ed11085): success [0ms]
test Float256VectorTests.subFloat256VectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [26ms]
test Float256VectorTests.subFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [0ms]
test Float256VectorTests.subFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test Float256VectorTests.toDoubleArrayFloat256VectorTestsSmokeTest(float[-i * 5]): success [0ms]
test Float256VectorTests.toDoubleArrayFloat256VectorTestsSmokeTest(float[i * 5]): success [0ms]
test Float256VectorTests.toDoubleArrayFloat256VectorTestsSmokeTest(float[i + 1]): success [0ms]
test Float256VectorTests.toDoubleArrayFloat256VectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [0ms]
test Float256VectorTests.toDoubleArrayFloat256VectorTestsSmokeTest(AbstractVectorTest$1@6ed11085): success [0ms]
test Float256VectorTests.toDoubleArrayFloat256VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [0ms]
test Float256VectorTests.toIntArrayFloat256VectorTestsSmokeTest(float[-i * 5]): success [8ms]
test Float256VectorTests.toIntArrayFloat256VectorTestsSmokeTest(float[i * 5]): success [6ms]
test Float256VectorTests.toIntArrayFloat256VectorTestsSmokeTest(float[i + 1]): success [6ms]
test Float256VectorTests.toIntArrayFloat256VectorTestsSmokeTest(float[intCornerCaseValue(i)]): success [6ms]
test Float256VectorTests.toLongArrayFloat256VectorTestsSmokeTest(float[-i * 5]): success [0ms]
test Float256VectorTests.toLongArrayFloat256VectorTestsSmokeTest(float[i * 5]): success [2ms]
test Float256VectorTests.toLongArrayFloat256VectorTestsSmokeTest(float[i + 1]): success [0ms]
test Float256VectorTests.toLongArrayFloat256VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [0ms]
test Float256VectorTests.toStringFloat256VectorTestsSmokeTest(float[-i * 5]): success [14ms]
test Float256VectorTests.toStringFloat256VectorTestsSmokeTest(float[i * 5]): success [1ms]
test Float256VectorTests.toStringFloat256VectorTestsSmokeTest(float[i + 1]): success [15ms]
test Float256VectorTests.toStringFloat256VectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [22ms]
test Float256VectorTests.toStringFloat256VectorTestsSmokeTest(AbstractVectorTest$1@6ed11085): success [1ms]
test Float256VectorTests.toStringFloat256VectorTestsSmokeTest(float[cornerCaseValue(i)]): success [27ms]
test Float256VectorTests.unsliceBinaryFloat256VectorTestsBinary(float[-i * 5], float[i * 5]): success [775ms]
test Float256VectorTests.unsliceBinaryFloat256VectorTestsBinary(float[-i * 5], float[i + 1]): success [590ms]
test Float256VectorTests.unsliceBinaryFloat256VectorTestsBinary(float[-i * 5], float[0.01 + (i / (i + 1))]): success [1017ms]
test Float256VectorTests.unsliceBinaryFloat256VectorTestsBinary(float[-i * 5], AbstractVectorTest$1@6ed11085): success [507ms]
test Float256VectorTests.unsliceBinaryFloat256VectorTestsBinary(float[-i * 5], float[cornerCaseValue(i)]): success [506ms]
test Float256VectorTests.unsliceFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [1703ms]
test Float256VectorTests.unsliceFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [1025ms]
test Float256VectorTests.unsliceFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [1906ms]
test Float256VectorTests.unsliceFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[i % 2]): success [1288ms]
test Float256VectorTests.unsliceFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [1035ms]
test Float256VectorTests.unsliceFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [1029ms]
test Float256VectorTests.unsliceFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [1048ms]
test Float256VectorTests.unsliceFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [1042ms]
test Float256VectorTests.unsliceFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[true]): success [1150ms]
test Float256VectorTests.unsliceFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [1144ms]
test Float256VectorTests.unsliceFloat256VectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [1201ms]
test Float256VectorTests.unsliceFloat256VectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [1058ms]
test Float256VectorTests.unsliceFloat256VectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [1059ms]
test Float256VectorTests.unsliceFloat256VectorTestsMasked(float[-i * 5], AbstractVectorTest$1@6ed11085, mask[false]): success [1035ms]
test Float256VectorTests.unsliceFloat256VectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [972ms]
test Float256VectorTests.unsliceUnaryFloat256VectorTests(float[-i * 5]): success [732ms]
test Float256VectorTests.unsliceUnaryFloat256VectorTests(float[i * 5]): success [637ms]
test Float256VectorTests.unsliceUnaryFloat256VectorTests(float[i + 1]): success [742ms]
test Float256VectorTests.unsliceUnaryFloat256VectorTests(float[0.01 + (i / (i + 1))]): success [504ms]
test Float256VectorTests.unsliceUnaryFloat256VectorTests(AbstractVectorTest$1@6ed11085): success [515ms]
test Float256VectorTests.unsliceUnaryFloat256VectorTests(float[cornerCaseValue(i)]): success [498ms]
test Float256VectorTests.viewAsFloatingLanesTest(): success [22ms]
test Float256VectorTests.viewAsIntegeralLanesTest(): success [25ms]
test Float256VectorTests.withFloat256VectorTests(float[-i * 5], float[i * 5]): success [34ms]
test Float256VectorTests.withFloat256VectorTests(float[-i * 5], float[i + 1]): success [21ms]
test Float256VectorTests.withFloat256VectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [158ms]
test Float256VectorTests.withFloat256VectorTests(float[-i * 5], AbstractVectorTest$1@6ed11085): success [18ms]
test Float256VectorTests.withFloat256VectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [18ms]

===============================================
jdk/incubator/vector/Float256VectorTests.java
Total tests run: 3215, Passes: 3214, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/14 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Float256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Float256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Float256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Float256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Float256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Float256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Float256VectorTests.d/testng.0.jta jdk/incubator/vector/Float256VectorTests.java false Float256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ByteMaxVectorTests.java
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorTests.java
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
TEST: jdk/incubator/vector/Int256VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.429 seconds
messages:
command: build Int256VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 17:34:17 IST 2025
Test directory:
  compile: Int256VectorTests
finished: Wed Apr 16 17:34:19 IST 2025
elapsed time (seconds): 1.429

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.429 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int256VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 17:34:17 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 7
Process id: 1466001
finished: Wed Apr 16 17:34:19 IST 2025
elapsed time (seconds): 1.429
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int256VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int256VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int256VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int256VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int256VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int256VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int256VectorTests 
TIME:   317.227 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int256VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int256VectorTests 
started: Wed Apr 16 17:34:19 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1469063
finished: Wed Apr 16 17:39:36 IST 2025
elapsed time (seconds): 317.227
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -568497485861769662
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-568497485861769662" to command line.
test Int256VectorTests.ABSInt256VectorTests(int[-i * 5]): success [659ms]
test Int256VectorTests.ABSInt256VectorTests(int[i * 5]): success [8ms]
test Int256VectorTests.ABSInt256VectorTests(int[i + 1]): success [53ms]
test Int256VectorTests.ABSInt256VectorTests(int[cornerCaseValue(i)]): success [6ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[-i * 5], mask[i % 2]): success [207ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[i * 5], mask[i % 2]): success [47ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[i + 1], mask[i % 2]): success [83ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[-i * 5], mask[true]): success [28ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[i * 5], mask[true]): success [2ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[i + 1], mask[true]): success [2ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[-i * 5], mask[false]): success [2ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[i * 5], mask[false]): success [2ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[i + 1], mask[false]): success [2ms]
test Int256VectorTests.ABSMaskedInt256VectorTests(int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int256VectorTests.ADDInt256VectorTests(int[-i * 5], int[i * 5]): success [329ms]
test Int256VectorTests.ADDInt256VectorTests(int[-i * 5], int[i + 1]): success [5ms]
test Int256VectorTests.ADDInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [71ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [16ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [8ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [22ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [15ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int256VectorTests.ADDInt256VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [8ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [170ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [6ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [74ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [5ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [5ms]
test Int256VectorTests.ADDInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int256VectorTests.ADDReduceInt256VectorTests(int[-i * 5]): success [115ms]
test Int256VectorTests.ADDReduceInt256VectorTests(int[i * 5]): success [62ms]
test Int256VectorTests.ADDReduceInt256VectorTests(int[i + 1]): success [3ms]
test Int256VectorTests.ADDReduceInt256VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[-i * 5], mask[i % 2]): success [67ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[i * 5], mask[i % 2]): success [105ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[i + 1], mask[i % 2]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[-i * 5], mask[true]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[i * 5], mask[true]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[i + 1], mask[true]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [14ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[-i * 5], mask[false]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[i * 5], mask[false]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[i + 1], mask[false]): success [2ms]
test Int256VectorTests.ADDReduceInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int256VectorTests.ADDReduceLongInt256VectorTests(int[-i * 5]): success [8ms]
test Int256VectorTests.ADDReduceLongInt256VectorTests(int[i * 5]): success [10ms]
test Int256VectorTests.ADDReduceLongInt256VectorTests(int[i + 1]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[-i * 5], mask[i % 2]): success [7ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [12ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.ADDReduceLongInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.ANDInt256VectorTests(int[-i * 5], int[i * 5]): success [250ms]
test Int256VectorTests.ANDInt256VectorTests(int[-i * 5], int[i + 1]): success [4ms]
test Int256VectorTests.ANDInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [68ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [4ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [17ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [6ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [4ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int256VectorTests.ANDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [72ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [4ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int256VectorTests.ANDInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int256VectorTests.ANDReduceInt256VectorTests(int[-i * 5]): success [136ms]
test Int256VectorTests.ANDReduceInt256VectorTests(int[i * 5]): success [63ms]
test Int256VectorTests.ANDReduceInt256VectorTests(int[i + 1]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[-i * 5], mask[i % 2]): success [35ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[i * 5], mask[i % 2]): success [81ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[i + 1], mask[i % 2]): success [4ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[-i * 5], mask[true]): success [29ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[i * 5], mask[true]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [15ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[i + 1], mask[false]): success [4ms]
test Int256VectorTests.ANDReduceInt256VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [30ms]
test Int256VectorTests.AND_NOTInt256VectorTests(int[-i * 5], int[i * 5]): success [338ms]
test Int256VectorTests.AND_NOTInt256VectorTests(int[-i * 5], int[i + 1]): success [70ms]
test Int256VectorTests.AND_NOTInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [159ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [144ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [69ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [167ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [72ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [71ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [71ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [70ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [70ms]
test Int256VectorTests.AND_NOTInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [107ms]
test Int256VectorTests.ASHRInt256VectorTests(int[-i * 5], int[i * 5]): success [202ms]
test Int256VectorTests.ASHRInt256VectorTests(int[-i * 5], int[i + 1]): success [67ms]
test Int256VectorTests.ASHRInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [164ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [154ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [70ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [165ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [69ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [70ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [71ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [72ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [71ms]
test Int256VectorTests.ASHRInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [73ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [265ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [4ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [60ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftConst(int[-i * 5]): success [8ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftConst(int[i * 5]): success [4ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftConst(int[i + 1]): success [51ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [66ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [5ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [61ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [11ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [4ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [54ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [6ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [3ms]
test Int256VectorTests.ASHRInt256VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [76ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [11ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [131ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [9ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [9ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [8ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [325ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [103ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [60ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [45ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [73ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [4ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [4ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int256VectorTests.BITWISE_BLENDInt256VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], 

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

 5], mask[true]): success [295ms]
test Int256VectorTests.divInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [301ms]
test Int256VectorTests.divInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [296ms]
test Int256VectorTests.divInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [293ms]
test Int256VectorTests.divInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [291ms]
test Int256VectorTests.divInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [293ms]
test Int256VectorTests.eqInt256VectorTests(int[i], int[i]): success [179ms]
test Int256VectorTests.eqInt256VectorTests(int[i], int[i - length / 2]): success [79ms]
test Int256VectorTests.eqInt256VectorTests(int[i], int[i + 1]): success [79ms]
test Int256VectorTests.eqInt256VectorTests(int[i], int[i - 2]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[i], int[zigZag(i)]): success [79ms]
test Int256VectorTests.eqInt256VectorTests(int[i], int[cornerCaseValue(i)]): success [85ms]
test Int256VectorTests.eqInt256VectorTests(int[i - length / 2], int[i]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[i - length / 2], int[i - length / 2]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[i - length / 2], int[i + 1]): success [95ms]
test Int256VectorTests.eqInt256VectorTests(int[i - length / 2], int[i - 2]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[i - length / 2], int[zigZag(i)]): success [79ms]
test Int256VectorTests.eqInt256VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[i + 1], int[i]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[i + 1], int[i - length / 2]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[i + 1], int[i + 1]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[i + 1], int[i - 2]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[i + 1], int[zigZag(i)]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[i - 2], int[i]): success [79ms]
test Int256VectorTests.eqInt256VectorTests(int[i - 2], int[i - length / 2]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[i - 2], int[i + 1]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[i - 2], int[i - 2]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[i - 2], int[zigZag(i)]): success [79ms]
test Int256VectorTests.eqInt256VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [84ms]
test Int256VectorTests.eqInt256VectorTests(int[zigZag(i)], int[i]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[zigZag(i)], int[i - length / 2]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[zigZag(i)], int[i + 1]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[zigZag(i)], int[i - 2]): success [79ms]
test Int256VectorTests.eqInt256VectorTests(int[zigZag(i)], int[zigZag(i)]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [84ms]
test Int256VectorTests.eqInt256VectorTests(int[cornerCaseValue(i)], int[i]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [78ms]
test Int256VectorTests.eqInt256VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [78ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [2ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [10ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [61ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int256VectorTests.eqInt256VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.expandInt256VectorTests(int[-i * 5], mask[i % 2]): success [188ms]
test Int256VectorTests.expandInt256VectorTests(int[i * 5], mask[i % 2]): success [72ms]
test Int256VectorTests.expandInt256VectorTests(int[i + 1], mask[i % 2]): success [145ms]
test Int256VectorTests.expandInt256VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [74ms]
test Int256VectorTests.expandInt256VectorTests(int[-i * 5], mask[true]): success [42ms]
test Int256VectorTests.expandInt256VectorTests(int[i * 5], mask[true]): success [4ms]
test Int256VectorTests.expandInt256VectorTests(int[i + 1], mask[true]): success [3ms]
test Int256VectorTests.expandInt256VectorTests(int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int256VectorTests.expandInt256VectorTests(int[-i * 5], mask[false]): success [6ms]
test Int256VectorTests.expandInt256VectorTests(int[i * 5], mask[false]): success [6ms]
test Int256VectorTests.expandInt256VectorTests(int[i + 1], mask[false]): success [6ms]
test Int256VectorTests.expandInt256VectorTests(int[cornerCaseValue(i)], mask[false]): success [6ms]
test Int256VectorTests.getInt256VectorTests(int[-i * 5]): success [7ms]
test Int256VectorTests.getInt256VectorTests(int[i * 5]): success [7ms]
test Int256VectorTests.getInt256VectorTests(int[i + 1]): success [82ms]
test Int256VectorTests.getInt256VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int256VectorTests.hashCodeInt256VectorTestsSmokeTest(int[-i * 5]): success [38ms]
test Int256VectorTests.hashCodeInt256VectorTestsSmokeTest(int[i * 5]): success [1ms]
test Int256VectorTests.hashCodeInt256VectorTestsSmokeTest(int[i + 1]): success [1ms]
test Int256VectorTests.hashCodeInt256VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.indexInRangeInt256VectorTestsSmokeTest(0): success [70ms]
test Int256VectorTests.indexInRangeInt256VectorTestsSmokeTest(-1): success [2ms]
test Int256VectorTests.indexInRangeInt256VectorTestsSmokeTest(1): success [18ms]
test Int256VectorTests.indexInRangeInt256VectorTestsSmokeTest(2): success [2ms]
test Int256VectorTests.indexInRangeInt256VectorTestsSmokeTest(-2): success [3ms]
test Int256VectorTests.indexInRangeLongInt256VectorTestsSmokeTest(0): success [2ms]
test Int256VectorTests.indexInRangeLongInt256VectorTestsSmokeTest(-1): success [2ms]
test Int256VectorTests.indexInRangeLongInt256VectorTestsSmokeTest(1): success [2ms]
test Int256VectorTests.indexInRangeLongInt256VectorTestsSmokeTest(2): success [2ms]
test Int256VectorTests.indexInRangeLongInt256VectorTestsSmokeTest(-2): success [2ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(0): success [0ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(1): success [0ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(32): success [0ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(37): success [0ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(1024): success [0ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(1025): success [0ms]
test Int256VectorTests.loopBoundInt256VectorTestsSmokeTest(1029): success [0ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(0): success [4ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(1): success [0ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(32): success [0ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(37): success [1ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(1024): success [0ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(1025): success [0ms]
test Int256VectorTests.loopBoundLongInt256VectorTestsSmokeTest(1029): success [0ms]
test Int256VectorTests.ltInt256VectorTests(int[i], int[i]): success [177ms]
test Int256VectorTests.ltInt256VectorTests(int[i], int[i - length / 2]): success [81ms]
test Int256VectorTests.ltInt256VectorTests(int[i], int[i + 1]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[i], int[i - 2]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[i], int[zigZag(i)]): success [80ms]
test Int256VectorTests.ltInt256VectorTests(int[i], int[cornerCaseValue(i)]): success [93ms]
test Int256VectorTests.ltInt256VectorTests(int[i - length / 2], int[i]): success [109ms]
test Int256VectorTests.ltInt256VectorTests(int[i - length / 2], int[i - length / 2]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[i - length / 2], int[i + 1]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[i - length / 2], int[i - 2]): success [78ms]
test Int256VectorTests.ltInt256VectorTests(int[i - length / 2], int[zigZag(i)]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[i + 1], int[i]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[i + 1], int[i - length / 2]): success [78ms]
test Int256VectorTests.ltInt256VectorTests(int[i + 1], int[i + 1]): success [78ms]
test Int256VectorTests.ltInt256VectorTests(int[i + 1], int[i - 2]): success [78ms]
test Int256VectorTests.ltInt256VectorTests(int[i + 1], int[zigZag(i)]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[i - 2], int[i]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[i - 2], int[i - length / 2]): success [82ms]
test Int256VectorTests.ltInt256VectorTests(int[i - 2], int[i + 1]): success [82ms]
test Int256VectorTests.ltInt256VectorTests(int[i - 2], int[i - 2]): success [94ms]
test Int256VectorTests.ltInt256VectorTests(int[i - 2], int[zigZag(i)]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[zigZag(i)], int[i]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[zigZag(i)], int[i - length / 2]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[zigZag(i)], int[i + 1]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[zigZag(i)], int[i - 2]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[zigZag(i)], int[zigZag(i)]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[cornerCaseValue(i)], int[i]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [79ms]
test Int256VectorTests.ltInt256VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [86ms]
test Int256VectorTests.ltInt256VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [79ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i], int[i]): success [2ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [8ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [61ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int256VectorTests.ltInt256VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.maskAndInt256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [16ms]
test Int256VectorTests.maskAndInt256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int256VectorTests.maskAndNotInt256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Int256VectorTests.maskAndNotInt256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int256VectorTests.maskCompressInt256VectorTestsSmokeTest(mask[i % 2]): success [405ms]
test Int256VectorTests.maskCompressInt256VectorTestsSmokeTest(mask[true]): success [216ms]
test Int256VectorTests.maskCompressInt256VectorTestsSmokeTest(mask[false]): success [210ms]
test Int256VectorTests.maskEqInt256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Int256VectorTests.maskEqInt256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int256VectorTests.maskEqualsInt256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int256VectorTests.maskEqualsInt256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int256VectorTests.maskFirstTrueInt256VectorTestsSmokeTest(mask[i % 2]): success [49ms]
test Int256VectorTests.maskFirstTrueInt256VectorTestsSmokeTest(mask[true]): success [70ms]
test Int256VectorTests.maskFirstTrueInt256VectorTestsSmokeTest(mask[false]): success [37ms]
test Int256VectorTests.maskFromToLongInt256VectorTestsSmokeTest(-1): success [73ms]
test Int256VectorTests.maskFromToLongInt256VectorTestsSmokeTest(0): success [0ms]
test Int256VectorTests.maskFromToLongInt256VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int256VectorTests.maskFromToLongInt256VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int256VectorTests.maskHashCodeInt256VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int256VectorTests.maskHashCodeInt256VectorTestsSmokeTest(mask[true]): success [0ms]
test Int256VectorTests.maskHashCodeInt256VectorTestsSmokeTest(mask[false]): success [0ms]
test Int256VectorTests.maskLastTrueInt256VectorTestsSmokeTest(mask[i % 2]): success [86ms]
test Int256VectorTests.maskLastTrueInt256VectorTestsSmokeTest(mask[true]): success [70ms]
test Int256VectorTests.maskLastTrueInt256VectorTestsSmokeTest(mask[false]): success [55ms]
test Int256VectorTests.maskOrInt256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [21ms]
test Int256VectorTests.maskOrInt256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int256VectorTests.maskTrueCountInt256VectorTestsSmokeTest(mask[i % 2]): success [45ms]
test Int256VectorTests.maskTrueCountInt256VectorTestsSmokeTest(mask[true]): success [75ms]
test Int256VectorTests.maskTrueCountInt256VectorTestsSmokeTest(mask[false]): success [38ms]
test Int256VectorTests.maskXorInt256VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Int256VectorTests.maskXorInt256VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int256VectorTests.maxInt256VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int256VectorTests.maxInt256VectorTests(int[-i * 5], int[i + 1]): success [19ms]
test Int256VectorTests.maxInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.maxInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int256VectorTests.maxInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.maxInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.minInt256VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int256VectorTests.minInt256VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.minInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.minInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int256VectorTests.minInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int256VectorTests.minInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [33ms]
test Int256VectorTests.mulInt256VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int256VectorTests.mulInt256VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.mulInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int256VectorTests.mulInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.mulInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.negInt256VectorTests(int[-i * 5]): success [41ms]
test Int256VectorTests.negInt256VectorTests(int[i * 5]): success [3ms]
test Int256VectorTests.negInt256VectorTests(int[i + 1]): success [68ms]
test Int256VectorTests.negInt256VectorTests(int[cornerCaseValue(i)]): success [1ms]
test Int256VectorTests.notInt256VectorTests(int[-i * 5]): success [80ms]
test Int256VectorTests.notInt256VectorTests(int[i * 5]): success [70ms]
test Int256VectorTests.notInt256VectorTests(int[i + 1]): success [140ms]
test Int256VectorTests.notInt256VectorTests(int[cornerCaseValue(i)]): success [63ms]
test Int256VectorTests.orInt256VectorTests(int[-i * 5], int[i * 5]): success [9ms]
test Int256VectorTests.orInt256VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.orInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.orInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int256VectorTests.orInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.orInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.shuffleEqualsInt256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [10ms]
test Int256VectorTests.shuffleEqualsInt256VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [8ms]
test Int256VectorTests.shuffleMiscellaneousInt256VectorTestsSmokeTest(shuffle[random]): success [6ms]
test Int256VectorTests.shuffleTest(): success [424ms]
test Int256VectorTests.shuffleToStringInt256VectorTestsSmokeTest(shuffle[random]): success [37ms]
test Int256VectorTests.sliceBinaryInt256VectorTestsBinary(int[-i * 5], int[i * 5]): success [988ms]
test Int256VectorTests.sliceBinaryInt256VectorTestsBinary(int[-i * 5], int[i + 1]): success [461ms]
test Int256VectorTests.sliceBinaryInt256VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [754ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [634ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [544ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [905ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [531ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [532ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [531ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [609ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [688ms]
test Int256VectorTests.sliceInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [535ms]
test Int256VectorTests.sliceUnaryInt256VectorTests(int[-i * 5]): success [627ms]
test Int256VectorTests.sliceUnaryInt256VectorTests(int[i * 5]): success [431ms]
test Int256VectorTests.sliceUnaryInt256VectorTests(int[i + 1]): success [663ms]
test Int256VectorTests.sliceUnaryInt256VectorTests(int[cornerCaseValue(i)]): success [429ms]
test Int256VectorTests.smokeTest1(): success [0ms]
test Int256VectorTests.smokeTest2(): success [86ms]
test Int256VectorTests.subInt256VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int256VectorTests.subInt256VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int256VectorTests.subInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.subInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int256VectorTests.subInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int256VectorTests.subInt256VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int256VectorTests.subInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int256VectorTests.toDoubleArrayInt256VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int256VectorTests.toDoubleArrayInt256VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int256VectorTests.toDoubleArrayInt256VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int256VectorTests.toDoubleArrayInt256VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.toIntArrayInt256VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int256VectorTests.toIntArrayInt256VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int256VectorTests.toIntArrayInt256VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int256VectorTests.toIntArrayInt256VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.toLongArrayInt256VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int256VectorTests.toLongArrayInt256VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int256VectorTests.toLongArrayInt256VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int256VectorTests.toLongArrayInt256VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int256VectorTests.toStringInt256VectorTestsSmokeTest(int[-i * 5]): success [8ms]
test Int256VectorTests.toStringInt256VectorTestsSmokeTest(int[i * 5]): success [1ms]
test Int256VectorTests.toStringInt256VectorTestsSmokeTest(int[i + 1]): success [13ms]
test Int256VectorTests.toStringInt256VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [12ms]
test Int256VectorTests.unsliceBinaryInt256VectorTestsBinary(int[-i * 5], int[i * 5]): success [737ms]
test Int256VectorTests.unsliceBinaryInt256VectorTestsBinary(int[-i * 5], int[i + 1]): success [504ms]
test Int256VectorTests.unsliceBinaryInt256VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [808ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [1502ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [927ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1711ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [916ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [924ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [935ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [966ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1048ms]
test Int256VectorTests.unsliceInt256VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1014ms]
test Int256VectorTests.unsliceUnaryInt256VectorTests(int[-i * 5]): success [613ms]
test Int256VectorTests.unsliceUnaryInt256VectorTests(int[i * 5]): success [432ms]
test Int256VectorTests.unsliceUnaryInt256VectorTests(int[i + 1]): success [630ms]
test Int256VectorTests.unsliceUnaryInt256VectorTests(int[cornerCaseValue(i)]): success [438ms]
test Int256VectorTests.viewAsFloatingLanesTest(): success [435ms]
test Int256VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int256VectorTests.withInt256VectorTests(int[-i * 5], int[i * 5]): success [41ms]
test Int256VectorTests.withInt256VectorTests(int[-i * 5], int[i + 1]): success [19ms]
test Int256VectorTests.withInt256VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [140ms]

===============================================
jdk/incubator/vector/Int256VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int256VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int256VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int256VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int256VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Int256VectorTests.d/testng.0.jta jdk/incubator/vector/Int256VectorTests.java false Int256VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Float64VectorTests.java
TEST: jdk/incubator/vector/IntMaxVectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.011 seconds
messages:
command: build IntMaxVectorTests
reason: Named class compiled on demand
started: Wed Apr 16 17:36:26 IST 2025
Test directory:
  compile: IntMaxVectorTests
finished: Wed Apr 16 17:36:27 IST 2025
elapsed time (seconds): 1.011

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.01 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/IntMaxVectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 17:36:26 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 5
Process id: 1465855
finished: Wed Apr 16 17:36:27 IST 2025
elapsed time (seconds): 1.01
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/IntMaxVectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/7 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/IntMaxVectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/IntMaxVectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/IntMaxVectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/IntMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/IntMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/IntMaxVectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/IntMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/IntMaxVectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation IntMaxVectorTests 
TIME:   190.192 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation IntMaxVectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation IntMaxVectorTests 
started: Wed Apr 16 17:36:27 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1469745
finished: Wed Apr 16 17:39:37 IST 2025
elapsed time (seconds): 190.192
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -3033772292093435584
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-3033772292093435584" to command line.
test IntMaxVectorTests.ABSIntMaxVectorTests(int[-i * 5]): success [590ms]
test IntMaxVectorTests.ABSIntMaxVectorTests(int[i * 5]): success [8ms]
test IntMaxVectorTests.ABSIntMaxVectorTests(int[i + 1]): success [47ms]
test IntMaxVectorTests.ABSIntMaxVectorTests(int[cornerCaseValue(i)]): success [4ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[-i * 5], mask[i % 2]): success [193ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[i * 5], mask[i % 2]): success [3ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[i + 1], mask[i % 2]): success [68ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[-i * 5], mask[true]): success [3ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[i + 1], mask[true]): success [16ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[cornerCaseValue(i)], mask[true]): success [38ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[-i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.ABSMaskedIntMaxVectorTests(int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTests(int[-i * 5], int[i * 5]): success [261ms]
test IntMaxVectorTests.ADDIntMaxVectorTests(int[-i * 5], int[i + 1]): success [29ms]
test IntMaxVectorTests.ADDIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [60ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [16ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [22ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [128ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [6ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [65ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [8ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.ADDIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [6ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTests(int[-i * 5]): success [93ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTests(int[i * 5]): success [77ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTests(int[i + 1]): success [2ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTests(int[cornerCaseValue(i)]): success [1ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[-i * 5], mask[i % 2]): success [60ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[i * 5], mask[i % 2]): success [92ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[i + 1], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[-i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[-i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[i + 1], mask[false]): success [2ms]
test IntMaxVectorTests.ADDReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [2ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTests(int[-i * 5]): success [9ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTests(int[i * 5]): success [10ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTests(int[i + 1]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[-i * 5], mask[i % 2]): success [7ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[i * 5], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[i + 1], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.ADDReduceLongIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTests(int[-i * 5], int[i * 5]): success [181ms]
test IntMaxVectorTests.ANDIntMaxVectorTests(int[-i * 5], int[i + 1]): success [3ms]
test IntMaxVectorTests.ANDIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [60ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [14ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.ANDIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTests(int[-i * 5]): success [114ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTests(int[i * 5]): success [61ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTests(int[i + 1]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTests(int[cornerCaseValue(i)]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[-i * 5], mask[i % 2]): success [18ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[i * 5], mask[i % 2]): success [79ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[i + 1], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[-i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[-i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.ANDReduceIntMaxVectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [2ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTests(int[-i * 5], int[i * 5]): success [162ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTests(int[-i * 5], int[i + 1]): success [2ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [69ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [103ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.AND_NOTIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTests(int[-i * 5], int[i * 5]): success [114ms]
test IntMaxVectorTests.ASHRIntMaxVectorTests(int[-i * 5], int[i + 1]): success [3ms]
test IntMaxVectorTests.ASHRIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [67ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [75ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShift(int[-i * 5], int[i * 5]): success [191ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShift(int[-i * 5], int[i + 1]): success [2ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [59ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftConst(int[-i * 5]): success [6ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftConst(int[i * 5]): success [2ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftConst(int[i + 1]): success [51ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [59ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [54ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [9ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [2ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [49ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.ASHRIntMaxVectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [108ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [3ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [91ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [332ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [20ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [1ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [4ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [60ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [56ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [3ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [3ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.BITWISE_BLENDIntMaxVectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
tes

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

 int[cornerCaseValue(i)]): success [136ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [9ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [94ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [8ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.divIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [221ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [104ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [240ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [104ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [104ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [104ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [104ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [157ms]
test IntMaxVectorTests.divIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [122ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i], int[i]): success [115ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i], int[i - length / 2]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i], int[i + 1]): success [56ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i], int[i - 2]): success [83ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i], int[zigZag(i)]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i], int[cornerCaseValue(i)]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - length / 2], int[i]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - length / 2], int[i - length / 2]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - length / 2], int[i + 1]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - length / 2], int[i - 2]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - length / 2], int[zigZag(i)]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i + 1], int[i]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i + 1], int[i - length / 2]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i + 1], int[i + 1]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i + 1], int[i - 2]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i + 1], int[zigZag(i)]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i + 1], int[cornerCaseValue(i)]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - 2], int[i]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - 2], int[i - length / 2]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - 2], int[i + 1]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - 2], int[i - 2]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - 2], int[zigZag(i)]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[i - 2], int[cornerCaseValue(i)]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[zigZag(i)], int[i]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[zigZag(i)], int[i - length / 2]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[zigZag(i)], int[i + 1]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[zigZag(i)], int[i - 2]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[zigZag(i)], int[zigZag(i)]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[cornerCaseValue(i)], int[i]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[cornerCaseValue(i)], int[i + 1]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[cornerCaseValue(i)], int[i - 2]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [50ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [1ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [8ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.eqIntMaxVectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[-i * 5], mask[i % 2]): success [104ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[i * 5], mask[i % 2]): success [39ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[i + 1], mask[i % 2]): success [106ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [38ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[-i * 5], mask[true]): success [20ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[i * 5], mask[true]): success [3ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[i + 1], mask[true]): success [2ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[cornerCaseValue(i)], mask[true]): success [2ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[-i * 5], mask[false]): success [4ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[i * 5], mask[false]): success [4ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[i + 1], mask[false]): success [3ms]
test IntMaxVectorTests.expandIntMaxVectorTests(int[cornerCaseValue(i)], mask[false]): success [3ms]
test IntMaxVectorTests.getIntMaxVectorTests(int[-i * 5]): success [4ms]
test IntMaxVectorTests.getIntMaxVectorTests(int[i * 5]): success [4ms]
test IntMaxVectorTests.getIntMaxVectorTests(int[i + 1]): success [65ms]
test IntMaxVectorTests.getIntMaxVectorTests(int[cornerCaseValue(i)]): success [1ms]
test IntMaxVectorTests.hashCodeIntMaxVectorTestsSmokeTest(int[-i * 5]): success [11ms]
test IntMaxVectorTests.hashCodeIntMaxVectorTestsSmokeTest(int[i * 5]): success [1ms]
test IntMaxVectorTests.hashCodeIntMaxVectorTestsSmokeTest(int[i + 1]): success [1ms]
test IntMaxVectorTests.hashCodeIntMaxVectorTestsSmokeTest(int[cornerCaseValue(i)]): success [1ms]
test IntMaxVectorTests.indexInRangeIntMaxVectorTestsSmokeTest(0): success [66ms]
test IntMaxVectorTests.indexInRangeIntMaxVectorTestsSmokeTest(-1): success [2ms]
test IntMaxVectorTests.indexInRangeIntMaxVectorTestsSmokeTest(1): success [16ms]
test IntMaxVectorTests.indexInRangeIntMaxVectorTestsSmokeTest(2): success [1ms]
test IntMaxVectorTests.indexInRangeIntMaxVectorTestsSmokeTest(-2): success [1ms]
test IntMaxVectorTests.indexInRangeLongIntMaxVectorTestsSmokeTest(0): success [2ms]
test IntMaxVectorTests.indexInRangeLongIntMaxVectorTestsSmokeTest(-1): success [2ms]
test IntMaxVectorTests.indexInRangeLongIntMaxVectorTestsSmokeTest(1): success [2ms]
test IntMaxVectorTests.indexInRangeLongIntMaxVectorTestsSmokeTest(2): success [3ms]
test IntMaxVectorTests.indexInRangeLongIntMaxVectorTestsSmokeTest(-2): success [1ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(0): success [0ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(1): success [0ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(32): success [0ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(37): success [0ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(1024): success [0ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(1025): success [0ms]
test IntMaxVectorTests.loopBoundIntMaxVectorTestsSmokeTest(1029): success [0ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(0): success [4ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(1): success [0ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(32): success [0ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(37): success [1ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(1024): success [0ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(1025): success [0ms]
test IntMaxVectorTests.loopBoundLongIntMaxVectorTestsSmokeTest(1029): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i], int[i]): success [118ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i], int[i - length / 2]): success [58ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i], int[i + 1]): success [56ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i], int[i - 2]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i], int[zigZag(i)]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i], int[cornerCaseValue(i)]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - length / 2], int[i]): success [140ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - length / 2], int[i - length / 2]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - length / 2], int[i + 1]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - length / 2], int[i - 2]): success [79ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - length / 2], int[zigZag(i)]): success [63ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [69ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i + 1], int[i]): success [60ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i + 1], int[i - length / 2]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i + 1], int[i + 1]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i + 1], int[i - 2]): success [51ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i + 1], int[zigZag(i)]): success [83ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i + 1], int[cornerCaseValue(i)]): success [51ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - 2], int[i]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - 2], int[i - length / 2]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - 2], int[i + 1]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - 2], int[i - 2]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - 2], int[zigZag(i)]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[i - 2], int[cornerCaseValue(i)]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[zigZag(i)], int[i]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[zigZag(i)], int[i - length / 2]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[zigZag(i)], int[i + 1]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[zigZag(i)], int[i - 2]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[zigZag(i)], int[zigZag(i)]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [58ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[cornerCaseValue(i)], int[i]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[cornerCaseValue(i)], int[i + 1]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[cornerCaseValue(i)], int[i - 2]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [50ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i], int[i]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [3ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [5ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [0ms]
test IntMaxVectorTests.ltIntMaxVectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.maskAndIntMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [15ms]
test IntMaxVectorTests.maskAndIntMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test IntMaxVectorTests.maskAndNotIntMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test IntMaxVectorTests.maskAndNotIntMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test IntMaxVectorTests.maskCompressIntMaxVectorTestsSmokeTest(mask[i % 2]): success [254ms]
test IntMaxVectorTests.maskCompressIntMaxVectorTestsSmokeTest(mask[true]): success [121ms]
test IntMaxVectorTests.maskCompressIntMaxVectorTestsSmokeTest(mask[false]): success [84ms]
test IntMaxVectorTests.maskEqIntMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test IntMaxVectorTests.maskEqIntMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test IntMaxVectorTests.maskEqualsIntMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test IntMaxVectorTests.maskEqualsIntMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test IntMaxVectorTests.maskFirstTrueIntMaxVectorTestsSmokeTest(mask[i % 2]): success [38ms]
test IntMaxVectorTests.maskFirstTrueIntMaxVectorTestsSmokeTest(mask[true]): success [59ms]
test IntMaxVectorTests.maskFirstTrueIntMaxVectorTestsSmokeTest(mask[false]): success [27ms]
test IntMaxVectorTests.maskHashCodeIntMaxVectorTestsSmokeTest(mask[i % 2]): success [0ms]
test IntMaxVectorTests.maskHashCodeIntMaxVectorTestsSmokeTest(mask[true]): success [0ms]
test IntMaxVectorTests.maskHashCodeIntMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test IntMaxVectorTests.maskLastTrueIntMaxVectorTestsSmokeTest(mask[i % 2]): success [73ms]
test IntMaxVectorTests.maskLastTrueIntMaxVectorTestsSmokeTest(mask[true]): success [58ms]
test IntMaxVectorTests.maskLastTrueIntMaxVectorTestsSmokeTest(mask[false]): success [42ms]
test IntMaxVectorTests.maskOrIntMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [18ms]
test IntMaxVectorTests.maskOrIntMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test IntMaxVectorTests.maskTrueCountIntMaxVectorTestsSmokeTest(mask[i % 2]): success [37ms]
test IntMaxVectorTests.maskTrueCountIntMaxVectorTestsSmokeTest(mask[true]): success [68ms]
test IntMaxVectorTests.maskTrueCountIntMaxVectorTestsSmokeTest(mask[false]): success [27ms]
test IntMaxVectorTests.maskXorIntMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test IntMaxVectorTests.maskXorIntMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test IntMaxVectorTests.maxIntMaxVectorTests(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.maxIntMaxVectorTests(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.maxIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.maxIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test IntMaxVectorTests.maxIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.maxIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.minIntMaxVectorTests(int[-i * 5], int[i * 5]): success [12ms]
test IntMaxVectorTests.minIntMaxVectorTests(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.minIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.minIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.minIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.minIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTests(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.mulIntMaxVectorTests(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.mulIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.negIntMaxVectorTests(int[-i * 5]): success [15ms]
test IntMaxVectorTests.negIntMaxVectorTests(int[i * 5]): success [2ms]
test IntMaxVectorTests.negIntMaxVectorTests(int[i + 1]): success [72ms]
test IntMaxVectorTests.negIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.notIntMaxVectorTests(int[-i * 5]): success [17ms]
test IntMaxVectorTests.notIntMaxVectorTests(int[i * 5]): success [1ms]
test IntMaxVectorTests.notIntMaxVectorTests(int[i + 1]): success [76ms]
test IntMaxVectorTests.notIntMaxVectorTests(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.orIntMaxVectorTests(int[-i * 5], int[i * 5]): success [7ms]
test IntMaxVectorTests.orIntMaxVectorTests(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.orIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.orIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.orIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.orIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.shuffleEqualsIntMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [9ms]
test IntMaxVectorTests.shuffleEqualsIntMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [27ms]
test IntMaxVectorTests.shuffleMiscellaneousIntMaxVectorTestsSmokeTest(shuffle[random]): success [16ms]
test IntMaxVectorTests.shuffleTest(): success [313ms]
test IntMaxVectorTests.shuffleToStringIntMaxVectorTestsSmokeTest(shuffle[random]): success [35ms]
test IntMaxVectorTests.sliceBinaryIntMaxVectorTestsBinary(int[-i * 5], int[i * 5]): success [526ms]
test IntMaxVectorTests.sliceBinaryIntMaxVectorTestsBinary(int[-i * 5], int[i + 1]): success [60ms]
test IntMaxVectorTests.sliceBinaryIntMaxVectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [217ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [132ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [60ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [264ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [60ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [77ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [60ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [60ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [60ms]
test IntMaxVectorTests.sliceIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [59ms]
test IntMaxVectorTests.sliceUnaryIntMaxVectorTests(int[-i * 5]): success [197ms]
test IntMaxVectorTests.sliceUnaryIntMaxVectorTests(int[i * 5]): success [56ms]
test IntMaxVectorTests.sliceUnaryIntMaxVectorTests(int[i + 1]): success [181ms]
test IntMaxVectorTests.sliceUnaryIntMaxVectorTests(int[cornerCaseValue(i)]): success [55ms]
test IntMaxVectorTests.smokeTest1(): success [0ms]
test IntMaxVectorTests.smokeTest2(): success [80ms]
test IntMaxVectorTests.subIntMaxVectorTests(int[-i * 5], int[i * 5]): success [5ms]
test IntMaxVectorTests.subIntMaxVectorTests(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [46ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test IntMaxVectorTests.subIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test IntMaxVectorTests.toDoubleArrayIntMaxVectorTestsSmokeTest(int[-i * 5]): success [0ms]
test IntMaxVectorTests.toDoubleArrayIntMaxVectorTestsSmokeTest(int[i * 5]): success [0ms]
test IntMaxVectorTests.toDoubleArrayIntMaxVectorTestsSmokeTest(int[i + 1]): success [0ms]
test IntMaxVectorTests.toDoubleArrayIntMaxVectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.toIntArrayIntMaxVectorTestsSmokeTest(int[-i * 5]): success [0ms]
test IntMaxVectorTests.toIntArrayIntMaxVectorTestsSmokeTest(int[i * 5]): success [0ms]
test IntMaxVectorTests.toIntArrayIntMaxVectorTestsSmokeTest(int[i + 1]): success [0ms]
test IntMaxVectorTests.toIntArrayIntMaxVectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.toLongArrayIntMaxVectorTestsSmokeTest(int[-i * 5]): success [0ms]
test IntMaxVectorTests.toLongArrayIntMaxVectorTestsSmokeTest(int[i * 5]): success [0ms]
test IntMaxVectorTests.toLongArrayIntMaxVectorTestsSmokeTest(int[i + 1]): success [0ms]
test IntMaxVectorTests.toLongArrayIntMaxVectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.toStringIntMaxVectorTestsSmokeTest(int[-i * 5]): success [1ms]
test IntMaxVectorTests.toStringIntMaxVectorTestsSmokeTest(int[i * 5]): success [7ms]
test IntMaxVectorTests.toStringIntMaxVectorTestsSmokeTest(int[i + 1]): success [4ms]
test IntMaxVectorTests.toStringIntMaxVectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test IntMaxVectorTests.unsliceBinaryIntMaxVectorTestsBinary(int[-i * 5], int[i * 5]): success [208ms]
test IntMaxVectorTests.unsliceBinaryIntMaxVectorTestsBinary(int[-i * 5], int[i + 1]): success [58ms]
test IntMaxVectorTests.unsliceBinaryIntMaxVectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [219ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [488ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [115ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [450ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [114ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [114ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [114ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [150ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [115ms]
test IntMaxVectorTests.unsliceIntMaxVectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [115ms]
test IntMaxVectorTests.unsliceUnaryIntMaxVectorTests(int[-i * 5]): success [183ms]
test IntMaxVectorTests.unsliceUnaryIntMaxVectorTests(int[i * 5]): success [55ms]
test IntMaxVectorTests.unsliceUnaryIntMaxVectorTests(int[i + 1]): success [266ms]
test IntMaxVectorTests.unsliceUnaryIntMaxVectorTests(int[cornerCaseValue(i)]): success [55ms]
test IntMaxVectorTests.viewAsFloatingLanesTest(): success [422ms]
test IntMaxVectorTests.viewAsIntegeralLanesTest(): success [0ms]
test IntMaxVectorTests.withIntMaxVectorTests(int[-i * 5], int[i * 5]): success [18ms]
test IntMaxVectorTests.withIntMaxVectorTests(int[-i * 5], int[i + 1]): success [18ms]
test IntMaxVectorTests.withIntMaxVectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [90ms]

===============================================
jdk/incubator/vector/IntMaxVectorTests.java
Total tests run: 3618, Passes: 3616, Failures: 2, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/7 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/IntMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/IntMaxVectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/IntMaxVectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/IntMaxVectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/IntMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/jdk/incubator/vector/IntMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/1/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/IntMaxVectorTests.d/testng.0.jta jdk/incubator/vector/IntMaxVectorTests.java false IntMaxVectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
--------------------------------------------------
TEST: jdk/incubator/vector/Int128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.478 seconds
messages:
command: build Int128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 17:34:06 IST 2025
Test directory:
  compile: Int128VectorTests
finished: Wed Apr 16 17:34:07 IST 2025
elapsed time (seconds): 1.478

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.477 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 17:34:06 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 10
Process id: 1466283
finished: Wed Apr 16 17:34:07 IST 2025
elapsed time (seconds): 1.477
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/15 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests 
TIME:   333.811 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests 
started: Wed Apr 16 17:34:07 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1468971
finished: Wed Apr 16 17:39:41 IST 2025
elapsed time (seconds): 333.811
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 6253755617591121154
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=6253755617591121154" to command line.
test Int128VectorTests.ABSInt128VectorTests(int[-i * 5]): success [587ms]
test Int128VectorTests.ABSInt128VectorTests(int[i * 5]): success [49ms]
test Int128VectorTests.ABSInt128VectorTests(int[i + 1]): success [8ms]
test Int128VectorTests.ABSInt128VectorTests(int[cornerCaseValue(i)]): success [5ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[i % 2]): success [208ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[i % 2]): success [116ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[i % 2]): success [2ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[true]): success [28ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[false]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[i * 5]): success [255ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[i + 1]): success [60ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [17ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [8ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [23ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [9ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [122ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [64ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[-i * 5]): success [126ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[i * 5]): success [3ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[i + 1]): success [79ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [110ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [80ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[true]): success [20ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [21ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[false]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[false]): success [2ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [31ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[-i * 5]): success [20ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[i * 5]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [9ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [12ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[i * 5]): success [194ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[i + 1]): success [64ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [28ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [9ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [9ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [9ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [68ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[-i * 5]): success [139ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[i * 5]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[i + 1]): success [66ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [67ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [39ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [53ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[true]): success [30ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [15ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[i * 5]): success [183ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[i + 1]): success [73ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [65ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [78ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [15ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [38ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[i * 5]): success [118ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[i + 1]): success [88ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [79ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [73ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [195ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [61ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[-i * 5]): success [12ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[i * 5]): success [55ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[i + 1]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [62ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [57ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [13ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [50ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [2ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [4ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [21ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [108ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [90ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [331ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [102ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [81ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [7ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [69ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [44ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [22ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): failure [70ms]
java.lang.AssertionError: at index #760, input1 = -3800, input2 = 2147483647, input3 = 2147483647, mask = false expected [-3800] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:907)
	at Int128VectorTests.assertBroadcastArraysEquals(Int128VectorTests.java:650)
	at Int128VectorTests.assertBroadcastArraysEquals(Int128VectorTests.java:638)
	at Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(Int128VectorTests.java:5614)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

ectorTests.divInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [204ms]
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [203ms]
test Int128VectorTests.divInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [213ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i]): success [238ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i - length / 2]): success [109ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i + 1]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i - 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[zigZag(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i - length / 2]): success [101ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i + 1]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i - 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[zigZag(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i - length / 2]): success [105ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i + 1]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i - 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[zigZag(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i - length / 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i + 1]): success [98ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i - 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[zigZag(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i - length / 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i + 1]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i - 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[zigZag(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [9ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [54ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [29ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [2ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[i % 2]): success [159ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[i % 2]): success [147ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[i % 2]): success [79ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [78ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[true]): success [31ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[true]): success [6ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[true]): success [6ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[true]): success [6ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[false]): success [8ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[false]): success [8ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[false]): success [8ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[false]): success [8ms]
test Int128VectorTests.getInt128VectorTests(int[-i * 5]): success [8ms]
test Int128VectorTests.getInt128VectorTests(int[i * 5]): success [66ms]
test Int128VectorTests.getInt128VectorTests(int[i + 1]): success [3ms]
test Int128VectorTests.getInt128VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[-i * 5]): success [39ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[i * 5]): success [1ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[i + 1]): success [16ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(0): success [74ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(-1): success [3ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(1): success [20ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(2): success [3ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(-2): success [4ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(0): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(-1): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(1): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(2): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(-2): success [3ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(0): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(32): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(37): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1024): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1025): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1029): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(0): success [4ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(32): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(37): success [1ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1024): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1025): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1029): success [0ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i]): success [199ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i - length / 2]): success [123ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i + 1]): success [102ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i - 2]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[zigZag(i)]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[cornerCaseValue(i)]): success [102ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i]): success [132ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i - length / 2]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i + 1]): success [116ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i - 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[zigZag(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i - length / 2]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i + 1]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i - 2]): success [102ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[zigZag(i)]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [102ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i]): success [102ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i - length / 2]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i + 1]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i - 2]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[zigZag(i)]): success [102ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i - length / 2]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i + 1]): success [103ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i - 2]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[zigZag(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [102ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [102ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [102ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [103ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [102ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [5ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [73ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [29ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.maskAndInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Int128VectorTests.maskAndInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskAndNotInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test Int128VectorTests.maskAndNotInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[i % 2]): success [256ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[true]): success [122ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[false]): success [83ms]
test Int128VectorTests.maskEqInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Int128VectorTests.maskEqInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskEqualsInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int128VectorTests.maskEqualsInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[i % 2]): success [39ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[true]): success [60ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[false]): success [27ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(-1): success [77ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(0): success [0ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[true]): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[false]): success [0ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[i % 2]): success [74ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[true]): success [62ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[false]): success [43ms]
test Int128VectorTests.maskOrInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [21ms]
test Int128VectorTests.maskOrInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[i % 2]): success [38ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[true]): success [80ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[false]): success [29ms]
test Int128VectorTests.maskXorInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Int128VectorTests.maskXorInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [39ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.negInt128VectorTests(int[-i * 5]): success [19ms]
test Int128VectorTests.negInt128VectorTests(int[i * 5]): success [84ms]
test Int128VectorTests.negInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.negInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.notInt128VectorTests(int[-i * 5]): success [19ms]
test Int128VectorTests.notInt128VectorTests(int[i * 5]): success [80ms]
test Int128VectorTests.notInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.notInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.shuffleEqualsInt128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [12ms]
test Int128VectorTests.shuffleEqualsInt128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [9ms]
test Int128VectorTests.shuffleMiscellaneousInt128VectorTestsSmokeTest(shuffle[random]): success [3ms]
test Int128VectorTests.shuffleTest(): success [315ms]
test Int128VectorTests.shuffleToStringInt128VectorTestsSmokeTest(shuffle[random]): success [40ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i * 5]): success [701ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i + 1]): success [281ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [120ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [196ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [325ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [139ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [129ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [123ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [122ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [232ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [122ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [155ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[-i * 5]): success [257ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[i * 5]): success [244ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[i + 1]): success [180ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[cornerCaseValue(i)]): success [112ms]
test Int128VectorTests.smokeTest1(): success [0ms]
test Int128VectorTests.smokeTest2(): success [79ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[-i * 5]): success [1ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[i * 5]): success [1ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[i + 1]): success [1ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i * 5]): success [268ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i + 1]): success [275ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [112ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [614ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [572ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [242ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [260ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [234ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [282ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [230ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [425ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [246ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[-i * 5]): success [246ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[i * 5]): success [242ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[i + 1]): success [111ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[cornerCaseValue(i)]): success [111ms]
test Int128VectorTests.viewAsFloatingLanesTest(): success [455ms]
test Int128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[i * 5]): success [45ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[i + 1]): success [123ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [33ms]

===============================================
jdk/incubator/vector/Int128VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/15 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Int128VectorTests.d/testng.0.jta jdk/incubator/vector/Int128VectorTests.java false Int128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/MethodOverideTest.java
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
Passed: jdk/incubator/vector/Int512VectorTests.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long256VectorTests.java
TEST: jdk/incubator/vector/Long128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.947 seconds
messages:
command: build Long128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 17:36:50 IST 2025
Test directory:
  compile: Long128VectorTests
finished: Wed Apr 16 17:36:51 IST 2025
elapsed time (seconds): 0.947

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.947 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 17:36:50 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 6
Process id: 1465925
finished: Wed Apr 16 17:36:51 IST 2025
elapsed time (seconds): 0.947
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/9 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests 
TIME:   247.328 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests 
started: Wed Apr 16 17:36:51 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1469914
finished: Wed Apr 16 17:40:58 IST 2025
elapsed time (seconds): 247.328
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 5689896175994546386
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=5689896175994546386" to command line.
test Long128VectorTests.ABSLong128VectorTests(long[-i * 5]): success [551ms]
test Long128VectorTests.ABSLong128VectorTests(long[i * 5]): success [48ms]
test Long128VectorTests.ABSLong128VectorTests(long[i + 1]): success [6ms]
test Long128VectorTests.ABSLong128VectorTests(long[cornerCaseValue(i)]): success [5ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[i % 2]): success [215ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[i % 2]): success [111ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[true]): success [6ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[false]): success [6ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[i * 5]): success [261ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[i + 1]): success [90ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [8ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [122ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [64ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [10ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[-i * 5]): success [134ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[i * 5]): success [41ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[i + 1]): success [1ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [105ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [84ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[true]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[true]): success [13ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [10ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[-i * 5]): success [5ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[i * 5]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[i * 5]): success [147ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[i + 1]): success [59ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [20ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [3ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [5ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [16ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [73ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[-i * 5]): success [121ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[i * 5]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[i + 1]): success [62ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [67ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [80ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[true]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [28ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [13ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[i * 5]): success [164ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[i + 1]): success [72ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [62ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [75ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[i * 5]): success [105ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[i + 1]): success [71ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [80ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [74ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [20ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [173ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [56ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[-i * 5]): success [8ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[i * 5]): success [54ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[i + 1]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [58ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [54ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [14ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [49ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [113ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [88ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [444ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [5ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [4ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [83ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [74ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [7ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [23ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [3ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(l

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

ltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [5ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [5ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.bitwiseBlendLong128VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.bitwiseDivByZeroSmokeTest(): success [10ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[i % 2]): success [25ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[i % 2]): success [60ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[i % 2]): success [160ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[i % 2]): success [148ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[i % 2]): success [42ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [43ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[true]): success [67ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[true]): success [6ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[true]): success [5ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [5ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [6ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[i * 5]): success [164ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[i + 1]): success [179ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [80ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [107ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [17ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [272ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [280ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [154ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [152ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [149ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [149ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [150ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [149ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [173ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i]): success [172ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i - length / 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i + 1]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i - 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[zigZag(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[cornerCaseValue(i)]): success [73ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i - length / 2]): success [75ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i + 1]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i - 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[zigZag(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i - length / 2]): success [74ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i + 1]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i - 2]): success [80ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[zigZag(i)]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i - length / 2]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i + 1]): success [79ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i - 2]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[zigZag(i)]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i - length / 2]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i + 1]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i - 2]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[zigZag(i)]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [81ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [75ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [72ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [71ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [57ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[i % 2]): success [116ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[i % 2]): success [122ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[i % 2]): success [44ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [44ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[true]): success [23ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[false]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[false]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[false]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.getLong128VectorTests(long[-i * 5]): success [6ms]
test Long128VectorTests.getLong128VectorTests(long[i * 5]): success [61ms]
test Long128VectorTests.getLong128VectorTests(long[i + 1]): success [2ms]
test Long128VectorTests.getLong128VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[-i * 5]): success [38ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[i * 5]): success [2ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[i + 1]): success [4ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(0): success [74ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(-1): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(1): success [19ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(2): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(-2): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(0): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(-1): success [3ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(1): success [3ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(2): success [5ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(-2): success [3ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(32): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(37): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1024): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1025): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1029): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(32): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(37): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1024): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1025): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1029): success [0ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i]): success [177ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i - length / 2]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i + 1]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i - 2]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[zigZag(i)]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[cornerCaseValue(i)]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i + 1]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i - 2]): success [73ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[zigZag(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i - length / 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i + 1]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i - 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[zigZag(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i - length / 2]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i + 1]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i - 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[zigZag(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i - length / 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i + 1]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i - 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[zigZag(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [72ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [10ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [56ms]
test Long128VectorTests.maskAndLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [22ms]
test Long128VectorTests.maskAndLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskAndNotLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Long128VectorTests.maskAndNotLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[i % 2]): success [297ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[true]): success [61ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[false]): success [79ms]
test Long128VectorTests.maskEqLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Long128VectorTests.maskEqLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskEqualsLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long128VectorTests.maskEqualsLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[i % 2]): success [34ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[true]): success [53ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[false]): success [20ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(-1): success [62ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[true]): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[false]): success [0ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[i % 2]): success [62ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[true]): success [53ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[false]): success [34ms]
test Long128VectorTests.maskOrLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [19ms]
test Long128VectorTests.maskOrLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[i % 2]): success [28ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[true]): success [53ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[false]): success [21ms]
test Long128VectorTests.maskXorLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long128VectorTests.maskXorLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [22ms]
test Long128VectorTests.negLong128VectorTests(long[-i * 5]): success [16ms]
test Long128VectorTests.negLong128VectorTests(long[i * 5]): success [47ms]
test Long128VectorTests.negLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.negLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.notLong128VectorTests(long[-i * 5]): success [22ms]
test Long128VectorTests.notLong128VectorTests(long[i * 5]): success [51ms]
test Long128VectorTests.notLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.notLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[i * 5]): success [9ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.shuffleEqualsLong128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [467ms]
test Long128VectorTests.shuffleEqualsLong128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [48ms]
test Long128VectorTests.shuffleMiscellaneousLong128VectorTestsSmokeTest(shuffle[random]): success [23ms]
test Long128VectorTests.shuffleTest(): success [344ms]
test Long128VectorTests.shuffleToStringLong128VectorTestsSmokeTest(shuffle[random]): success [49ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i * 5]): success [603ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i + 1]): success [268ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [92ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [173ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [317ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [90ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [91ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [90ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [90ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [90ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [90ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [90ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[-i * 5]): success [246ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[i * 5]): success [234ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[i + 1]): success [82ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[cornerCaseValue(i)]): success [82ms]
test Long128VectorTests.smokeTest1(): success [0ms]
test Long128VectorTests.smokeTest2(): success [49ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [22ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [34ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [11ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [5ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [8ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[i * 5]): success [6ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[i + 1]): success [5ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [5ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[-i * 5]): success [2ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[i * 5]): success [7ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[i + 1]): success [43ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i * 5]): success [252ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i + 1]): success [268ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [212ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [550ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [521ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [163ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [163ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [330ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [163ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [162ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [168ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [161ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[-i * 5]): success [227ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[i * 5]): success [210ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[i + 1]): success [96ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[cornerCaseValue(i)]): success [82ms]
test Long128VectorTests.viewAsFloatingLanesTest(): success [237ms]
test Long128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[i * 5]): success [44ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[i + 1]): success [115ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [33ms]

===============================================
jdk/incubator/vector/Long128VectorTests.java
Total tests run: 3321, Passes: 3319, Failures: 2, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/9 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/0/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Long128VectorTests.d/testng.0.jta jdk/incubator/vector/Long128VectorTests.java false Long128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
--------------------------------------------------
Passed: jdk/incubator/vector/Long512VectorTests.java
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/UnalignedHeapTest.java
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
TEST: jdk/incubator/vector/LongMaxVectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.781 seconds
messages:
command: build LongMaxVectorTests
reason: Named class compiled on demand
started: Wed Apr 16 17:39:36 IST 2025
Test directory:
  compile: LongMaxVectorTests
finished: Wed Apr 16 17:39:37 IST 2025
elapsed time (seconds): 0.781

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.781 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 17:39:36 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 7
Process id: 1466001
finished: Wed Apr 16 17:39:37 IST 2025
elapsed time (seconds): 0.781
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/LongMaxVectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation LongMaxVectorTests 
TIME:   147.282 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation LongMaxVectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation LongMaxVectorTests 
started: Wed Apr 16 17:39:37 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1470821
finished: Wed Apr 16 17:42:04 IST 2025
elapsed time (seconds): 147.282
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -9093849785120676802
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-9093849785120676802" to command line.
test LongMaxVectorTests.ABSLongMaxVectorTests(long[-i * 5]): success [568ms]
test LongMaxVectorTests.ABSLongMaxVectorTests(long[i * 5]): success [7ms]
test LongMaxVectorTests.ABSLongMaxVectorTests(long[i + 1]): success [48ms]
test LongMaxVectorTests.ABSLongMaxVectorTests(long[cornerCaseValue(i)]): success [4ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[-i * 5], mask[i % 2]): success [217ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i * 5], mask[i % 2]): success [3ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i + 1], mask[i % 2]): success [69ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[-i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i + 1], mask[true]): success [14ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[cornerCaseValue(i)], mask[true]): success [34ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[-i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ABSMaskedLongMaxVectorTests(long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTests(long[-i * 5], long[i * 5]): success [258ms]
test LongMaxVectorTests.ADDLongMaxVectorTests(long[-i * 5], long[i + 1]): success [7ms]
test LongMaxVectorTests.ADDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [61ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [148ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [64ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [29ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ADDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[-i * 5]): success [18ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[i * 5]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[i + 1]): success [1ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[-i * 5], mask[i % 2]): success [9ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ADDReduceLongLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[-i * 5]): success [86ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[i * 5]): success [90ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[i + 1]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[i % 2]): success [53ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i * 5], mask[i % 2]): success [87ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[true]): success [3ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i * 5], mask[true]): success [2ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i + 1], mask[true]): success [2ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [2ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[false]): success [2ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i * 5], mask[false]): success [2ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[i + 1], mask[false]): success [3ms]
test LongMaxVectorTests.ADDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [17ms]
test LongMaxVectorTests.ANDLongMaxVectorTests(long[-i * 5], long[i * 5]): success [105ms]
test LongMaxVectorTests.ANDLongMaxVectorTests(long[-i * 5], long[i + 1]): success [5ms]
test LongMaxVectorTests.ANDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [61ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [22ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [5ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [65ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [4ms]
test LongMaxVectorTests.ANDLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[-i * 5]): success [94ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[i * 5]): success [63ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[i + 1]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTests(long[cornerCaseValue(i)]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[i % 2]): success [21ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i * 5], mask[i % 2]): success [80ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i + 1], mask[i % 2]): success [28ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[true]): success [17ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[-i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ANDReduceLongMaxVectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [28ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTests(long[-i * 5], long[i * 5]): success [137ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTests(long[-i * 5], long[i + 1]): success [2ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [72ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [106ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [80ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [4ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.AND_NOTLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTests(long[-i * 5], long[i * 5]): success [103ms]
test LongMaxVectorTests.ASHRLongMaxVectorTests(long[-i * 5], long[i + 1]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [67ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [76ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [74ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShift(long[-i * 5], long[i * 5]): success [173ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShift(long[-i * 5], long[i + 1]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [57ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[-i * 5]): success [7ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[i * 5]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[i + 1]): success [55ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [58ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [55ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [11ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [2ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [49ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.ASHRLongMaxVectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [107ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [3ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [88ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [510ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [4ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [6ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [7ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [64ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [5ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.BITWISE_BLENDLongMaxVectorTestsBroadcastSmokeTest(lon

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

er.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[i + 1], mask[i % 2]): success [55ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [58ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.blendLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[-i * 5], mask[i % 2]): success [136ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i * 5], mask[i % 2]): success [23ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i + 1], mask[i % 2]): success [93ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [21ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[-i * 5], mask[true]): success [63ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i * 5], mask[true]): success [3ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i + 1], mask[true]): success [3ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[cornerCaseValue(i)], mask[true]): success [3ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[-i * 5], mask[false]): success [3ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i * 5], mask[false]): success [3ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[i + 1], mask[false]): success [4ms]
test LongMaxVectorTests.compressLongMaxVectorTests(long[cornerCaseValue(i)], mask[false]): success [3ms]
test LongMaxVectorTests.divLongMaxVectorTests(long[-i * 5], long[i * 5]): success [128ms]
test LongMaxVectorTests.divLongMaxVectorTests(long[-i * 5], long[i + 1]): success [40ms]
test LongMaxVectorTests.divLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [179ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [10ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [105ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [30ms]
test LongMaxVectorTests.divLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [194ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [76ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [212ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [129ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [75ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [74ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [74ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [74ms]
test LongMaxVectorTests.divLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [81ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i]): success [141ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i - length / 2]): success [37ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i + 1]): success [76ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[i - 2]): success [64ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[zigZag(i)]): success [36ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i], long[cornerCaseValue(i)]): success [36ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i]): success [36ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i - length / 2]): success [36ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i + 1]): success [40ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[i - 2]): success [43ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[zigZag(i)]): success [36ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [51ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i]): success [45ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i - length / 2]): success [48ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i + 1]): success [63ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[i - 2]): success [41ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i + 1], long[cornerCaseValue(i)]): success [36ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i]): success [36ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i - length / 2]): success [36ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i + 1]): success [36ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[i - 2]): success [36ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[zigZag(i)]): success [36ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[i - 2], long[cornerCaseValue(i)]): success [36ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i]): success [61ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i - length / 2]): success [66ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i + 1]): success [36ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[i - 2]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i + 1]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[i - 2]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [35ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.eqLongMaxVectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[-i * 5], mask[i % 2]): success [113ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i * 5], mask[i % 2]): success [22ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i + 1], mask[i % 2]): success [181ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [21ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[-i * 5], mask[true]): success [27ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i * 5], mask[true]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i + 1], mask[true]): success [2ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[cornerCaseValue(i)], mask[true]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[-i * 5], mask[false]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i * 5], mask[false]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[i + 1], mask[false]): success [3ms]
test LongMaxVectorTests.expandLongMaxVectorTests(long[cornerCaseValue(i)], mask[false]): success [4ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[-i * 5]): success [3ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[i * 5]): success [2ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[i + 1]): success [94ms]
test LongMaxVectorTests.getLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[-i * 5]): success [41ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[i * 5]): success [1ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[i + 1]): success [1ms]
test LongMaxVectorTests.hashCodeLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [1ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(0): success [71ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(-1): success [1ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(1): success [16ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(2): success [1ms]
test LongMaxVectorTests.indexInRangeLongLongMaxVectorTestsSmokeTest(-2): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(0): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(-1): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(1): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(2): success [2ms]
test LongMaxVectorTests.indexInRangeLongMaxVectorTestsSmokeTest(-2): success [2ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(0): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(32): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(37): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1024): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1025): success [0ms]
test LongMaxVectorTests.loopBoundLongLongMaxVectorTestsSmokeTest(1029): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(0): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(32): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(37): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1024): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1025): success [0ms]
test LongMaxVectorTests.loopBoundLongMaxVectorTestsSmokeTest(1029): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i]): success [196ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i - length / 2]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i + 1]): success [37ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[i - 2]): success [100ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[zigZag(i)]): success [80ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i], long[cornerCaseValue(i)]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i - length / 2]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i + 1]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[i - 2]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[zigZag(i)]): success [84ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [44ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i - length / 2]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i + 1]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[i - 2]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[zigZag(i)]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i + 1], long[cornerCaseValue(i)]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i - length / 2]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i + 1]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[i - 2]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[zigZag(i)]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[i - 2], long[cornerCaseValue(i)]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i - length / 2]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i + 1]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[i - 2]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[zigZag(i)]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i]): success [38ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i + 1]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[i - 2]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [36ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i]): success [1ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test LongMaxVectorTests.ltLongMaxVectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.maskAndLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test LongMaxVectorTests.maskAndLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskAndNotLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test LongMaxVectorTests.maskAndNotLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskCompressLongMaxVectorTestsSmokeTest(mask[i % 2]): success [291ms]
test LongMaxVectorTests.maskCompressLongMaxVectorTestsSmokeTest(mask[true]): success [92ms]
test LongMaxVectorTests.maskCompressLongMaxVectorTestsSmokeTest(mask[false]): success [63ms]
test LongMaxVectorTests.maskEqLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test LongMaxVectorTests.maskEqLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskEqualsLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test LongMaxVectorTests.maskEqualsLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskFirstTrueLongMaxVectorTestsSmokeTest(mask[i % 2]): success [35ms]
test LongMaxVectorTests.maskFirstTrueLongMaxVectorTestsSmokeTest(mask[true]): success [73ms]
test LongMaxVectorTests.maskFirstTrueLongMaxVectorTestsSmokeTest(mask[false]): success [21ms]
test LongMaxVectorTests.maskHashCodeLongMaxVectorTestsSmokeTest(mask[i % 2]): success [0ms]
test LongMaxVectorTests.maskHashCodeLongMaxVectorTestsSmokeTest(mask[true]): success [0ms]
test LongMaxVectorTests.maskHashCodeLongMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test LongMaxVectorTests.maskLastTrueLongMaxVectorTestsSmokeTest(mask[i % 2]): success [73ms]
test LongMaxVectorTests.maskLastTrueLongMaxVectorTestsSmokeTest(mask[true]): success [73ms]
test LongMaxVectorTests.maskLastTrueLongMaxVectorTestsSmokeTest(mask[false]): success [39ms]
test LongMaxVectorTests.maskOrLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [24ms]
test LongMaxVectorTests.maskOrLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maskTrueCountLongMaxVectorTestsSmokeTest(mask[i % 2]): success [52ms]
test LongMaxVectorTests.maskTrueCountLongMaxVectorTestsSmokeTest(mask[true]): success [73ms]
test LongMaxVectorTests.maskTrueCountLongMaxVectorTestsSmokeTest(mask[false]): success [21ms]
test LongMaxVectorTests.maskXorLongMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test LongMaxVectorTests.maskXorLongMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTests(long[-i * 5], long[i * 5]): success [6ms]
test LongMaxVectorTests.maxLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test LongMaxVectorTests.maxLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.maxLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTests(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.minLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.minLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.minLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTests(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.mulLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[-i * 5]): success [15ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[i * 5]): success [1ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[i + 1]): success [75ms]
test LongMaxVectorTests.negLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[-i * 5]): success [22ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[i * 5]): success [1ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[i + 1]): success [81ms]
test LongMaxVectorTests.notLongMaxVectorTests(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTests(long[-i * 5], long[i * 5]): success [8ms]
test LongMaxVectorTests.orLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.orLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.orLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.shuffleEqualsLongMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [442ms]
test LongMaxVectorTests.shuffleEqualsLongMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [20ms]
test LongMaxVectorTests.shuffleMiscellaneousLongMaxVectorTestsSmokeTest(shuffle[random]): success [11ms]
test LongMaxVectorTests.shuffleTest(): success [421ms]
test LongMaxVectorTests.shuffleToStringLongMaxVectorTestsSmokeTest(shuffle[random]): success [100ms]
test LongMaxVectorTests.sliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i * 5]): success [545ms]
test LongMaxVectorTests.sliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i + 1]): success [45ms]
test LongMaxVectorTests.sliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [224ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [123ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [44ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [271ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [43ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [43ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [43ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [43ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [43ms]
test LongMaxVectorTests.sliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [43ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[-i * 5]): success [196ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[i * 5]): success [40ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[i + 1]): success [187ms]
test LongMaxVectorTests.sliceUnaryLongMaxVectorTests(long[cornerCaseValue(i)]): success [40ms]
test LongMaxVectorTests.smokeTest1(): success [0ms]
test LongMaxVectorTests.smokeTest2(): success [51ms]
test LongMaxVectorTests.subLongMaxVectorTests(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTests(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test LongMaxVectorTests.subLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[-i * 5]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[i * 5]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[i + 1]): success [0ms]
test LongMaxVectorTests.toDoubleArrayLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[-i * 5]): success [5ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[i * 5]): success [5ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[i + 1]): success [5ms]
test LongMaxVectorTests.toIntArrayLongMaxVectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [5ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[-i * 5]): success [0ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[i * 5]): success [1ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[i + 1]): success [4ms]
test LongMaxVectorTests.toLongArrayLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[-i * 5]): success [1ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[i * 5]): success [0ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[i + 1]): success [0ms]
test LongMaxVectorTests.toStringLongMaxVectorTestsSmokeTest(long[cornerCaseValue(i)]): success [6ms]
test LongMaxVectorTests.unsliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i * 5]): success [213ms]
test LongMaxVectorTests.unsliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[i + 1]): success [98ms]
test LongMaxVectorTests.unsliceBinaryLongMaxVectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [282ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [475ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [108ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [408ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [83ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [82ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [82ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [84ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [82ms]
test LongMaxVectorTests.unsliceLongMaxVectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [91ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[-i * 5]): success [182ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[i * 5]): success [40ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[i + 1]): success [168ms]
test LongMaxVectorTests.unsliceUnaryLongMaxVectorTests(long[cornerCaseValue(i)]): success [39ms]
test LongMaxVectorTests.viewAsFloatingLanesTest(): success [228ms]
test LongMaxVectorTests.viewAsIntegeralLanesTest(): success [0ms]
test LongMaxVectorTests.withLongMaxVectorTests(long[-i * 5], long[i * 5]): success [18ms]
test LongMaxVectorTests.withLongMaxVectorTests(long[-i * 5], long[i + 1]): success [18ms]
test LongMaxVectorTests.withLongMaxVectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [90ms]

===============================================
jdk/incubator/vector/LongMaxVectorTests.java
Total tests run: 3317, Passes: 3316, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/LongMaxVectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/LongMaxVectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/LongMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/LongMaxVectorTests.d/testng.0.jta jdk/incubator/vector/LongMaxVectorTests.java false LongMaxVectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
TEST: jdk/incubator/vector/Int64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.894 seconds
messages:
command: build Int64VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 17:36:10 IST 2025
Test directory:
  compile: Int64VectorTests
finished: Wed Apr 16 17:36:11 IST 2025
elapsed time (seconds): 0.894

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.894 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 17:36:10 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 1
Process id: 1465703
finished: Wed Apr 16 17:36:11 IST 2025
elapsed time (seconds): 0.894
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Int64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/5 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Int64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Int64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests 
TIME:   459.429 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int64VectorTests 
started: Wed Apr 16 17:36:11 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1469540
finished: Wed Apr 16 17:43:51 IST 2025
elapsed time (seconds): 459.429
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -7629713216294294711
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-7629713216294294711" to command line.
test Int64VectorTests.ABSInt64VectorTests(int[-i * 5]): success [584ms]
test Int64VectorTests.ABSInt64VectorTests(int[i * 5]): success [24ms]
test Int64VectorTests.ABSInt64VectorTests(int[i + 1]): success [31ms]
test Int64VectorTests.ABSInt64VectorTests(int[cornerCaseValue(i)]): success [19ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[i % 2]): success [217ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[i % 2]): success [50ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [34ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[true]): success [28ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[-i * 5], mask[false]): success [2ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ABSMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[i * 5]): success [290ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[i + 1]): success [27ms]
test Int64VectorTests.ADDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [30ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [17ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [9ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [25ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [10ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [6ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [6ms]
test Int64VectorTests.ADDInt64VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [44ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [146ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [5ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [66ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [35ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [16ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ADDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[-i * 5]): success [135ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[i * 5]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[i + 1]): success [4ms]
test Int64VectorTests.ADDReduceInt64VectorTests(int[cornerCaseValue(i)]): success [44ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [117ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [61ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [72ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [41ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [6ms]
test Int64VectorTests.ADDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [5ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[-i * 5]): success [20ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [8ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[true]): success [9ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[true]): success [1ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.ADDReduceLongInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[i * 5]): success [198ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[i + 1]): success [27ms]
test Int64VectorTests.ANDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [30ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [20ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [2ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [37ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [1ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [20ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [4ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [70ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [34ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [71ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [6ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [6ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [17ms]
test Int64VectorTests.ANDInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[-i * 5]): success [143ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[i * 5]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[i + 1]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTests(int[cornerCaseValue(i)]): success [44ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [79ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [61ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [72ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [4ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [39ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [4ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.ANDReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[i * 5]): success [175ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.AND_NOTInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [62ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [129ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [77ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.AND_NOTInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [39ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[i * 5]): success [156ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[i + 1]): success [3ms]
test Int64VectorTests.ASHRInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [58ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [147ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [6ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [39ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [216ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [50ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[-i * 5]): success [43ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[i * 5]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[i + 1]): success [39ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [112ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [56ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [29ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [59ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [52ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [54ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [5ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [7ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [4ms]
test Int64VectorTests.ASHRInt64VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [179ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [77ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [91ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [348ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [6ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [83ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [102ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [23ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [60ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [44ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [4ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [3ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int64VectorTests.BITWISE_BLENDInt64VectorTestsDoubleBroadcastMaskedSmokeTest

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

success [277ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[i - 2], int[cornerCaseValue(i)], mask[false]): success [273ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[i], mask[false]): success [275ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[i - length / 2], mask[false]): success [273ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[i + 1], mask[false]): success [273ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[i - 2], mask[false]): success [273ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[zigZag(i)], mask[false]): success [273ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[zigZag(i)], int[cornerCaseValue(i)], mask[false]): success [297ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i], mask[false]): success [274ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i - length / 2], mask[false]): success [273ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i + 1], mask[false]): success [273ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[i - 2], mask[false]): success [273ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[zigZag(i)], mask[false]): success [283ms]
test Int64VectorTests.ULTInt64VectorTestsMasked(int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [272ms]
test Int64VectorTests.UMAXInt64VectorTests(int[-i * 5], int[i * 5]): success [134ms]
test Int64VectorTests.UMAXInt64VectorTests(int[-i * 5], int[i + 1]): success [2ms]
test Int64VectorTests.UMAXInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [50ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [73ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [62ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [67ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.UMAXInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[-i * 5]): success [123ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[i * 5]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[i + 1]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTests(int[cornerCaseValue(i)]): success [47ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [79ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [65ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [114ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [62ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.UMAXReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[i * 5]): success [137ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[i + 1]): success [58ms]
test Int64VectorTests.UMINInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [4ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [77ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [5ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [30ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.UMINInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[-i * 5]): success [101ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[i * 5]): success [4ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[i + 1]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTests(int[cornerCaseValue(i)]): success [74ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [79ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [64ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [113ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [62ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [13ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.UMINReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.VectorShapeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.VectorTypeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.WithLanesInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.WithShapeInt64VectorTestsSmokeTest(): success [0ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[i * 5]): success [62ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.XORInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [53ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [73ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [62ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [67ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [17ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.XORInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[-i * 5]): success [109ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[i * 5]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[i + 1]): success [44ms]
test Int64VectorTests.XORReduceInt64VectorTests(int[cornerCaseValue(i)]): success [42ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[i % 2]): success [79ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[i % 2]): success [4ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[i % 2]): success [61ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [110ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[true]): success [61ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.XORReduceInt64VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[-i * 5]): success [230ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[i * 5]): success [162ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[i + 1]): success [136ms]
test Int64VectorTests.ZOMOInt64VectorTests(int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[i % 2]): success [397ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[i % 2]): success [275ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[i % 2]): success [310ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [275ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[true]): success [275ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[true]): success [275ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[true]): success [275ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [274ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[-i * 5], mask[false]): success [274ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i * 5], mask[false]): success [274ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[i + 1], mask[false]): success [274ms]
test Int64VectorTests.ZOMOMaskedInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [283ms]
test Int64VectorTests.ZeroInt64VectorTests(int[-i * 5]): success [118ms]
test Int64VectorTests.ZeroInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.ZeroInt64VectorTests(int[i + 1]): success [0ms]
test Int64VectorTests.ZeroInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.absInt64VectorTests(int[-i * 5]): success [68ms]
test Int64VectorTests.absInt64VectorTests(int[i * 5]): success [2ms]
test Int64VectorTests.absInt64VectorTests(int[i + 1]): success [36ms]
test Int64VectorTests.absInt64VectorTests(int[cornerCaseValue(i)]): success [35ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[i * 5]): success [31ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.addInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [37ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.addInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.addInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.allTrueInt64VectorTests(boolean[i % 2]): success [27ms]
test Int64VectorTests.allTrueInt64VectorTests(boolean[i % 5]): success [19ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.andInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.andInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.anyTrueInt64VectorTests(boolean[i % 2]): success [7ms]
test Int64VectorTests.anyTrueInt64VectorTests(boolean[i % 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [12ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [15ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [7ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [15ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [7ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [15ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int64VectorTests.bitwiseBlendInt64VectorTestsDoubleBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.bitwiseDivByZeroSmokeTest(): success [13ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[i % 2]): success [89ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[i % 2]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [58ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[true]): success [61ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[i + 1], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [78ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [57ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [152ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [16ms]
test Int64VectorTests.blendInt64VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[i % 2]): success [254ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[i % 2]): success [83ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[i % 2]): success [83ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [83ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[true]): success [74ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[true]): success [14ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[true]): success [11ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [11ms]
test Int64VectorTests.compressInt64VectorTests(int[-i * 5], mask[false]): success [16ms]
test Int64VectorTests.compressInt64VectorTests(int[i * 5], mask[false]): success [19ms]
test Int64VectorTests.compressInt64VectorTests(int[i + 1], mask[false]): success [13ms]
test Int64VectorTests.compressInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [13ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[i * 5]): success [310ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[i + 1]): success [188ms]
test Int64VectorTests.divInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [210ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [110ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [9ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int64VectorTests.divInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [2ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [530ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [291ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [347ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [298ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [291ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [290ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [290ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [346ms]
test Int64VectorTests.divInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [289ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i]): success [234ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i - length / 2]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i + 1]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[i - 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[zigZag(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i], int[cornerCaseValue(i)]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i - length / 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i + 1]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[i - 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[zigZag(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i]): success [180ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i - length / 2]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i + 1]): success [135ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[i - 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[zigZag(i)]): success [147ms]
test Int64VectorTests.eqInt64VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i - length / 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i + 1]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[i - 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[zigZag(i)]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i - length / 2]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i + 1]): success [138ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[i - 2]): success [139ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[zigZag(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [144ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [135ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [136ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [3ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [10ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [60ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.eqInt64VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[i % 2]): success [200ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[i % 2]): success [82ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[i % 2]): success [82ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [82ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[true]): success [29ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[true]): success [12ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[true]): success [12ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[true]): success [12ms]
test Int64VectorTests.expandInt64VectorTests(int[-i * 5], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[i * 5], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[i + 1], mask[false]): success [14ms]
test Int64VectorTests.expandInt64VectorTests(int[cornerCaseValue(i)], mask[false]): success [14ms]
test Int64VectorTests.getInt64VectorTests(int[-i * 5]): success [35ms]
test Int64VectorTests.getInt64VectorTests(int[i * 5]): success [2ms]
test Int64VectorTests.getInt64VectorTests(int[i + 1]): success [2ms]
test Int64VectorTests.getInt64VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[-i * 5]): success [51ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[i * 5]): success [28ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[i + 1]): success [2ms]
test Int64VectorTests.hashCodeInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [3ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(0): success [95ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(-1): success [6ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(1): success [26ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(2): success [5ms]
test Int64VectorTests.indexInRangeInt64VectorTestsSmokeTest(-2): success [9ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(0): success [7ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(-1): success [7ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(1): success [8ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(2): success [19ms]
test Int64VectorTests.indexInRangeLongInt64VectorTestsSmokeTest(-2): success [5ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(32): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(37): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1024): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1025): success [0ms]
test Int64VectorTests.loopBoundInt64VectorTestsSmokeTest(1029): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(0): success [4ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(32): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(37): success [1ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1024): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1025): success [0ms]
test Int64VectorTests.loopBoundLongInt64VectorTestsSmokeTest(1029): success [0ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i]): success [283ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i - length / 2]): success [144ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i + 1]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[i - 2]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[zigZag(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i], int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i]): success [166ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i - length / 2]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i + 1]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[i - 2]): success [144ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[zigZag(i)]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i - length / 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i + 1]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[i - 2]): success [137ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[zigZag(i)]): success [152ms]
test Int64VectorTests.ltInt64VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i - length / 2]): success [145ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i + 1]): success [136ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[i - 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[zigZag(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i - length / 2]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i + 1]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[i - 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[zigZag(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [139ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i]): success [146ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [138ms]
test Int64VectorTests.ltInt64VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [137ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i]): success [2ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [6ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [64ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int64VectorTests.ltInt64VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int64VectorTests.maskAndInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [20ms]
test Int64VectorTests.maskAndInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskAndNotInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Int64VectorTests.maskAndNotInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[i % 2]): success [227ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[true]): success [79ms]
test Int64VectorTests.maskCompressInt64VectorTestsSmokeTest(mask[false]): success [59ms]
test Int64VectorTests.maskEqInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Int64VectorTests.maskEqInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskEqualsInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int64VectorTests.maskEqualsInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[i % 2]): success [36ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[true]): success [52ms]
test Int64VectorTests.maskFirstTrueInt64VectorTestsSmokeTest(mask[false]): success [20ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(-1): success [81ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(0): success [0ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int64VectorTests.maskFromToLongInt64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[true]): success [0ms]
test Int64VectorTests.maskHashCodeInt64VectorTestsSmokeTest(mask[false]): success [0ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[i % 2]): success [67ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[true]): success [53ms]
test Int64VectorTests.maskLastTrueInt64VectorTestsSmokeTest(mask[false]): success [33ms]
test Int64VectorTests.maskOrInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [25ms]
test Int64VectorTests.maskOrInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[i % 2]): success [29ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[true]): success [53ms]
test Int64VectorTests.maskTrueCountInt64VectorTestsSmokeTest(mask[false]): success [20ms]
test Int64VectorTests.maskXorInt64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Int64VectorTests.maskXorInt64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.maxInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.maxInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.minInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.minInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [31ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.mulInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [8ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.mulInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.negInt64VectorTests(int[-i * 5]): success [51ms]
test Int64VectorTests.negInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.negInt64VectorTests(int[i + 1]): success [37ms]
test Int64VectorTests.negInt64VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.notInt64VectorTests(int[-i * 5]): success [60ms]
test Int64VectorTests.notInt64VectorTests(int[i * 5]): success [0ms]
test Int64VectorTests.notInt64VectorTests(int[i + 1]): success [42ms]
test Int64VectorTests.notInt64VectorTests(int[cornerCaseValue(i)]): success [34ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[i * 5]): success [9ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.orInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.orInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.shuffleEqualsInt64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [17ms]
test Int64VectorTests.shuffleEqualsInt64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [39ms]
test Int64VectorTests.shuffleMiscellaneousInt64VectorTestsSmokeTest(shuffle[random]): success [8ms]
test Int64VectorTests.shuffleTest(): success [276ms]
test Int64VectorTests.shuffleToStringInt64VectorTestsSmokeTest(shuffle[random]): success [49ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i * 5]): success [837ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i + 1]): success [163ms]
test Int64VectorTests.sliceBinaryInt64VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [165ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [463ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [167ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [299ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [168ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [167ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [168ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [189ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [167ms]
test Int64VectorTests.sliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [174ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[-i * 5]): success [434ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[i * 5]): success [153ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[i + 1]): success [154ms]
test Int64VectorTests.sliceUnaryInt64VectorTests(int[cornerCaseValue(i)]): success [154ms]
test Int64VectorTests.smokeTest1(): success [0ms]
test Int64VectorTests.smokeTest2(): success [89ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.subInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int64VectorTests.subInt64VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [7ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int64VectorTests.subInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toDoubleArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toIntArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[-i * 5]): success [17ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int64VectorTests.toLongArrayInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[-i * 5]): success [15ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[i * 5]): success [16ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[i + 1]): success [18ms]
test Int64VectorTests.toStringInt64VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [12ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i * 5]): success [466ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[i + 1]): success [326ms]
test Int64VectorTests.unsliceBinaryInt64VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [159ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [1048ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [326ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [509ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [322ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [317ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [350ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [316ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [475ms]
test Int64VectorTests.unsliceInt64VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [319ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[-i * 5]): success [409ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[i * 5]): success [155ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[i + 1]): success [217ms]
test Int64VectorTests.unsliceUnaryInt64VectorTests(int[cornerCaseValue(i)]): success [155ms]
test Int64VectorTests.viewAsFloatingLanesTest(): success [550ms]
test Int64VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[i * 5]): success [142ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[i + 1]): success [64ms]
test Int64VectorTests.withInt64VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [64ms]

===============================================
jdk/incubator/vector/Int64VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/5 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Int64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/jdk/incubator/vector/Int64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/13/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Int64VectorTests.d/testng.0.jta jdk/incubator/vector/Int64VectorTests.java false Int64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/VectorMathTest.java
Passed: jdk/incubator/vector/Byte128VectorTests.java
Passed: jdk/incubator/vector/Vector512ConversionTests.java
Passed: jdk/incubator/vector/AddTest.java
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/ShortMaxVectorTests.java
Passed: jdk/incubator/vector/Byte256VectorTests.java
TEST: jdk/incubator/vector/Byte64VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   26.514 seconds
messages:
command: build Byte64VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 17:30:14 IST 2025
Test directory:
  compile: Byte64VectorTests
finished: Wed Apr 16 17:30:41 IST 2025
elapsed time (seconds): 26.514

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   26.51 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte64VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 17:30:14 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 13
Process id: 1466566
finished: Wed Apr 16 17:30:41 IST 2025
elapsed time (seconds): 26.51
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Byte64VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/10 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Byte64VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte64VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Byte64VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Byte64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Byte64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Byte64VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Byte64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte64VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte64VectorTests 
TIME:   970.119 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Byte64VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Byte64VectorTests 
started: Wed Apr 16 17:30:41 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1467712
finished: Wed Apr 16 17:46:51 IST 2025
elapsed time (seconds): 970.119
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -2438985715599214789
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-2438985715599214789" to command line.
test Byte64VectorTests.ABSByte64VectorTests(byte[-i * 5]): success [639ms]
test Byte64VectorTests.ABSByte64VectorTests(byte[i * 5]): success [28ms]
test Byte64VectorTests.ABSByte64VectorTests(byte[i + 1]): success [53ms]
test Byte64VectorTests.ABSByte64VectorTests(byte[cornerCaseValue(i)]): success [6ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[-i * 5], mask[i % 2]): success [250ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[i * 5], mask[i % 2]): success [25ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[i + 1], mask[i % 2]): success [41ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[-i * 5], mask[true]): success [4ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[i * 5], mask[true]): success [4ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[i + 1], mask[true]): success [4ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[-i * 5], mask[false]): success [3ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[i * 5], mask[false]): success [4ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[i + 1], mask[false]): success [4ms]
test Byte64VectorTests.ABSMaskedByte64VectorTests(byte[cornerCaseValue(i)], mask[false]): success [4ms]
test Byte64VectorTests.ADDByte64VectorTests(byte[-i * 5], byte[i * 5]): success [263ms]
test Byte64VectorTests.ADDByte64VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.ADDByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [56ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i * 5]): success [65ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[i + 1]): success [4ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [16ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [32ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [7ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [45ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [4ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [4ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [4ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [58ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [4ms]
test Byte64VectorTests.ADDByte64VectorTestsBroadcastMaskedLongSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [4ms]
test Byte64VectorTests.ADDByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [153ms]
test Byte64VectorTests.ADDByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [34ms]
test Byte64VectorTests.ADDByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [15ms]
test Byte64VectorTests.ADDByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [68ms]
test Byte64VectorTests.ADDByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [4ms]
test Byte64VectorTests.ADDByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [4ms]
test Byte64VectorTests.ADDByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [59ms]
test Byte64VectorTests.ADDByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [4ms]
test Byte64VectorTests.ADDByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [3ms]
test Byte64VectorTests.ADDReduceByte64VectorTests(byte[-i * 5]): success [137ms]
test Byte64VectorTests.ADDReduceByte64VectorTests(byte[i * 5]): success [33ms]
test Byte64VectorTests.ADDReduceByte64VectorTests(byte[i + 1]): success [33ms]
test Byte64VectorTests.ADDReduceByte64VectorTests(byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [125ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[i * 5], mask[i % 2]): success [17ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[i + 1], mask[i % 2]): success [61ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [57ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[-i * 5], mask[true]): success [73ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[i * 5], mask[true]): success [6ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[i + 1], mask[true]): success [6ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[-i * 5], mask[false]): success [6ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[i * 5], mask[false]): success [6ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[i + 1], mask[false]): success [7ms]
test Byte64VectorTests.ADDReduceByte64VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTests(byte[-i * 5]): success [20ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTests(byte[i * 5]): success [8ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTests(byte[i + 1]): success [0ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTests(byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [15ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[i * 5], mask[i % 2]): success [13ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[i + 1], mask[i % 2]): success [1ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[-i * 5], mask[true]): success [2ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[i * 5], mask[true]): success [63ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[-i * 5], mask[false]): success [0ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.ADDReduceLongByte64VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.ANDByte64VectorTests(byte[-i * 5], byte[i * 5]): success [244ms]
test Byte64VectorTests.ANDByte64VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.ANDByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [57ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [23ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [10ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [4ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [3ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [38ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [28ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [20ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [4ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.ANDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte64VectorTests.ANDByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [73ms]
test Byte64VectorTests.ANDByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [63ms]
test Byte64VectorTests.ANDByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [16ms]
test Byte64VectorTests.ANDByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [69ms]
test Byte64VectorTests.ANDByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [4ms]
test Byte64VectorTests.ANDByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [3ms]
test Byte64VectorTests.ANDByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [3ms]
test Byte64VectorTests.ANDByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [3ms]
test Byte64VectorTests.ANDByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [3ms]
test Byte64VectorTests.ANDReduceByte64VectorTests(byte[-i * 5]): success [177ms]
test Byte64VectorTests.ANDReduceByte64VectorTests(byte[i * 5]): success [10ms]
test Byte64VectorTests.ANDReduceByte64VectorTests(byte[i + 1]): success [3ms]
test Byte64VectorTests.ANDReduceByte64VectorTests(byte[cornerCaseValue(i)]): success [45ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[-i * 5], mask[i % 2]): success [81ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[i * 5], mask[i % 2]): success [53ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[i + 1], mask[i % 2]): success [7ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[cornerCaseValue(i)], mask[i % 2]): success [107ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[-i * 5], mask[true]): success [4ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[i * 5], mask[true]): success [4ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[i + 1], mask[true]): success [4ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[cornerCaseValue(i)], mask[true]): success [4ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[-i * 5], mask[false]): success [4ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[i * 5], mask[false]): success [4ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[i + 1], mask[false]): success [4ms]
test Byte64VectorTests.ANDReduceByte64VectorTestsMasked(byte[cornerCaseValue(i)], mask[false]): success [5ms]
test Byte64VectorTests.AND_NOTByte64VectorTests(byte[-i * 5], byte[i * 5]): success [226ms]
test Byte64VectorTests.AND_NOTByte64VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.AND_NOTByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [64ms]
test Byte64VectorTests.AND_NOTByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [147ms]
test Byte64VectorTests.AND_NOTByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [3ms]
test Byte64VectorTests.AND_NOTByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [84ms]
test Byte64VectorTests.AND_NOTByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [41ms]
test Byte64VectorTests.AND_NOTByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [6ms]
test Byte64VectorTests.AND_NOTByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [6ms]
test Byte64VectorTests.AND_NOTByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [5ms]
test Byte64VectorTests.AND_NOTByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [5ms]
test Byte64VectorTests.AND_NOTByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte64VectorTests.ASHRByte64VectorTests(byte[-i * 5], byte[i * 5]): success [172ms]
test Byte64VectorTests.ASHRByte64VectorTests(byte[-i * 5], byte[i + 1]): success [8ms]
test Byte64VectorTests.ASHRByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [67ms]
test Byte64VectorTests.ASHRByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [190ms]
test Byte64VectorTests.ASHRByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [42ms]
test Byte64VectorTests.ASHRByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [9ms]
test Byte64VectorTests.ASHRByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [87ms]
test Byte64VectorTests.ASHRByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [9ms]
test Byte64VectorTests.ASHRByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [8ms]
test Byte64VectorTests.ASHRByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [8ms]
test Byte64VectorTests.ASHRByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [8ms]
test Byte64VectorTests.ASHRByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [8ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShift(byte[-i * 5], byte[i * 5]): success [277ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShift(byte[-i * 5], byte[i + 1]): success [4ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShift(byte[-i * 5], byte[cornerCaseValue(i)]): success [45ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftConst(byte[-i * 5]): success [77ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftConst(byte[i * 5]): success [4ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftConst(byte[i + 1]): success [40ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftConst(byte[cornerCaseValue(i)]): success [4ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [119ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [5ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [57ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[true]): success [5ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[true]): success [61ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [38ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMasked(byte[-i * 5], byte[i * 5], mask[false]): success [5ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMasked(byte[-i * 5], byte[i + 1], mask[false]): success [5ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [6ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[i % 2]): success [109ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[i % 2]): success [5ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[i % 2]): success [58ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[true]): success [55ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[true]): success [62ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[true]): success [4ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[true]): success [4ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[-i * 5], mask[false]): success [4ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[i * 5], mask[false]): success [4ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[i + 1], mask[false]): success [4ms]
test Byte64VectorTests.ASHRByte64VectorTestsScalarShiftMaskedConst(byte[cornerCaseValue(i)], mask[false]): success [4ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [195ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[i * 5], byte[i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[i * 5], byte[i + 1]): success [82ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [116ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[i + 1], byte[i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[i + 1], byte[i + 1]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [447ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [2ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [10ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [67ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [79ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [7ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [44ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsAltBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[i % 2]): success [11ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[i % 2]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[i % 2]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[i % 2]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[i % 2]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[i % 2]): success [36ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[i % 2]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[i % 2]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[i % 2]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[true]): success [23ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5], mask[false]): success [27ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)], mask[false]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[-i * 5]): success [5ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[i + 1]): success [1ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[-i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[i + 1]): success [46ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[-i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i * 5]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[i + 1]): success [0ms]
test Byte64VectorTests.BITWISE_BLENDByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [0ms

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

(byte[-i * 5], byte[i * 5]): success [13ms]
test Byte64VectorTests.divByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [3ms]
test Byte64VectorTests.divByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [4ms]
test Byte64VectorTests.divByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): failure [84ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lambda$binaryOperationsMF$7(ByteVector.java:956)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.bOpTemplateMF(ByteVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Byte64Vector.bOpMF(Byte64Vector.java:209)
	at jdk.incubator.vector/jdk.incubator.vector.Byte64Vector.bOpMF(Byte64Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lambda$binaryOperationsMF$6(ByteVector.java:956)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.lanewiseTemplate(ByteVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Byte64Vector.lanewise(Byte64Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Byte64Vector.lanewise(Byte64Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ByteVector.div(ByteVector.java:1729)
	at Byte64VectorTests.divByte64VectorTestsMasked(Byte64VectorTests.java:1796)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Byte64VectorTests.divByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [866ms]
test Byte64VectorTests.divByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [638ms]
test Byte64VectorTests.divByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [639ms]
test Byte64VectorTests.divByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [706ms]
test Byte64VectorTests.divByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [694ms]
test Byte64VectorTests.divByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [638ms]
test Byte64VectorTests.divByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [641ms]
test Byte64VectorTests.divByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [646ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i], byte[i]): success [412ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i], byte[i - length / 2]): success [327ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i], byte[i + 1]): success [322ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i], byte[i - 2]): success [316ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i], byte[zigZag(i)]): success [317ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i], byte[cornerCaseValue(i)]): success [317ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - length / 2], byte[i]): success [317ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - length / 2], byte[i - length / 2]): success [316ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - length / 2], byte[i + 1]): success [316ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - length / 2], byte[i - 2]): success [316ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [316ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [316ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i + 1], byte[i]): success [317ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i + 1], byte[i - length / 2]): success [317ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i + 1], byte[i + 1]): success [317ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i + 1], byte[i - 2]): success [325ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i + 1], byte[zigZag(i)]): success [321ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [334ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - 2], byte[i]): success [313ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - 2], byte[i - length / 2]): success [312ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - 2], byte[i + 1]): success [312ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - 2], byte[i - 2]): success [314ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - 2], byte[zigZag(i)]): success [314ms]
test Byte64VectorTests.eqByte64VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [312ms]
test Byte64VectorTests.eqByte64VectorTests(byte[zigZag(i)], byte[i]): success [317ms]
test Byte64VectorTests.eqByte64VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [313ms]
test Byte64VectorTests.eqByte64VectorTests(byte[zigZag(i)], byte[i + 1]): success [317ms]
test Byte64VectorTests.eqByte64VectorTests(byte[zigZag(i)], byte[i - 2]): success [317ms]
test Byte64VectorTests.eqByte64VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [316ms]
test Byte64VectorTests.eqByte64VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [315ms]
test Byte64VectorTests.eqByte64VectorTests(byte[cornerCaseValue(i)], byte[i]): success [317ms]
test Byte64VectorTests.eqByte64VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [316ms]
test Byte64VectorTests.eqByte64VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [315ms]
test Byte64VectorTests.eqByte64VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [315ms]
test Byte64VectorTests.eqByte64VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [315ms]
test Byte64VectorTests.eqByte64VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [326ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i]): success [4ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i + 1]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[i - 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [67ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i + 1]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[i - 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i + 1]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[i - 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i + 1]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[i - 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i + 1]): success [11ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[i - 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.eqByte64VectorTestsBroadcastMaskedSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.expandByte64VectorTests(byte[-i * 5], mask[i % 2]): success [453ms]
test Byte64VectorTests.expandByte64VectorTests(byte[i * 5], mask[i % 2]): success [295ms]
test Byte64VectorTests.expandByte64VectorTests(byte[i + 1], mask[i % 2]): success [306ms]
test Byte64VectorTests.expandByte64VectorTests(byte[cornerCaseValue(i)], mask[i % 2]): success [283ms]
test Byte64VectorTests.expandByte64VectorTests(byte[-i * 5], mask[true]): success [44ms]
test Byte64VectorTests.expandByte64VectorTests(byte[i * 5], mask[true]): success [51ms]
test Byte64VectorTests.expandByte64VectorTests(byte[i + 1], mask[true]): success [12ms]
test Byte64VectorTests.expandByte64VectorTests(byte[cornerCaseValue(i)], mask[true]): success [12ms]
test Byte64VectorTests.expandByte64VectorTests(byte[-i * 5], mask[false]): success [20ms]
test Byte64VectorTests.expandByte64VectorTests(byte[i * 5], mask[false]): success [20ms]
test Byte64VectorTests.expandByte64VectorTests(byte[i + 1], mask[false]): success [20ms]
test Byte64VectorTests.expandByte64VectorTests(byte[cornerCaseValue(i)], mask[false]): success [20ms]
test Byte64VectorTests.getByte64VectorTests(byte[-i * 5]): success [63ms]
test Byte64VectorTests.getByte64VectorTests(byte[i * 5]): success [9ms]
test Byte64VectorTests.getByte64VectorTests(byte[i + 1]): success [9ms]
test Byte64VectorTests.getByte64VectorTests(byte[cornerCaseValue(i)]): success [9ms]
test Byte64VectorTests.hashCodeByte64VectorTestsSmokeTest(byte[-i * 5]): success [52ms]
test Byte64VectorTests.hashCodeByte64VectorTestsSmokeTest(byte[i * 5]): success [18ms]
test Byte64VectorTests.hashCodeByte64VectorTestsSmokeTest(byte[i + 1]): success [22ms]
test Byte64VectorTests.hashCodeByte64VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [2ms]
test Byte64VectorTests.indexInRangeByte64VectorTestsSmokeTest(0): success [99ms]
test Byte64VectorTests.indexInRangeByte64VectorTestsSmokeTest(-1): success [10ms]
test Byte64VectorTests.indexInRangeByte64VectorTestsSmokeTest(1): success [30ms]
test Byte64VectorTests.indexInRangeByte64VectorTestsSmokeTest(2): success [9ms]
test Byte64VectorTests.indexInRangeByte64VectorTestsSmokeTest(-2): success [9ms]
test Byte64VectorTests.indexInRangeLongByte64VectorTestsSmokeTest(0): success [9ms]
test Byte64VectorTests.indexInRangeLongByte64VectorTestsSmokeTest(-1): success [9ms]
test Byte64VectorTests.indexInRangeLongByte64VectorTestsSmokeTest(1): success [9ms]
test Byte64VectorTests.indexInRangeLongByte64VectorTestsSmokeTest(2): success [19ms]
test Byte64VectorTests.indexInRangeLongByte64VectorTestsSmokeTest(-2): success [8ms]
test Byte64VectorTests.loopBoundByte64VectorTestsSmokeTest(0): success [0ms]
test Byte64VectorTests.loopBoundByte64VectorTestsSmokeTest(1): success [0ms]
test Byte64VectorTests.loopBoundByte64VectorTestsSmokeTest(32): success [0ms]
test Byte64VectorTests.loopBoundByte64VectorTestsSmokeTest(37): success [0ms]
test Byte64VectorTests.loopBoundByte64VectorTestsSmokeTest(1024): success [0ms]
test Byte64VectorTests.loopBoundByte64VectorTestsSmokeTest(1025): success [0ms]
test Byte64VectorTests.loopBoundByte64VectorTestsSmokeTest(1029): success [0ms]
test Byte64VectorTests.loopBoundLongByte64VectorTestsSmokeTest(0): success [0ms]
test Byte64VectorTests.loopBoundLongByte64VectorTestsSmokeTest(1): success [0ms]
test Byte64VectorTests.loopBoundLongByte64VectorTestsSmokeTest(32): success [0ms]
test Byte64VectorTests.loopBoundLongByte64VectorTestsSmokeTest(37): success [0ms]
test Byte64VectorTests.loopBoundLongByte64VectorTestsSmokeTest(1024): success [0ms]
test Byte64VectorTests.loopBoundLongByte64VectorTestsSmokeTest(1025): success [0ms]
test Byte64VectorTests.loopBoundLongByte64VectorTestsSmokeTest(1029): success [0ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i], byte[i]): success [411ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i], byte[i - length / 2]): success [323ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i], byte[i + 1]): success [315ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i], byte[i - 2]): success [316ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i], byte[zigZag(i)]): success [317ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i], byte[cornerCaseValue(i)]): success [318ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - length / 2], byte[i]): success [315ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - length / 2], byte[i - length / 2]): success [316ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - length / 2], byte[i + 1]): success [316ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - length / 2], byte[i - 2]): success [316ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - length / 2], byte[zigZag(i)]): success [315ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - length / 2], byte[cornerCaseValue(i)]): success [336ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i + 1], byte[i]): success [314ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i + 1], byte[i - length / 2]): success [315ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i + 1], byte[i + 1]): success [335ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i + 1], byte[i - 2]): success [314ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i + 1], byte[zigZag(i)]): success [314ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i + 1], byte[cornerCaseValue(i)]): success [335ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - 2], byte[i]): success [314ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - 2], byte[i - length / 2]): success [314ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - 2], byte[i + 1]): success [317ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - 2], byte[i - 2]): success [315ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - 2], byte[zigZag(i)]): success [318ms]
test Byte64VectorTests.ltByte64VectorTests(byte[i - 2], byte[cornerCaseValue(i)]): success [319ms]
test Byte64VectorTests.ltByte64VectorTests(byte[zigZag(i)], byte[i]): success [317ms]
test Byte64VectorTests.ltByte64VectorTests(byte[zigZag(i)], byte[i - length / 2]): success [322ms]
test Byte64VectorTests.ltByte64VectorTests(byte[zigZag(i)], byte[i + 1]): success [318ms]
test Byte64VectorTests.ltByte64VectorTests(byte[zigZag(i)], byte[i - 2]): success [316ms]
test Byte64VectorTests.ltByte64VectorTests(byte[zigZag(i)], byte[zigZag(i)]): success [319ms]
test Byte64VectorTests.ltByte64VectorTests(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [326ms]
test Byte64VectorTests.ltByte64VectorTests(byte[cornerCaseValue(i)], byte[i]): success [368ms]
test Byte64VectorTests.ltByte64VectorTests(byte[cornerCaseValue(i)], byte[i - length / 2]): success [322ms]
test Byte64VectorTests.ltByte64VectorTests(byte[cornerCaseValue(i)], byte[i + 1]): success [322ms]
test Byte64VectorTests.ltByte64VectorTests(byte[cornerCaseValue(i)], byte[i - 2]): success [324ms]
test Byte64VectorTests.ltByte64VectorTests(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [322ms]
test Byte64VectorTests.ltByte64VectorTests(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [319ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i], byte[i]): success [4ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i], byte[i - length / 2]): success [4ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i], byte[i + 1]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i], byte[i - 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i], byte[cornerCaseValue(i)]): success [67ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i + 1]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[i - 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - length / 2], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i + 1]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i + 1], byte[i - 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i + 1], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i + 1], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i + 1]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - 2], byte[i - 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - 2], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[i - 2], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i + 1]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[i - 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[zigZag(i)], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - length / 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i + 1]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[i - 2]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[zigZag(i)]): success [3ms]
test Byte64VectorTests.ltByte64VectorTestsBroadcastSmokeTest(byte[cornerCaseValue(i)], byte[cornerCaseValue(i)]): success [3ms]
test Byte64VectorTests.maskAndByte64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test Byte64VectorTests.maskAndByte64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte64VectorTests.maskAndNotByte64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Byte64VectorTests.maskAndNotByte64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte64VectorTests.maskCompressByte64VectorTestsSmokeTest(mask[i % 2]): success [315ms]
test Byte64VectorTests.maskCompressByte64VectorTestsSmokeTest(mask[true]): success [157ms]
test Byte64VectorTests.maskCompressByte64VectorTestsSmokeTest(mask[false]): success [125ms]
test Byte64VectorTests.maskEqByte64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Byte64VectorTests.maskEqByte64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte64VectorTests.maskEqualsByte64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Byte64VectorTests.maskEqualsByte64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte64VectorTests.maskFirstTrueByte64VectorTestsSmokeTest(mask[i % 2]): success [53ms]
test Byte64VectorTests.maskFirstTrueByte64VectorTestsSmokeTest(mask[true]): success [72ms]
test Byte64VectorTests.maskFirstTrueByte64VectorTestsSmokeTest(mask[false]): success [38ms]
test Byte64VectorTests.maskFromToLongByte64VectorTestsSmokeTest(-1): success [84ms]
test Byte64VectorTests.maskFromToLongByte64VectorTestsSmokeTest(0): success [0ms]
test Byte64VectorTests.maskFromToLongByte64VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Byte64VectorTests.maskFromToLongByte64VectorTestsSmokeTest(81985529216486895): success [0ms]
test Byte64VectorTests.maskHashCodeByte64VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Byte64VectorTests.maskHashCodeByte64VectorTestsSmokeTest(mask[true]): success [0ms]
test Byte64VectorTests.maskHashCodeByte64VectorTestsSmokeTest(mask[false]): success [0ms]
test Byte64VectorTests.maskLastTrueByte64VectorTestsSmokeTest(mask[i % 2]): success [92ms]
test Byte64VectorTests.maskLastTrueByte64VectorTestsSmokeTest(mask[true]): success [71ms]
test Byte64VectorTests.maskLastTrueByte64VectorTestsSmokeTest(mask[false]): success [56ms]
test Byte64VectorTests.maskOrByte64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [24ms]
test Byte64VectorTests.maskOrByte64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte64VectorTests.maskTrueCountByte64VectorTestsSmokeTest(mask[i % 2]): success [48ms]
test Byte64VectorTests.maskTrueCountByte64VectorTestsSmokeTest(mask[true]): success [71ms]
test Byte64VectorTests.maskTrueCountByte64VectorTestsSmokeTest(mask[false]): success [39ms]
test Byte64VectorTests.maskXorByte64VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Byte64VectorTests.maskXorByte64VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Byte64VectorTests.maxByte64VectorTests(byte[-i * 5], byte[i * 5]): success [10ms]
test Byte64VectorTests.maxByte64VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.maxByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte64VectorTests.maxByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte64VectorTests.maxByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.maxByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.minByte64VectorTests(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte64VectorTests.minByte64VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.minByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte64VectorTests.minByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte64VectorTests.minByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.minByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.mulByte64VectorTests(byte[-i * 5], byte[i * 5]): success [7ms]
test Byte64VectorTests.mulByte64VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.mulByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [7ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [20ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte64VectorTests.mulByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [7ms]
test Byte64VectorTests.mulByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte64VectorTests.mulByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.mulByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.negByte64VectorTests(byte[-i * 5]): success [56ms]
test Byte64VectorTests.negByte64VectorTests(byte[i * 5]): success [0ms]
test Byte64VectorTests.negByte64VectorTests(byte[i + 1]): success [42ms]
test Byte64VectorTests.negByte64VectorTests(byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.notByte64VectorTests(byte[-i * 5]): success [64ms]
test Byte64VectorTests.notByte64VectorTests(byte[i * 5]): success [0ms]
test Byte64VectorTests.notByte64VectorTests(byte[i + 1]): success [47ms]
test Byte64VectorTests.notByte64VectorTests(byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.orByte64VectorTests(byte[-i * 5], byte[i * 5]): success [9ms]
test Byte64VectorTests.orByte64VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.orByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte64VectorTests.orByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [8ms]
test Byte64VectorTests.orByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.orByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.reinterpretAsBytesByte64VectorTestsSmokeTest(byte[-i * 5]): success [17ms]
test Byte64VectorTests.reinterpretAsBytesByte64VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte64VectorTests.reinterpretAsBytesByte64VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte64VectorTests.reinterpretAsBytesByte64VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.shuffleEqualsByte64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [1265ms]
test Byte64VectorTests.shuffleEqualsByte64VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [545ms]
test Byte64VectorTests.shuffleMiscellaneousByte64VectorTestsSmokeTest(shuffle[random]): success [763ms]
test Byte64VectorTests.shuffleTest(): success [449ms]
test Byte64VectorTests.shuffleToStringByte64VectorTestsSmokeTest(shuffle[random]): success [43ms]
test Byte64VectorTests.sliceBinaryByte64VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [838ms]
test Byte64VectorTests.sliceBinaryByte64VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [414ms]
test Byte64VectorTests.sliceBinaryByte64VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [378ms]
test Byte64VectorTests.sliceByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [632ms]
test Byte64VectorTests.sliceByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [394ms]
test Byte64VectorTests.sliceByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [380ms]
test Byte64VectorTests.sliceByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [397ms]
test Byte64VectorTests.sliceByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [381ms]
test Byte64VectorTests.sliceByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [484ms]
test Byte64VectorTests.sliceByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [483ms]
test Byte64VectorTests.sliceByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [378ms]
test Byte64VectorTests.sliceByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [385ms]
test Byte64VectorTests.sliceUnaryByte64VectorTests(byte[-i * 5]): success [599ms]
test Byte64VectorTests.sliceUnaryByte64VectorTests(byte[i * 5]): success [416ms]
test Byte64VectorTests.sliceUnaryByte64VectorTests(byte[i + 1]): success [410ms]
test Byte64VectorTests.sliceUnaryByte64VectorTests(byte[cornerCaseValue(i)]): success [355ms]
test Byte64VectorTests.smokeTest1(): success [16ms]
test Byte64VectorTests.smokeTest2(): success [58ms]
test Byte64VectorTests.subByte64VectorTests(byte[-i * 5], byte[i * 5]): success [63ms]
test Byte64VectorTests.subByte64VectorTests(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.subByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [1ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[i % 2]): success [257ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[true]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastMaskedSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i * 5]): success [29ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[i + 1]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsBroadcastSmokeTest(byte[-i * 5], byte[cornerCaseValue(i)]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [34ms]
test Byte64VectorTests.subByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Byte64VectorTests.subByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [1ms]
test Byte64VectorTests.subByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [0ms]
test Byte64VectorTests.subByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [0ms]
test Byte64VectorTests.toDoubleArrayByte64VectorTestsSmokeTest(byte[-i * 5]): success [1ms]
test Byte64VectorTests.toDoubleArrayByte64VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte64VectorTests.toDoubleArrayByte64VectorTestsSmokeTest(byte[i + 1]): success [3ms]
test Byte64VectorTests.toDoubleArrayByte64VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [22ms]
test Byte64VectorTests.toIntArrayByte64VectorTestsSmokeTest(byte[-i * 5]): success [8ms]
test Byte64VectorTests.toIntArrayByte64VectorTestsSmokeTest(byte[i * 5]): success [1ms]
test Byte64VectorTests.toIntArrayByte64VectorTestsSmokeTest(byte[i + 1]): success [7ms]
test Byte64VectorTests.toIntArrayByte64VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [20ms]
test Byte64VectorTests.toLongArrayByte64VectorTestsSmokeTest(byte[-i * 5]): success [0ms]
test Byte64VectorTests.toLongArrayByte64VectorTestsSmokeTest(byte[i * 5]): success [0ms]
test Byte64VectorTests.toLongArrayByte64VectorTestsSmokeTest(byte[i + 1]): success [0ms]
test Byte64VectorTests.toLongArrayByte64VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [13ms]
test Byte64VectorTests.toStringByte64VectorTestsSmokeTest(byte[-i * 5]): success [22ms]
test Byte64VectorTests.toStringByte64VectorTestsSmokeTest(byte[i * 5]): success [63ms]
test Byte64VectorTests.toStringByte64VectorTestsSmokeTest(byte[i + 1]): success [6ms]
test Byte64VectorTests.toStringByte64VectorTestsSmokeTest(byte[cornerCaseValue(i)]): success [1ms]
test Byte64VectorTests.unsliceBinaryByte64VectorTestsBinary(byte[-i * 5], byte[i * 5]): success [700ms]
test Byte64VectorTests.unsliceBinaryByte64VectorTestsBinary(byte[-i * 5], byte[i + 1]): success [682ms]
test Byte64VectorTests.unsliceBinaryByte64VectorTestsBinary(byte[-i * 5], byte[cornerCaseValue(i)]): success [382ms]
test Byte64VectorTests.unsliceByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[i % 2]): success [1499ms]
test Byte64VectorTests.unsliceByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[i % 2]): success [765ms]
test Byte64VectorTests.unsliceByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[i % 2]): success [871ms]
test Byte64VectorTests.unsliceByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[true]): success [730ms]
test Byte64VectorTests.unsliceByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[true]): success [891ms]
test Byte64VectorTests.unsliceByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[true]): success [805ms]
test Byte64VectorTests.unsliceByte64VectorTestsMasked(byte[-i * 5], byte[i * 5], mask[false]): success [724ms]
test Byte64VectorTests.unsliceByte64VectorTestsMasked(byte[-i * 5], byte[i + 1], mask[false]): success [818ms]
test Byte64VectorTests.unsliceByte64VectorTestsMasked(byte[-i * 5], byte[cornerCaseValue(i)], mask[false]): success [806ms]
test Byte64VectorTests.unsliceUnaryByte64VectorTests(byte[-i * 5]): success [607ms]
test Byte64VectorTests.unsliceUnaryByte64VectorTests(byte[i * 5]): success [357ms]
test Byte64VectorTests.unsliceUnaryByte64VectorTests(byte[i + 1]): success [352ms]
test Byte64VectorTests.unsliceUnaryByte64VectorTests(byte[cornerCaseValue(i)]): success [361ms]
test Byte64VectorTests.viewAsFloatingLanesTest(): success [17ms]
test Byte64VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Byte64VectorTests.withByte64VectorTests(byte[-i * 5], byte[i * 5]): success [153ms]
test Byte64VectorTests.withByte64VectorTests(byte[-i * 5], byte[i + 1]): success [67ms]
test Byte64VectorTests.withByte64VectorTests(byte[-i * 5], byte[cornerCaseValue(i)]): success [90ms]

===============================================
jdk/incubator/vector/Byte64VectorTests.java
Total tests run: 3602, Passes: 3601, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/10 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Byte64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Byte64VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Byte64VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Byte64VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Byte64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Byte64VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Byte64VectorTests.d/testng.0.jta jdk/incubator/vector/Byte64VectorTests.java false Byte64VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Long64VectorTests.java
Passed: jdk/incubator/vector/Byte512VectorTests.java
TEST: jdk/incubator/vector/Short128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.831 seconds
messages:
command: build Short128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 17:39:54 IST 2025
Test directory:
  compile: Short128VectorTests
finished: Wed Apr 16 17:39:55 IST 2025
elapsed time (seconds): 0.831

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.831 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 17:39:54 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 3
Process id: 1465760
finished: Wed Apr 16 17:39:55 IST 2025
elapsed time (seconds): 0.831
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Short128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/2 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Short128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Short128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short128VectorTests 
TIME:   497.749 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short128VectorTests 
started: Wed Apr 16 17:39:55 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1471167
finished: Wed Apr 16 17:48:13 IST 2025
elapsed time (seconds): 497.749
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -6827473600836822423
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-6827473600836822423" to command line.
test Short128VectorTests.ABSMaskedShort128VectorTests(short[-i * 5], mask[i % 2]): success [597ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i * 5], mask[i % 2]): success [72ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i + 1], mask[i % 2]): success [10ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[-i * 5], mask[true]): success [29ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i * 5], mask[true]): success [24ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i + 1], mask[true]): success [1ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[-i * 5], mask[false]): success [1ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.ABSMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.ABSShort128VectorTests(short[-i * 5]): success [104ms]
test Short128VectorTests.ABSShort128VectorTests(short[i * 5]): success [51ms]
test Short128VectorTests.ABSShort128VectorTests(short[i + 1]): success [1ms]
test Short128VectorTests.ABSShort128VectorTests(short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ADDReduceLongShort128VectorTests(short[-i * 5]): success [84ms]
test Short128VectorTests.ADDReduceLongShort128VectorTests(short[i * 5]): success [2ms]
test Short128VectorTests.ADDReduceLongShort128VectorTests(short[i + 1]): success [2ms]
test Short128VectorTests.ADDReduceLongShort128VectorTests(short[cornerCaseValue(i)]): success [11ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[-i * 5], mask[i % 2]): success [12ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i * 5], mask[i % 2]): success [1ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i + 1], mask[i % 2]): success [1ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [13ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[-i * 5], mask[true]): success [1ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i * 5], mask[true]): success [1ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [12ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.ADDReduceLongShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [63ms]
test Short128VectorTests.ADDReduceShort128VectorTests(short[-i * 5]): success [147ms]
test Short128VectorTests.ADDReduceShort128VectorTests(short[i * 5]): success [2ms]
test Short128VectorTests.ADDReduceShort128VectorTests(short[i + 1]): success [131ms]
test Short128VectorTests.ADDReduceShort128VectorTests(short[cornerCaseValue(i)]): success [8ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[-i * 5], mask[i % 2]): success [85ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i * 5], mask[i % 2]): success [4ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i + 1], mask[i % 2]): success [82ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [16ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[-i * 5], mask[true]): success [4ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i * 5], mask[true]): success [3ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i + 1], mask[true]): success [4ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i * 5], mask[false]): success [3ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short128VectorTests.ADDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short128VectorTests.ADDShort128VectorTests(short[-i * 5], short[i * 5]): success [204ms]
test Short128VectorTests.ADDShort128VectorTests(short[-i * 5], short[i + 1]): success [59ms]
test Short128VectorTests.ADDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [16ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [24ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [15ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [12ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [35ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [93ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [65ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.ADDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTests(short[-i * 5]): success [154ms]
test Short128VectorTests.ANDReduceShort128VectorTests(short[i * 5]): success [32ms]
test Short128VectorTests.ANDReduceShort128VectorTests(short[i + 1]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTests(short[cornerCaseValue(i)]): success [8ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[-i * 5], mask[i % 2]): success [68ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i * 5], mask[i % 2]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i + 1], mask[i % 2]): success [81ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[-i * 5], mask[true]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[-i * 5], mask[false]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.ANDReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.ANDShort128VectorTests(short[-i * 5], short[i * 5]): success [197ms]
test Short128VectorTests.ANDShort128VectorTests(short[-i * 5], short[i + 1]): success [61ms]
test Short128VectorTests.ANDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [20ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [4ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [9ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [67ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [40ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short128VectorTests.ANDShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [12ms]
test Short128VectorTests.AND_NOTShort128VectorTests(short[-i * 5], short[i * 5]): success [178ms]
test Short128VectorTests.AND_NOTShort128VectorTests(short[-i * 5], short[i + 1]): success [72ms]
test Short128VectorTests.AND_NOTShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [78ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [75ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [15ms]
test Short128VectorTests.AND_NOTShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTests(short[-i * 5], short[i * 5]): success [137ms]
test Short128VectorTests.ASHRShort128VectorTests(short[-i * 5], short[i + 1]): success [71ms]
test Short128VectorTests.ASHRShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [104ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [73ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [200ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [63ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftConst(short[-i * 5]): success [43ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftConst(short[i * 5]): success [62ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftConst(short[i + 1]): success [0ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [107ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [56ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [11ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [50ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [5ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.ASHRShort128VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [78ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [114ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [93ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [326ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [9ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [103ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [78ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [66ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [7ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [44ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [22ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.BITWISE_BLENDShort128VectorTestsBroad

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

ort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [64ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.UMINShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.VectorShapeShort128VectorTestsSmokeTest(): success [0ms]
test Short128VectorTests.VectorTypeShort128VectorTestsSmokeTest(): success [0ms]
test Short128VectorTests.WithLanesShort128VectorTestsSmokeTest(): success [0ms]
test Short128VectorTests.WithShapeShort128VectorTestsSmokeTest(): success [0ms]
test Short128VectorTests.XORReduceShort128VectorTests(short[-i * 5]): success [93ms]
test Short128VectorTests.XORReduceShort128VectorTests(short[i * 5]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTests(short[i + 1]): success [62ms]
test Short128VectorTests.XORReduceShort128VectorTests(short[cornerCaseValue(i)]): success [9ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[-i * 5], mask[i % 2]): success [64ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[i * 5], mask[i % 2]): success [5ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[i + 1], mask[i % 2]): success [82ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [15ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[-i * 5], mask[true]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[-i * 5], mask[false]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[i + 1], mask[false]): success [28ms]
test Short128VectorTests.XORReduceShort128VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.XORShort128VectorTests(short[-i * 5], short[i * 5]): success [12ms]
test Short128VectorTests.XORShort128VectorTests(short[-i * 5], short[i + 1]): success [80ms]
test Short128VectorTests.XORShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [13ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [64ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short128VectorTests.XORShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[-i * 5], mask[i % 2]): success [362ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i * 5], mask[i % 2]): success [375ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i + 1], mask[i % 2]): success [310ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [307ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[-i * 5], mask[true]): success [305ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i * 5], mask[true]): success [308ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i + 1], mask[true]): success [306ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[true]): success [309ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[-i * 5], mask[false]): success [305ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i * 5], mask[false]): success [306ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[i + 1], mask[false]): success [310ms]
test Short128VectorTests.ZOMOMaskedShort128VectorTests(short[cornerCaseValue(i)], mask[false]): success [307ms]
test Short128VectorTests.ZOMOShort128VectorTests(short[-i * 5]): success [236ms]
test Short128VectorTests.ZOMOShort128VectorTests(short[i * 5]): success [235ms]
test Short128VectorTests.ZOMOShort128VectorTests(short[i + 1]): success [196ms]
test Short128VectorTests.ZOMOShort128VectorTests(short[cornerCaseValue(i)]): success [154ms]
test Short128VectorTests.ZeroShort128VectorTests(short[-i * 5]): success [122ms]
test Short128VectorTests.ZeroShort128VectorTests(short[i * 5]): success [34ms]
test Short128VectorTests.ZeroShort128VectorTests(short[i + 1]): success [0ms]
test Short128VectorTests.ZeroShort128VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.absShort128VectorTests(short[-i * 5]): success [45ms]
test Short128VectorTests.absShort128VectorTests(short[i * 5]): success [64ms]
test Short128VectorTests.absShort128VectorTests(short[i + 1]): success [2ms]
test Short128VectorTests.absShort128VectorTests(short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.addShort128VectorTests(short[-i * 5], short[i * 5]): success [36ms]
test Short128VectorTests.addShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.addShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [75ms]
test Short128VectorTests.addShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [30ms]
test Short128VectorTests.addShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.addShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.allTrueShort128VectorTests(boolean[i % 2]): success [22ms]
test Short128VectorTests.allTrueShort128VectorTests(boolean[i % 5]): success [22ms]
test Short128VectorTests.andShort128VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.andShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.andShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.andShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.andShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.andShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.anyTrueShort128VectorTests(boolean[i % 2]): success [11ms]
test Short128VectorTests.anyTrueShort128VectorTests(boolean[i % 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [5ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [51ms]
test Short128VectorTests.bitwiseBlendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [70ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [71ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [72ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short128VectorTests.bitwiseBlendShort128VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.bitwiseDivByZeroSmokeTest(): success [13ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [31ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [59ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.blendShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [42ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [62ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [2ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [2ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short128VectorTests.blendShort128VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short128VectorTests.compressShort128VectorTests(short[-i * 5], mask[i % 2]): success [282ms]
test Short128VectorTests.compressShort128VectorTests(short[i * 5], mask[i % 2]): success [212ms]
test Short128VectorTests.compressShort128VectorTests(short[i + 1], mask[i % 2]): success [140ms]
test Short128VectorTests.compressShort128VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [140ms]
test Short128VectorTests.compressShort128VectorTests(short[-i * 5], mask[true]): success [92ms]
test Short128VectorTests.compressShort128VectorTests(short[i * 5], mask[true]): success [6ms]
test Short128VectorTests.compressShort128VectorTests(short[i + 1], mask[true]): success [5ms]
test Short128VectorTests.compressShort128VectorTests(short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short128VectorTests.compressShort128VectorTests(short[-i * 5], mask[false]): success [10ms]
test Short128VectorTests.compressShort128VectorTests(short[i * 5], mask[false]): success [10ms]
test Short128VectorTests.compressShort128VectorTests(short[i + 1], mask[false]): success [10ms]
test Short128VectorTests.compressShort128VectorTests(short[cornerCaseValue(i)], mask[false]): success [10ms]
test Short128VectorTests.divShort128VectorTests(short[-i * 5], short[i * 5]): success [242ms]
test Short128VectorTests.divShort128VectorTests(short[-i * 5], short[i + 1]): success [283ms]
test Short128VectorTests.divShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [161ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [109ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short128VectorTests.divShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [25ms]
test Short128VectorTests.divShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short128VectorTests.divShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [434ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [443ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): failure [95ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.lambda$binaryOperationsMF$7(ShortVector.java:956)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.bOpTemplateMF(ShortVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Short128Vector.bOpMF(Short128Vector.java:209)
	at jdk.incubator.vector/jdk.incubator.vector.Short128Vector.bOpMF(Short128Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.lambda$binaryOperationsMF$6(ShortVector.java:956)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.lanewiseTemplate(ShortVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Short128Vector.lanewise(Short128Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Short128Vector.lanewise(Short128Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.div(ShortVector.java:1729)
	at Short128VectorTests.divShort128VectorTestsMasked(Short128VectorTests.java:1787)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [316ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [316ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [316ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [314ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [314ms]
test Short128VectorTests.divShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [315ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[i]): success [222ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[i - length / 2]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[i + 1]): success [163ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[i - 2]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[zigZag(i)]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[i], short[cornerCaseValue(i)]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[i]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[i - length / 2]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[i + 1]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[i - 2]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[zigZag(i)]): success [160ms]
test Short128VectorTests.eqShort128VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[i]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[i - length / 2]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[i + 1]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[i - 2]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[zigZag(i)]): success [158ms]
test Short128VectorTests.eqShort128VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[i]): success [156ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[i - length / 2]): success [171ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[i + 1]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[i - 2]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[zigZag(i)]): success [157ms]
test Short128VectorTests.eqShort128VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [162ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[i]): success [160ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[i - length / 2]): success [160ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[i + 1]): success [159ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[i - 2]): success [160ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[zigZag(i)]): success [159ms]
test Short128VectorTests.eqShort128VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [159ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[i]): success [159ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [159ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [159ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [159ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [159ms]
test Short128VectorTests.eqShort128VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [159ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [2ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [2ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [62ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [9ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [1ms]
test Short128VectorTests.eqShort128VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.expandShort128VectorTests(short[-i * 5], mask[i % 2]): success [234ms]
test Short128VectorTests.expandShort128VectorTests(short[i * 5], mask[i % 2]): success [212ms]
test Short128VectorTests.expandShort128VectorTests(short[i + 1], mask[i % 2]): success [143ms]
test Short128VectorTests.expandShort128VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [174ms]
test Short128VectorTests.expandShort128VectorTests(short[-i * 5], mask[true]): success [35ms]
test Short128VectorTests.expandShort128VectorTests(short[i * 5], mask[true]): success [6ms]
test Short128VectorTests.expandShort128VectorTests(short[i + 1], mask[true]): success [6ms]
test Short128VectorTests.expandShort128VectorTests(short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short128VectorTests.expandShort128VectorTests(short[-i * 5], mask[false]): success [11ms]
test Short128VectorTests.expandShort128VectorTests(short[i * 5], mask[false]): success [11ms]
test Short128VectorTests.expandShort128VectorTests(short[i + 1], mask[false]): success [10ms]
test Short128VectorTests.expandShort128VectorTests(short[cornerCaseValue(i)], mask[false]): success [10ms]
test Short128VectorTests.getShort128VectorTests(short[-i * 5]): success [8ms]
test Short128VectorTests.getShort128VectorTests(short[i * 5]): success [101ms]
test Short128VectorTests.getShort128VectorTests(short[i + 1]): success [0ms]
test Short128VectorTests.getShort128VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.hashCodeShort128VectorTestsSmokeTest(short[-i * 5]): success [42ms]
test Short128VectorTests.hashCodeShort128VectorTestsSmokeTest(short[i * 5]): success [2ms]
test Short128VectorTests.hashCodeShort128VectorTestsSmokeTest(short[i + 1]): success [5ms]
test Short128VectorTests.hashCodeShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [9ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(0): success [73ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(-1): success [5ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(1): success [22ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(2): success [4ms]
test Short128VectorTests.indexInRangeLongShort128VectorTestsSmokeTest(-2): success [4ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(0): success [5ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(-1): success [4ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(1): success [4ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(2): success [4ms]
test Short128VectorTests.indexInRangeShort128VectorTestsSmokeTest(-2): success [4ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(0): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(1): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(32): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(37): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(1024): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(1025): success [0ms]
test Short128VectorTests.loopBoundLongShort128VectorTestsSmokeTest(1029): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(0): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(1): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(32): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(37): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(1024): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(1025): success [0ms]
test Short128VectorTests.loopBoundShort128VectorTestsSmokeTest(1029): success [0ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[i]): success [221ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[i - length / 2]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[i + 1]): success [163ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[i - 2]): success [158ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[zigZag(i)]): success [158ms]
test Short128VectorTests.ltShort128VectorTests(short[i], short[cornerCaseValue(i)]): success [158ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[i]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[i - length / 2]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[i + 1]): success [191ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[i - 2]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[zigZag(i)]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [158ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[i]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[i - length / 2]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[i + 1]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[i - 2]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[zigZag(i)]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [176ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[i]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[i - length / 2]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[i + 1]): success [159ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[i - 2]): success [160ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[zigZag(i)]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[i]): success [160ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[i - length / 2]): success [156ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[i + 1]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[i - 2]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[zigZag(i)]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [158ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[i]): success [206ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [157ms]
test Short128VectorTests.ltShort128VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [157ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[i]): success [2ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [2ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [62ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [2ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [1ms]
test Short128VectorTests.ltShort128VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.maskAndNotShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Short128VectorTests.maskAndNotShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskAndShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Short128VectorTests.maskAndShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskCompressShort128VectorTestsSmokeTest(mask[i % 2]): success [310ms]
test Short128VectorTests.maskCompressShort128VectorTestsSmokeTest(mask[true]): success [155ms]
test Short128VectorTests.maskCompressShort128VectorTestsSmokeTest(mask[false]): success [124ms]
test Short128VectorTests.maskEqShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short128VectorTests.maskEqShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskEqualsShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short128VectorTests.maskEqualsShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskFirstTrueShort128VectorTestsSmokeTest(mask[i % 2]): success [56ms]
test Short128VectorTests.maskFirstTrueShort128VectorTestsSmokeTest(mask[true]): success [71ms]
test Short128VectorTests.maskFirstTrueShort128VectorTestsSmokeTest(mask[false]): success [38ms]
test Short128VectorTests.maskFromToLongShort128VectorTestsSmokeTest(-1): success [65ms]
test Short128VectorTests.maskFromToLongShort128VectorTestsSmokeTest(0): success [0ms]
test Short128VectorTests.maskFromToLongShort128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short128VectorTests.maskFromToLongShort128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short128VectorTests.maskHashCodeShort128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Short128VectorTests.maskHashCodeShort128VectorTestsSmokeTest(mask[true]): success [0ms]
test Short128VectorTests.maskHashCodeShort128VectorTestsSmokeTest(mask[false]): success [4ms]
test Short128VectorTests.maskLastTrueShort128VectorTestsSmokeTest(mask[i % 2]): success [87ms]
test Short128VectorTests.maskLastTrueShort128VectorTestsSmokeTest(mask[true]): success [70ms]
test Short128VectorTests.maskLastTrueShort128VectorTestsSmokeTest(mask[false]): success [55ms]
test Short128VectorTests.maskOrShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [21ms]
test Short128VectorTests.maskOrShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maskTrueCountShort128VectorTestsSmokeTest(mask[i % 2]): success [46ms]
test Short128VectorTests.maskTrueCountShort128VectorTestsSmokeTest(mask[true]): success [70ms]
test Short128VectorTests.maskTrueCountShort128VectorTestsSmokeTest(mask[false]): success [38ms]
test Short128VectorTests.maskXorShort128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short128VectorTests.maskXorShort128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short128VectorTests.maxShort128VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.maxShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.maxShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.maxShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.maxShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.maxShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.minShort128VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.minShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.minShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.minShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.minShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short128VectorTests.minShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.mulShort128VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.mulShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.mulShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.mulShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.negShort128VectorTests(short[-i * 5]): success [15ms]
test Short128VectorTests.negShort128VectorTests(short[i * 5]): success [67ms]
test Short128VectorTests.negShort128VectorTests(short[i + 1]): success [0ms]
test Short128VectorTests.negShort128VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.notShort128VectorTests(short[-i * 5]): success [19ms]
test Short128VectorTests.notShort128VectorTests(short[i * 5]): success [71ms]
test Short128VectorTests.notShort128VectorTests(short[i + 1]): success [0ms]
test Short128VectorTests.notShort128VectorTests(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.orShort128VectorTests(short[-i * 5], short[i * 5]): success [8ms]
test Short128VectorTests.orShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.orShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.orShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.orShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.orShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.shuffleEqualsShort128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [517ms]
test Short128VectorTests.shuffleEqualsShort128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [128ms]
test Short128VectorTests.shuffleMiscellaneousShort128VectorTestsSmokeTest(shuffle[random]): success [196ms]
test Short128VectorTests.shuffleTest(): success [447ms]
test Short128VectorTests.shuffleToStringShort128VectorTestsSmokeTest(shuffle[random]): success [75ms]
test Short128VectorTests.sliceBinaryShort128VectorTestsBinary(short[-i * 5], short[i * 5]): success [657ms]
test Short128VectorTests.sliceBinaryShort128VectorTestsBinary(short[-i * 5], short[i + 1]): success [326ms]
test Short128VectorTests.sliceBinaryShort128VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [164ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [245ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [380ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [198ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [163ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [164ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [164ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [163ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [183ms]
test Short128VectorTests.sliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [163ms]
test Short128VectorTests.sliceUnaryShort128VectorTests(short[-i * 5]): success [300ms]
test Short128VectorTests.sliceUnaryShort128VectorTests(short[i * 5]): success [304ms]
test Short128VectorTests.sliceUnaryShort128VectorTests(short[i + 1]): success [158ms]
test Short128VectorTests.sliceUnaryShort128VectorTests(short[cornerCaseValue(i)]): success [158ms]
test Short128VectorTests.smokeTest1(): success [0ms]
test Short128VectorTests.smokeTest2(): success [80ms]
test Short128VectorTests.subShort128VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.subShort128VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.subShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short128VectorTests.subShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short128VectorTests.subShort128VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short128VectorTests.subShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short128VectorTests.toDoubleArrayShort128VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short128VectorTests.toDoubleArrayShort128VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short128VectorTests.toDoubleArrayShort128VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short128VectorTests.toDoubleArrayShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.toIntArrayShort128VectorTestsSmokeTest(short[-i * 5]): success [2ms]
test Short128VectorTests.toIntArrayShort128VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short128VectorTests.toIntArrayShort128VectorTestsSmokeTest(short[i + 1]): success [8ms]
test Short128VectorTests.toIntArrayShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [1ms]
test Short128VectorTests.toLongArrayShort128VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short128VectorTests.toLongArrayShort128VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short128VectorTests.toLongArrayShort128VectorTestsSmokeTest(short[i + 1]): success [19ms]
test Short128VectorTests.toLongArrayShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short128VectorTests.toStringShort128VectorTestsSmokeTest(short[-i * 5]): success [2ms]
test Short128VectorTests.toStringShort128VectorTestsSmokeTest(short[i * 5]): success [13ms]
test Short128VectorTests.toStringShort128VectorTestsSmokeTest(short[i + 1]): success [49ms]
test Short128VectorTests.toStringShort128VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [2ms]
test Short128VectorTests.unsliceBinaryShort128VectorTestsBinary(short[-i * 5], short[i * 5]): success [325ms]
test Short128VectorTests.unsliceBinaryShort128VectorTestsBinary(short[-i * 5], short[i + 1]): success [322ms]
test Short128VectorTests.unsliceBinaryShort128VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [294ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [706ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [808ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [323ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [320ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [415ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [361ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [322ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [331ms]
test Short128VectorTests.unsliceShort128VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [317ms]
test Short128VectorTests.unsliceUnaryShort128VectorTests(short[-i * 5]): success [296ms]
test Short128VectorTests.unsliceUnaryShort128VectorTests(short[i * 5]): success [294ms]
test Short128VectorTests.unsliceUnaryShort128VectorTests(short[i + 1]): success [156ms]
test Short128VectorTests.unsliceUnaryShort128VectorTests(short[cornerCaseValue(i)]): success [156ms]
test Short128VectorTests.viewAsFloatingLanesTest(): success [24ms]
test Short128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Short128VectorTests.withShort128VectorTests(short[-i * 5], short[i * 5]): success [48ms]
test Short128VectorTests.withShort128VectorTests(short[-i * 5], short[i + 1]): success [141ms]
test Short128VectorTests.withShort128VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [32ms]

===============================================
jdk/incubator/vector/Short128VectorTests.java
Total tests run: 3598, Passes: 3596, Failures: 2, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/2 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Short128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/Short128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Short128VectorTests.d/testng.0.jta jdk/incubator/vector/Short128VectorTests.java false Short128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 2
--------------------------------------------------
Passed: jdk/incubator/vector/Short256VectorTests.java
TEST: jdk/incubator/vector/Short512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.141 seconds
messages:
command: build Short512VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 17:40:31 IST 2025
Test directory:
  compile: Short512VectorTests
finished: Wed Apr 16 17:40:32 IST 2025
elapsed time (seconds): 1.141

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.141 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 17:40:31 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 10
Process id: 1466283
finished: Wed Apr 16 17:40:32 IST 2025
elapsed time (seconds): 1.141
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/15 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short512VectorTests 
TIME:   489.002 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short512VectorTests 
started: Wed Apr 16 17:40:32 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1471590
finished: Wed Apr 16 17:48:41 IST 2025
elapsed time (seconds): 489.002
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 7636048342815695943
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=7636048342815695943" to command line.
test Short512VectorTests.ABSMaskedShort512VectorTests(short[-i * 5], mask[i % 2]): success [472ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i * 5], mask[i % 2]): success [498ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i + 1], mask[i % 2]): success [17ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[-i * 5], mask[true]): success [169ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i + 1], mask[true]): success [35ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[-i * 5], mask[false]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.ABSShort512VectorTests(short[-i * 5]): success [218ms]
test Short512VectorTests.ABSShort512VectorTests(short[i * 5]): success [41ms]
test Short512VectorTests.ABSShort512VectorTests(short[i + 1]): success [3ms]
test Short512VectorTests.ABSShort512VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[-i * 5]): success [68ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[i * 5]): success [2ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[i + 1]): success [21ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[cornerCaseValue(i)]): success [4ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [11ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i + 1], mask[true]): success [25ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [38ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[-i * 5]): success [221ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[i * 5]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[i + 1]): success [76ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [70ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [120ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[-i * 5], mask[true]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i + 1], mask[true]): success [30ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.ADDShort512VectorTests(short[-i * 5], short[i * 5]): success [99ms]
test Short512VectorTests.ADDShort512VectorTests(short[-i * 5], short[i + 1]): success [667ms]
test Short512VectorTests.ADDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [5ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [16ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [2ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [22ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [6ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [283ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [101ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [22ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [151ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[-i * 5]): success [147ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[i * 5]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[i + 1]): success [76ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[cornerCaseValue(i)]): success [26ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [28ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [4ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [153ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[-i * 5], mask[true]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i + 1], mask[true]): success [27ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[-i * 5], mask[false]): success [2ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.ANDShort512VectorTests(short[-i * 5], short[i * 5]): success [458ms]
test Short512VectorTests.ANDShort512VectorTests(short[-i * 5], short[i + 1]): success [125ms]
test Short512VectorTests.ANDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [5ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [8ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [28ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [12ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [189ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [6ms]
test Short512VectorTests.AND_NOTShort512VectorTests(short[-i * 5], short[i * 5]): success [451ms]
test Short512VectorTests.AND_NOTShort512VectorTests(short[-i * 5], short[i + 1]): success [389ms]
test Short512VectorTests.AND_NOTShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [105ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [109ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [138ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [76ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [75ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [341ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [74ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [73ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [74ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [73ms]
test Short512VectorTests.ASHRShort512VectorTests(short[-i * 5], short[i * 5]): success [153ms]
test Short512VectorTests.ASHRShort512VectorTests(short[-i * 5], short[i + 1]): success [301ms]
test Short512VectorTests.ASHRShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [72ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [225ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [160ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [74ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [73ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [327ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [74ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [73ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [170ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [73ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [127ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [376ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[-i * 5]): success [82ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[i * 5]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[i + 1]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [17ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [61ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [109ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [10ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [99ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [16ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [136ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [10ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [10ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [297ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [10ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [10ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [8ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [324ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [105ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [69ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [8ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [47ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.BITWI

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

nerCaseValue(i)]): success [4ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [11ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [150ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.UMINShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.VectorShapeShort512VectorTestsSmokeTest(): success [0ms]
test Short512VectorTests.VectorTypeShort512VectorTestsSmokeTest(): success [0ms]
test Short512VectorTests.WithLanesShort512VectorTestsSmokeTest(): success [0ms]
test Short512VectorTests.WithShapeShort512VectorTestsSmokeTest(): success [0ms]
test Short512VectorTests.XORReduceShort512VectorTests(short[-i * 5]): success [100ms]
test Short512VectorTests.XORReduceShort512VectorTests(short[i * 5]): success [3ms]
test Short512VectorTests.XORReduceShort512VectorTests(short[i + 1]): success [74ms]
test Short512VectorTests.XORReduceShort512VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [15ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [4ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [118ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[-i * 5], mask[true]): success [3ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[i + 1], mask[true]): success [28ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[-i * 5], mask[false]): success [2ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[i + 1], mask[false]): success [11ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [36ms]
test Short512VectorTests.XORShort512VectorTests(short[-i * 5], short[i * 5]): success [11ms]
test Short512VectorTests.XORShort512VectorTests(short[-i * 5], short[i + 1]): success [4ms]
test Short512VectorTests.XORShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [9ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [150ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[-i * 5], mask[i % 2]): success [440ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i * 5], mask[i % 2]): success [451ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i + 1], mask[i % 2]): success [387ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [387ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[-i * 5], mask[true]): success [622ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i * 5], mask[true]): success [388ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i + 1], mask[true]): success [387ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [390ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[-i * 5], mask[false]): success [386ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i * 5], mask[false]): success [386ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i + 1], mask[false]): success [387ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [387ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[-i * 5]): success [324ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[i * 5]): success [313ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[i + 1]): success [261ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[cornerCaseValue(i)]): success [261ms]
test Short512VectorTests.ZeroShort512VectorTests(short[-i * 5]): success [64ms]
test Short512VectorTests.ZeroShort512VectorTests(short[i * 5]): success [80ms]
test Short512VectorTests.ZeroShort512VectorTests(short[i + 1]): success [63ms]
test Short512VectorTests.ZeroShort512VectorTests(short[cornerCaseValue(i)]): success [63ms]
test Short512VectorTests.absShort512VectorTests(short[-i * 5]): success [17ms]
test Short512VectorTests.absShort512VectorTests(short[i * 5]): success [10ms]
test Short512VectorTests.absShort512VectorTests(short[i + 1]): success [3ms]
test Short512VectorTests.absShort512VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.addShort512VectorTests(short[-i * 5], short[i * 5]): success [122ms]
test Short512VectorTests.addShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.addShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [163ms]
test Short512VectorTests.addShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [31ms]
test Short512VectorTests.addShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.allTrueShort512VectorTests(boolean[i % 2]): success [21ms]
test Short512VectorTests.allTrueShort512VectorTests(boolean[i % 5]): success [15ms]
test Short512VectorTests.andShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.andShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.andShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.andShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.andShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.andShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.anyTrueShort512VectorTests(boolean[i % 2]): success [11ms]
test Short512VectorTests.anyTrueShort512VectorTests(boolean[i % 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [5ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [54ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [77ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [8ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [72ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [8ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [72ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [8ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [73ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.bitwiseDivByZeroSmokeTest(): success [12ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [29ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i + 1], mask[true]): success [144ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i * 5], mask[false]): success [11ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [95ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [90ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [67ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [68ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [201ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [68ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [69ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [67ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [67ms]
test Short512VectorTests.compressShort512VectorTests(short[-i * 5], mask[i % 2]): success [1009ms]
test Short512VectorTests.compressShort512VectorTests(short[i * 5], mask[i % 2]): success [228ms]
test Short512VectorTests.compressShort512VectorTests(short[i + 1], mask[i % 2]): success [151ms]
test Short512VectorTests.compressShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [151ms]
test Short512VectorTests.compressShort512VectorTests(short[-i * 5], mask[true]): success [246ms]
test Short512VectorTests.compressShort512VectorTests(short[i * 5], mask[true]): success [622ms]
test Short512VectorTests.compressShort512VectorTests(short[i + 1], mask[true]): success [3ms]
test Short512VectorTests.compressShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.compressShort512VectorTests(short[-i * 5], mask[false]): success [11ms]
test Short512VectorTests.compressShort512VectorTests(short[i * 5], mask[false]): success [11ms]
test Short512VectorTests.compressShort512VectorTests(short[i + 1], mask[false]): success [11ms]
test Short512VectorTests.compressShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [20ms]
test Short512VectorTests.divShort512VectorTests(short[-i * 5], short[i * 5]): success [231ms]
test Short512VectorTests.divShort512VectorTests(short[-i * 5], short[i + 1]): success [343ms]
test Short512VectorTests.divShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [200ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [15ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [276ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [20ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [4ms]
test Short512VectorTests.divShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [11ms]
test Short512VectorTests.divShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [2ms]
test Short512VectorTests.divShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [422ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [678ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [408ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [400ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [949ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [399ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [397ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [397ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [397ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i]): success [295ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i - length / 2]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i + 1]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i - 2]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[zigZag(i)]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[cornerCaseValue(i)]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i - length / 2]): success [138ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i + 1]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i - 2]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[zigZag(i)]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i - length / 2]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i + 1]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i - 2]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[zigZag(i)]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [131ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i - length / 2]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i + 1]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i - 2]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[zigZag(i)]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i - length / 2]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i + 1]): success [139ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i - 2]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[zigZag(i)]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [130ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [128ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [143ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [102ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [10ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.expandShort512VectorTests(short[-i * 5], mask[i % 2]): success [1520ms]
test Short512VectorTests.expandShort512VectorTests(short[i * 5], mask[i % 2]): success [186ms]
test Short512VectorTests.expandShort512VectorTests(short[i + 1], mask[i % 2]): success [146ms]
test Short512VectorTests.expandShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [156ms]
test Short512VectorTests.expandShort512VectorTests(short[-i * 5], mask[true]): success [130ms]
test Short512VectorTests.expandShort512VectorTests(short[i * 5], mask[true]): success [1367ms]
test Short512VectorTests.expandShort512VectorTests(short[i + 1], mask[true]): success [3ms]
test Short512VectorTests.expandShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.expandShort512VectorTests(short[-i * 5], mask[false]): success [11ms]
test Short512VectorTests.expandShort512VectorTests(short[i * 5], mask[false]): success [11ms]
test Short512VectorTests.expandShort512VectorTests(short[i + 1], mask[false]): success [11ms]
test Short512VectorTests.expandShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [11ms]
test Short512VectorTests.getShort512VectorTests(short[-i * 5]): success [18ms]
test Short512VectorTests.getShort512VectorTests(short[i * 5]): success [18ms]
test Short512VectorTests.getShort512VectorTests(short[i + 1]): success [17ms]
test Short512VectorTests.getShort512VectorTests(short[cornerCaseValue(i)]): success [18ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[-i * 5]): success [38ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(0): success [65ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(-1): success [3ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(1): success [19ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(2): success [3ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(-2): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(0): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(-1): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(1): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(2): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(-2): success [3ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(0): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(32): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(37): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1024): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1025): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1029): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(0): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(32): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(37): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1024): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1025): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1029): success [0ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i]): success [294ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i - length / 2]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i + 1]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i - 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[zigZag(i)]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i]): success [138ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i - length / 2]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i + 1]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i - 2]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[zigZag(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i - length / 2]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i + 1]): success [128ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i - 2]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[zigZag(i)]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [134ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i - length / 2]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i + 1]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i - 2]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[zigZag(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i]): success [133ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i - length / 2]): success [141ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i + 1]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i - 2]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[zigZag(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i]): success [160ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [147ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [130ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [103ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.maskAndNotShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Short512VectorTests.maskAndNotShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskAndShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Short512VectorTests.maskAndShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskCompressShort512VectorTestsSmokeTest(mask[i % 2]): success [799ms]
test Short512VectorTests.maskCompressShort512VectorTestsSmokeTest(mask[true]): success [614ms]
test Short512VectorTests.maskCompressShort512VectorTestsSmokeTest(mask[false]): success [567ms]
test Short512VectorTests.maskEqShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short512VectorTests.maskEqShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskEqualsShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short512VectorTests.maskEqualsShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskFirstTrueShort512VectorTestsSmokeTest(mask[i % 2]): success [119ms]
test Short512VectorTests.maskFirstTrueShort512VectorTestsSmokeTest(mask[true]): success [146ms]
test Short512VectorTests.maskFirstTrueShort512VectorTestsSmokeTest(mask[false]): success [108ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(-1): success [60ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(0): success [0ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short512VectorTests.maskHashCodeShort512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Short512VectorTests.maskHashCodeShort512VectorTestsSmokeTest(mask[true]): success [4ms]
test Short512VectorTests.maskHashCodeShort512VectorTestsSmokeTest(mask[false]): success [0ms]
test Short512VectorTests.maskLastTrueShort512VectorTestsSmokeTest(mask[i % 2]): success [160ms]
test Short512VectorTests.maskLastTrueShort512VectorTestsSmokeTest(mask[true]): success [158ms]
test Short512VectorTests.maskLastTrueShort512VectorTestsSmokeTest(mask[false]): success [130ms]
test Short512VectorTests.maskOrShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [20ms]
test Short512VectorTests.maskOrShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskTrueCountShort512VectorTestsSmokeTest(mask[i % 2]): success [116ms]
test Short512VectorTests.maskTrueCountShort512VectorTestsSmokeTest(mask[true]): success [146ms]
test Short512VectorTests.maskTrueCountShort512VectorTestsSmokeTest(mask[false]): success [107ms]
test Short512VectorTests.maskXorShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [9ms]
test Short512VectorTests.maskXorShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maxShort512VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short512VectorTests.maxShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.maxShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [5ms]
test Short512VectorTests.maxShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.maxShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.maxShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.minShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.minShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.minShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.minShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.minShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.minShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.mulShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.mulShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.mulShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.negShort512VectorTests(short[-i * 5]): success [8ms]
test Short512VectorTests.negShort512VectorTests(short[i * 5]): success [11ms]
test Short512VectorTests.negShort512VectorTests(short[i + 1]): success [3ms]
test Short512VectorTests.negShort512VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.notShort512VectorTests(short[-i * 5]): success [75ms]
test Short512VectorTests.notShort512VectorTests(short[i * 5]): success [84ms]
test Short512VectorTests.notShort512VectorTests(short[i + 1]): success [68ms]
test Short512VectorTests.notShort512VectorTests(short[cornerCaseValue(i)]): success [68ms]
test Short512VectorTests.orShort512VectorTests(short[-i * 5], short[i * 5]): success [8ms]
test Short512VectorTests.orShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.orShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.orShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.orShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.orShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.shuffleEqualsShort512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [439ms]
test Short512VectorTests.shuffleEqualsShort512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [80ms]
test Short512VectorTests.shuffleMiscellaneousShort512VectorTestsSmokeTest(shuffle[random]): success [187ms]
test Short512VectorTests.shuffleTest(): success [987ms]
test Short512VectorTests.shuffleToStringShort512VectorTestsSmokeTest(shuffle[random]): success [66ms]
test Short512VectorTests.sliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i * 5]): success [743ms]
test Short512VectorTests.sliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i + 1]): success [1546ms]
test Short512VectorTests.sliceBinaryShort512VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [590ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [687ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [969ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [682ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [666ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [2705ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1362ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [709ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [674ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [669ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[-i * 5]): success [551ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[i * 5]): success [999ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[i + 1]): success [536ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[cornerCaseValue(i)]): success [537ms]
test Short512VectorTests.smokeTest1(): success [0ms]
test Short512VectorTests.smokeTest2(): success [97ms]
test Short512VectorTests.subShort512VectorTests(short[-i * 5], short[i * 5]): success [7ms]
test Short512VectorTests.subShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.subShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.subShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[-i * 5]): success [3ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[i * 5]): success [2ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [8ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[-i * 5]): success [3ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[i * 5]): success [24ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[i + 1]): success [2ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [15ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[-i * 5]): success [12ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[i * 5]): success [13ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[i + 1]): success [12ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.unsliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i * 5]): success [567ms]
test Short512VectorTests.unsliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i + 1]): success [1169ms]
test Short512VectorTests.unsliceBinaryShort512VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [550ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [1165ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [2667ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1172ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [1176ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [4939ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1172ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1182ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [1185ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1184ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[-i * 5]): success [540ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[i * 5]): success [1007ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[i + 1]): success [542ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[cornerCaseValue(i)]): success [550ms]
test Short512VectorTests.viewAsFloatingLanesTest(): success [22ms]
test Short512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Short512VectorTests.withShort512VectorTests(short[-i * 5], short[i * 5]): success [11ms]
test Short512VectorTests.withShort512VectorTests(short[-i * 5], short[i + 1]): success [10ms]
test Short512VectorTests.withShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [10ms]

===============================================
jdk/incubator/vector/Short512VectorTests.java
Total tests run: 3598, Passes: 3597, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/15 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Short512VectorTests.d/testng.0.jta jdk/incubator/vector/Short512VectorTests.java false Short512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Vector256ConversionTests.java
Passed: jdk/incubator/vector/Short64VectorTests.java
TEST: jdk/incubator/vector/Vector128ConversionTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.824 seconds
messages:
command: build Vector128ConversionTests
reason: Named class compiled on demand
started: Wed Apr 16 17:41:40 IST 2025
Test directory:
  compile: Vector128ConversionTests
finished: Wed Apr 16 17:41:41 IST 2025
elapsed time (seconds): 0.824

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.823 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector128ConversionTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 17:41:40 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 2
Process id: 1465731
finished: Wed Apr 16 17:41:41 IST 2025
elapsed time (seconds): 0.823
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Vector128ConversionTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/14 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Vector128ConversionTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector128ConversionTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Vector128ConversionTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Vector128ConversionTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Vector128ConversionTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Vector128ConversionTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Vector128ConversionTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector128ConversionTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector128ConversionTests 
TIME:   731.655 seconds
messages:
command: testng -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector128ConversionTests
reason: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector128ConversionTests 
started: Wed Apr 16 17:41:41 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1471995
finished: Wed Apr 16 17:53:53 IST 2025
elapsed time (seconds): 731.655
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 8, S_64_BIT], byte(i)): success [760ms]
castShape took 756 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cab41a5): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 4, S_64_BIT], byte(i)): success [1212ms]
castShape took 1211 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c8e097): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 2, S_64_BIT], byte(i)): success [971ms]
castShape took 971 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5261d331): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 1, S_64_BIT], byte(i)): success [392ms]
castShape took 392 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b024c50): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 2, S_64_BIT], byte(i)): success [124ms]
castShape took 124 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3be09a90): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 1, S_64_BIT], byte(i)): success [114ms]
castShape took 114 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@587a291b): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 16, S_128_BIT], byte(i)): success [1492ms]
castShape took 1492 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f553ca0): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 8, S_128_BIT], byte(i)): success [954ms]
castShape took 953 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@199c0767): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 4, S_128_BIT], byte(i)): success [1199ms]
castShape took 1199 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@601ced8f): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 2, S_128_BIT], byte(i)): success [963ms]
castShape took 963 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d7ea3c7): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 4, S_128_BIT], byte(i)): success [225ms]
castShape took 222 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b255dd9): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 2, S_128_BIT], byte(i)): success [166ms]
castShape took 166 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7fa5e19f): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 32, S_256_BIT], byte(i)): success [4058ms]
castShape took 4059 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ff24c93): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 16, S_256_BIT], byte(i)): success [453ms]
castShape took 453 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61cfed27): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 8, S_256_BIT], byte(i)): success [1031ms]
castShape took 1031 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1a8da75b): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 4, S_256_BIT], byte(i)): success [135ms]
castShape took 136 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5876605a): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 8, S_256_BIT], byte(i)): success [149ms]
castShape took 149 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bba105f): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 4, S_256_BIT], byte(i)): success [730ms]
castShape took 730 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3aef685d): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 64, S_512_BIT], byte(i)): success [10368ms]
castShape took 10368 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@330b599c): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 32, S_512_BIT], byte(i)): success [2785ms]
castShape took 2785 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4ec0d3c5): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 16, S_512_BIT], byte(i)): success [315ms]
castShape took 315 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@23ebbe9b): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 8, S_512_BIT], byte(i)): success [122ms]
castShape took 123 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f31904d): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 16, S_512_BIT], byte(i)): success [143ms]
castShape took 143 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@60302e2f): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 8, S_512_BIT], byte(i)): success [126ms]
castShape took 127 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@635080ac): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[byte, 16, S_Max_BIT], byte(i)): success [313ms]
castShape took 313 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21041812): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[short, 8, S_Max_BIT], byte(i)): success [134ms]
castShape took 133 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6ec78b92): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[int, 4, S_Max_BIT], byte(i)): success [438ms]
castShape took 439 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7514785e): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[long, 2, S_Max_BIT], byte(i)): success [126ms]
castShape took 126 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1cd890db): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[float, 4, S_Max_BIT], byte(i)): success [130ms]
castShape took 130 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d2edfc): success [0ms]
test Vector128ConversionTests.castShape(Species[byte, 16, S_128_BIT], Species[double, 2, S_Max_BIT], byte(i)): success [114ms]
castShape took 113 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25c43ebb): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 8, S_64_BIT], short(i)): success [1539ms]
castShape took 1540 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c8f70a7): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 4, S_64_BIT], short(i)): success [4338ms]
castShape took 4337 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@269d30e): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 2, S_64_BIT], short(i)): success [12ms]
castShape took 13 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@24836f52): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 1, S_64_BIT], short(i)): success [54ms]
castShape took 55 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65e87916): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 2, S_64_BIT], short(i)): success [11ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@769c5c70): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 1, S_64_BIT], short(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3702b375): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 16, S_128_BIT], short(i)): success [1938ms]
castShape took 1936 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3837a5b7): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 8, S_128_BIT], short(i)): success [508ms]
castShape took 508 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@606c340d): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 4, S_128_BIT], short(i)): success [24ms]
castShape took 25 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@630bd20e): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 2, S_128_BIT], short(i)): success [21ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12ed57a7): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 4, S_128_BIT], short(i)): success [25ms]
castShape took 24 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f2d24f6): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 2, S_128_BIT], short(i)): success [24ms]
castShape took 22 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37603231): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 32, S_256_BIT], short(i)): success [2535ms]
castShape took 2536 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bc54142): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 16, S_256_BIT], short(i)): success [4479ms]
castShape took 4479 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e567a1): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 8, S_256_BIT], short(i)): success [85ms]
castShape took 85 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19dc3e28): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 4, S_256_BIT], short(i)): success [66ms]
castShape took 66 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3de2e4ff): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 8, S_256_BIT], short(i)): success [85ms]
castShape took 86 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@40d0b25): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 4, S_256_BIT], short(i)): success [78ms]
castShape took 68 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@377723a8): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 64, S_512_BIT], short(i)): success [5804ms]
castShape took 5804 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6516338a): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 32, S_512_BIT], short(i)): success [2773ms]
castShape took 2774 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@31ffcfc1): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 16, S_512_BIT], short(i)): success [3786ms]
castShape took 3787 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7fac3958): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 8, S_512_BIT], short(i)): success [1188ms]
castShape took 1188 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12aa0499): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 16, S_512_BIT], short(i)): success [2562ms]
castShape took 2563 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@acc04f5): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 8, S_512_BIT], short(i)): success [83ms]
castShape took 83 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15e41f09): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[byte, 16, S_Max_BIT], short(i)): success [1190ms]
castShape took 1190 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c73d6bf): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[short, 8, S_Max_BIT], short(i)): success [473ms]
castShape took 473 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@86b636b): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[int, 4, S_Max_BIT], short(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1cc95e51): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[long, 2, S_Max_BIT], short(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@69062f41): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[float, 4, S_Max_BIT], short(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b0797d8): success [0ms]
test Vector128ConversionTests.castShape(Species[short, 8, S_128_BIT], Species[double, 2, S_Max_BIT], short(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1fde55c6): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 8, S_64_BIT], int(i)): success [2343ms]
castShape took 2343 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@263b3e17): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 4, S_64_BIT], int(i)): success [989ms]
castShape took 989 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19d63f56): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 2, S_64_BIT], int(i)): success [976ms]
castShape took 976 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44b0a7f2): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 1, S_64_BIT], int(i)): success [205ms]
castShape took 205 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@24106675): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 2, S_64_BIT], int(i)): success [9ms]
castShape took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@236f95aa): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 1, S_64_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5efab149): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 16, S_128_BIT], int(i)): success [541ms]
castShape took 542 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3fd3b325): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 8, S_128_BIT], int(i)): success [1681ms]
castShape took 1681 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3f43f08e): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 4, S_128_BIT], int(i)): success [983ms]
castShape took 984 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5fe72406): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 2, S_128_BIT], int(i)): success [10ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21f61f55): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 4, S_128_BIT], int(i)): success [16ms]
castShape took 17 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3325e54b): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 2, S_128_BIT], int(i)): success [9ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b339f99): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 32, S_256_BIT], int(i)): success [3489ms]
castShape took 3490 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18cb82df): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 16, S_256_BIT], int(i)): success [3430ms]
castShape took 3430 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@643f070d): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 8, S_256_BIT], int(i)): success [4045ms]
castShape took 4046 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@653e4509): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 4, S_256_BIT], int(i)): success [187ms]
castShape took 188 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2839d331): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 8, S_256_BIT], int(i)): success [2660ms]
castShape took 2660 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37078c85): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 4, S_256_BIT], int(i)): success [112ms]
castShape took 112 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76efca29): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 64, S_512_BIT], int(i)): success [6812ms]
castShape took 6812 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b5f7bb5): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 32, S_512_BIT], int(i)): success [4042ms]
castShape took 4042 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f9918c7): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 16, S_512_BIT], int(i)): success [2582ms]
castShape took 2582 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19345d92): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 8, S_512_BIT], int(i)): success [3306ms]
castShape took 3307 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49d8e1d8): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 16, S_512_BIT], int(i)): success [2363ms]
castShape took 2363 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29a2fa79): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 8, S_512_BIT], int(i)): failure [2571ms]
java.lang.AssertionError:  expected [[D@4b2a4a82] but found [[D@3523703]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertArrayEquals(Assert.java:201)
	at org.testng.Assert.assertEquals(Assert.java:119)
	at org.testng.Assert.assertEquals(Assert.java:617)
	at AbstractVectorConversionTest.conversion_kernel(AbstractVectorConversionTest.java:456)
	at Vector128ConversionTests.castShape(Vector128ConversionTests.java:85)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
castShape took 2542 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2659de2b): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[byte, 16, S_Max_BIT], int(i)): success [504ms]
castShape took 505 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43ace159): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[short, 8, S_Max_BIT], int(i)): success [1039ms]
castShape took 1039 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6371010b): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[int, 4, S_Max_BIT], int(i)): success [227ms]
castShape took 227 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26a91840): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[long, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@170549c7): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[float, 4, S_Max_BIT], int(i)): success [11ms]
castShape took 12 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@124d2b42): success [0ms]
test Vector128ConversionTests.castShape(Species[int, 4, S_128_BIT], Species[double, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39a660cb): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 8, S_64_BIT], long(i)): success [810ms]
castShape took 810 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42757dde): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 4, S_64_BIT], long(i)): success [1075ms]
castShape took 1076 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@30e20511): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 2, S_64_BIT], long(i)): success [993ms]
castShape took 994 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@53ebb446): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 1, S_64_BIT], long(i)): success [1326ms]
castShape took 1326 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2fd72c2): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 2, S_64_BIT], long(i)): success [17ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@584aa127): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 1, S_64_BIT], long(i)): success [20ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1a67c173): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 16, S_128_BIT], long(i)): success [1104ms]
castShape took 1104 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@79f6ac33): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 8, S_128_BIT], long(i)): success [582ms]
castShape took 583 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75abf337): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 4, S_128_BIT], long(i)): success [1468ms]
castShape took 1468 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e3f967b): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 2, S_128_BIT], long(i)): success [2025ms]
castShape took 2025 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a7adece): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 4, S_128_BIT], long(i)): success [1260ms]
castShape took 1260 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17e2be4e): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 2, S_128_BIT], long(i)): success [19ms]
castShape took 20 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2074a7f6): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 32, S_256_BIT], long(i)): success [7054ms]
castShape took 7055 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34249824): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 16, S_256_BIT], long(i)): success [4281ms]
castShape took 4281 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@276164a0): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 8, S_256_BIT], long(i)): success [3962ms]
castShape took 3963 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8c06a5d): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 4, S_256_BIT], long(i)): success [4686ms]
castShape took 4686 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7fbc1263): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 8, S_256_BIT], long(i)): success [3463ms]
castShape took 3463 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6b454dd8): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 4, S_256_BIT], long(i)): success [3106ms]
castShape took 3106 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75f7eb6a): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 64, S_512_BIT], long(i)): success [13502ms]
castShape took 13502 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1684bed8): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 32, S_512_BIT], long(i)): success [7199ms]
castShape took 7199 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6c6e507c): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 16, S_512_BIT], long(i)): success [4184ms]
castShape took 4184 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1529045f): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 8, S_512_BIT], long(i)): success [3134ms]
castShape took 3118 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@a9f041): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 16, S_512_BIT], long(i)): success [4794ms]
castShape took 4795 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6b2b98b1): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 8, S_512_BIT], long(i)): success [3205ms]
castShape took 3206 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d930031): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[byte, 16, S_Max_BIT], long(i)): success [1022ms]
castShape took 1023 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b49fe88): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[short, 8, S_Max_BIT], long(i)): success [600ms]
castShape took 600 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@786be358): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[int, 4, S_Max_BIT], long(i)): success [1080ms]
castShape took 1081 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@838508): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[long, 2, S_Max_BIT], long(i)): success [309ms]
castShape took 310 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1109d93c): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[float, 4, S_Max_BIT], long(i)): success [1187ms]
castShape took 1187 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13587957): success [0ms]
test Vector128ConversionTests.castShape(Species[long, 2, S_128_BIT], Species[double, 2, S_Max_BIT], long(i)): success [18ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@725c2ed4): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[byte, 8, S_64_BIT], float(i)): success [1431ms]
castShape took 1431 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@30e9dead): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[short, 4, S_64_BIT], float(i)): success [1836ms]
castShape took 1836 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@707cbf0a): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Species[int, 2, S_64_BIT], float(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66f8449d): success [0ms]
test Vector128ConversionTests.castShape(Species[float, 4, S_128_BIT], Sp

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

S_Max_BIT]): success [0ms]
shuffleCast took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ef944f8): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[float, 4, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bc51306): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[int, 2, S_64_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49fd216e): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[float, 2, S_64_BIT]): success [27ms]
shuffleCast took 28 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1384eb87): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[long, 2, S_128_BIT]): success [3ms]
shuffleCast took 4 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15c672de): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[double, 2, S_128_BIT]): success [2ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55b9f94e): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[long, 2, S_Max_BIT]): success [2ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4076fced): success [0ms]
test Vector128ConversionTests.shuffleCast(Species[double, 2, S_128_BIT], Species[double, 2, S_Max_BIT]): success [3ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14f5c5a9): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e77565): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5103825a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@167a7081): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e72c4eb): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@198647f7): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@361e5553): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2fd76e9b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@693954e1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50a63192): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 5 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17f0e87c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b06ce01): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76d7bdef): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4ba2a3c4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@463142d5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16da3050): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4219c83b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d863fcd): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1f18e4b1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27321f76): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@99a4da7): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14a4f797): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@666c1382): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@224314a2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1dfb4134): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[byte, 16, S_128_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7496b2ca): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45563d04): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@188caa7b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77ca5b48): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@390db554): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18fd0f5e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@701bc385): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7d444216): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34c85df8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f3cb131): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e8d1c80): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c93a156): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@67821d4e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12d3c83): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 27 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c820ef5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@491d4183): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46df943c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21550842): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77aa4c20): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@466dc5c5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5cacb27e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25fea54b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7403ac38): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[short, 8, S_128_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e150e1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b496a1d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a208eb4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b0a79e4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29812350): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25838d8c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@86a45d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@74779344): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dd24a2a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d369f8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e80a3ef): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5c7cbdb6): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@277354b5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@219fe42e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@389fdeba): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45b7e819): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@216f5222): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e9e4164): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5bd5a86d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f7104ce): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39c11e76): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7af8d8a7): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e165d44): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[int, 4, S_128_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48e07e11): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65977dc6): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@573ae6a8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6f12f8f8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bf63723): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ca34cbb): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61e2481c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7652041a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@171dcd5c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13b8c413): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@68a34a82): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2bb7efc2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@207054d6): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b5a9bf3): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44bcaa50): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39229018): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3aa271dc): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21b29cc2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e9a9a6f): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2cd91c5f): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2865f6ed): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13e4446c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@246e3c69): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e214d63): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[long, 2, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1319af93): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@157c2890): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b8ae83): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43daa5ab): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@47292319): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57438fd4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6628a0cd): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78c44a0e): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8b487c6): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@739d3d0b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3f47c415): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10fe1ffa): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dbd1524): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6fb99235): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5eb9a353): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@30c81a1d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5c663160): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@279510cc): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@303e321a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7612d72): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6cb56024): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@508fb1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b4e64be): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[float, 4, S_128_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10d15b43): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48a586d9): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5809466): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@520d679c): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42d3e00a): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18a4ca36): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d6e637d): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@718b30d4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f66a0b7): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d7a71f2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 16, S_256_BIT]): success [11ms]
shuffleCastNeg took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c0607e5): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15ce859f): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@529cf764): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e239d9b): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e80c493): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@438e98dd): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61b0eeb1): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7ff46da2): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2028cad4): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e946b66): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@151408c8): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66b68443): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@405e2a9f): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@198ffaff): success [0ms]
test Vector128ConversionTests.shuffleCastNeg(Species[double, 2, S_128_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@144407fa): success [0ms]

===============================================
jdk/incubator/vector/Vector128ConversionTests.java
Total tests run: 936, Passes: 935, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/14 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Vector128ConversionTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Vector128ConversionTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector128ConversionTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Vector128ConversionTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Vector128ConversionTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Vector128ConversionTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -XX:-TieredCompilation \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Vector128ConversionTests.d/testng.0.jta jdk/incubator/vector/Vector128ConversionTests.java false Vector128ConversionTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#id0
TEST: jdk/incubator/vector/VectorMaxConversionTests.java#Z
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.955 seconds
messages:
command: build VectorMaxConversionTests
reason: Named class compiled on demand
started: Wed Apr 16 17:44:38 IST 2025
Test directory:
  compile: VectorMaxConversionTests
finished: Wed Apr 16 17:44:39 IST 2025
elapsed time (seconds): 0.955

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.955 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 17:44:38 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 16
Process id: 1466890
finished: Wed Apr 16 17:44:39 IST 2025
elapsed time (seconds): 0.955
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_Z.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/1 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorMaxConversionTests.java#Z \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_Z.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_Z.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:+UseZGC -XX:+IgnoreUnrecognizedVMOptions VectorMaxConversionTests 
TIME:   733.119 seconds
messages:
command: testng -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:+UseZGC -XX:+IgnoreUnrecognizedVMOptions VectorMaxConversionTests
reason: User specified action: run testng/othervm -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting -XX:+UseZGC -XX:+IgnoreUnrecognizedVMOptions VectorMaxConversionTests 
started: Wed Apr 16 17:44:39 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1472415
finished: Wed Apr 16 17:56:52 IST 2025
elapsed time (seconds): 733.119
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 8, S_64_BIT], byte(i)): success [741ms]
castShape took 738 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@546e0bd): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 4, S_64_BIT], byte(i)): success [1207ms]
castShape took 1207 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@632e496b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 2, S_64_BIT], byte(i)): success [1022ms]
castShape took 1022 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@51e891bf): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 1, S_64_BIT], byte(i)): success [401ms]
castShape took 401 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a5e4d08): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 2, S_64_BIT], byte(i)): success [125ms]
castShape took 125 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f6118d8): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 1, S_64_BIT], byte(i)): success [202ms]
castShape took 202 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55eeea8b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 16, S_128_BIT], byte(i)): success [1788ms]
castShape took 1788 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@528d38e7): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 8, S_128_BIT], byte(i)): success [1267ms]
castShape took 1262 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2cbe3618): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 4, S_128_BIT], byte(i)): success [1007ms]
castShape took 1007 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f8a8aba): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 2, S_128_BIT], byte(i)): success [985ms]
castShape took 985 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c722680): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 4, S_128_BIT], byte(i)): success [353ms]
castShape took 353 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@67c6164): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 2, S_128_BIT], byte(i)): success [283ms]
castShape took 284 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b82f96e): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 32, S_256_BIT], byte(i)): success [3504ms]
castShape took 3504 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@71fe33e2): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 16, S_256_BIT], byte(i)): success [705ms]
castShape took 706 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@aae3445): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 8, S_256_BIT], byte(i)): success [1004ms]
castShape took 1004 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6f5fc3e1): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 4, S_256_BIT], byte(i)): success [142ms]
castShape took 143 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@286ac55): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 8, S_256_BIT], byte(i)): success [767ms]
castShape took 767 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b5f9dfc): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 4, S_256_BIT], byte(i)): success [146ms]
castShape took 146 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6a61fc87): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 64, S_512_BIT], byte(i)): success [10316ms]
castShape took 10316 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@56deba7b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 32, S_512_BIT], byte(i)): success [2890ms]
castShape took 2890 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f089e5a): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 16, S_512_BIT], byte(i)): success [339ms]
castShape took 339 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@294ff63b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 8, S_512_BIT], byte(i)): success [123ms]
castShape took 124 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@79e9a6e0): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 16, S_512_BIT], byte(i)): success [149ms]
castShape took 149 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63e75858): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 8, S_512_BIT], byte(i)): success [130ms]
castShape took 130 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@693101f): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[byte, 16, S_Max_BIT], byte(i)): success [290ms]
castShape took 290 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26ddddeb): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[short, 8, S_Max_BIT], byte(i)): success [165ms]
castShape took 164 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75f408dd): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[int, 4, S_Max_BIT], byte(i)): success [151ms]
castShape took 151 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59d0e70b): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[long, 2, S_Max_BIT], byte(i)): success [142ms]
castShape took 143 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@499f8b43): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[float, 4, S_Max_BIT], byte(i)): success [129ms]
castShape took 130 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7848b175): success [0ms]
test VectorMaxConversionTests.castShape(Species[byte, 16, S_Max_BIT], Species[double, 2, S_Max_BIT], byte(i)): success [141ms]
castShape took 141 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48926f03): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 8, S_64_BIT], short(i)): success [1924ms]
castShape took 1924 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f44746e): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 4, S_64_BIT], short(i)): success [3193ms]
castShape took 3193 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49f40d9c): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 2, S_64_BIT], short(i)): success [833ms]
castShape took 834 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@783e0a85): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 1, S_64_BIT], short(i)): success [53ms]
castShape took 53 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@682f65d6): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 2, S_64_BIT], short(i)): success [12ms]
castShape took 12 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@31a601ce): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 1, S_64_BIT], short(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c25a547): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 16, S_128_BIT], short(i)): success [2097ms]
castShape took 2096 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@36a18f0a): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 8, S_128_BIT], short(i)): success [425ms]
castShape took 425 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c351bca): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 4, S_128_BIT], short(i)): success [25ms]
castShape took 25 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2bdbaf30): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 2, S_128_BIT], short(i)): success [21ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3a4086a8): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 4, S_128_BIT], short(i)): success [24ms]
castShape took 24 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13ad0ef5): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 2, S_128_BIT], short(i)): success [24ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4278f552): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 32, S_256_BIT], short(i)): success [2532ms]
castShape took 2532 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10f3b8c6): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 16, S_256_BIT], short(i)): success [4514ms]
castShape took 4514 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@733cf401): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 8, S_256_BIT], short(i)): success [99ms]
castShape took 99 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@73d0dbaa): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 4, S_256_BIT], short(i)): success [67ms]
castShape took 67 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2427b770): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 8, S_256_BIT], short(i)): success [86ms]
castShape took 86 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dd5f6a7): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 4, S_256_BIT], short(i)): success [79ms]
castShape took 68 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6197d613): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 64, S_512_BIT], short(i)): success [5951ms]
castShape took 5951 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5017cc66): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 32, S_512_BIT], short(i)): success [2761ms]
castShape took 2761 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@64047a52): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 16, S_512_BIT], short(i)): success [3404ms]
castShape took 3404 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8f4dbee): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 8, S_512_BIT], short(i)): success [886ms]
castShape took 886 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76693731): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 16, S_512_BIT], short(i)): success [2527ms]
castShape took 2527 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2de896d8): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 8, S_512_BIT], short(i)): success [93ms]
castShape took 93 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d8aba90): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[byte, 16, S_Max_BIT], short(i)): success [1140ms]
castShape took 1140 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6a41deb9): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[short, 8, S_Max_BIT], short(i)): success [360ms]
castShape took 360 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@138c98cb): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[int, 4, S_Max_BIT], short(i)): success [19ms]
castShape took 20 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@196a447d): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[long, 2, S_Max_BIT], short(i)): success [25ms]
castShape took 25 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e7dae31): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[float, 4, S_Max_BIT], short(i)): success [20ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1f9c6bb): success [0ms]
test VectorMaxConversionTests.castShape(Species[short, 8, S_Max_BIT], Species[double, 2, S_Max_BIT], short(i)): success [18ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@58d3315b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 8, S_64_BIT], int(i)): success [2549ms]
castShape took 2548 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e9d92e): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 4, S_64_BIT], int(i)): success [475ms]
castShape took 475 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bbd5bf9): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 2, S_64_BIT], int(i)): success [831ms]
castShape took 832 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@257058f7): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 1, S_64_BIT], int(i)): success [227ms]
castShape took 227 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29f4f73e): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 2, S_64_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b6a43c1): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 1, S_64_BIT], int(i)): success [11ms]
castShape took 12 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@28672e5b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 16, S_128_BIT], int(i)): success [646ms]
castShape took 646 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5e78cab): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 8, S_128_BIT], int(i)): success [2505ms]
castShape took 2505 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@11c71e54): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 4, S_128_BIT], int(i)): success [723ms]
castShape took 723 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37754ff7): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 2, S_128_BIT], int(i)): success [10ms]
castShape took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1936d71f): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 4, S_128_BIT], int(i)): success [16ms]
castShape took 16 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e24b32c): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 2, S_128_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cfd144a): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 32, S_256_BIT], int(i)): success [3592ms]
castShape took 3592 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@53b9fe3b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 16, S_256_BIT], int(i)): success [2495ms]
castShape took 2495 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7190904f): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 8, S_256_BIT], int(i)): success [3684ms]
castShape took 3684 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@493118aa): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 4, S_256_BIT], int(i)): success [116ms]
castShape took 116 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d40da): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 8, S_256_BIT], int(i)): success [2373ms]
castShape took 2372 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6cf8b59d): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 4, S_256_BIT], int(i)): success [105ms]
castShape took 105 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6d5c6722): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 64, S_512_BIT], int(i)): success [6898ms]
castShape took 6898 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c0efb4b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 32, S_512_BIT], int(i)): success [3848ms]
castShape took 3849 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55af1bc1): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 16, S_512_BIT], int(i)): success [2410ms]
castShape took 2410 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@ebde77d): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 8, S_512_BIT], int(i)): success [3149ms]
castShape took 3148 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@196b41fc): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 16, S_512_BIT], int(i)): success [2399ms]
castShape took 2400 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f692133): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 8, S_512_BIT], int(i)): success [2518ms]
castShape took 2518 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ead2c00): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[byte, 16, S_Max_BIT], int(i)): success [516ms]
castShape took 517 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e0ee11b): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[short, 8, S_Max_BIT], int(i)): success [1045ms]
castShape took 1045 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d86730d): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[int, 4, S_Max_BIT], int(i)): success [220ms]
castShape took 221 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@23868d8a): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[long, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@340a9b10): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[float, 4, S_Max_BIT], int(i)): success [11ms]
castShape took 11 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1d444342): success [0ms]
test VectorMaxConversionTests.castShape(Species[int, 4, S_Max_BIT], Species[double, 2, S_Max_BIT], int(i)): success [10ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@503c10a6): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 8, S_64_BIT], long(i)): success [827ms]
castShape took 828 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f3456a5): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 4, S_64_BIT], long(i)): success [1061ms]
castShape took 1062 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@bdc2f79): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 2, S_64_BIT], long(i)): success [497ms]
castShape took 498 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12c07d5f): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 1, S_64_BIT], long(i)): success [1012ms]
castShape took 1012 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b35aaff): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 2, S_64_BIT], long(i)): success [18ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@509097b3): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 1, S_64_BIT], long(i)): success [21ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e2517eb): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 16, S_128_BIT], long(i)): success [1095ms]
castShape took 1095 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6341bb9b): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 8, S_128_BIT], long(i)): success [585ms]
castShape took 585 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d4c601a): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 4, S_128_BIT], long(i)): success [2185ms]
castShape took 2185 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@208ad9db): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 2, S_128_BIT], long(i)): success [1436ms]
castShape took 1436 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16bd3d7): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 4, S_128_BIT], long(i)): success [1250ms]
castShape took 1251 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2cf4db3a): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 2, S_128_BIT], long(i)): success [19ms]
castShape took 20 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e8438fd): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 32, S_256_BIT], long(i)): success [7123ms]
castShape took 7123 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ddc58db): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 16, S_256_BIT], long(i)): success [4352ms]
castShape took 4352 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2d67dfeb): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 8, S_256_BIT], long(i)): success [3156ms]
castShape took 3157 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@390794f6): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 4, S_256_BIT], long(i)): success [4460ms]
castShape took 4460 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@723b1bff): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 8, S_256_BIT], long(i)): success [3515ms]
castShape took 3514 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@634db3b1): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 4, S_256_BIT], long(i)): success [3194ms]
castShape took 3194 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3901e750): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 64, S_512_BIT], long(i)): success [13574ms]
castShape took 13574 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6c069932): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 32, S_512_BIT], long(i)): success [7253ms]
castShape took 7253 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3095b2d5): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 16, S_512_BIT], long(i)): success [4263ms]
castShape took 4265 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5883c5fd): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 8, S_512_BIT], long(i)): success [3142ms]
castShape took 3139 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@148f7eea): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 16, S_512_BIT], long(i)): success [4975ms]
castShape took 4974 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1684057): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 8, S_512_BIT], long(i)): success [3186ms]
castShape took 3186 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@185a9bbc): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[byte, 16, S_Max_BIT], long(i)): success [1033ms]
castShape took 1033 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b94d56d): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[short, 8, S_Max_BIT], long(i)): success [607ms]
castShape took 607 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@125efa25): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[int, 4, S_Max_BIT], long(i)): success [1091ms]
castShape took 1092 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1db55109): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[long, 2, S_Max_BIT], long(i)): success [301ms]
castShape took 302 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27c8f2a0): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[float, 4, S_Max_BIT], long(i)): success [1203ms]
castShape took 1203 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8797093): success [0ms]
test VectorMaxConversionTests.castShape(Species[long, 2, S_Max_BIT], Species[double, 2, S_Max_BIT], long(i)): success [19ms]
castShape took 19 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@30bf99a6): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[byte, 8, S_64_BIT], float(i)): success [1447ms]
castShape took 1447 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3021da2): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[short, 4, S_64_BIT], float(i)): success [1938ms]
castShape took 1939 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7531af5): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[int, 2, S_64_BIT], float(i)): success [8ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c2655b1): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[long, 1, S_64_BIT], float(i)): success [1011ms]
castShape took 1011 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a11d6e8): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[float, 2, S_64_BIT], float(i)): success [542ms]
castShape took 542 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1a7b4143): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[double, 1, S_64_BIT], float(i)): success [7ms]
castShape took 7 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@618dd67f): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[byte, 16, S_128_BIT], float(i)): success [537ms]
castShape took 537 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e5e34f8): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[short, 8, S_128_BIT], float(i)): success [305ms]
castShape took 305 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f71e650): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[int, 4, S_128_BIT], float(i)): success [9ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78606223): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[long, 2, S_128_BIT], float(i)): success [1878ms]
castShape took 1878 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27d12396): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[float, 4, S_128_BIT], float(i)): success [262ms]
castShape took 262 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3eda87de): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[double, 2, S_128_BIT], float(i)): success [8ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f1e78eb): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_BIT], Species[byte, 32, S_256_BIT], float(i)): success [3528ms]
castShape took 3528 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6807ea46): success [0ms]
test VectorMaxConversionTests.castShape(Species[float, 4, S_Max_B

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

nt, 4, S_Max_BIT]): success [1ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c3da006): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[float, 4, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCast took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b49dd1e): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[int, 2, S_64_BIT]): success [2ms]
shuffleCast took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e568605): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[float, 2, S_64_BIT]): success [2ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d592542): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[long, 2, S_128_BIT]): success [3ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@9a245e9): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[double, 2, S_128_BIT]): success [2ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@284e7903): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [3ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@541885e1): success [0ms]
test VectorMaxConversionTests.shuffleCast(Species[double, 2, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [3ms]
shuffleCast took 3 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2a0ef22b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5ff8af5): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@315ca928): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c10d27c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50deebc7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@25497aa7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e312a12): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29ca0791): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@34b11482): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4c8b0070): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 6 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@dc2b4a3): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f32cbdf): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bd29d38): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f66f336): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@69442165): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a6b811b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@16462e67): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1305d893): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@611dd57b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e10bd83): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7869de30): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21b122bc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63e67cfa): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12838755): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@520bb97d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[byte, 16, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19452de4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44a14bf9): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76807c8e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5fee6e6): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@647c6831): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29211322): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@579b4a3f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7d284e15): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c7d3ead): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@400db070): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7699a09d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@74740bab): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5fd6c0fa): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6feeb1fd): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 48 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@620f40bc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5da168a1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7232626d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@310841cb): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c2d8368): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e1c5ece): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e3a6e7c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@45e78690): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2205ea40): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[short, 8, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8a727bc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6318a5a8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4c40b2a2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14c144a2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f179f4f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@470c46ea): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6d342060): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@265b629d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15bd7f52): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@419b05f9): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5517cc1b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3eda3697): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d3e072d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f0ffaec): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77e5a132): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17949e9d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3988d3f8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b163976): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17c7e714): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3cc04052): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d89c2c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@73eeb132): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66c528f7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[int, 4, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@383e0d5f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@9fe9a00): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59d6c46): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@22a27d28): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f535136): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6f9bfcfb): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c10253e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6e668e15): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@202c21b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5004148b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7af2dadd): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@418e75b3): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65023999): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12722c53): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ea8f6be): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2d7684b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27f99e8e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3952f3fd): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@60ec4a15): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3cb7d633): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@601d418a): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50eb255c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@20b0cb6d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8599b0): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[long, 2, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5262d71e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b4e3b02): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57fd5bc2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59ad3e2c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6afa8cf7): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@65531e6f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b90d7cc): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b6ac88d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@58b1a220): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b49e09e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a453e23): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4be00ed8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3653f2c1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@78f79419): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@170a18fe): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3685fc68): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7e6656e2): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2281c8fb): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@348ca2f8): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@53f9aca5): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7381c21d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@959ed1e): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@ffb23c1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[float, 4, S_Max_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@12124d4): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@197e67f1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6651c590): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e121581): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a1d2b5f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6db5cb1d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c153a5d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17611355): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b9c9f1): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@35873b71): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 16, S_256_BIT]): success [1ms]
shuffleCastNeg took 2 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2079de3c): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@780b60de): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6a04c78f): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ef74279): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@ad848ae): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5d56bd10): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@35359554): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@32fc0baf): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@579d7af3): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b54a684): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@27631c0d): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6b13352b): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6237bd38): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bd5b542): success [0ms]
test VectorMaxConversionTests.shuffleCastNeg(Species[double, 2, S_Max_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63d7d3d6): success [0ms]

===============================================
jdk/incubator/vector/VectorMaxConversionTests.java#Z
Total tests run: 936, Passes: 935, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/1 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_Z.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorMaxConversionTests.java#Z \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorMaxConversionTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_Z.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/VectorMaxConversionTests_Z.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -XX:-TieredCompilation \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:+UnlockDiagnosticVMOptions \
        -XX:+UseKNLSetting \
        -XX:+UseZGC \
        -XX:+IgnoreUnrecognizedVMOptions \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/VectorMaxConversionTests_Z.d/testng.0.jta jdk/incubator/vector/VectorMaxConversionTests.java#Z false VectorMaxConversionTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
TEST: jdk/incubator/vector/VectorReshapeTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.545 seconds
messages:
command: build VectorReshapeTests
reason: Named class compiled on demand
started: Wed Apr 16 17:45:34 IST 2025
Test directory:
  compile: VectorReshapeTests
finished: Wed Apr 16 17:45:35 IST 2025
elapsed time (seconds): 0.545

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.545 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 17:45:34 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 12
Process id: 1466456
finished: Wed Apr 16 17:45:35 IST 2025
elapsed time (seconds): 0.545
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/6 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
REASON: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
TIME:   906.956 seconds
messages:
command: testng --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests
reason: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
started: Wed Apr 16 17:45:35 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1472492
finished: Wed Apr 16 18:00:42 IST 2025
elapsed time (seconds): 906.956
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorReshapeTests.testCastFromByte(byte(i)): success [40063ms]
test VectorReshapeTests.testCastFromDouble(double(i)): success [3209ms]
test VectorReshapeTests.testCastFromFloat(float(i)): success [4031ms]
test VectorReshapeTests.testCastFromInt(int(i)): success [4115ms]
test VectorReshapeTests.testCastFromLong(long(i)): success [3109ms]
test VectorReshapeTests.testCastFromShort(short(i)): success [3975ms]
test VectorReshapeTests.testRebracket128(byte(i)): success [21452ms]
test VectorReshapeTests.testRebracket256(byte(i)): success [102080ms]
test VectorReshapeTests.testRebracket512(byte(i)): success [166432ms]
test VectorReshapeTests.testRebracket64(byte(i)): success [16569ms]
test VectorReshapeTests.testRebracketMax(byte(i)): success [22790ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[byte, 8, S_64_BIT]->Species[byte, 64, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-5, origin=40
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeByte(byte(i)): failure [212319ms]
java.lang.AssertionError: arrays differ firstly at element [40]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeByte(VectorReshapeTests.java:441)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[double, 2, S_Max_BIT]->Species[double, 8, S_512_BIT] (reinterpret), partLimit=-4, block=16, part=-2, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeDouble(byte(i)): failure [59515ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeDouble(VectorReshapeTests.java:695)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[float, 2, S_64_BIT]->Species[float, 16, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-1, origin=8
expect: [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeFloat(byte(i)): failure [63729ms]
java.lang.AssertionError: arrays differ firstly at element [8]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeFloat(VectorReshapeTests.java:625)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[int, 2, S_64_BIT]->Species[int, 16, S_512_BIT] (reinterpret), partLimit=-8, block=8, part=-7, origin=56
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeInt(byte(i)): failure [37034ms]
java.lang.AssertionError: arrays differ firstly at element [56]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeInt(VectorReshapeTests.java:533)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[long, 1, S_64_BIT]->Species[long, 4, S_256_BIT] (reinterpret), partLimit=-4, block=8, part=-3, origin=24
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeLong(byte(i)): failure [16609ms]
java.lang.AssertionError: arrays differ firstly at element [24]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeLong(VectorReshapeTests.java:578)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[short, 4, S_64_BIT]->Species[short, 16, S_256_BIT] (reinterpret), partLimit=-4, block=8, part=-1, origin=8
expect: [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeShort(byte(i)): failure [90286ms]
java.lang.AssertionError: arrays differ firstly at element [8]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeShort(VectorReshapeTests.java:486)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testUCastFromByte(byte(i)): success [22435ms]
test VectorReshapeTests.testUCastFromInt(int(i)): success [1ms]
test VectorReshapeTests.testUCastFromShort(short(i)): success [11444ms]

===============================================
jdk/incubator/vector/VectorReshapeTests.java
Total tests run: 20, Passes: 14, Failures: 6, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 6
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 6
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/6 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/15/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/VectorReshapeTests.d/testng.0.jta jdk/incubator/vector/VectorReshapeTests.java false VectorReshapeTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
--------------------------------------------------
TEST: jdk/incubator/vector/Vector64ConversionTests.java#id0
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.041 seconds
messages:
command: build Vector64ConversionTests
reason: Named class compiled on demand
started: Wed Apr 16 17:42:04 IST 2025
Test directory:
  compile: Vector64ConversionTests
finished: Wed Apr 16 17:42:05 IST 2025
elapsed time (seconds): 1.041

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.041 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 17:42:04 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 7
Process id: 1466001
finished: Wed Apr 16 17:42:05 IST 2025
elapsed time (seconds): 1.041
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Vector64ConversionTests.java#id0 \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector64ConversionTests 
TIME:   1379.918 seconds
messages:
command: testng -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector64ConversionTests
reason: User specified action: run testng/othervm/timeout=300 -XX:-TieredCompilation --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED Vector64ConversionTests 
started: Wed Apr 16 17:42:05 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1472122
finished: Wed Apr 16 18:05:05 IST 2025
elapsed time (seconds): 1379.918
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 8, S_64_BIT], byte(i)): success [1304ms]
castShape took 1299 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cab41a5): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 4, S_64_BIT], byte(i)): success [685ms]
castShape took 685 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@32f13c0c): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 2, S_64_BIT], byte(i)): success [558ms]
castShape took 559 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@177ba401): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 1, S_64_BIT], byte(i)): success [388ms]
castShape took 388 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@55e9fd9b): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 2, S_64_BIT], byte(i)): success [212ms]
castShape took 213 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bf43dcb): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 1, S_64_BIT], byte(i)): success [371ms]
castShape took 371 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@64cc2f05): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 16, S_128_BIT], byte(i)): success [2255ms]
castShape took 2255 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7d3c5dca): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 8, S_128_BIT], byte(i)): success [973ms]
castShape took 973 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54302f60): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 4, S_128_BIT], byte(i)): success [858ms]
castShape took 858 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@160cc352): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 2, S_128_BIT], byte(i)): success [716ms]
castShape took 716 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@759369ce): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 4, S_128_BIT], byte(i)): success [184ms]
castShape took 184 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@23821e96): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 2, S_128_BIT], byte(i)): success [588ms]
castShape took 588 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4c93395e): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 32, S_256_BIT], byte(i)): success [5275ms]
castShape took 5275 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@64daf28): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 16, S_256_BIT], byte(i)): success [4150ms]
castShape took 4150 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7453c2ce): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 8, S_256_BIT], byte(i)): success [196ms]
castShape took 197 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2911fcc7): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 4, S_256_BIT], byte(i)): success [812ms]
castShape took 812 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@69a30bb8): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 8, S_256_BIT], byte(i)): success [197ms]
castShape took 198 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@695191ca): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 4, S_256_BIT], byte(i)): success [173ms]
castShape took 173 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4bf40f8): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 64, S_512_BIT], byte(i)): success [7101ms]
castShape took 7101 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bd98d4a): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 32, S_512_BIT], byte(i)): success [5315ms]
castShape took 5315 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@51e62310): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 16, S_512_BIT], byte(i)): success [3104ms]
castShape took 3104 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18ef793): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 8, S_512_BIT], byte(i)): success [894ms]
castShape took 895 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54eca994): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 16, S_512_BIT], byte(i)): success [3038ms]
castShape took 3038 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d9ec089): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 8, S_512_BIT], byte(i)): success [175ms]
castShape took 175 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4cd54fd1): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[byte, 16, S_Max_BIT], byte(i)): success [1496ms]
castShape took 1496 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@630bd20e): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[short, 8, S_Max_BIT], byte(i)): success [153ms]
castShape took 152 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3bc54142): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[int, 4, S_Max_BIT], byte(i)): success [136ms]
castShape took 137 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@618b78f4): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[long, 2, S_Max_BIT], byte(i)): success [439ms]
castShape took 440 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c7674c6): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[float, 4, S_Max_BIT], byte(i)): success [141ms]
castShape took 141 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@72fd6e22): success [0ms]
test Vector64ConversionTests.castShape(Species[byte, 8, S_64_BIT], Species[double, 2, S_Max_BIT], byte(i)): success [138ms]
castShape took 139 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@40d0b25): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 8, S_64_BIT], short(i)): success [3214ms]
castShape took 3214 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@9ae45b9): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 4, S_64_BIT], short(i)): success [4662ms]
castShape took 4662 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7fac3958): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 2, S_64_BIT], short(i)): success [9ms]
castShape took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19d0a0ec): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 1, S_64_BIT], short(i)): success [79ms]
castShape took 80 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7eff441c): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 2, S_64_BIT], short(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b6a37d2): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 1, S_64_BIT], short(i)): success [7ms]
castShape took 7 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48b7f47e): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 16, S_128_BIT], short(i)): success [859ms]
castShape took 859 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@c4697bc): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 8, S_128_BIT], short(i)): success [1681ms]
castShape took 1682 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5353824d): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 4, S_128_BIT], short(i)): success [12ms]
castShape took 12 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61517fb2): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 2, S_128_BIT], short(i)): success [13ms]
castShape took 14 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5bb27146): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 4, S_128_BIT], short(i)): success [12ms]
castShape took 12 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@412dc1a2): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 2, S_128_BIT], short(i)): success [13ms]
castShape took 10 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@321f317): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 32, S_256_BIT], short(i)): success [4575ms]
castShape took 4575 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5b0ecc95): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 16, S_256_BIT], short(i)): success [2531ms]
castShape took 2531 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10363f91): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 8, S_256_BIT], short(i)): success [3184ms]
castShape took 3184 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@42e578c0): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 4, S_256_BIT], short(i)): success [106ms]
castShape took 107 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cfc7fce): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 8, S_256_BIT], short(i)): success [2291ms]
castShape took 2291 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2f84d03b): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 4, S_256_BIT], short(i)): success [4364ms]
castShape took 4354 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@15e41f09): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 64, S_512_BIT], short(i)): success [6525ms]
castShape took 6525 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7c73d6bf): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 32, S_512_BIT], short(i)): success [4746ms]
castShape took 4746 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1d5c1d58): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 16, S_512_BIT], short(i)): success [2116ms]
castShape took 2116 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@a049c7d): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 8, S_512_BIT], short(i)): success [3011ms]
castShape took 3011 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@61a38c6c): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 16, S_512_BIT], short(i)): success [2370ms]
castShape took 2370 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@236f95aa): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 8, S_512_BIT], short(i)): success [4757ms]
castShape took 4757 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5efab149): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[byte, 16, S_Max_BIT], short(i)): success [585ms]
castShape took 585 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18cb82df): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[short, 8, S_Max_BIT], short(i)): success [1454ms]
castShape took 1455 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@643f070d): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[int, 4, S_Max_BIT], short(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4934c96b): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[long, 2, S_Max_BIT], short(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3e059ab7): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[float, 4, S_Max_BIT], short(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5897749f): success [0ms]
test Vector64ConversionTests.castShape(Species[short, 4, S_64_BIT], Species[double, 2, S_Max_BIT], short(i)): success [7ms]
castShape took 8 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2c1371b8): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 8, S_64_BIT], int(i)): success [2226ms]
castShape took 2227 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@442b18f7): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 4, S_64_BIT], int(i)): success [1174ms]
castShape took 1173 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@272f2089): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 2, S_64_BIT], int(i)): success [849ms]
castShape took 849 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@47411d55): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 1, S_64_BIT], int(i)): success [163ms]
castShape took 163 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14ce104e): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 2, S_64_BIT], int(i)): success [27ms]
castShape took 27 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5594fce7): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 1, S_64_BIT], int(i)): success [23ms]
castShape took 24 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@385c781e): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 16, S_128_BIT], int(i)): success [1154ms]
castShape took 1155 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b49f91b): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 8, S_128_BIT], int(i)): success [603ms]
castShape took 604 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3ef954c2): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 4, S_128_BIT], int(i)): success [1958ms]
castShape took 1958 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@41d7eadd): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 2, S_128_BIT], int(i)): success [25ms]
castShape took 26 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@77875646): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 4, S_128_BIT], int(i)): success [1218ms]
castShape took 1219 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75410c4d): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 2, S_128_BIT], int(i)): success [23ms]
castShape took 23 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2659de2b): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 32, S_256_BIT], int(i)): success [7130ms]
castShape took 7129 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2965864e): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 16, S_256_BIT], int(i)): success [4102ms]
castShape took 4102 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2120f2e3): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 8, S_256_BIT], int(i)): success [3535ms]
castShape took 3535 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@652689d6): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 4, S_256_BIT], int(i)): success [3715ms]
castShape took 3715 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4da521da): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 8, S_256_BIT], int(i)): success [3442ms]
castShape took 3443 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b83faf6): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 4, S_256_BIT], int(i)): success [3056ms]
castShape took 3056 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5403a76a): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 64, S_512_BIT], int(i)): success [13047ms]
castShape took 13047 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7f69c681): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 32, S_512_BIT], int(i)): success [7271ms]
castShape took 7271 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@38212d6d): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 16, S_512_BIT], int(i)): success [4572ms]
castShape took 4573 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b356941): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 8, S_512_BIT], int(i)): success [2843ms]
castShape took 2844 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5e3358da): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 16, S_512_BIT], int(i)): success [4787ms]
castShape took 4787 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1127a9e1): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 8, S_512_BIT], int(i)): success [3181ms]
castShape took 3181 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43ace159): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[byte, 16, S_Max_BIT], int(i)): success [1028ms]
castShape took 1029 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6371010b): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[short, 8, S_Max_BIT], int(i)): success [609ms]
castShape took 610 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2ce2b52d): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[int, 4, S_Max_BIT], int(i)): success [1421ms]
castShape took 1421 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26a91840): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[long, 2, S_Max_BIT], int(i)): success [18ms]
castShape took 18 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@124d2b42): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[float, 4, S_Max_BIT], int(i)): success [1192ms]
castShape took 1192 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@39a660cb): success [0ms]
test Vector64ConversionTests.castShape(Species[int, 2, S_64_BIT], Species[double, 2, S_Max_BIT], int(i)): success [21ms]
castShape took 21 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@54f2c322): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 8, S_64_BIT], long(i)): success [1552ms]
castShape took 1552 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@a058e25): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 4, S_64_BIT], long(i)): success [796ms]
castShape took 796 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2fd72c2): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 2, S_64_BIT], long(i)): success [1186ms]
castShape took 1186 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@702a7105): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 1, S_64_BIT], long(i)): success [1293ms]
castShape took 1293 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17ad70a4): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 2, S_64_BIT], long(i)): success [1288ms]
castShape took 1288 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75abf337): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 1, S_64_BIT], long(i)): success [299ms]
castShape took 299 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7a7adece): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 16, S_128_BIT], long(i)): success [2246ms]
castShape took 2246 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13013718): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 8, S_128_BIT], long(i)): success [1222ms]
castShape took 1222 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@17e2be4e): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 4, S_128_BIT], long(i)): success [865ms]
castShape took 866 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d921bd2): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 2, S_128_BIT], long(i)): success [2973ms]
castShape took 2974 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2037f3c9): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 4, S_128_BIT], long(i)): success [1141ms]
castShape took 1141 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@276164a0): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 2, S_128_BIT], long(i)): success [1376ms]
castShape took 1377 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8c06a5d): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 32, S_256_BIT], long(i)): success [14073ms]
castShape took 14073 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@28d7f27b): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 16, S_256_BIT], long(i)): success [8189ms]
castShape took 8190 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6b454dd8): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 8, S_256_BIT], long(i)): success [6199ms]
castShape took 6198 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75f7eb6a): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 4, S_256_BIT], long(i)): success [4875ms]
castShape took 4875 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e488490): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 8, S_256_BIT], long(i)): success [6217ms]
castShape took 6217 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5ca2ddd8): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 4, S_256_BIT], long(i)): success [4318ms]
castShape took 4317 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@56fbb06c): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 64, S_512_BIT], long(i)): success [26322ms]
castShape took 26323 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26680c34): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 32, S_512_BIT], long(i)): success [14223ms]
castShape took 14223 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1e5aae46): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 16, S_512_BIT], long(i)): success [8361ms]
castShape took 8360 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66c655cc): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 8, S_512_BIT], long(i)): success [5898ms]
castShape took 5878 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@70731f1d): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 16, S_512_BIT], long(i)): success [9718ms]
castShape took 9718 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c1007ab): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 8, S_512_BIT], long(i)): success [6626ms]
castShape took 6626 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5d5cf24a): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[byte, 16, S_Max_BIT], long(i)): success [2195ms]
castShape took 2195 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44fa8ea1): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[short, 8, S_Max_BIT], long(i)): success [1344ms]
castShape took 1345 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3af7f9f0): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[int, 4, S_Max_BIT], long(i)): success [862ms]
castShape took 862 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d3eb656): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[long, 2, S_Max_BIT], long(i)): success [1751ms]
castShape took 1751 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14b48a94): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[float, 4, S_Max_BIT], long(i)): success [1150ms]
castShape took 1151 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2974683e): success [0ms]
test Vector64ConversionTests.castShape(Species[long, 1, S_64_BIT], Species[double, 2, S_Max_BIT], long(i)): success [1309ms]
castShape took 1309 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@81586e9): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[byte, 8, S_64_BIT], float(i)): success [1766ms]
castShape took 1767 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63b8ddc6): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[short, 4, S_64_BIT], float(i)): success [2108ms]
castShape took 2108 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@283174d3): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[int, 2, S_64_BIT], float(i)): success [14ms]
castShape took 14 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2109f79c): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[long, 1, S_64_BIT], float(i)): success [144ms]
castShape took 145 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@26c5e81d): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[float, 2, S_64_BIT], float(i)): success [594ms]
castShape took 595 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7552b685): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[double, 1, S_64_BIT], float(i)): success [13ms]
castShape took 13 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@62f11d82): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[byte, 16, S_128_BIT], float(i)): success [1054ms]
castShape took 1055 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@110d084): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[short, 8, S_128_BIT], float(i)): success [578ms]
castShape took 577 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2d4bbd01): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[int, 4, S_128_BIT], float(i)): success [396ms]
castShape took 396 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@74ce726a): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[long, 2, S_128_BIT], float(i)): success [28ms]
castShape took 28 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@68438483): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[float, 4, S_128_BIT], float(i)): success [975ms]
castShape took 975 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@49d570): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[double, 2, S_128_BIT], float(i)): success [14ms]
castShape took 14 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8233c99): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[byte, 32, S_256_BIT], float(i)): success [7069ms]
castShape took 7069 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f4c0e1b): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2, S_64_BIT], Species[short, 16, S_256_BIT], float(i)): success [4090ms]
castShape took 4090 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3c9f6571): success [0ms]
test Vector64ConversionTests.castShape(Species[float, 2,

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6be1da02): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29897488): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@732e8986): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 4, S_128_BIT]): success [1ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5cbdda99): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ee39ff8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@445381b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2dc938c6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@44112c3d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@344d3c48): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a4d4e7b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66741a55): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46d90bd8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 6 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d42ae57): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@48b81600): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@e7214ca): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4a19ce6e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@134caef3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[byte, 8, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b763382): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@517f1655): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@23da9535): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3dc096e8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@11e85147): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b0db1d4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4e4a49a5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2633e9d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59cd536a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@380f821): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@442f10d8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d4813a4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@24687549): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d333b11): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ae1a2ca): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@20b713c3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@685cabee): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@63c2d99): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@111d7af1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@35a4c2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7b9d04a5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21bca813): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a36dc29): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[short, 4, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2e740c4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 28 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4dee5fd5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f73d371): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@79c23a2a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@d151ac1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d85d8b4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@51e5636b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@62c26811): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@714dbe24): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@bd3e301): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57aa423f): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3dde168a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@20bd98b9): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4d219881): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@38c3a523): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4c762e81): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@211c2efc): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43ff9098): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c57030b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@18377b93): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f4f44d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1bd7c1d9): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@67433a7e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@41386df): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[int, 2, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@700403): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43e8e8b6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4f21513f): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3de8fca0): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3f95d66e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7461adda): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@59d7e7c5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1ce103d3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@31b5da45): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7bf99152): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@648eadea): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b672d7c): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@70124837): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@644ccb61): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@752c7c78): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@11ad12c6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7efa3452): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@52f5f350): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f07ac2e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@66c894bb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@76e80835): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1b6da6cb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cbd6f1d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@571f2dc1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@19b8c726): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2064d20): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@773b9530): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@233b747d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[long, 1, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f57afc1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@46415e46): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21823396): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[long, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5983e717): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[double, 1, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@37962361): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5a75998): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 8, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@41a28db6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@6817773d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@33b25e83): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2bb974b4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@29539615): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13e1fb18): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@a111ed6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@cdb1fc6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f585deb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3b48852b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@13c30a6a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4fd6a0f2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@57fdf0dc): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5dbef5fc): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@8fd4fd1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2d5a3977): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@ed439a4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@7cbd8f4d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[float, 2, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@14f8736a): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 8, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@679f3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 4, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1f11df84): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@367aacc4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 2, S_64_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@43717fa6): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 16, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@21ac7818): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 8, S_128_BIT]): success [8ms]
shuffleCastNeg took 9 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@50600acb): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@718b30d4): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5f66a0b7): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 4, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@3d7a71f2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 2, S_128_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1c0607e5): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 32, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@1858a725): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 16, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@395b81ec): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@f20039d): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@b923552): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 8, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@31b31435): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 4, S_256_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@592c1d5b): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 64, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@480b4c0e): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 32, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@460b61c2): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@32d189e3): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@738c0207): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 16, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2b340518): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 8, S_512_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@75b93ea8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[byte, 16, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@4b49eb49): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[short, 8, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@257fdb18): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[int, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@10d3b598): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[long, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2d114fb1): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[float, 4, S_Max_BIT]): success [0ms]
shuffleCastNeg took 1 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@142ceff8): success [0ms]
test Vector64ConversionTests.shuffleCastNeg(Species[double, 1, S_64_BIT], Species[double, 2, S_Max_BIT]): success [0ms]
shuffleCastNeg took 0 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@2af8c4c7): success [0ms]

===============================================
jdk/incubator/vector/Vector64ConversionTests.java#id0
Total tests run: 936, Passes: 935, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=0 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Vector64ConversionTests.java#id0 \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Vector64ConversionTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Vector64ConversionTests_id0.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=0 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -XX:-TieredCompilation \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Vector64ConversionTests_id0.d/testng.0.jta jdk/incubator/vector/Vector64ConversionTests.java#id0 false Vector64ConversionTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Test results: passed: 65; failed: 15; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector
Finished running test 'jtreg:test/jdk:jdk_vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk:jdk_vector                            83    65    15     0     3 <<
==============================
TEST FAILURE

