Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_1', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_1
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_1

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Passed: compiler/codegen/BMI2.java
Passed: compiler/codegen/LoadWithMask2.java
Passed: compiler/codegen/Test6814842.java
Passed: compiler/codegen/Test6378821.java
Passed: compiler/codegen/IntRotateWithImmediate.java
Passed: compiler/codegen/BMI1.java
Passed: compiler/codegen/C1NullCheckOfNullStore.java
Passed: compiler/codegen/BitTests.java
Passed: compiler/codegen/Test6431242.java
Passed: compiler/codegen/LoadWithMask.java
Passed: compiler/codegen/ClearArrayTest.java
Passed: compiler/codegen/Test6797305.java
Passed: compiler/codegen/Test8011901.java
Passed: compiler/codegen/Test7009231.java
Passed: compiler/codegen/ShiftByZero.java
Passed: compiler/codegen/Test8005033.java
Passed: compiler/codegen/CRCTest.java
Passed: compiler/codegen/ShiftTest.java
Passed: compiler/codegen/TestByteShortVect.java
Passed: compiler/codegen/TestCharShortVect.java
Passed: compiler/codegen/TestByteIntVect.java
Passed: compiler/codegen/Test6909839.java
Passed: compiler/codegen/BadLogicCode.java
Passed: compiler/codegen/Test6879902.java
Passed: compiler/codegen/TestBooleanVect.java
Passed: compiler/codegen/TestByteVect.java
Passed: compiler/codegen/TestConvertImplicitNullCheck.java
Passed: compiler/codegen/Test7100757.java
Passed: compiler/codegen/Test6823354.java
Passed: compiler/codegen/TestByteFloatVect.java
Passed: compiler/codegen/Test6942326.java
Passed: compiler/codegen/TestByteLongVect.java
Passed: compiler/codegen/TestByteDoubleVect.java
Passed: compiler/codegen/TestGCMLoadPlacement.java
Passed: compiler/codegen/TestFloatVect.java
Passed: compiler/codegen/TestDoubleVect.java
Passed: compiler/codegen/TestIntFloatVect.java
Passed: compiler/codegen/TestMultiMemInstructionMatching.java
Passed: compiler/codegen/TestCharVect.java
Passed: compiler/codegen/TestCharVect2.java#id0
Passed: compiler/codegen/TestLongDoubleVect.java
Passed: compiler/codegen/TestIntLongVect.java
Passed: compiler/codegen/TestLongFloatVect.java
Passed: compiler/codegen/TestIntVect.java
Passed: compiler/loopopts/superword/AlignmentOnePack.java
Passed: compiler/codegen/TestShortIntVect.java
Passed: compiler/codegen/TestLongVect.java
Passed: compiler/loopopts/superword/CoLocatePackMemoryState.java
Passed: compiler/loopopts/superword/CoLocatePack.java
Passed: compiler/codegen/TestShortFloatVect.java
Passed: compiler/codegen/TestFloatDoubleVect.java
Passed: compiler/codegen/TestIntDoubleVect.java
Passed: compiler/codegen/TestShortVect.java
Passed: compiler/codegen/TestOopCmp.java
Passed: compiler/codegen/TestShortDoubleVect.java
Passed: compiler/codegen/TestCharVect2.java#id1
Passed: compiler/codegen/TestShortLongVect.java
Passed: compiler/loopopts/superword/ReductionPerf.java
Passed: compiler/loopopts/superword/MinMaxRed_Int.java
Passed: compiler/codegen/TestSignedMultiplyLong.java
Passed: compiler/loopopts/superword/SuperWordIntermediateUse.java
Passed: compiler/loopopts/superword/MinMaxRed_Long.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage.java
Passed: compiler/loopopts/superword/RedTest_long.java
Passed: compiler/loopopts/superword/TestAlignVector.java#NoAlignVector
Passed: compiler/loopopts/superword/RedTest_int.java
Passed: compiler/loopopts/superword/TestAlignVector.java#AlignVector
Passed: compiler/loopopts/superword/SumRed_Long.java
Passed: compiler/loopopts/superword/TestBestAlign.java
Passed: compiler/loopopts/superword/TestCmpInvar.java
Passed: compiler/loopopts/superword/TestCompatibleUseDefTypeSize.java
Passed: compiler/loopopts/superword/TestAlignVector.java#VerifyAlignVector
Passed: compiler/loopopts/superword/TestCyclicDependency.java
Passed: compiler/loopopts/superword/ProdRed_Int.java
Passed: compiler/loopopts/superword/SumRed_Int.java
Passed: compiler/loopopts/superword/SumRed_Float.java
Passed: compiler/loopopts/superword/ProdRed_Float.java
Passed: compiler/loopopts/superword/ProdRed_Double.java
Passed: compiler/loopopts/superword/SumRed_Double.java
Passed: compiler/loopopts/superword/SumRedAbsNeg_Double.java
Passed: compiler/loopopts/superword/SumRedAbsNeg_Float.java
Passed: compiler/loopopts/superword/SumRedSqrt_Double.java
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#Vanilla
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-Align16
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx1-v016-A
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx1-v032-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx1-v032-U
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx1-v016-U
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx2-v016-U
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx2-v016-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx2-v032-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx512bw-v032-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx2-v032-U
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx512bw-v032-U
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx512bw-v064-A
Passed: compiler/loopopts/superword/TestEliminateAllocationWithCastP2XUse.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx512bw-v064-U
Passed: compiler/loopopts/superword/TestFuzzPreLoop.java
Passed: compiler/loopopts/superword/TestGeneralizedReductions.java
Passed: compiler/loopopts/superword/TestHoistedReductionNode.java
Passed: compiler/loopopts/superword/TestIndependentPacksWithCyclicDependency2.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v004-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx512-v032-U
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-NoTieredCompilation-Xbatch
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx512-v064-U
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v008-U
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx512-v064-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v008-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx512-v032-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v004-U
Passed: compiler/loopopts/superword/TestLargeCompilation.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v016-A
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestMemorySegment.java#char-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#double-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer
Passed: compiler/loopopts/superword/TestMemorySegment.java#float-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array
Passed: compiler/loopopts/superword/TestMemorySegmentMainLoopAlignment.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v016-U
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-A
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#native-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#native
Passed: compiler/loopopts/superword/TestMemorySegment.java#short-array
Passed: compiler/loopopts/superword/TestNegBaseOffset.java
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#Vanilla
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithFlags
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-VerifyAlignVector
Passed: compiler/loopopts/superword/TestMultiversionRemoveUselessSlowLoop.java
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithMoreFlags
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-U
Passed: compiler/loopopts/superword/TestSearchAlignment.java
Passed: compiler/loopopts/superword/TestPeeledReductionNode.java
Passed: compiler/loopopts/superword/TestReductionWithLoopVariantUse.java
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native
Passed: compiler/loopopts/superword/TestParallelReduction.java
Passed: compiler/loopopts/superword/TestPickFirstMemoryState.java
Passed: compiler/loopopts/superword/TestVectorizationWithInvariant.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize16-Unaligned
Passed: compiler/loopopts/superword/TestWronglyMarkedReduction.java
Passed: compiler/loopopts/superword/TestVectorizeTypeConversionWithUnsafe.java
Passed: compiler/loopopts/superword/TestPickLastMemoryState.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize32-Aligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Aligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Unaligned
Passed: compiler/vectorapi/TestIsLoadVector.java
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-VerifyAlignVector
Passed: compiler/vectorapi/Test8303508.java
Passed: compiler/loopopts/superword/TestVectorFPReduction.java
Passed: compiler/vectorapi/TestLongVectorNeg.java
Passed: compiler/vectorapi/TestBiMorphicMismatchedMemSegment.java
Passed: compiler/vectorapi/Test8259353.java
Passed: compiler/vectorapi/TestLoopStoreVector.java#id0
Passed: compiler/vectorapi/TestNoInline.java
Passed: compiler/vectorapi/TestLoopStoreVector.java#id1
Passed: compiler/vectorapi/TestIntrinsicBailOut.java#id0
Passed: compiler/vectorapi/TestVectorErgonomics.java
Passed: compiler/vectorapi/TestReverseByteTransforms.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage2.java
Passed: compiler/vectorapi/TestIntrinsicBailOut.java#id1
Passed: compiler/vectorapi/Test8278948.java
Passed: compiler/vectorapi/TestVectorShuffleIota.java
Passed: compiler/vectorapi/VectorBoxExpandTest.java
Passed: compiler/vectorapi/TestVectorTest.java
Passed: compiler/vectorapi/TestVectorAddMulReduction.java
Passed: compiler/vectorapi/TestVectorShiftImm.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#StoreToLoadForwardingFailureDetection
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#AlignVector
Passed: compiler/vectorapi/TestVectorShuffleIotaByte.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#vanilla
Passed: compiler/loopopts/superword/TestMovingLoadBeforeStore.java
Passed: compiler/vectorapi/VectorCommutativeOperSharingTest.java
Passed: compiler/vectorapi/VectorMemoryAlias.java
Passed: compiler/vectorapi/VectorMaskCastTest.java
Passed: compiler/vectorapi/VectorFPtoIntCastTest.java
Passed: compiler/vectorapi/TestTwoVectorPermute.java
Passed: compiler/vectorapi/VectorReverseBytesTest.java
--------------------------------------------------
TEST: compiler/vectorapi/TestMaskedMacroLogicVector.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.893 seconds
messages:
command: build compiler.vectorapi.TestMaskedMacroLogicVector
reason: Named class compiled on demand
started: Thu Apr 17 03:34:16 IST 2025
Test directory:
  compile: compiler.vectorapi.TestMaskedMacroLogicVector
finished: Thu Apr 17 03:34:17 IST 2025
elapsed time (seconds): 0.893

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.893 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java
reason: .class file out of date or does not exist
started: Thu Apr 17 03:34:16 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 11
Process id: 2145699
finished: Thu Apr 17 03:34:17 IST 2025
elapsed time (seconds): 0.893
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/compiler/vectorapi/TestMaskedMacroLogicVector.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/test/lib
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp \
        -J-Dtest.vm.opts='-XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -J-Dtest.tool.vm.opts='-J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -J-Dtest.name=compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/compiler/vectorapi/TestMaskedMacroLogicVector.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15 \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15 \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/compiler/vectorapi/TestMaskedMacroLogicVector.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15 \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 warning

ACTION: driver -- Failed. Execution failed: `main' threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
REASON: User specified action: run driver compiler.vectorapi.TestMaskedMacroLogicVector 
TIME:   31.245 seconds
messages:
command: driver compiler.vectorapi.TestMaskedMacroLogicVector
reason: User specified action: run driver compiler.vectorapi.TestMaskedMacroLogicVector 
started: Thu Apr 17 03:34:17 IST 2025
Mode: othervm [test requires --enable-preview, test requires non-default system module]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2158591
finished: Thu Apr 17 03:34:49 IST 2025
elapsed time (seconds): 31.245
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 649960562222441742
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=649960562222441742" to command line.
IR verification disabled due to the following reason(s):
- Using non-whitelisted JTreg VM or Javaoptions flag(s):
  - DeoptimizeALot
  - SafepointALot

Skip Flag VM due to not performing IR verification.
Run Test VM - [-XX:-TieredCompilation, -XX:UseAVX=3, --add-modules=jdk.incubator.vector, -XX:CompileThresholdScaling=0.3]:
Command line: [/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -cp /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp -XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot -Dir.framework.server.port=35055 -XX:-TieredCompilation -XX:UseAVX=3 --add-modules=jdk.incubator.vector -XX:CompileThresholdScaling=0.3 -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.vectorapi.TestMaskedMacroLogicVector ]
[2025-04-16T22:04:18.883454449Z] Gathering output for process 2158711
[2025-04-16T22:04:18.966883379Z] Waiting for completion for process 2158711
[2025-04-16T22:04:48.899109899Z] Waiting for completion finished for process 2158711
Output and diagnostic info for process 2158711 was saved into 'pid-2158711-output.log'

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector

TestFramework test VM exited with code 1

Command Line:
/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -DReproduce=true -cp /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp -XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot -Dir.framework.server.port=35055 -XX:-TieredCompilation -XX:UseAVX=3 --add-modules=jdk.incubator.vector -XX:CompileThresholdScaling=0.3 -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.vectorapi.TestMaskedMacroLogicVector


Error Output
------------
WARNING: Using incubator modules: jdk.incubator.vector
Exception in thread "main" compiler.lib.ir_framework.shared.TestRunException: 

Test Failures (1)
-----------------
Custom Run Test: @Run: kernel_testInt4_Int256 - @Test: testInt4_Int256:
compiler.lib.ir_framework.shared.TestRunException: There was an error while invoking @Run method public void compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt4_Int256()
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:162)
	at compiler.lib.ir_framework.test.CustomRunTest.run(CustomRunTest.java:87)
	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:867)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at compiler.lib.ir_framework.test.CustomRunTest.invokeTest(CustomRunTest.java:159)
	... 4 more
Caused by: java.lang.AssertionError: testInt4: at #369: r=-1034965064, expected = 746294980 = intFunc4(-401738044,-1034965064,-298573444,false)
	at compiler.vectorapi.TestMaskedMacroLogicVector.verifyInt4(TestMaskedMacroLogicVector.java:309)
	at compiler.vectorapi.TestMaskedMacroLogicVector.kernel_testInt4_Int256(TestMaskedMacroLogicVector.java:621)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 6 more



	at compiler.lib.ir_framework.test.TestVM.runTests(TestVM.java:903)
	at compiler.lib.ir_framework.test.TestVM.start(TestVM.java:255)
	at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:168)


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.TestVMProcess.throwTestVMException(TestVMProcess.java:245)
	at compiler.lib.ir_framework.driver.TestVMProcess.checkTestVMExitCode(TestVMProcess.java:226)
	at compiler.lib.ir_framework.driver.TestVMProcess.<init>(TestVMProcess.java:76)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:787)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:758)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:351)
	at compiler.lib.ir_framework.TestFramework.runWithFlags(TestFramework.java:248)
	at compiler.vectorapi.TestMaskedMacroLogicVector.main(TestMaskedMacroLogicVector.java:843)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/scratch/13 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -Dtest.tool.vm.opts='-J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -Dtest.name=compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi/TestMaskedMacroLogicVector.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/compiler/vectorapi/TestMaskedMacroLogicVector.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15 \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/compiler/vectorapi/TestMaskedMacroLogicVector.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/hotspot/jtreg/compiler/vectorapi:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/classes/15 \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/tmp \
        -XX:UseAVX=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/hotspot/jtreg/native \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1/compiler/vectorapi/TestMaskedMacroLogicVector.d/driver.0.jta

TEST RESULT: Failed. Execution failed: `main' threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
--------------------------------------------------
Passed: compiler/c2/cr6340864/TestFloatVect.java
Passed: compiler/c2/cr6340864/TestDoubleVect.java
Passed: compiler/loopopts/superword/TestEquivalentInvariants.java
Passed: compiler/vectorapi/TestRawOopAtSafepoint.java
Passed: compiler/c2/cr6340864/TestByteVect.java
Passed: compiler/c2/irTests/blackhole/BlackholeStoreStoreEATest.java
Passed: compiler/c2/cr6340864/TestIntVectRotate.java
Passed: compiler/c2/irTests/blackhole/BlackholeHotInlineTest.java
Passed: compiler/c2/irTests/blackhole/BlackholeLoadOptoTest.java
Passed: compiler/c2/cr6340864/TestLongVectRotate.java
Passed: compiler/c2/cr6340864/TestIntVect.java
Passed: compiler/c2/irTests/blackhole/BlackholeSyncEATest.java
Passed: compiler/vectorapi/VectorCastShape128Test.java
Passed: compiler/c2/irTests/igvn/TestCombineAddPWithConstantOffsets.java
Passed: compiler/vectorapi/VectorGatherMaskFoldingTest.java
Passed: compiler/c2/cr6340864/TestShortVect.java
Passed: compiler/c2/irTests/igvn/TestCleanMemPhi.java
Passed: compiler/c2/irTests/igvn/TestLoadNIdeal.java
Passed: compiler/c2/irTests/igvn/TestIntegerMulRing.java
Passed: compiler/c2/irTests/loopOpts/LoopIdealizationTests.java
Passed: compiler/c2/cr6340864/TestLongVect.java
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id1
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id0
Passed: compiler/c2/irTests/scalarReplacement/ScalarReplacementTests.java
Passed: compiler/vectorapi/VectorSaturatedOperationsTest.java
Passed: compiler/c2/irTests/stringopts/TestNegativeArraySize.java
Passed: compiler/c2/irTests/AddLNodeIdealizationTests.java
Passed: compiler/c2/irTests/AddINodeIdealizationTests.java
Passed: compiler/c2/irTests/AndLNodeIdealizationTests.java
Passed: compiler/c2/irTests/CMoveLConstants.java
Passed: compiler/c2/irTests/CmpUWithZero.java
Passed: compiler/c2/irTests/AndINodeIdealizationTests.java
Passed: compiler/vectorapi/VectorCastShape64Test.java
Passed: compiler/c2/irTests/stable/StablePrimArrayTest.java
Passed: compiler/c2/irTests/stable/StablePrimVolatileTest.java
Passed: compiler/vectorapi/VectorMultiplyOpt.java
Passed: compiler/c2/irTests/stable/StableRefFinalTest.java
Passed: compiler/c2/irTests/DeMorganLawLongTests.java
Passed: compiler/c2/irTests/DeMorganLawIntTests.java
Passed: compiler/c2/irTests/stable/StablePrimFinalTest.java
Passed: compiler/c2/irTests/stable/StableRefPlainTest.java
Passed: compiler/c2/irTests/stable/StablePrimPlainTest.java
Passed: compiler/c2/irTests/LShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/DivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/ConstructorBarriers.java
Passed: compiler/c2/irTests/stable/StableRefArrayTest.java
Passed: compiler/c2/irTests/stable/StableRefVolatileTest.java
Passed: compiler/c2/irTests/DivINodeIdealizationTests.java
Passed: compiler/c2/irTests/LShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/ModINodeIdealizationTests.java
Passed: compiler/c2/irTests/ModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/MaxMinINodeIdealizationTests.java
Passed: compiler/c2/irTests/MulINodeIdealizationTests.java
Passed: compiler/c2/irTests/ModFNodeTests.java
Passed: compiler/c2/irTests/ModDNodeTests.java
Passed: compiler/c2/irTests/MulLNodeIdealizationTests.java
Passed: compiler/c2/irTests/MulHFNodeIdealizationTests.java
Passed: compiler/c2/irTests/OrINodeIdealizationTests.java
Passed: compiler/c2/irTests/OrLNodeIdealizationTests.java
Passed: compiler/c2/irTests/RShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/TestArrayElementTypeLoad.java
Passed: compiler/c2/irTests/RShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/SubINodeIdealizationTests.java
Passed: compiler/c2/irTests/TestAutoVecCountingDownLoop.java
Passed: compiler/c2/irTests/TestAutoVectorization2DArray.java
Passed: compiler/c2/irTests/SubLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestBackToBackIfs.java
Passed: compiler/c2/irTests/TestBackToBackMustBeNotNull.java
Passed: compiler/c2/irTests/TestCMoveCCP.java
Passed: compiler/c2/irTests/TestConv2BExpansion.java
Passed: compiler/c2/irTests/TestConvI2LCastLongLoop.java
Passed: compiler/c2/irTests/TestCountedLoopPhiValue.java
Passed: compiler/c2/irTests/TestDebugInfo.java
Passed: compiler/c2/irTests/TestEnumFinalFold.java
Passed: compiler/c2/irTests/TestFPConversion.java
Passed: compiler/c2/irTests/TestGetAndAdd.java
Passed: compiler/c2/irTests/TestFPComparison.java
Passed: compiler/c2/irTests/TestIRFma.java
Passed: compiler/c2/irTests/TestFewIterationsCountedLoop.java
Passed: compiler/c2/irTests/TestIRLShiftIdeal_XPlusX_LShiftC.java
Passed: compiler/c2/irTests/TestIterativeEA.java
Passed: compiler/c2/irTests/TestCountedLoopSafepoint.java
Passed: compiler/c2/irTests/TestIRAbs.java
Passed: compiler/c2/irTests/TestMulNodeIdealization.java
Passed: compiler/c2/irTests/TestMinMaxIdentities.java
Passed: compiler/c2/irTests/TestPadding.java
Passed: compiler/c2/irTests/TestOptimizeUnstableIf.java
Passed: compiler/c2/irTests/TestIfMinMax.java
Passed: compiler/c2/irTests/TestPushAddThruCast.java
Passed: compiler/c2/irTests/TestPhiDuplicatedConversion.java
Passed: compiler/c2/irTests/TestScalarReplacement.java
Passed: compiler/c2/irTests/TestRemixAddressExpressions.java
Passed: compiler/c2/irTests/TestLongRangeChecks.java
Passed: compiler/c2/irTests/TestPostParseCallDevirtualization.java
Passed: compiler/c2/irTests/TestScheduleSmallMethod.java
Passed: compiler/c2/irTests/TestSpecialCasesOf_AMinusB_Plus_CMinusD_InAddIdeal.java
Passed: compiler/c2/irTests/TestSkeletonPredicates.java
Passed: compiler/c2/irTests/TestLSMMissedEmptyLoop.java
Passed: compiler/c2/irTests/TestShiftAndMask.java
Passed: compiler/c2/irTests/TestTypeSpeculation.java
Passed: compiler/c2/irTests/TestStripMiningDropsSafepoint.java
Passed: compiler/c2/irTests/TestTestRemovalPeephole.java
Passed: compiler/c2/irTests/TestVectorizeTypeConversion.java
Passed: compiler/c2/irTests/gc/ReferenceClearTests.java
Passed: compiler/c2/irTests/TestSuperwordFailsUnrolling.java
Passed: compiler/c2/irTests/TestUnsignedComparison.java
Passed: compiler/c2/irTests/TestVectorizeURShiftSubword.java
Passed: compiler/c2/irTests/UDivINodeIdealizationTests.java
Passed: compiler/c2/irTests/UDivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/UModINodeIdealizationTests.java
Passed: compiler/c2/irTests/URShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/URShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/ConvF2HFIdealizationTests.java
Passed: compiler/c2/irTests/UModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestVectorizationMultiInvar.java
Passed: compiler/c2/irTests/gc/ReferenceRefersToTests.java
Passed: compiler/c2/irTests/TestFloat16ScalarOperations.java
Passed: compiler/c2/irTests/XorINodeIdealizationTests.java
Passed: compiler/c2/irTests/XorLNodeIdealizationTests.java
Passed: compiler/vectorization/runner/ArrayCopyTest.java
Passed: compiler/vectorization/runner/ArrayIndexFillTest.java
Passed: compiler/vectorization/runner/BasicBooleanOpTest.java
Passed: compiler/c2/irTests/ProfileAtTypeCheck.java
Passed: compiler/vectorization/runner/ArrayUnsafeOpTest.java
Passed: compiler/vectorization/runner/ArrayShiftOpTest.java
Passed: compiler/vectorization/runner/BasicByteOpTest.java
Passed: compiler/vectorization/runner/BasicCharOpTest.java
Passed: compiler/vectorization/runner/BasicDoubleOpTest.java
Passed: compiler/vectorization/runner/BasicFloatOpTest.java
Passed: compiler/vectorization/runner/ArrayInvariantFillTest.java
Passed: compiler/vectorization/runner/LoopControlFlowTest.java
Passed: compiler/vectorization/TestAbsCharVector.java
Passed: compiler/vectorization/runner/LoopLiveOutNodesTest.java
Passed: compiler/vectorization/runner/BasicLongOpTest.java
Passed: compiler/vectorization/TestAutoVecIntMinMax.java
Passed: compiler/vectorization/TestCMoveWithoutBoolPack.java
Passed: compiler/vectorization/runner/StripMinedLoopTest.java
Passed: compiler/vectorization/runner/LoopReductionOpTest.java
Passed: compiler/vectorization/runner/LoopRangeStrideTest.java
Passed: compiler/vectorization/runner/BasicShortOpTest.java
Passed: compiler/vectorization/runner/BasicIntOpTest.java
Passed: compiler/vectorization/runner/MultipleLoopsTest.java
Passed: compiler/vectorization/TestNarrowedIntegerReverseBytes.java
Passed: compiler/vectorization/TestMemoryVectorMismatched.java
Passed: compiler/vectorization/runner/LoopArrayIndexComputeTest.java
Passed: compiler/vectorization/TestFloat16VectorConvChain.java
Passed: compiler/vectorization/TestOptionVectorize.java
Passed: compiler/vectorization/TestNaNVector.java
Passed: compiler/vectorization/TestMacroLogicVector.java
Passed: compiler/vectorization/TestMaskedVectors.java
Passed: compiler/vectorization/TestComplexAddrExpr.java
Passed: compiler/vectorization/TestFloat16ToFloatConv.java
Passed: compiler/vectorization/TestOverlappingMismatchedAccesses.java
Passed: compiler/vectorization/TestOffsetSorting.java
Passed: compiler/vectorization/TestPopCountVector.java
Passed: compiler/vectorization/TestReplicateLoopIV.java
Passed: compiler/vectorization/TestReplicateAtConv.java
Passed: compiler/vectorization/TestRotateByteAndShortVector.java
Passed: compiler/vectorization/TestPopCountVectorLong.java
Passed: compiler/vectorization/TestReverseBitsVector.java
Passed: compiler/vectorization/TestSmallVectorPopIndex.java
Passed: compiler/vectorization/TestPopulateIndex.java
Passed: compiler/vectorization/TestReverseBytes.java
Passed: compiler/vectorization/TestRoundVectDouble.java
Passed: compiler/vectorization/TestUnexpectedLoadOrdering.java
Passed: compiler/vectorization/TestRoundVectFloat.java
Passed: compiler/vectorization/TestVectorUnalignedOffset.java
Passed: compiler/vectorization/TestSignumVector.java
Passed: compiler/vectorization/TestOptionVectorizeIR.java
Passed: compiler/vectorization/TestForEachRem.java
Passed: compiler/vectorization/TestVectorizationNegativeScale.java
Passed: compiler/vectorization/TestBufferVectorization.java
Passed: compiler/vectorization/TestNumberOfContinuousZeros.java
Passed: compiler/vectorization/TestSubwordReverseBytes.java
Passed: compiler/vectorization/TestVectorsNotSavedAtSafepoint.java
Passed: compiler/vectorapi/reshape/TestVectorCastAVX1.java
Passed: compiler/vectorapi/reshape/TestVectorCastAVX512DQ.java
Passed: compiler/vectorapi/reshape/TestVectorCastAVX2.java
Passed: compiler/vectorapi/reshape/TestVectorCastAVX512BW.java
Passed: compiler/vectorapi/reshape/TestVectorCastAVX512.java
Passed: compiler/vectorization/TestVectorZeroCount.java
Test results: passed: 367; failed: 1; excluded: 18; did not meet platform requirements: 40
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/hotspot/jtreg:hotspot_vector_1           426   367     1     0    58 <<
==============================
TEST FAILURE

Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_2', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_2
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_2

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Passed: compiler/intrinsics/string/TestStringEqualsBadLength.java
Passed: compiler/intrinsics/string/TestCopyValueOf.java
Passed: compiler/intrinsics/string/TestStringConstruction.java
Passed: compiler/intrinsics/string/TestStringIndexOfCharIntrinsics.java
Passed: compiler/intrinsics/string/TestStringIntrinsicMemoryFlow.java
Passed: compiler/intrinsics/IntrinsicDisabledTest.java
Passed: compiler/intrinsics/IntrinsicAvailableTest.java
Passed: compiler/intrinsics/string/TestStringConstructionIntrinsics.java#id0
Passed: compiler/intrinsics/Test8005419.java
Passed: compiler/intrinsics/Test6982370.java
Passed: compiler/intrinsics/string/TestStringIntrinsicRangeChecks.java
Passed: compiler/intrinsics/string/TestStringIntrinsics2.java
Passed: compiler/intrinsics/Test8215792.java
Passed: compiler/intrinsics/Test8237524.java
Passed: compiler/intrinsics/TestArraysHashCode.java
Passed: compiler/intrinsics/TestArrayGuardWithInterfaces.java
Passed: compiler/intrinsics/string/TestHasNegatives.java#id0
Passed: compiler/intrinsics/TestCheckIndex.java
Passed: compiler/intrinsics/string/TestCountPositives.java#id0
Passed: compiler/intrinsics/TestContinuationPinningAndEA.java
Passed: compiler/intrinsics/string/TestStringUTF16IntrinsicRangeChecks.java
Passed: compiler/intrinsics/TestReferenceGetWithNull.java
Passed: compiler/intrinsics/TestCompareUnsigned.java
Passed: compiler/intrinsics/TestDoubleIsInfinite.java
Passed: compiler/intrinsics/string/TestStringConstructionIntrinsics.java#id1
Passed: compiler/intrinsics/string/TestEncodeIntrinsics.java
Passed: compiler/intrinsics/TestFloatIsInfinite.java
Passed: compiler/intrinsics/TestReferenceRefersTo.java
Passed: compiler/intrinsics/TestIntegerUnsignedDivMod.java
Passed: compiler/intrinsics/string/TestHasNegatives.java#id1
Passed: compiler/codegen/Test6875866.java
Passed: compiler/codegen/Test6935535.java#id0
Passed: compiler/intrinsics/TestRotate.java
Passed: compiler/intrinsics/VectorizedMismatchTest.java
Passed: compiler/codegen/aes/Test8299817.java
Passed: compiler/codegen/aes/Test8292158.java
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLenReturnProfile.java
Passed: compiler/codegen/Test6935535.java#id1
Passed: compiler/intrinsics/string/TestCountPositives.java#id1
Passed: compiler/intrinsics/bmi/verifycode/AndnTestI.java
Passed: compiler/intrinsics/bigInteger/TestMulAdd.java
Passed: compiler/intrinsics/bigInteger/TestSquareToLen.java
Passed: compiler/intrinsics/string/TestStringIntrinsics.java
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestI.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BzhiTestI2L.java
Passed: compiler/intrinsics/bigInteger/TestShift.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestI.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestI.java
Passed: compiler/intrinsics/bmi/verifycode/AndnTestL.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestI.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestL.java
Passed: compiler/intrinsics/bigInteger/MontgomeryMultiplyTest.java
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLen.java
Passed: compiler/intrinsics/TestLongUnsignedDivMod.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestI.java
Passed: compiler/intrinsics/bmi/TestLzcntI.java
Passed: compiler/intrinsics/TestBitShuffleOpers.java
Passed: compiler/intrinsics/bmi/TestBlsmskI.java
Passed: compiler/intrinsics/bmi/TestBlsiL.java
Passed: compiler/intrinsics/bmi/TestBlsiI.java
Passed: compiler/intrinsics/bmi/TestLzcntL.java
Passed: compiler/intrinsics/bmi/TestBlsrI.java
Passed: compiler/intrinsics/bmi/TestBlsrL.java
Passed: compiler/intrinsics/bmi/TestBlsmskL.java
Passed: compiler/intrinsics/bmi/TestTzcntL.java
Passed: compiler/intrinsics/bmi/TestAndnI.java
Passed: compiler/intrinsics/float16/Binary16ConversionNaN.java
Passed: compiler/intrinsics/bmi/TestTzcntI.java
Passed: compiler/intrinsics/bmi/TestAndnL.java
Passed: compiler/intrinsics/chacha/TestChaCha20.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id0
Passed: compiler/intrinsics/float16/TestAllFloat16ToFloat.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id1
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id2
Passed: compiler/intrinsics/math/Test8210461.java
Passed: compiler/intrinsics/float16/TestConstFloat16ToFloat.java
Passed: compiler/intrinsics/math/TestMinMaxIntrinsics.java
Passed: compiler/intrinsics/bmi/TestBzhiI2L.java
Passed: compiler/intrinsics/math/TestPow0Dot5Opt.java
Passed: compiler/intrinsics/math/TestFpMinMaxIntrinsics.java
Passed: compiler/intrinsics/math/TestPow2Opt.java
Passed: compiler/intrinsics/klass/TestIsPrimitive.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactLongTest.java
Passed: compiler/intrinsics/math/TestFpMinMaxReductions.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactIntTest.java
Passed: compiler/intrinsics/math/TestMinMaxOpt.java
Passed: compiler/intrinsics/math/TestMinMaxInlining.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactIntTest.java
Passed: compiler/intrinsics/mathexact/AddExactICondTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactIntTest.java
Passed: compiler/intrinsics/float16/Binary16Conversion.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactLongTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoopDependentTest.java
Passed: compiler/intrinsics/klass/CastNullCheckDroppingsTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoadTest.java
Passed: compiler/intrinsics/mathexact/DecExactITest.java
Passed: compiler/intrinsics/mathexact/AddExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/CompareTest.java
Passed: compiler/intrinsics/mathexact/AddExactIConstantTest.java
Passed: compiler/intrinsics/math/MaxMinOptimizeTest.java
Passed: compiler/codegen/aes/TestCipherBlockChainingEncrypt.java
Passed: compiler/intrinsics/mathexact/MulExactICondTest.java
Passed: compiler/intrinsics/mathexact/GVNTest.java
Passed: compiler/intrinsics/mathexact/DecExactLTest.java
Passed: compiler/intrinsics/mathexact/AddExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/IncExactLTest.java
Passed: compiler/intrinsics/mathexact/IncExactITest.java
Passed: compiler/intrinsics/mathexact/AddExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactILoadTest.java
Passed: compiler/intrinsics/mathexact/NegExactILoopDependentTest.java
Passed: compiler/intrinsics/SortingDeoptimizationTest.java
Passed: compiler/intrinsics/mathexact/NegExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/AddExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/NestedMathExactTest.java
Passed: compiler/intrinsics/mathexact/SplitThruPhiTest.java
Passed: compiler/intrinsics/mathexact/SubExactICondTest.java
Passed: compiler/intrinsics/mathexact/NegExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoadTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/MulExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/MulExactLConstantTest.java
Passed: compiler/intrinsics/object/TestHashCode.java
Passed: compiler/loopopts/superword/Vec_MulAddS2I.java
Passed: compiler/intrinsics/mathexact/SubExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/LongMulOverflowTest.java
Passed: compiler/intrinsics/mathexact/MulExactILoadTest.java
Passed: compiler/intrinsics/mathexact/SubExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/SubExactLConstantTest.java
Passed: compiler/intrinsics/base64/TestBase64.java
Passed: compiler/intrinsics/mathexact/MulExactLNonConstantTest.java
Passed: compiler/intrinsics/sha/sanity/TestMD5Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1Intrinsics.java
Passed: compiler/intrinsics/math/TestSignumIntrinsic.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/TestCAEAntiDep.java
Passed: compiler/intrinsics/unsafe/TestUnsafeMismatchedArrayFieldAccess.java
Passed: compiler/intrinsics/unsafe/UnsafeGetAddressTest.java
Passed: compiler/intrinsics/object/TestClone.java
Passed: compiler/intrinsics/unsafe/TestUnsafeUnalignedMismatchedAccesses.java
Passed: compiler/intrinsics/sha/sanity/TestMD5MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA256Intrinsics.java
Passed: compiler/intrinsics/zip/TestCRC32C.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512Intrinsics.java
Passed: compiler/intrinsics/unsafe/UnsafeTwoCASLong.java
Passed: compiler/intrinsics/zip/TestCRC32.java
Passed: compiler/intrinsics/zip/TestAdler32.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3Intrinsics.java
Passed: compiler/intrinsics/zip/TestFpRegsABI.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA256MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/AllocateUninitializedArray.java
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id0
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id1
Passed: compiler/intrinsics/unsafe/DirectByteBufferTest.java
Passed: compiler/intrinsics/sha/TestDigest.java
Passed: compiler/codegen/aes/TestAESMain.java
Test results: passed: 175; excluded: 1; did not meet platform requirements: 16
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_2
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
   jtreg:test/hotspot/jtreg:hotspot_vector_2           192   175     0     0    17   
==============================
TEST SUCCESS

Finished building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/:jdk_vector', will run:
* jtreg:test/jdk:jdk_vector
Clean up dirs for jtreg_test_jdk_jdk_vector

Running test 'jtreg:test/jdk:jdk_vector'
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/AddTest.java
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorTests.java
Passed: jdk/incubator/vector/Byte128VectorTests.java
Passed: jdk/incubator/vector/Byte512VectorTests.java
Passed: jdk/incubator/vector/Byte256VectorTests.java
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorTests.java
Passed: jdk/incubator/vector/Float128VectorTests.java
Passed: jdk/incubator/vector/ByteMaxVectorTests.java
Passed: jdk/incubator/vector/Byte64VectorTests.java
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorTests.java
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float512VectorTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
--------------------------------------------------
TEST: jdk/incubator/vector/FloatMaxVectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.171 seconds
messages:
command: build FloatMaxVectorTests
reason: Named class compiled on demand
started: Thu Apr 17 03:45:20 IST 2025
Test directory:
  compile: FloatMaxVectorTests
finished: Thu Apr 17 03:45:21 IST 2025
elapsed time (seconds): 1.171

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.17 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/FloatMaxVectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 03:45:20 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 15
Process id: 2193939
finished: Thu Apr 17 03:45:21 IST 2025
elapsed time (seconds): 1.17
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/FloatMaxVectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/4 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/FloatMaxVectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/FloatMaxVectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/FloatMaxVectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/FloatMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/FloatMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/FloatMaxVectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/FloatMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/FloatMaxVectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation FloatMaxVectorTests 
TIME:   48.037 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation FloatMaxVectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation FloatMaxVectorTests 
started: Thu Apr 17 03:45:21 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2195888
finished: Thu Apr 17 03:46:09 IST 2025
elapsed time (seconds): 48.037
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 7989747927268050277
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=7989747927268050277" to command line.
test FloatMaxVectorTests.ABSFloatMaxVectorTests(float[-i * 5]): success [651ms]
test FloatMaxVectorTests.ABSFloatMaxVectorTests(float[i * 5]): success [6ms]
test FloatMaxVectorTests.ABSFloatMaxVectorTests(float[i + 1]): success [52ms]
test FloatMaxVectorTests.ABSFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [4ms]
test FloatMaxVectorTests.ABSFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [15ms]
test FloatMaxVectorTests.ABSFloatMaxVectorTests(float[cornerCaseValue(i)]): success [3ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[-i * 5], mask[i % 2]): success [237ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[i * 5], mask[i % 2]): success [4ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[i + 1], mask[i % 2]): success [71ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[0.01 + (i / (i + 1))], mask[i % 2]): success [1ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[-i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[i * 5], mask[true]): success [8ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[cornerCaseValue(i)], mask[true]): success [16ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[-i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[i * 5], mask[false]): success [30ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.ABSMaskedFloatMaxVectorTests(float[cornerCaseValue(i)], mask[false]): success [1ms]
test FloatMaxVectorTests.ACOSFloatMaxVectorTests(float[-i * 5]): success [145ms]
test FloatMaxVectorTests.ACOSFloatMaxVectorTests(float[i * 5]): success [5ms]
test FloatMaxVectorTests.ACOSFloatMaxVectorTests(float[i + 1]): success [70ms]
test FloatMaxVectorTests.ACOSFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [2ms]
test FloatMaxVectorTests.ACOSFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [4ms]
test FloatMaxVectorTests.ACOSFloatMaxVectorTests(float[cornerCaseValue(i)]): success [4ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [262ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [4ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [61ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastLongSmokeTest(float[-i * 5], float[i * 5]): success [17ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastLongSmokeTest(float[-i * 5], float[i + 1]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [2ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastLongSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [3ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [23ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [3ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [4ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [3ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [12ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [3ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [38ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [6ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [40ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsBroadcastMaskedLongSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [1ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [101ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [4ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [69ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [36ms]
test FloatMaxVectorTests.ADDFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTests(float[-i * 5]): success [103ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTests(float[i * 5]): success [94ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTests(float[i + 1]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [7ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTests(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[-i * 5], mask[i % 2]): success [68ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[i * 5], mask[i % 2]): success [108ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(AbstractVectorTest$1@12b45097, mask[i % 2]): success [10ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[-i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[-i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceFloatMaxVectorTestsMasked(float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTests(float[-i * 5]): success [13ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTests(float[i * 5]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTests(float[i + 1]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [7ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTests(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[-i * 5], mask[i % 2]): success [11ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[i * 5], mask[i % 2]): success [1ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[i + 1], mask[i % 2]): success [1ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[0.01 + (i / (i + 1))], mask[i % 2]): success [1ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(AbstractVectorTest$1@12b45097, mask[i % 2]): success [11ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[-i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[-i * 5], mask[false]): success [79ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[i * 5], mask[false]): success [1ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(AbstractVectorTest$1@12b45097, mask[false]): success [1ms]
test FloatMaxVectorTests.ADDReduceLongFloatMaxVectorTestsMasked(float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.ASINFloatMaxVectorTests(float[-i * 5]): success [174ms]
test FloatMaxVectorTests.ASINFloatMaxVectorTests(float[i * 5]): success [9ms]
test FloatMaxVectorTests.ASINFloatMaxVectorTests(float[i + 1]): success [67ms]
test FloatMaxVectorTests.ASINFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.ASINFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.ASINFloatMaxVectorTests(float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.ATAN2FloatMaxVectorTests(float[-i * 5], float[i * 5]): success [263ms]
test FloatMaxVectorTests.ATAN2FloatMaxVectorTests(float[-i * 5], float[i + 1]): success [33ms]
test FloatMaxVectorTests.ATAN2FloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [88ms]
test FloatMaxVectorTests.ATAN2FloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [6ms]
test FloatMaxVectorTests.ATAN2FloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [11ms]
test FloatMaxVectorTests.ATANFloatMaxVectorTests(float[-i * 5]): success [85ms]
test FloatMaxVectorTests.ATANFloatMaxVectorTests(float[i * 5]): success [10ms]
test FloatMaxVectorTests.ATANFloatMaxVectorTests(float[i + 1]): success [59ms]
test FloatMaxVectorTests.ATANFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [8ms]
test FloatMaxVectorTests.ATANFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [2ms]
test FloatMaxVectorTests.ATANFloatMaxVectorTests(float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.BroadcastFloatMaxVectorTests(float[-i * 5]): success [194ms]
test FloatMaxVectorTests.BroadcastFloatMaxVectorTests(float[i * 5]): success [111ms]
test FloatMaxVectorTests.BroadcastFloatMaxVectorTests(float[i + 1]): success [74ms]
test FloatMaxVectorTests.BroadcastFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.BroadcastFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [9ms]
test FloatMaxVectorTests.BroadcastFloatMaxVectorTests(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.BroadcastLongFloatMaxVectorTestsSmokeTest(float[-i * 5]): success [3ms]
test FloatMaxVectorTests.BroadcastLongFloatMaxVectorTestsSmokeTest(float[i * 5]): success [3ms]
test FloatMaxVectorTests.BroadcastLongFloatMaxVectorTestsSmokeTest(float[i + 1]): success [3ms]
test FloatMaxVectorTests.BroadcastLongFloatMaxVectorTestsSmokeTest(float[cornerCaseValue(i)]): success [3ms]
test FloatMaxVectorTests.CBRTFloatMaxVectorTests(float[-i * 5]): success [115ms]
test FloatMaxVectorTests.CBRTFloatMaxVectorTests(float[i * 5]): success [55ms]
test FloatMaxVectorTests.CBRTFloatMaxVectorTests(float[i + 1]): success [68ms]
test FloatMaxVectorTests.CBRTFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.CBRTFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [60ms]
test FloatMaxVectorTests.CBRTFloatMaxVectorTests(float[cornerCaseValue(i)]): success [77ms]
test FloatMaxVectorTests.COSFloatMaxVectorTests(float[-i * 5]): success [98ms]
test FloatMaxVectorTests.COSFloatMaxVectorTests(float[i * 5]): success [9ms]
test FloatMaxVectorTests.COSFloatMaxVectorTests(float[i + 1]): success [75ms]
test FloatMaxVectorTests.COSFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.COSFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [3ms]
test FloatMaxVectorTests.COSFloatMaxVectorTests(float[cornerCaseValue(i)]): success [2ms]
test FloatMaxVectorTests.COSHFloatMaxVectorTests(float[-i * 5]): success [153ms]
test FloatMaxVectorTests.COSHFloatMaxVectorTests(float[i * 5]): success [5ms]
test FloatMaxVectorTests.COSHFloatMaxVectorTests(float[i + 1]): success [97ms]
test FloatMaxVectorTests.COSHFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [26ms]
test FloatMaxVectorTests.COSHFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.COSHFloatMaxVectorTests(float[cornerCaseValue(i)]): success [15ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [200ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [22ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [62ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [41ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [4ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [69ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [1ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [1ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [34ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [1ms]
test FloatMaxVectorTests.DIVFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i], float[i]): success [235ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i], float[i - length / 2]): success [54ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i], float[i + 1]): success [11ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i], float[i - 2]): success [8ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i], float[zigZag(i)]): success [6ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i], float[cornerCaseValue(i)]): success [10ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - length / 2], float[i]): success [14ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - length / 2], float[i - length / 2]): success [6ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - length / 2], float[i + 1]): success [8ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - length / 2], float[i - 2]): success [6ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - length / 2], float[zigZag(i)]): success [6ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [6ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i + 1], float[i]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i + 1], float[i - length / 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i + 1], float[i + 1]): success [3ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i + 1], float[i - 2]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i + 1], float[zigZag(i)]): success [3ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i + 1], float[cornerCaseValue(i)]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - 2], float[i]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - 2], float[i - length / 2]): success [3ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - 2], float[i + 1]): success [41ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - 2], float[i - 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - 2], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[i - 2], float[cornerCaseValue(i)]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[zigZag(i)], float[i]): success [2ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[zigZag(i)], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[zigZag(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[zigZag(i)], float[i - 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[zigZag(i)], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [3ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[cornerCaseValue(i)], float[i]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[cornerCaseValue(i)], float[i - 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[i % 2]): success [30ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[i % 2]): success [8ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i + 1], mask[i % 2]): success [9ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - 2], mask[i % 2]): success [9ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[zigZag(i)], mask[i % 2]): success [12ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i], mask[i % 2]): success [8ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - length / 2], mask[i % 2]): success [4ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i + 1], mask[i % 2]): success [6ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - 2], mask[i % 2]): success [12ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[zigZag(i)], mask[i % 2]): success [8ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i], mask[i % 2]): success [87ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - length / 2], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - 2], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[zigZag(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i], mask[i % 2]): success [3ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - length / 2], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - 2], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[zigZag(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)], mask[i % 2]): success [67ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - length / 2], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - 2], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - 2], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[zigZag(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - length / 2], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i + 1], mask[true]): success [3ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[i - 2], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[zigZag(i)], mask[true]): success [3ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - length / 2], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[i - 2], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[zigZag(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - length / 2], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[i - 2], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[zigZag(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - length / 2], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[i - 2], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i], mask[true]): success [3ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i], mask[false]): success [0ms]
test FloatMaxVectorTests.EQFloatMaxVectorTestsBroadcastLongMaskedSmokeTest(float[i], float[i - length / 2], mask[false]): success [0ms]
test FloatMaxVectorTests.EQFloatMa

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

st FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [5ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [6ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.divFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i], float[i]): success [88ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - length / 2], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - length / 2], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - length / 2], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - length / 2], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - length / 2], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i + 1], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i + 1], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i + 1], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i + 1], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i + 1], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - 2], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - 2], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - 2], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - 2], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - 2], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[i - 2], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[zigZag(i)], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[zigZag(i)], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[zigZag(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[zigZag(i)], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[zigZag(i)], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[cornerCaseValue(i)], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[cornerCaseValue(i)], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i], float[i]): success [2ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i], float[i - length / 2]): success [1ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i], float[i + 1]): success [1ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i], float[i - 2]): success [1ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i], float[zigZag(i)]): success [1ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i], float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i]): success [1ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i - length / 2]): success [1ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i + 1]): success [1ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[i - 2]): success [1ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[zigZag(i)]): success [1ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - length / 2], float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i]): success [68ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[i - 2], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[i - 2]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.eqFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[-i * 5], mask[i % 2]): success [165ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[i * 5], mask[i % 2]): success [1ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[i + 1], mask[i % 2]): success [73ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[-i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[-i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.expandFloatMaxVectorTests(float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i * 5], float[-i * 5]): success [7ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i * 5], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i * 5], AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i + 1], float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i + 1], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i + 1], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i + 1], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i + 1], AbstractVectorTest$1@12b45097): success [15ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097, float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097, float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097, float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097, float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097, AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097, float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)], float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[-i * 5]): success [16ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[-i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[i * 5]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.fmaFloatMaxVectorTestsDoubleBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.getFloatMaxVectorTests(float[-i * 5]): success [13ms]
test FloatMaxVectorTests.getFloatMaxVectorTests(float[i * 5]): success [13ms]
test FloatMaxVectorTests.getFloatMaxVectorTests(float[i + 1]): success [99ms]
test FloatMaxVectorTests.getFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.getFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.getFloatMaxVectorTests(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.hashCodeFloatMaxVectorTestsSmokeTest(float[-i * 5]): success [35ms]
test FloatMaxVectorTests.hashCodeFloatMaxVectorTestsSmokeTest(float[i * 5]): success [1ms]
test FloatMaxVectorTests.hashCodeFloatMaxVectorTestsSmokeTest(float[i + 1]): success [3ms]
test FloatMaxVectorTests.hashCodeFloatMaxVectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [2ms]
test FloatMaxVectorTests.hashCodeFloatMaxVectorTestsSmokeTest(AbstractVectorTest$1@12b45097): success [12ms]
test FloatMaxVectorTests.hashCodeFloatMaxVectorTestsSmokeTest(float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.indexInRangeFloatMaxVectorTestsSmokeTest(0): success [71ms]
test FloatMaxVectorTests.indexInRangeFloatMaxVectorTestsSmokeTest(-1): success [21ms]
test FloatMaxVectorTests.indexInRangeFloatMaxVectorTestsSmokeTest(1): success [22ms]
test FloatMaxVectorTests.indexInRangeFloatMaxVectorTestsSmokeTest(2): success [4ms]
test FloatMaxVectorTests.indexInRangeFloatMaxVectorTestsSmokeTest(-2): success [4ms]
test FloatMaxVectorTests.indexInRangeLongFloatMaxVectorTestsSmokeTest(0): success [4ms]
test FloatMaxVectorTests.indexInRangeLongFloatMaxVectorTestsSmokeTest(-1): success [11ms]
test FloatMaxVectorTests.indexInRangeLongFloatMaxVectorTestsSmokeTest(1): success [3ms]
test FloatMaxVectorTests.indexInRangeLongFloatMaxVectorTestsSmokeTest(2): success [3ms]
test FloatMaxVectorTests.indexInRangeLongFloatMaxVectorTestsSmokeTest(-2): success [3ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(0): success [0ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(1): success [0ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(32): success [0ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(37): success [0ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(1024): success [0ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(1025): success [0ms]
test FloatMaxVectorTests.loopBoundFloatMaxVectorTestsSmokeTest(1029): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(0): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(1): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(32): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(37): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(1024): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(1025): success [0ms]
test FloatMaxVectorTests.loopBoundLongFloatMaxVectorTestsSmokeTest(1029): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i], float[i]): success [87ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i], float[i + 1]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i], float[i - 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - length / 2], float[i]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - length / 2], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - length / 2], float[i + 1]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - length / 2], float[i - 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - length / 2], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - length / 2], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i + 1], float[i]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i + 1], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i + 1], float[i + 1]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i + 1], float[i - 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i + 1], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - 2], float[i]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - 2], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - 2], float[i + 1]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - 2], float[i - 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - 2], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[i - 2], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[zigZag(i)], float[i]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[zigZag(i)], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[zigZag(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[zigZag(i)], float[i - 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[zigZag(i)], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[zigZag(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[cornerCaseValue(i)], float[i]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[cornerCaseValue(i)], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[cornerCaseValue(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[cornerCaseValue(i)], float[i - 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[cornerCaseValue(i)], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTests(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i], float[i]): success [2ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i], float[i - length / 2]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i], float[i + 1]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i], float[i - 2]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i], float[zigZag(i)]): success [2ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i], float[cornerCaseValue(i)]): success [2ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - length / 2], float[i]): success [2ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - length / 2], float[i - length / 2]): success [2ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - length / 2], float[i + 1]): success [2ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - length / 2], float[i - 2]): success [2ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - length / 2], float[zigZag(i)]): success [2ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - length / 2], float[cornerCaseValue(i)]): success [3ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i + 1], float[i]): success [68ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i + 1], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i + 1], float[i + 1]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i + 1], float[i - 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i + 1], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i + 1], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - 2], float[i]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - 2], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - 2], float[i + 1]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - 2], float[i - 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - 2], float[zigZag(i)]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[i - 2], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i + 1]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[zigZag(i)], float[i - 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[zigZag(i)], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[zigZag(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i - length / 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i + 1]): success [1ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[i - 2]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)]): success [0ms]
test FloatMaxVectorTests.ltFloatMaxVectorTestsBroadcastSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.maskAndFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [15ms]
test FloatMaxVectorTests.maskAndFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test FloatMaxVectorTests.maskAndNotFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test FloatMaxVectorTests.maskAndNotFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test FloatMaxVectorTests.maskCompressFloatMaxVectorTestsSmokeTest(mask[i % 2]): success [107ms]
test FloatMaxVectorTests.maskCompressFloatMaxVectorTestsSmokeTest(mask[true]): success [1ms]
test FloatMaxVectorTests.maskCompressFloatMaxVectorTestsSmokeTest(mask[false]): success [74ms]
test FloatMaxVectorTests.maskEqFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test FloatMaxVectorTests.maskEqFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test FloatMaxVectorTests.maskEqualsFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test FloatMaxVectorTests.maskEqualsFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test FloatMaxVectorTests.maskFirstTrueFloatMaxVectorTestsSmokeTest(mask[i % 2]): success [132ms]
test FloatMaxVectorTests.maskFirstTrueFloatMaxVectorTestsSmokeTest(mask[true]): success [33ms]
test FloatMaxVectorTests.maskFirstTrueFloatMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test FloatMaxVectorTests.maskHashCodeFloatMaxVectorTestsSmokeTest(mask[i % 2]): success [0ms]
test FloatMaxVectorTests.maskHashCodeFloatMaxVectorTestsSmokeTest(mask[true]): success [0ms]
test FloatMaxVectorTests.maskHashCodeFloatMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test FloatMaxVectorTests.maskLastTrueFloatMaxVectorTestsSmokeTest(mask[i % 2]): success [155ms]
test FloatMaxVectorTests.maskLastTrueFloatMaxVectorTestsSmokeTest(mask[true]): success [33ms]
test FloatMaxVectorTests.maskLastTrueFloatMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test FloatMaxVectorTests.maskOrFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [46ms]
test FloatMaxVectorTests.maskOrFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test FloatMaxVectorTests.maskTrueCountFloatMaxVectorTestsSmokeTest(mask[i % 2]): success [93ms]
test FloatMaxVectorTests.maskTrueCountFloatMaxVectorTestsSmokeTest(mask[true]): success [33ms]
test FloatMaxVectorTests.maskTrueCountFloatMaxVectorTestsSmokeTest(mask[false]): success [0ms]
test FloatMaxVectorTests.maskXorFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test FloatMaxVectorTests.maskXorFloatMaxVectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [6ms]
test FloatMaxVectorTests.maxFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.maxFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [5ms]
test FloatMaxVectorTests.maxFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.maxFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [5ms]
test FloatMaxVectorTests.minFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.minFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [5ms]
test FloatMaxVectorTests.minFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.minFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [5ms]
test FloatMaxVectorTests.mulFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [5ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [7ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [6ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.mulFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.negFloatMaxVectorTests(float[-i * 5]): success [14ms]
test FloatMaxVectorTests.negFloatMaxVectorTests(float[i * 5]): success [2ms]
test FloatMaxVectorTests.negFloatMaxVectorTests(float[i + 1]): success [45ms]
test FloatMaxVectorTests.negFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.negFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.negFloatMaxVectorTests(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.powFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [31ms]
test FloatMaxVectorTests.powFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [14ms]
test FloatMaxVectorTests.powFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [92ms]
test FloatMaxVectorTests.powFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [2ms]
test FloatMaxVectorTests.powFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [3ms]
test FloatMaxVectorTests.powFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [13ms]
test FloatMaxVectorTests.powFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.powFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [1ms]
test FloatMaxVectorTests.powFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.powFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.shuffleEqualsFloatMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [32ms]
test FloatMaxVectorTests.shuffleEqualsFloatMaxVectorTestsSmokeTest(shuffle[i], shuffle[random]): success [15ms]
test FloatMaxVectorTests.shuffleMiscellaneousFloatMaxVectorTestsSmokeTest(shuffle[random]): success [5ms]
test FloatMaxVectorTests.shuffleTest(): success [889ms]
test FloatMaxVectorTests.shuffleToStringFloatMaxVectorTestsSmokeTest(shuffle[random]): success [32ms]
test FloatMaxVectorTests.sliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[i * 5]): success [1025ms]
test FloatMaxVectorTests.sliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[i + 1]): success [26ms]
test FloatMaxVectorTests.sliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[0.01 + (i / (i + 1))]): success [186ms]
test FloatMaxVectorTests.sliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], AbstractVectorTest$1@12b45097): success [30ms]
test FloatMaxVectorTests.sliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[cornerCaseValue(i)]): success [5ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [74ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [48ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [175ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [14ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [68ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [2ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [2ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [2ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [26ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [2ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [2ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [10ms]
test FloatMaxVectorTests.sliceFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [3ms]
test FloatMaxVectorTests.sliceUnaryFloatMaxVectorTests(float[-i * 5]): success [423ms]
test FloatMaxVectorTests.sliceUnaryFloatMaxVectorTests(float[i * 5]): success [5ms]
test FloatMaxVectorTests.sliceUnaryFloatMaxVectorTests(float[i + 1]): success [121ms]
test FloatMaxVectorTests.sliceUnaryFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [2ms]
test FloatMaxVectorTests.sliceUnaryFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [7ms]
test FloatMaxVectorTests.sliceUnaryFloatMaxVectorTests(float[cornerCaseValue(i)]): success [3ms]
test FloatMaxVectorTests.smokeTest1(): success [0ms]
test FloatMaxVectorTests.smokeTest2(): success [61ms]
test FloatMaxVectorTests.sqrtFloatMaxVectorTests(float[-i * 5]): success [16ms]
test FloatMaxVectorTests.sqrtFloatMaxVectorTests(float[i * 5]): success [2ms]
test FloatMaxVectorTests.sqrtFloatMaxVectorTests(float[i + 1]): success [45ms]
test FloatMaxVectorTests.sqrtFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [11ms]
test FloatMaxVectorTests.sqrtFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.sqrtFloatMaxVectorTests(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [8ms]
test FloatMaxVectorTests.subFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[i % 2]): success [6ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [36ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastMaskedSmokeTest(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i * 5]): success [8ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[i + 1]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], AbstractVectorTest$1@12b45097): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsBroadcastSmokeTest(float[-i * 5], float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [6ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [0ms]
test FloatMaxVectorTests.subFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [0ms]
test FloatMaxVectorTests.toDoubleArrayFloatMaxVectorTestsSmokeTest(float[-i * 5]): success [0ms]
test FloatMaxVectorTests.toDoubleArrayFloatMaxVectorTestsSmokeTest(float[i * 5]): success [0ms]
test FloatMaxVectorTests.toDoubleArrayFloatMaxVectorTestsSmokeTest(float[i + 1]): success [0ms]
test FloatMaxVectorTests.toDoubleArrayFloatMaxVectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [0ms]
test FloatMaxVectorTests.toDoubleArrayFloatMaxVectorTestsSmokeTest(AbstractVectorTest$1@12b45097): success [12ms]
test FloatMaxVectorTests.toDoubleArrayFloatMaxVectorTestsSmokeTest(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.toIntArrayFloatMaxVectorTestsSmokeTest(float[-i * 5]): success [8ms]
test FloatMaxVectorTests.toIntArrayFloatMaxVectorTestsSmokeTest(float[i * 5]): success [6ms]
test FloatMaxVectorTests.toIntArrayFloatMaxVectorTestsSmokeTest(float[i + 1]): success [13ms]
test FloatMaxVectorTests.toIntArrayFloatMaxVectorTestsSmokeTest(float[intCornerCaseValue(i)]): success [6ms]
test FloatMaxVectorTests.toLongArrayFloatMaxVectorTestsSmokeTest(float[-i * 5]): success [4ms]
test FloatMaxVectorTests.toLongArrayFloatMaxVectorTestsSmokeTest(float[i * 5]): success [0ms]
test FloatMaxVectorTests.toLongArrayFloatMaxVectorTestsSmokeTest(float[i + 1]): success [17ms]
test FloatMaxVectorTests.toLongArrayFloatMaxVectorTestsSmokeTest(float[cornerCaseValue(i)]): success [0ms]
test FloatMaxVectorTests.toStringFloatMaxVectorTestsSmokeTest(float[-i * 5]): success [3ms]
test FloatMaxVectorTests.toStringFloatMaxVectorTestsSmokeTest(float[i * 5]): success [15ms]
test FloatMaxVectorTests.toStringFloatMaxVectorTestsSmokeTest(float[i + 1]): success [1ms]
test FloatMaxVectorTests.toStringFloatMaxVectorTestsSmokeTest(float[0.01 + (i / (i + 1))]): success [31ms]
test FloatMaxVectorTests.toStringFloatMaxVectorTestsSmokeTest(AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.toStringFloatMaxVectorTestsSmokeTest(float[cornerCaseValue(i)]): success [3ms]
test FloatMaxVectorTests.unsliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[i * 5]): success [361ms]
test FloatMaxVectorTests.unsliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[i + 1]): success [4ms]
test FloatMaxVectorTests.unsliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[0.01 + (i / (i + 1))]): success [138ms]
test FloatMaxVectorTests.unsliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], AbstractVectorTest$1@12b45097): success [355ms]
test FloatMaxVectorTests.unsliceBinaryFloatMaxVectorTestsBinary(float[-i * 5], float[cornerCaseValue(i)]): success [215ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[i % 2]): success [486ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[i % 2]): success [136ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[i % 2]): success [458ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[i % 2]): success [169ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[i % 2]): success [286ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[true]): success [136ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[true]): success [252ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[true]): success [134ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[true]): success [135ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[true]): success [135ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[i * 5], mask[false]): success [134ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[i + 1], mask[false]): success [134ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[0.01 + (i / (i + 1))], mask[false]): success [136ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], AbstractVectorTest$1@12b45097, mask[false]): success [134ms]
test FloatMaxVectorTests.unsliceFloatMaxVectorTestsMasked(float[-i * 5], float[cornerCaseValue(i)], mask[false]): success [146ms]
test FloatMaxVectorTests.unsliceUnaryFloatMaxVectorTests(float[-i * 5]): success [337ms]
test FloatMaxVectorTests.unsliceUnaryFloatMaxVectorTests(float[i * 5]): success [3ms]
test FloatMaxVectorTests.unsliceUnaryFloatMaxVectorTests(float[i + 1]): success [112ms]
test FloatMaxVectorTests.unsliceUnaryFloatMaxVectorTests(float[0.01 + (i / (i + 1))]): success [2ms]
test FloatMaxVectorTests.unsliceUnaryFloatMaxVectorTests(AbstractVectorTest$1@12b45097): success [1ms]
test FloatMaxVectorTests.unsliceUnaryFloatMaxVectorTests(float[cornerCaseValue(i)]): success [1ms]
test FloatMaxVectorTests.viewAsFloatingLanesTest(): success [21ms]
test FloatMaxVectorTests.viewAsIntegeralLanesTest(): success [45ms]
test FloatMaxVectorTests.withFloatMaxVectorTests(float[-i * 5], float[i * 5]): success [18ms]
test FloatMaxVectorTests.withFloatMaxVectorTests(float[-i * 5], float[i + 1]): success [18ms]
test FloatMaxVectorTests.withFloatMaxVectorTests(float[-i * 5], float[0.01 + (i / (i + 1))]): success [134ms]
test FloatMaxVectorTests.withFloatMaxVectorTests(float[-i * 5], AbstractVectorTest$1@12b45097): success [17ms]
test FloatMaxVectorTests.withFloatMaxVectorTests(float[-i * 5], float[cornerCaseValue(i)]): success [16ms]

===============================================
jdk/incubator/vector/FloatMaxVectorTests.java
Total tests run: 3211, Passes: 3210, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/4 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/FloatMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/FloatMaxVectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/FloatMaxVectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/FloatMaxVectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/FloatMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/jdk/incubator/vector/FloatMaxVectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/5/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/FloatMaxVectorTests.d/testng.0.jta jdk/incubator/vector/FloatMaxVectorTests.java false FloatMaxVectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorTests.java
Passed: jdk/incubator/vector/Int128VectorTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int512VectorTests.java
Passed: jdk/incubator/vector/MethodOverideTest.java
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
Passed: jdk/incubator/vector/IntMaxVectorTests.java
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
Passed: jdk/incubator/vector/Long256VectorTests.java
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long512VectorTests.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/LongMaxVectorTests.java
Passed: jdk/incubator/vector/UnalignedHeapTest.java
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/Short128VectorTests.java
Passed: jdk/incubator/vector/VectorMathTest.java
Passed: jdk/incubator/vector/Short512VectorTests.java
Passed: jdk/incubator/vector/Short256VectorTests.java
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/Short64VectorTests.java
Passed: jdk/incubator/vector/Double128VectorTests.java
Passed: jdk/incubator/vector/ShortMaxVectorTests.java
Passed: jdk/incubator/vector/Vector512ConversionTests.java
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#id0
Passed: jdk/incubator/vector/Vector256ConversionTests.java
Passed: jdk/incubator/vector/Vector128ConversionTests.java
Passed: jdk/incubator/vector/Vector64ConversionTests.java#id0
TEST: jdk/incubator/vector/Long128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.14 seconds
messages:
command: build Long128VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 03:45:51 IST 2025
Test directory:
  compile: Long128VectorTests
finished: Thu Apr 17 03:45:52 IST 2025
elapsed time (seconds): 1.14

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.14 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 03:45:51 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 12
Process id: 2193602
finished: Thu Apr 17 03:45:52 IST 2025
elapsed time (seconds): 1.14
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests 
TIME:   249.958 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long128VectorTests 
started: Thu Apr 17 03:45:52 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2196636
finished: Thu Apr 17 03:50:02 IST 2025
elapsed time (seconds): 249.958
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 3204957747239836464
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=3204957747239836464" to command line.
test Long128VectorTests.ABSLong128VectorTests(long[-i * 5]): success [549ms]
test Long128VectorTests.ABSLong128VectorTests(long[i * 5]): success [56ms]
test Long128VectorTests.ABSLong128VectorTests(long[i + 1]): success [4ms]
test Long128VectorTests.ABSLong128VectorTests(long[cornerCaseValue(i)]): success [3ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[i % 2]): success [256ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[i % 2]): success [76ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[i % 2]): success [3ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[true]): success [53ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[-i * 5], mask[false]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i * 5], mask[false]): success [6ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.ABSMaskedLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[i * 5]): success [210ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[i + 1]): success [91ms]
test Long128VectorTests.ADDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [19ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [26ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [9ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [137ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [70ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [9ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ADDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[-i * 5]): success [133ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[i * 5]): success [46ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[i + 1]): success [1ms]
test Long128VectorTests.ADDReduceLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [187ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [114ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[true]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[true]): success [31ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [4ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[-i * 5], mask[false]): success [14ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.ADDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [11ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[-i * 5]): success [5ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[i * 5]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.ADDReduceLongLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[i * 5]): success [165ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[i + 1]): success [62ms]
test Long128VectorTests.ANDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [4ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [6ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [9ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [68ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ANDLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[-i * 5]): success [139ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[i * 5]): success [0ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[i + 1]): success [87ms]
test Long128VectorTests.ANDReduceLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[i % 2]): success [74ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[i % 2]): success [3ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[i % 2]): success [87ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[true]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[true]): success [29ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[true]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[-i * 5], mask[false]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i * 5], mask[false]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[i + 1], mask[false]): success [2ms]
test Long128VectorTests.ANDReduceLong128VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [11ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[i * 5]): success [205ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[i + 1]): success [112ms]
test Long128VectorTests.AND_NOTLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [63ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [81ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.AND_NOTLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[i * 5]): success [110ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[i + 1]): success [71ms]
test Long128VectorTests.ASHRLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [87ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [80ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long128VectorTests.ASHRLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [20ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [183ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [62ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[-i * 5]): success [8ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[i * 5]): success [55ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[i + 1]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [61ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [59ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [13ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [58ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [6ms]
test Long128VectorTests.ASHRLong128VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [114ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [95ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [430ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [4ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [88ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [75ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [7ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [24ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [4ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.BITWISE_BLENDLong128VectorTestsBroadcastSmokeTest(

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

: success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.blendLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[i % 2]): success [137ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[i % 2]): success [82ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[i % 2]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [8ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[true]): success [70ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[true]): success [5ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[true]): success [5ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [6ms]
test Long128VectorTests.compressLong128VectorTests(long[-i * 5], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[i * 5], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[i + 1], mask[false]): success [7ms]
test Long128VectorTests.compressLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [7ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[i * 5]): success [162ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[i + 1]): success [207ms]
test Long128VectorTests.divLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [79ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [117ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.divLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [294ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [284ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [146ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [146ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): failure [112ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$7(LongVector.java:914)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.bOpTemplateMF(LongVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.bOpMF(Long128Vector.java:204)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.bOpMF(Long128Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lambda$binaryOperationsMF$6(LongVector.java:914)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.lanewiseTemplate(LongVector.java:895)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.lanewise(Long128Vector.java:281)
	at jdk.incubator.vector/jdk.incubator.vector.Long128Vector.lanewise(Long128Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.LongVector.div(LongVector.java:1645)
	at Long128VectorTests.divLong128VectorTestsMasked(Long128VectorTests.java:1780)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [147ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [145ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [146ms]
test Long128VectorTests.divLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [146ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i]): success [170ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i - length / 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i + 1]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[i - 2]): success [78ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[zigZag(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i - length / 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i + 1]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[i - 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[zigZag(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i - length / 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i + 1]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[i - 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[zigZag(i)]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i - length / 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i + 1]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[i - 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[zigZag(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i]): success [71ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i - length / 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i + 1]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[i - 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[zigZag(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [1ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.eqLong128VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [57ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[i % 2]): success [86ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[i % 2]): success [78ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[i % 2]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[true]): success [24ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[true]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[-i * 5], mask[false]): success [6ms]
test Long128VectorTests.expandLong128VectorTests(long[i * 5], mask[false]): success [8ms]
test Long128VectorTests.expandLong128VectorTests(long[i + 1], mask[false]): success [11ms]
test Long128VectorTests.expandLong128VectorTests(long[cornerCaseValue(i)], mask[false]): success [12ms]
test Long128VectorTests.getLong128VectorTests(long[-i * 5]): success [7ms]
test Long128VectorTests.getLong128VectorTests(long[i * 5]): success [62ms]
test Long128VectorTests.getLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.getLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[-i * 5]): success [62ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[i * 5]): success [3ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[i + 1]): success [5ms]
test Long128VectorTests.hashCodeLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(0): success [73ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(-1): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(1): success [18ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(2): success [3ms]
test Long128VectorTests.indexInRangeLong128VectorTestsSmokeTest(-2): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(0): success [4ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(-1): success [3ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(1): success [3ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(2): success [5ms]
test Long128VectorTests.indexInRangeLongLong128VectorTestsSmokeTest(-2): success [3ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(32): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(37): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1024): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1025): success [0ms]
test Long128VectorTests.loopBoundLong128VectorTestsSmokeTest(1029): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(32): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(37): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1024): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1025): success [0ms]
test Long128VectorTests.loopBoundLongLong128VectorTestsSmokeTest(1029): success [0ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i]): success [172ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i - length / 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[i - 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[zigZag(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[i - 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[zigZag(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[i - 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[zigZag(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i - length / 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[i - 2]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[zigZag(i)]): success [87ms]
test Long128VectorTests.ltLong128VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[i - 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[zigZag(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [70ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [71ms]
test Long128VectorTests.ltLong128VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [70ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [1ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [9ms]
test Long128VectorTests.ltLong128VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [57ms]
test Long128VectorTests.maskAndLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Long128VectorTests.maskAndLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskAndNotLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Long128VectorTests.maskAndNotLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[i % 2]): success [226ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[true]): success [79ms]
test Long128VectorTests.maskCompressLong128VectorTestsSmokeTest(mask[false]): success [60ms]
test Long128VectorTests.maskEqLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Long128VectorTests.maskEqLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskEqualsLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long128VectorTests.maskEqualsLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[i % 2]): success [33ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[true]): success [54ms]
test Long128VectorTests.maskFirstTrueLong128VectorTestsSmokeTest(mask[false]): success [21ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(-1): success [61ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(0): success [0ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long128VectorTests.maskFromToLongLong128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[true]): success [0ms]
test Long128VectorTests.maskHashCodeLong128VectorTestsSmokeTest(mask[false]): success [0ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[i % 2]): success [61ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[true]): success [54ms]
test Long128VectorTests.maskLastTrueLong128VectorTestsSmokeTest(mask[false]): success [34ms]
test Long128VectorTests.maskOrLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test Long128VectorTests.maskOrLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[i % 2]): success [28ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[true]): success [54ms]
test Long128VectorTests.maskTrueCountLong128VectorTestsSmokeTest(mask[false]): success [21ms]
test Long128VectorTests.maskXorLong128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test Long128VectorTests.maskXorLong128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.maxLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.maxLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.minLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.minLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.mulLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.mulLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.negLong128VectorTests(long[-i * 5]): success [14ms]
test Long128VectorTests.negLong128VectorTests(long[i * 5]): success [47ms]
test Long128VectorTests.negLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.negLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.notLong128VectorTests(long[-i * 5]): success [17ms]
test Long128VectorTests.notLong128VectorTests(long[i * 5]): success [51ms]
test Long128VectorTests.notLong128VectorTests(long[i + 1]): success [0ms]
test Long128VectorTests.notLong128VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.orLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.orLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.shuffleEqualsLong128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [443ms]
test Long128VectorTests.shuffleEqualsLong128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [48ms]
test Long128VectorTests.shuffleMiscellaneousLong128VectorTestsSmokeTest(shuffle[random]): success [24ms]
test Long128VectorTests.shuffleTest(): success [347ms]
test Long128VectorTests.shuffleToStringLong128VectorTestsSmokeTest(shuffle[random]): success [69ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i * 5]): success [580ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i + 1]): success [267ms]
test Long128VectorTests.sliceBinaryLong128VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [76ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [157ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [446ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [78ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [78ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [77ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [78ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [77ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [77ms]
test Long128VectorTests.sliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [77ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[-i * 5]): success [225ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[i * 5]): success [224ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[i + 1]): success [74ms]
test Long128VectorTests.sliceUnaryLong128VectorTests(long[cornerCaseValue(i)]): success [74ms]
test Long128VectorTests.smokeTest1(): success [0ms]
test Long128VectorTests.smokeTest2(): success [49ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.subLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [40ms]
test Long128VectorTests.subLong128VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [6ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long128VectorTests.subLong128VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [6ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long128VectorTests.subLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long128VectorTests.toDoubleArrayLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [7ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[i * 5]): success [5ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[i + 1]): success [5ms]
test Long128VectorTests.toIntArrayLong128VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [13ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long128VectorTests.toLongArrayLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[-i * 5]): success [2ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[i * 5]): success [7ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[i + 1]): success [43ms]
test Long128VectorTests.toStringLong128VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [2ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i * 5]): success [236ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[i + 1]): success [311ms]
test Long128VectorTests.unsliceBinaryLong128VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [208ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [537ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [511ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [153ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [177ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [149ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [161ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [149ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [158ms]
test Long128VectorTests.unsliceLong128VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [150ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[-i * 5]): success [219ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[i * 5]): success [201ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[i + 1]): success [74ms]
test Long128VectorTests.unsliceUnaryLong128VectorTests(long[cornerCaseValue(i)]): success [73ms]
test Long128VectorTests.viewAsFloatingLanesTest(): success [240ms]
test Long128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[i * 5]): success [19ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[i + 1]): success [81ms]
test Long128VectorTests.withLong128VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]

===============================================
jdk/incubator/vector/Long128VectorTests.java
Total tests run: 3321, Passes: 3320, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/12 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/jdk/incubator/vector/Long128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/7/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Long128VectorTests.d/testng.0.jta jdk/incubator/vector/Long128VectorTests.java false Long128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
TEST: jdk/incubator/vector/VectorReshapeTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.348 seconds
messages:
command: build VectorReshapeTests
reason: Named class compiled on demand
started: Thu Apr 17 03:47:28 IST 2025
Test directory:
  compile: VectorReshapeTests
finished: Thu Apr 17 03:47:28 IST 2025
elapsed time (seconds): 0.348

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.348 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 03:47:28 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 8
Process id: 2193283
finished: Thu Apr 17 03:47:28 IST 2025
elapsed time (seconds): 0.348
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/VectorReshapeTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/8 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/VectorReshapeTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
TIME:   164.405 seconds
messages:
command: testng --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests
reason: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
started: Thu Apr 17 03:47:28 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 2198293
finished: Thu Apr 17 03:50:13 IST 2025
elapsed time (seconds): 164.405
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorReshapeTests.testCastFromByte(byte(i)): success [6615ms]
test VectorReshapeTests.testCastFromDouble(double(i)): success [1975ms]
test VectorReshapeTests.testCastFromFloat(float(i)): success [1824ms]
test VectorReshapeTests.testCastFromInt(int(i)): success [2026ms]
test VectorReshapeTests.testCastFromLong(long(i)): success [1773ms]
test VectorReshapeTests.testCastFromShort(short(i)): success [1306ms]
test VectorReshapeTests.testRebracket128(byte(i)): success [9473ms]
test VectorReshapeTests.testRebracket256(byte(i)): success [11104ms]
test VectorReshapeTests.testRebracket512(byte(i)): success [15255ms]
test VectorReshapeTests.testRebracket64(byte(i)): success [9880ms]
test VectorReshapeTests.testRebracketMax(byte(i)): success [16916ms]
test VectorReshapeTests.testReshapeByte(byte(i)): success [4262ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[double, 1, S_64_BIT]->Species[double, 2, S_128_BIT] (lanewise), partLimit=-2, block=8, part=-1, origin=8
expect: [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeDouble(byte(i)): failure [8363ms]
java.lang.AssertionError: arrays differ firstly at element [8]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeDouble(VectorReshapeTests.java:669)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testReshapeFloat(byte(i)): success [15612ms]
test VectorReshapeTests.testReshapeInt(byte(i)): success [10402ms]
test VectorReshapeTests.testReshapeLong(byte(i)): success [13331ms]
test VectorReshapeTests.testReshapeShort(byte(i)): success [10458ms]
test VectorReshapeTests.testUCastFromByte(byte(i)): success [11463ms]
test VectorReshapeTests.testUCastFromInt(int(i)): success [1ms]
test VectorReshapeTests.testUCastFromShort(short(i)): success [6987ms]

===============================================
jdk/incubator/vector/VectorReshapeTests.java
Total tests run: 20, Passes: 19, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/8 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=3 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/8/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=3 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/VectorReshapeTests.d/testng.0.jta jdk/incubator/vector/VectorReshapeTests.java false VectorReshapeTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Float64VectorTests.java
Passed: jdk/incubator/vector/Double64VectorTests.java
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#Z
Passed: jdk/incubator/vector/Int64VectorTests.java
Passed: jdk/incubator/vector/Long64VectorTests.java
Test results: passed: 77; failed: 3; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector
Finished running test 'jtreg:test/jdk:jdk_vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk:jdk_vector                            83    77     3     0     3 <<
==============================
TEST FAILURE

