Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_1', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_1
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_1

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Passed: compiler/codegen/Test6797305.java
Passed: compiler/codegen/ClearArrayTest.java
Passed: compiler/codegen/LoadWithMask2.java
Passed: compiler/codegen/LoadWithMask.java
Passed: compiler/codegen/Test6378821.java
Passed: compiler/codegen/Test6814842.java
Passed: compiler/codegen/C1NullCheckOfNullStore.java
Passed: compiler/codegen/CRCTest.java
Passed: compiler/codegen/BMI1.java
Passed: compiler/codegen/Test6431242.java
Passed: compiler/codegen/IntRotateWithImmediate.java
Passed: compiler/codegen/ShiftByZero.java
Passed: compiler/codegen/BitTests.java
Passed: compiler/codegen/BMI2.java
Passed: compiler/codegen/Test6909839.java
Passed: compiler/codegen/BadLogicCode.java
Passed: compiler/codegen/ShiftTest.java
Passed: compiler/codegen/Test8005033.java
Passed: compiler/codegen/Test6879902.java
Passed: compiler/codegen/Test7009231.java
Passed: compiler/codegen/Test8011901.java
Passed: compiler/codegen/Test6823354.java
Passed: compiler/codegen/TestConvertImplicitNullCheck.java
Passed: compiler/codegen/TestByteShortVect.java
Passed: compiler/codegen/TestByteIntVect.java
Passed: compiler/codegen/Test6942326.java
Passed: compiler/codegen/TestCharShortVect.java
Passed: compiler/codegen/TestBooleanVect.java
Passed: compiler/codegen/TestByteVect.java
Passed: compiler/codegen/TestIntFloatVect.java
Passed: compiler/codegen/TestFloatVect.java
Passed: compiler/codegen/TestCharVect2.java#id0
Passed: compiler/codegen/TestCharVect.java
Passed: compiler/codegen/TestDoubleVect.java
Passed: compiler/codegen/TestByteFloatVect.java
Passed: compiler/codegen/TestByteDoubleVect.java
Passed: compiler/codegen/Test7100757.java
Passed: compiler/codegen/TestByteLongVect.java
Passed: compiler/codegen/TestFloatDoubleVect.java
Passed: compiler/codegen/TestMultiMemInstructionMatching.java
Passed: compiler/codegen/TestIntDoubleVect.java
Passed: compiler/codegen/TestIntLongVect.java
Passed: compiler/codegen/TestGCMLoadPlacement.java
Passed: compiler/codegen/TestShortIntVect.java
Passed: compiler/codegen/TestLongDoubleVect.java
Passed: compiler/loopopts/superword/AlignmentOnePack.java
Passed: compiler/loopopts/superword/CoLocatePack.java
Passed: compiler/loopopts/superword/CoLocatePackMemoryState.java
Passed: compiler/codegen/TestOopCmp.java
Passed: compiler/codegen/TestShortFloatVect.java
Passed: compiler/codegen/TestShortDoubleVect.java
Passed: compiler/codegen/TestShortLongVect.java
Passed: compiler/codegen/TestLongVect.java
Passed: compiler/codegen/TestCharVect2.java#id1
Passed: compiler/codegen/TestIntVect.java
Passed: compiler/codegen/TestShortVect.java
Passed: compiler/loopopts/superword/ReductionPerf.java
Passed: compiler/codegen/TestLongFloatVect.java
Passed: compiler/codegen/TestSignedMultiplyLong.java
Passed: compiler/loopopts/superword/MinMaxRed_Long.java
Passed: compiler/loopopts/superword/SuperWordIntermediateUse.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage.java
Passed: compiler/loopopts/superword/MinMaxRed_Int.java
Passed: compiler/loopopts/superword/TestAlignVector.java#AlignVector
Passed: compiler/loopopts/superword/TestAlignVector.java#VerifyAlignVector
Passed: compiler/loopopts/superword/RedTest_long.java
Passed: compiler/loopopts/superword/RedTest_int.java
Passed: compiler/loopopts/superword/SumRed_Long.java
Passed: compiler/loopopts/superword/TestBestAlign.java
Passed: compiler/loopopts/superword/TestCmpInvar.java
Passed: compiler/loopopts/superword/TestAlignVector.java#NoAlignVector
Passed: compiler/loopopts/superword/TestCompatibleUseDefTypeSize.java
Passed: compiler/loopopts/superword/TestCyclicDependency.java
Passed: compiler/loopopts/superword/ProdRed_Int.java
Passed: compiler/loopopts/superword/ProdRed_Float.java
Passed: compiler/loopopts/superword/SumRed_Float.java
Passed: compiler/loopopts/superword/SumRed_Int.java
Passed: compiler/loopopts/superword/SumRedAbsNeg_Double.java
Passed: compiler/loopopts/superword/ProdRed_Double.java
Passed: compiler/loopopts/superword/SumRedAbsNeg_Float.java
Passed: compiler/loopopts/superword/SumRed_Double.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx1-v016-A
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-Align16
Passed: compiler/loopopts/superword/SumRedSqrt_Double.java
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-NoTieredCompilation-Xbatch
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#Vanilla
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx1-v016-U
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx1-v032-A
Passed: compiler/loopopts/superword/TestEliminateAllocationWithCastP2XUse.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx1-v032-U
Passed: compiler/loopopts/superword/TestFuzzPreLoop.java
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx2-v016-U
Passed: compiler/loopopts/superword/TestGeneralizedReductions.java
Passed: compiler/loopopts/superword/TestHoistedReductionNode.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx2-v016-A
Passed: compiler/loopopts/superword/TestIndependentPacksWithCyclicDependency2.java
Passed: compiler/loopopts/superword/TestLargeCompilation.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx2-v032-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v004-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v004-U
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array-AlignVector
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#avx2-v032-U
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestMemorySegment.java#char-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#double-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#float-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v008-A
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#native
Passed: compiler/loopopts/superword/TestMemorySegmentMainLoopAlignment.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v016-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v016-U
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v008-U
Passed: compiler/loopopts/superword/TestMemorySegment.java#native-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-VerifyAlignVector
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#short-array
Passed: compiler/loopopts/superword/TestNegBaseOffset.java
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-U
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithMoreFlags
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-A
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithFlags
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#Vanilla
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-VerifyAlignVector
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-AlignVector
Passed: compiler/loopopts/superword/TestSearchAlignment.java
Passed: compiler/loopopts/superword/TestReductionWithLoopVariantUse.java
Passed: compiler/loopopts/superword/TestPeeledReductionNode.java
Passed: compiler/loopopts/superword/TestPickLastMemoryState.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize16-Unaligned
Passed: compiler/loopopts/superword/TestMultiversionRemoveUselessSlowLoop.java
Passed: compiler/loopopts/superword/TestPickFirstMemoryState.java
Passed: compiler/loopopts/superword/TestParallelReduction.java
Passed: compiler/loopopts/superword/TestWronglyMarkedReduction.java
Passed: compiler/loopopts/superword/TestVectorizeTypeConversionWithUnsafe.java
Passed: compiler/loopopts/superword/TestVectorizationWithInvariant.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize32-Aligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Aligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Unaligned
Passed: compiler/vectorapi/TestIsLoadVector.java
Passed: compiler/vectorapi/Test8303508.java
Passed: compiler/loopopts/superword/TestVectorFPReduction.java
Passed: compiler/vectorapi/TestLongVectorNeg.java
Passed: compiler/vectorapi/TestBiMorphicMismatchedMemSegment.java
Passed: compiler/vectorapi/Test8259353.java
Passed: compiler/vectorapi/TestNoInline.java
Passed: compiler/vectorapi/TestLoopStoreVector.java#id0
Passed: compiler/vectorapi/TestLoopStoreVector.java#id1
Passed: compiler/vectorapi/TestIntrinsicBailOut.java#id0
Passed: compiler/vectorapi/TestReverseByteTransforms.java
Passed: compiler/vectorapi/TestVectorErgonomics.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#AlignVector
Passed: compiler/vectorapi/Test8278948.java
Passed: compiler/vectorapi/TestVectorShuffleIota.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#StoreToLoadForwardingFailureDetection
Passed: compiler/vectorapi/VectorBoxExpandTest.java
Passed: compiler/vectorapi/TestVectorTest.java
Passed: compiler/vectorapi/TestVectorAddMulReduction.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#vanilla
Passed: compiler/vectorapi/TestVectorShiftImm.java
Passed: compiler/vectorapi/VectorFPtoIntCastTest.java
Passed: compiler/loopopts/superword/TestMovingLoadBeforeStore.java
Passed: compiler/vectorapi/TestVectorShuffleIotaByte.java
Passed: compiler/vectorapi/VectorCommutativeOperSharingTest.java
Passed: compiler/vectorapi/VectorMemoryAlias.java
Passed: compiler/vectorapi/VectorReverseBytesTest.java
Passed: compiler/vectorapi/VectorMaskCastTest.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage2.java
Passed: compiler/vectorapi/TestTwoVectorPermute.java
Passed: compiler/loopopts/superword/TestEquivalentInvariants.java
Passed: compiler/c2/cr6340864/TestFloatVect.java
Passed: compiler/c2/cr6340864/TestDoubleVect.java
Passed: compiler/vectorapi/TestMaskedMacroLogicVector.java
Passed: compiler/vectorapi/TestRawOopAtSafepoint.java
Passed: compiler/c2/cr6340864/TestByteVect.java
Passed: compiler/c2/irTests/blackhole/BlackholeStoreStoreEATest.java
Passed: compiler/c2/irTests/blackhole/BlackholeHotInlineTest.java
Passed: compiler/c2/cr6340864/TestIntVectRotate.java
Passed: compiler/c2/irTests/blackhole/BlackholeLoadOptoTest.java
Passed: compiler/c2/irTests/blackhole/BlackholeSyncEATest.java
Passed: compiler/c2/cr6340864/TestIntVect.java
Passed: compiler/vectorapi/VectorGatherMaskFoldingTest.java
Passed: compiler/c2/irTests/igvn/TestCombineAddPWithConstantOffsets.java
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id1
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id0
Passed: compiler/c2/cr6340864/TestLongVectRotate.java
Passed: compiler/c2/cr6340864/TestShortVect.java
Passed: compiler/c2/irTests/igvn/TestLoadNIdeal.java
Passed: compiler/c2/cr6340864/TestLongVect.java
Passed: compiler/c2/irTests/scalarReplacement/ScalarReplacementTests.java
Passed: compiler/vectorapi/VectorCastShape128Test.java
Passed: compiler/c2/irTests/igvn/TestIntegerMulRing.java
Passed: compiler/c2/irTests/loopOpts/LoopIdealizationTests.java
Passed: compiler/c2/irTests/stringopts/TestNegativeArraySize.java
Passed: compiler/c2/irTests/AddINodeIdealizationTests.java
Passed: compiler/vectorapi/VectorSaturatedOperationsTest.java
Passed: compiler/c2/irTests/AndINodeIdealizationTests.java
Passed: compiler/c2/irTests/AddLNodeIdealizationTests.java
Passed: compiler/c2/irTests/igvn/TestCleanMemPhi.java
Passed: compiler/c2/irTests/AndLNodeIdealizationTests.java
Passed: compiler/c2/irTests/CmpUWithZero.java
Passed: compiler/c2/irTests/CMoveLConstants.java
Passed: compiler/c2/irTests/DeMorganLawIntTests.java
Passed: compiler/c2/irTests/DeMorganLawLongTests.java
Passed: compiler/c2/irTests/stable/StablePrimFinalTest.java
Passed: compiler/vectorapi/VectorCastShape64Test.java
Passed: compiler/vectorapi/VectorMultiplyOpt.java
Passed: compiler/c2/irTests/stable/StablePrimPlainTest.java
Passed: compiler/c2/irTests/ConstructorBarriers.java
Passed: compiler/c2/irTests/DivINodeIdealizationTests.java
Passed: compiler/c2/irTests/DivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StablePrimVolatileTest.java
Passed: compiler/c2/irTests/LShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StableRefArrayTest.java
Passed: compiler/c2/irTests/stable/StableRefPlainTest.java
Passed: compiler/c2/irTests/stable/StablePrimArrayTest.java
Passed: compiler/c2/irTests/stable/StableRefVolatileTest.java
Passed: compiler/c2/irTests/LShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/ModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/ModINodeIdealizationTests.java
Passed: compiler/c2/irTests/MaxMinINodeIdealizationTests.java
Passed: compiler/c2/irTests/ModDNodeTests.java
Passed: compiler/c2/irTests/MulINodeIdealizationTests.java
Passed: compiler/c2/irTests/MulLNodeIdealizationTests.java
Passed: compiler/c2/irTests/OrLNodeIdealizationTests.java
Passed: compiler/c2/irTests/OrINodeIdealizationTests.java
Passed: compiler/c2/irTests/ModFNodeTests.java
Passed: compiler/c2/irTests/MulHFNodeIdealizationTests.java
Passed: compiler/c2/irTests/RShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/TestArrayElementTypeLoad.java
Passed: compiler/c2/irTests/RShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestAutoVectorization2DArray.java
Passed: compiler/c2/irTests/SubINodeIdealizationTests.java
Passed: compiler/c2/irTests/TestBackToBackIfs.java
Passed: compiler/c2/irTests/TestAutoVecCountingDownLoop.java
Passed: compiler/c2/irTests/SubLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestBackToBackMustBeNotNull.java
Passed: compiler/c2/irTests/TestCMoveCCP.java
Passed: compiler/c2/irTests/TestConv2BExpansion.java
Passed: compiler/c2/irTests/TestConvI2LCastLongLoop.java
Passed: compiler/c2/irTests/TestEnumFinalFold.java
Passed: compiler/c2/irTests/TestDebugInfo.java
Passed: compiler/c2/irTests/TestFPConversion.java
Passed: compiler/c2/irTests/TestGetAndAdd.java
Passed: compiler/c2/irTests/stable/StableRefFinalTest.java
Passed: compiler/c2/irTests/TestCountedLoopPhiValue.java
Passed: compiler/c2/irTests/TestFPComparison.java
Passed: compiler/c2/irTests/TestFewIterationsCountedLoop.java
Passed: compiler/c2/irTests/TestIRAbs.java
Passed: compiler/c2/irTests/TestIRFma.java
Passed: compiler/c2/irTests/TestIRLShiftIdeal_XPlusX_LShiftC.java
Passed: compiler/c2/irTests/TestCountedLoopSafepoint.java
Passed: compiler/c2/irTests/TestIterativeEA.java
Passed: compiler/c2/irTests/TestMinMaxIdentities.java
Passed: compiler/c2/irTests/TestMulNodeIdealization.java
Passed: compiler/c2/irTests/TestIfMinMax.java
Passed: compiler/c2/irTests/TestOptimizeUnstableIf.java
Passed: compiler/c2/irTests/TestPadding.java
Passed: compiler/c2/irTests/TestPushAddThruCast.java
Passed: compiler/c2/irTests/TestPhiDuplicatedConversion.java
Passed: compiler/c2/irTests/TestRemixAddressExpressions.java
Passed: compiler/c2/irTests/TestScalarReplacement.java
Passed: compiler/c2/irTests/TestPostParseCallDevirtualization.java
Passed: compiler/c2/irTests/TestScheduleSmallMethod.java
Passed: compiler/c2/irTests/TestLongRangeChecks.java
Passed: compiler/c2/irTests/TestSpecialCasesOf_AMinusB_Plus_CMinusD_InAddIdeal.java
Passed: compiler/c2/irTests/TestShiftAndMask.java
Passed: compiler/c2/irTests/TestSkeletonPredicates.java
Passed: compiler/c2/irTests/TestTypeSpeculation.java
Passed: compiler/c2/irTests/TestLSMMissedEmptyLoop.java
Passed: compiler/c2/irTests/TestTestRemovalPeephole.java
Passed: compiler/c2/irTests/TestSuperwordFailsUnrolling.java
Passed: compiler/c2/irTests/TestStripMiningDropsSafepoint.java
Passed: compiler/c2/irTests/ConvF2HFIdealizationTests.java
Passed: compiler/c2/irTests/gc/ReferenceClearTests.java
Passed: compiler/c2/irTests/TestVectorizeTypeConversion.java
Passed: compiler/c2/irTests/TestUnsignedComparison.java
Passed: compiler/c2/irTests/TestVectorizeURShiftSubword.java
Passed: compiler/c2/irTests/UDivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/UDivINodeIdealizationTests.java
Passed: compiler/c2/irTests/UModINodeIdealizationTests.java
Passed: compiler/c2/irTests/URShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/UModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/URShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/XorINodeIdealizationTests.java
Passed: compiler/c2/irTests/TestVectorizationMultiInvar.java
Passed: compiler/c2/irTests/XorLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestFloat16ScalarOperations.java
Passed: compiler/c2/irTests/gc/ReferenceRefersToTests.java
Passed: compiler/vectorization/runner/ArrayCopyTest.java
Passed: compiler/vectorization/runner/ArrayIndexFillTest.java
Passed: compiler/vectorization/runner/BasicBooleanOpTest.java
Passed: compiler/vectorization/runner/ArrayUnsafeOpTest.java
Passed: compiler/c2/irTests/ProfileAtTypeCheck.java
Passed: compiler/vectorization/runner/ArrayShiftOpTest.java
Passed: compiler/vectorization/runner/BasicCharOpTest.java
Passed: compiler/vectorization/runner/BasicByteOpTest.java
Passed: compiler/vectorization/TestAbsCharVector.java
Passed: compiler/vectorization/runner/BasicIntOpTest.java
Passed: compiler/vectorization/runner/BasicFloatOpTest.java
Passed: compiler/vectorization/runner/BasicLongOpTest.java
Passed: compiler/vectorization/TestCMoveWithoutBoolPack.java
Passed: compiler/vectorization/runner/LoopControlFlowTest.java
Passed: compiler/vectorization/runner/BasicShortOpTest.java
Passed: compiler/vectorization/runner/ArrayInvariantFillTest.java
Passed: compiler/vectorization/runner/BasicDoubleOpTest.java
Passed: compiler/vectorization/runner/LoopLiveOutNodesTest.java
Passed: compiler/vectorization/runner/MultipleLoopsTest.java
Passed: compiler/vectorization/runner/LoopReductionOpTest.java
Passed: compiler/vectorization/runner/StripMinedLoopTest.java
Passed: compiler/vectorization/TestMemoryVectorMismatched.java
Passed: compiler/vectorization/runner/LoopRangeStrideTest.java
Passed: compiler/vectorization/TestNarrowedIntegerReverseBytes.java
Passed: compiler/vectorization/TestOptionVectorize.java
Passed: compiler/vectorization/TestMacroLogicVector.java
Passed: compiler/vectorization/TestAutoVecIntMinMax.java
Passed: compiler/vectorization/runner/LoopArrayIndexComputeTest.java
Passed: compiler/vectorization/TestNaNVector.java
Passed: compiler/vectorization/TestMaskedVectors.java
Passed: compiler/vectorization/TestComplexAddrExpr.java
Passed: compiler/vectorization/TestFloat16VectorConvChain.java
Passed: compiler/vectorization/TestReplicateLoopIV.java
Passed: compiler/vectorization/TestOverlappingMismatchedAccesses.java
Passed: compiler/vectorization/TestReplicateAtConv.java
Passed: compiler/vectorization/TestRotateByteAndShortVector.java
Passed: compiler/vectorization/TestOffsetSorting.java
Passed: compiler/vectorization/TestPopCountVector.java
Passed: compiler/vectorization/TestSmallVectorPopIndex.java
Passed: compiler/vectorization/TestUnexpectedLoadOrdering.java
Passed: compiler/vectorization/TestReverseBitsVector.java
Passed: compiler/vectorization/TestVectorUnalignedOffset.java
Passed: compiler/vectorization/TestReverseBytes.java
Passed: compiler/vectorization/TestRoundVectFloat.java
Passed: compiler/vectorization/TestFloat16ToFloatConv.java
Passed: compiler/vectorization/TestPopulateIndex.java
Passed: compiler/vectorization/TestSignumVector.java
Passed: compiler/vectorization/TestOptionVectorizeIR.java
Passed: compiler/vectorization/TestVectorizationNegativeScale.java
Passed: compiler/vectorization/TestForEachRem.java
Passed: compiler/vectorization/TestNumberOfContinuousZeros.java
Passed: compiler/vectorization/TestSubwordReverseBytes.java
Passed: compiler/vectorization/TestBufferVectorization.java
Passed: compiler/vectorization/TestVectorsNotSavedAtSafepoint.java
Passed: compiler/vectorapi/reshape/TestVectorCastAVX1.java
Passed: compiler/vectorapi/reshape/TestVectorCastAVX2.java
Passed: compiler/vectorization/TestVectorZeroCount.java
Test results: passed: 354; excluded: 18; did not meet platform requirements: 54
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
   jtreg:test/hotspot/jtreg:hotspot_vector_1           426   354     0     0    72   
==============================
TEST SUCCESS

Finished building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_2', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_2
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_2

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Passed: compiler/intrinsics/string/TestStringEqualsBadLength.java
Passed: compiler/intrinsics/string/TestStringIndexOfCharIntrinsics.java
Passed: compiler/intrinsics/string/TestStringConstruction.java
Passed: compiler/intrinsics/string/TestStringIntrinsicRangeChecks.java
Passed: compiler/intrinsics/string/TestCopyValueOf.java
Passed: compiler/intrinsics/Test8005419.java
Passed: compiler/intrinsics/Test6982370.java
Passed: compiler/intrinsics/Test8237524.java
Passed: compiler/intrinsics/string/TestStringIntrinsicMemoryFlow.java
Passed: compiler/intrinsics/Test8215792.java
Passed: compiler/intrinsics/IntrinsicDisabledTest.java
Passed: compiler/intrinsics/string/TestStringIntrinsics2.java
Passed: compiler/intrinsics/TestArraysHashCode.java
Passed: compiler/intrinsics/TestCheckIndex.java
Passed: compiler/intrinsics/TestArrayGuardWithInterfaces.java
Passed: compiler/intrinsics/TestContinuationPinningAndEA.java
Passed: compiler/intrinsics/IntrinsicAvailableTest.java
Passed: compiler/intrinsics/TestReferenceGetWithNull.java
Passed: compiler/intrinsics/string/TestStringConstructionIntrinsics.java#id0
Passed: compiler/intrinsics/TestReferenceRefersTo.java
Passed: compiler/intrinsics/string/TestHasNegatives.java#id0
Passed: compiler/intrinsics/VectorizedMismatchTest.java
Passed: compiler/codegen/Test6935535.java#id0
Passed: compiler/intrinsics/TestCompareUnsigned.java
Passed: compiler/intrinsics/TestIntegerUnsignedDivMod.java
Passed: compiler/codegen/aes/Test8292158.java
Passed: compiler/intrinsics/string/TestStringUTF16IntrinsicRangeChecks.java
Passed: compiler/intrinsics/string/TestCountPositives.java#id0
Passed: compiler/intrinsics/TestRotate.java
Passed: compiler/codegen/aes/Test8299817.java
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLenReturnProfile.java
Passed: compiler/intrinsics/bigInteger/TestMulAdd.java
Passed: compiler/codegen/Test6875866.java
Passed: compiler/intrinsics/string/TestEncodeIntrinsics.java
Passed: compiler/intrinsics/bigInteger/TestSquareToLen.java
Passed: compiler/intrinsics/bigInteger/MontgomeryMultiplyTest.java
Passed: compiler/intrinsics/bigInteger/TestShift.java
Passed: compiler/intrinsics/bmi/verifycode/AndnTestI.java
Passed: compiler/codegen/Test6935535.java#id1
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLen.java
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestI.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestL.java
Passed: compiler/intrinsics/string/TestStringIntrinsics.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestI.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestI.java
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestL.java
Passed: compiler/intrinsics/bmi/verifycode/AndnTestL.java
Passed: compiler/intrinsics/TestLongUnsignedDivMod.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestI.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestL.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BzhiTestI2L.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestI.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestL.java
Passed: compiler/intrinsics/bmi/TestBlsrI.java
Passed: compiler/intrinsics/bmi/TestBlsmskI.java
Passed: compiler/intrinsics/bmi/TestBlsmskL.java
Passed: compiler/intrinsics/bmi/TestBlsiI.java
Passed: compiler/intrinsics/bmi/TestLzcntI.java
Passed: compiler/intrinsics/bmi/TestBlsrL.java
Passed: compiler/intrinsics/bmi/TestBlsiL.java
Passed: compiler/intrinsics/TestBitShuffleOpers.java
Passed: compiler/intrinsics/bmi/TestTzcntI.java
Passed: compiler/intrinsics/float16/Binary16ConversionNaN.java
Passed: compiler/intrinsics/bmi/TestAndnI.java
Passed: compiler/intrinsics/bmi/TestLzcntL.java
Passed: compiler/intrinsics/bmi/TestAndnL.java
Passed: compiler/intrinsics/bmi/TestTzcntL.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id2
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id0
Passed: compiler/intrinsics/chacha/TestChaCha20.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id1
Passed: compiler/intrinsics/float16/TestAllFloat16ToFloat.java
Passed: compiler/intrinsics/math/Test8210461.java
Passed: compiler/intrinsics/float16/TestConstFloat16ToFloat.java
Passed: compiler/intrinsics/math/TestMinMaxIntrinsics.java
Passed: compiler/intrinsics/klass/TestIsPrimitive.java
Passed: compiler/intrinsics/math/TestPow2Opt.java
Passed: compiler/intrinsics/math/TestFpMinMaxIntrinsics.java
Passed: compiler/intrinsics/math/TestPow0Dot5Opt.java
Passed: compiler/intrinsics/bmi/TestBzhiI2L.java
Passed: compiler/intrinsics/math/TestFpMinMaxReductions.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactLongTest.java
Passed: compiler/intrinsics/math/TestMinMaxInlining.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactLongTest.java
Passed: compiler/intrinsics/math/TestMinMaxOpt.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactIntTest.java
Passed: compiler/intrinsics/mathexact/AddExactICondTest.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactLongTest.java
Passed: compiler/intrinsics/float16/Binary16Conversion.java
Passed: compiler/intrinsics/mathexact/AddExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoadTest.java
Passed: compiler/intrinsics/math/MaxMinOptimizeTest.java
Passed: compiler/intrinsics/klass/CastNullCheckDroppingsTest.java
Passed: compiler/codegen/aes/TestCipherBlockChainingEncrypt.java
Passed: compiler/intrinsics/mathexact/AddExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/AddExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/AddExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/GVNTest.java
Passed: compiler/intrinsics/mathexact/AddExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/CompareTest.java
Passed: compiler/intrinsics/mathexact/MulExactICondTest.java
Passed: compiler/intrinsics/mathexact/DecExactITest.java
Passed: compiler/intrinsics/mathexact/IncExactITest.java
Passed: compiler/intrinsics/mathexact/DecExactLTest.java
Passed: compiler/intrinsics/mathexact/IncExactLTest.java
Passed: compiler/intrinsics/mathexact/NegExactILoadTest.java
Passed: compiler/intrinsics/SortingDeoptimizationTest.java
Passed: compiler/intrinsics/mathexact/NegExactILoopDependentTest.java
Passed: compiler/loopopts/superword/Vec_MulAddS2I.java
Passed: compiler/intrinsics/mathexact/MulExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/NestedMathExactTest.java
Passed: compiler/intrinsics/mathexact/SplitThruPhiTest.java
Passed: compiler/intrinsics/mathexact/SubExactICondTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/MulExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactIConstantTest.java
Passed: compiler/intrinsics/base64/TestBase64.java
Passed: compiler/intrinsics/mathexact/SubExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/NegExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactILoadTest.java
Passed: compiler/intrinsics/mathexact/MulExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoadTest.java
Passed: compiler/intrinsics/mathexact/MulExactINonConstantTest.java
Passed: compiler/intrinsics/object/TestHashCode.java
Passed: compiler/intrinsics/mathexact/NegExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/LongMulOverflowTest.java
Passed: compiler/intrinsics/mathexact/SubExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/SubExactIRepeatTest.java
Passed: compiler/intrinsics/sha/sanity/TestMD5Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1MultiBlockIntrinsics.java
Passed: compiler/intrinsics/math/TestSignumIntrinsic.java
Passed: compiler/intrinsics/unsafe/TestCAEAntiDep.java
Passed: compiler/intrinsics/sha/sanity/TestMD5MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/UnsafeGetAddressTest.java
Passed: compiler/intrinsics/unsafe/TestUnsafeMismatchedArrayFieldAccess.java
Passed: compiler/intrinsics/unsafe/TestUnsafeUnalignedMismatchedAccesses.java
Passed: compiler/intrinsics/object/TestClone.java
Passed: compiler/intrinsics/sha/sanity/TestSHA256Intrinsics.java
Passed: compiler/intrinsics/unsafe/UnsafeTwoCASLong.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512Intrinsics.java
Passed: compiler/intrinsics/zip/TestCRC32C.java
Passed: compiler/intrinsics/zip/TestCRC32.java
Passed: compiler/intrinsics/zip/TestAdler32.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3Intrinsics.java
Passed: compiler/intrinsics/zip/TestFpRegsABI.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA256MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/AllocateUninitializedArray.java
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id0
Passed: compiler/intrinsics/unsafe/DirectByteBufferTest.java
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id1
Passed: compiler/intrinsics/sha/TestDigest.java
Passed: compiler/codegen/aes/TestAESMain.java
Test results: passed: 170; excluded: 1; did not meet platform requirements: 21
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_2
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
   jtreg:test/hotspot/jtreg:hotspot_vector_2           192   170     0     0    22   
==============================
TEST SUCCESS

Finished building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS= -XX:UseAVX=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/:jdk_vector', will run:
* jtreg:test/jdk:jdk_vector
Clean up dirs for jtreg_test_jdk_jdk_vector

Running test 'jtreg:test/jdk:jdk_vector'
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/AddTest.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorTests.java
Passed: jdk/incubator/vector/Byte128VectorTests.java
Passed: jdk/incubator/vector/ByteMaxVectorTests.java
Passed: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorTests.java
Passed: jdk/incubator/vector/Byte64VectorTests.java
Passed: jdk/incubator/vector/Float128VectorTests.java
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorTests.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/FloatMaxVectorTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int128VectorTests.java
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int256VectorTests.java
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorTests.java
Passed: jdk/incubator/vector/Long256VectorTests.java
--------------------------------------------------
TEST: jdk/incubator/vector/Double512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   7.209 seconds
messages:
command: build Double512VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 02:59:13 IST 2025
Test directory:
  compile: Double512VectorTests
finished: Thu Apr 17 02:59:20 IST 2025
elapsed time (seconds): 7.209

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   7.208 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double512VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 02:59:13 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 15
Process id: 2129089
finished: Thu Apr 17 02:59:20 IST 2025
elapsed time (seconds): 7.208
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/8 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Double512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double512VectorTests 
TIME:   166.852 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Double512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double512VectorTests 
started: Thu Apr 17 02:59:20 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2130298
finished: Thu Apr 17 03:02:07 IST 2025
elapsed time (seconds): 166.852
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 3615591865153373283
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=3615591865153373283" to command line.
test Double512VectorTests.ABSDouble512VectorTests(double[-i * 5]): success [388ms]
test Double512VectorTests.ABSDouble512VectorTests(double[i * 5]): success [358ms]
test Double512VectorTests.ABSDouble512VectorTests(double[i + 1]): success [7ms]
test Double512VectorTests.ABSDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [5ms]
test Double512VectorTests.ABSDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [55ms]
test Double512VectorTests.ABSDouble512VectorTests(double[cornerCaseValue(i)]): success [7ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[-i * 5], mask[i % 2]): success [195ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i * 5], mask[i % 2]): success [127ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i + 1], mask[i % 2]): success [72ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [7ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [74ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[-i * 5], mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i * 5], mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(AbstractVectorTest$1@25daae7f, mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[cornerCaseValue(i)], mask[true]): success [5ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[-i * 5], mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i * 5], mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i + 1], mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[-i * 5]): success [112ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[i * 5]): success [45ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[i + 1]): success [11ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [7ms]
test Double512VectorTests.ACOSDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [81ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], double[i * 5]): success [110ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], double[i + 1]): success [336ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [3ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [4ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [73ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5]): success [25ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [34ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [9ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [4ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [15ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [172ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [64ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [8ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [14ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [75ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [3ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [3ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [3ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [3ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [3ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [3ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [3ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [3ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[-i * 5]): success [129ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[i * 5]): success [4ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[i + 1]): success [75ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[-i * 5], mask[i % 2]): success [89ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i * 5], mask[i % 2]): success [4ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i + 1], mask[i % 2]): success [93ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [34ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[-i * 5], mask[true]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i * 5], mask[true]): success [1ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [1ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[-i * 5], mask[false]): success [1ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i * 5], mask[false]): success [4ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i + 1], mask[false]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [13ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [4ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[-i * 5]): success [13ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[i * 5]): success [1ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[i + 1]): success [2ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [2ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[-i * 5], mask[i % 2]): success [11ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i * 5], mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[-i * 5], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[-i * 5], mask[false]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i * 5], mask[false]): success [1ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [13ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.ASINDouble512VectorTests(double[-i * 5]): success [150ms]
test Double512VectorTests.ASINDouble512VectorTests(double[i * 5]): success [87ms]
test Double512VectorTests.ASINDouble512VectorTests(double[i + 1]): success [8ms]
test Double512VectorTests.ASINDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [3ms]
test Double512VectorTests.ASINDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [58ms]
test Double512VectorTests.ASINDouble512VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], double[i * 5]): success [341ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], double[i + 1]): success [84ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [11ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [16ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [82ms]
test Double512VectorTests.ATANDouble512VectorTests(double[-i * 5]): success [20ms]
test Double512VectorTests.ATANDouble512VectorTests(double[i * 5]): success [86ms]
test Double512VectorTests.ATANDouble512VectorTests(double[i + 1]): success [9ms]
test Double512VectorTests.ATANDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [10ms]
test Double512VectorTests.ATANDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [68ms]
test Double512VectorTests.ATANDouble512VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[-i * 5]): success [51ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[i * 5]): success [96ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[i + 1]): success [50ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [49ms]
test Double512VectorTests.BroadcastDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [93ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[cornerCaseValue(i)]): success [28ms]
test Double512VectorTests.BroadcastLongDouble512VectorTestsSmokeTest(double[-i * 5]): success [2ms]
test Double512VectorTests.BroadcastLongDouble512VectorTestsSmokeTest(double[i * 5]): success [2ms]
test Double512VectorTests.BroadcastLongDouble512VectorTestsSmokeTest(double[i + 1]): success [2ms]
test Double512VectorTests.BroadcastLongDouble512VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [2ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[-i * 5]): success [37ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[i * 5]): success [132ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[i + 1]): success [2ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [4ms]
test Double512VectorTests.CBRTDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [100ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[cornerCaseValue(i)]): success [57ms]
test Double512VectorTests.COSDouble512VectorTests(double[-i * 5]): success [16ms]
test Double512VectorTests.COSDouble512VectorTests(double[i * 5]): success [91ms]
test Double512VectorTests.COSDouble512VectorTests(double[i + 1]): success [2ms]
test Double512VectorTests.COSDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double512VectorTests.COSDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [57ms]
test Double512VectorTests.COSDouble512VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.COSHDouble512VectorTests(double[-i * 5]): success [53ms]
test Double512VectorTests.COSHDouble512VectorTests(double[i * 5]): success [127ms]
test Double512VectorTests.COSHDouble512VectorTests(double[i + 1]): success [8ms]
test Double512VectorTests.COSHDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double512VectorTests.COSHDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [81ms]
test Double512VectorTests.COSHDouble512VectorTests(double[cornerCaseValue(i)]): success [69ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], double[i * 5]): success [189ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], double[i + 1]): success [149ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [4ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [68ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [18ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [21ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[i]): success [210ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[i - length / 2]): success [165ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[i + 1]): success [117ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[i - 2]): success [45ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[zigZag(i)]): success [45ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[cornerCaseValue(i)]): success [45ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[i]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[i - length / 2]): success [45ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[i + 1]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[i - 2]): success [43ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[zigZag(i)]): success [43ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [80ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[i]): success [43ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[i - length / 2]): success [43ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[i + 1]): success [43ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[i - 2]): success [43ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[zigZag(i)]): success [43ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [43ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[i]): success [43ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[i - length / 2]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[i + 1]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[i - 2]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[zigZag(i)]): success [43ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [43ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[i]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[i - length / 2]): success [43ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[i + 1]): success [43ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[i - 2]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[zigZag(i)]): success [43ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[i]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [43ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [43ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [43ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [43ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [43ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[i % 2]): success [15ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[i % 2]): success [2ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[i % 2]): success [3ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[i % 2]): success [2ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[i % 2]): success [2ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[i % 2]): success [68ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[i % 2]): success [3ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[i % 2]): success [4ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2], mask[i % 2]): success [5ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[true]): success [2ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[true]): success [86ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[true]): success [1ms]


...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

Double512VectorTests.getDouble512VectorTests(double[i * 5]): success [4ms]
test Double512VectorTests.getDouble512VectorTests(double[i + 1]): success [4ms]
test Double512VectorTests.getDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [4ms]
test Double512VectorTests.getDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [113ms]
test Double512VectorTests.getDouble512VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[-i * 5]): success [34ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[i * 5]): success [0ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[i + 1]): success [0ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(0): success [63ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(-1): success [15ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(1): success [15ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(2): success [1ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(-2): success [1ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(0): success [1ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(-1): success [1ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(1): success [1ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(2): success [2ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(-2): success [1ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(0): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(1): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(32): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(37): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(1024): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(1025): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(1029): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(0): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(1): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(32): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(37): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(1024): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(1025): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(1029): success [0ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[i]): success [132ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[i - length / 2]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[i + 1]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[i - 2]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[zigZag(i)]): success [42ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[cornerCaseValue(i)]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[i]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[i - length / 2]): success [42ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[i + 1]): success [42ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[i - 2]): success [47ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[zigZag(i)]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [63ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[i]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[i - length / 2]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[i + 1]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[i - 2]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[zigZag(i)]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[i]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[i - length / 2]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[i + 1]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[i - 2]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[zigZag(i)]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[i]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[i - length / 2]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[i + 1]): success [42ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[i - 2]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[zigZag(i)]): success [46ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [41ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[i]): success [69ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [73ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [73ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [73ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [45ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [41ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[i]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[i - 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[i]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[i - 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[i]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[i + 1]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[i - 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[zigZag(i)]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - 2]): success [66ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.maskAndDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Double512VectorTests.maskAndDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskAndNotDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Double512VectorTests.maskAndNotDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskCompressDouble512VectorTestsSmokeTest(mask[i % 2]): success [514ms]
test Double512VectorTests.maskCompressDouble512VectorTestsSmokeTest(mask[true]): success [249ms]
test Double512VectorTests.maskCompressDouble512VectorTestsSmokeTest(mask[false]): success [221ms]
test Double512VectorTests.maskEqDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Double512VectorTests.maskEqDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskEqualsDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Double512VectorTests.maskEqualsDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskFirstTrueDouble512VectorTestsSmokeTest(mask[i % 2]): success [89ms]
test Double512VectorTests.maskFirstTrueDouble512VectorTestsSmokeTest(mask[true]): success [76ms]
test Double512VectorTests.maskFirstTrueDouble512VectorTestsSmokeTest(mask[false]): success [43ms]
test Double512VectorTests.maskFromToLongDouble512VectorTestsSmokeTest(-1): success [53ms]
test Double512VectorTests.maskFromToLongDouble512VectorTestsSmokeTest(0): success [0ms]
test Double512VectorTests.maskFromToLongDouble512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Double512VectorTests.maskFromToLongDouble512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Double512VectorTests.maskHashCodeDouble512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Double512VectorTests.maskHashCodeDouble512VectorTestsSmokeTest(mask[true]): success [0ms]
test Double512VectorTests.maskHashCodeDouble512VectorTestsSmokeTest(mask[false]): success [0ms]
test Double512VectorTests.maskLastTrueDouble512VectorTestsSmokeTest(mask[i % 2]): success [93ms]
test Double512VectorTests.maskLastTrueDouble512VectorTestsSmokeTest(mask[true]): success [77ms]
test Double512VectorTests.maskLastTrueDouble512VectorTestsSmokeTest(mask[false]): success [61ms]
test Double512VectorTests.maskOrDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [45ms]
test Double512VectorTests.maskOrDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskTrueCountDouble512VectorTestsSmokeTest(mask[i % 2]): success [61ms]
test Double512VectorTests.maskTrueCountDouble512VectorTestsSmokeTest(mask[true]): success [76ms]
test Double512VectorTests.maskTrueCountDouble512VectorTestsSmokeTest(mask[false]): success [43ms]
test Double512VectorTests.maskXorDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Double512VectorTests.maskXorDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [30ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [6ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [81ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.negDouble512VectorTests(double[-i * 5]): success [10ms]
test Double512VectorTests.negDouble512VectorTests(double[i * 5]): success [7ms]
test Double512VectorTests.negDouble512VectorTests(double[i + 1]): success [2ms]
test Double512VectorTests.negDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double512VectorTests.negDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [47ms]
test Double512VectorTests.negDouble512VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], double[i * 5]): success [18ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], double[i + 1]): success [13ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [3ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [3ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [87ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [18ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.shuffleEqualsDouble512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [218ms]
test Double512VectorTests.shuffleEqualsDouble512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [23ms]
test Double512VectorTests.shuffleMiscellaneousDouble512VectorTestsSmokeTest(shuffle[random]): success [6ms]
test Double512VectorTests.shuffleTest(): success [1011ms]
test Double512VectorTests.shuffleToStringDouble512VectorTestsSmokeTest(shuffle[random]): success [36ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[i * 5]): success [540ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[i + 1]): success [1362ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [328ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [286ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [1060ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [320ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [506ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [311ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [312ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [1081ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [303ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [379ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [325ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [309ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [300ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [299ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [311ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [307ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [313ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [830ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[-i * 5]): success [273ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[i * 5]): success [584ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[i + 1]): success [253ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [280ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [524ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[cornerCaseValue(i)]): success [252ms]
test Double512VectorTests.smokeTest1(): success [0ms]
test Double512VectorTests.smokeTest2(): success [43ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[-i * 5]): success [8ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[i * 5]): success [10ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[i + 1]): success [2ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double512VectorTests.sqrtDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [105ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], double[i * 5]): success [8ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [8ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [64ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [13ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [7ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.toIntArrayDouble512VectorTestsSmokeTest(double[-i * 5]): success [5ms]
test Double512VectorTests.toIntArrayDouble512VectorTestsSmokeTest(double[i * 5]): success [5ms]
test Double512VectorTests.toIntArrayDouble512VectorTestsSmokeTest(double[i + 1]): success [5ms]
test Double512VectorTests.toIntArrayDouble512VectorTestsSmokeTest(double[intCornerCaseValue(i)]): success [5ms]
test Double512VectorTests.toLongArrayDouble512VectorTestsSmokeTest(double[-i * 5]): success [0ms]
test Double512VectorTests.toLongArrayDouble512VectorTestsSmokeTest(double[i * 5]): success [4ms]
test Double512VectorTests.toLongArrayDouble512VectorTestsSmokeTest(double[i + 1]): success [0ms]
test Double512VectorTests.toLongArrayDouble512VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[-i * 5]): success [1ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[i * 5]): success [1ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[i + 1]): success [1ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [29ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [2ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [23ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[i * 5]): success [256ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[i + 1]): success [635ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [389ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [253ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [1054ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [680ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [1652ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [585ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [526ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [2000ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [540ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [548ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [531ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [535ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1012ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [527ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [544ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [533ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [532ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [532ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[-i * 5]): success [274ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[i * 5]): success [548ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[i + 1]): success [251ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [251ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [539ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[cornerCaseValue(i)]): success [251ms]
test Double512VectorTests.viewAsFloatingLanesTest(): success [20ms]
test Double512VectorTests.viewAsIntegeralLanesTest(): success [23ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], double[i * 5]): success [12ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], double[i + 1]): success [24ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [10ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [10ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [181ms]

===============================================
jdk/incubator/vector/Double512VectorTests.java
Total tests run: 3209, Passes: 3208, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/8 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Double512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Double512VectorTests.d/testng.0.jta jdk/incubator/vector/Double512VectorTests.java false Double512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/MethodOverideTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
TEST: jdk/incubator/vector/Double128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   25.52 seconds
messages:
command: build Double128VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 02:58:44 IST 2025
Test directory:
  compile: Double128VectorTests
finished: Thu Apr 17 02:59:10 IST 2025
elapsed time (seconds): 25.52

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   25.515 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double128VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 02:58:44 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 12
Process id: 2128772
finished: Thu Apr 17 02:59:10 IST 2025
elapsed time (seconds): 25.515
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Double128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/9 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Double128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Double128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Double128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Double128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Double128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Double128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double128VectorTests 
TIME:   200.815 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Double128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double128VectorTests 
started: Thu Apr 17 02:59:10 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2130021
finished: Thu Apr 17 03:02:30 IST 2025
elapsed time (seconds): 200.815
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -3717791198659804690
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-3717791198659804690" to command line.
test Double128VectorTests.ABSDouble128VectorTests(double[-i * 5]): success [578ms]
test Double128VectorTests.ABSDouble128VectorTests(double[i * 5]): success [52ms]
test Double128VectorTests.ABSDouble128VectorTests(double[i + 1]): success [4ms]
test Double128VectorTests.ABSDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [4ms]
test Double128VectorTests.ABSDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [3ms]
test Double128VectorTests.ABSDouble128VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[-i * 5], mask[i % 2]): success [227ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[i * 5], mask[i % 2]): success [70ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[i + 1], mask[i % 2]): success [3ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [3ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [21ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [39ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[-i * 5], mask[true]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[i * 5], mask[true]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[i + 1], mask[true]): success [2ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(AbstractVectorTest$1@25daae7f, mask[true]): success [2ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[cornerCaseValue(i)], mask[true]): success [5ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[-i * 5], mask[false]): failure [42ms]
java.lang.AssertionError: at index #126, input = -630.0, mask = false expected [-630.0] but found [0.0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEquals(Assert.java:701)
	at Double128VectorTests.assertArraysEquals(Double128VectorTests.java:127)
	at Double128VectorTests.ABSMaskedDouble128VectorTests(Double128VectorTests.java:4573)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[i * 5], mask[false]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[i + 1], mask[false]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double128VectorTests.ABSMaskedDouble128VectorTests(double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double128VectorTests.ACOSDouble128VectorTests(double[-i * 5]): success [102ms]
test Double128VectorTests.ACOSDouble128VectorTests(double[i * 5]): success [59ms]
test Double128VectorTests.ACOSDouble128VectorTests(double[i + 1]): success [1ms]
test Double128VectorTests.ACOSDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double128VectorTests.ACOSDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double128VectorTests.ACOSDouble128VectorTests(double[cornerCaseValue(i)]): success [68ms]
test Double128VectorTests.ADDDouble128VectorTests(double[-i * 5], double[i * 5]): success [217ms]
test Double128VectorTests.ADDDouble128VectorTests(double[-i * 5], double[i + 1]): success [61ms]
test Double128VectorTests.ADDDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.ADDDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.ADDDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5]): success [18ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1]): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [15ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [23ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [15ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [4ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [3ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [9ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [3ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [128ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [68ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [7ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [3ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [3ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [14ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double128VectorTests.ADDDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [2ms]
test Double128VectorTests.ADDReduceDouble128VectorTests(double[-i * 5]): success [132ms]
test Double128VectorTests.ADDReduceDouble128VectorTests(double[i * 5]): success [0ms]
test Double128VectorTests.ADDReduceDouble128VectorTests(double[i + 1]): success [86ms]
test Double128VectorTests.ADDReduceDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.ADDReduceDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.ADDReduceDouble128VectorTests(double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[-i * 5], mask[i % 2]): success [119ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[i * 5], mask[i % 2]): success [50ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[i + 1], mask[i % 2]): success [3ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [3ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [3ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[-i * 5], mask[true]): success [3ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[i * 5], mask[true]): success [3ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[i + 1], mask[true]): success [2ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [3ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [2ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [11ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[-i * 5], mask[false]): success [2ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[i * 5], mask[false]): success [2ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[i + 1], mask[false]): success [16ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [57ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [3ms]
test Double128VectorTests.ADDReduceDouble128VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [5ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTests(double[-i * 5]): success [10ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTests(double[i * 5]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTests(double[i + 1]): success [2ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [3ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[-i * 5], mask[i % 2]): success [12ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[i * 5], mask[i % 2]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[i + 1], mask[i % 2]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[-i * 5], mask[true]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[i * 5], mask[true]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[i + 1], mask[true]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [13ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[-i * 5], mask[false]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[i * 5], mask[false]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[i + 1], mask[false]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double128VectorTests.ADDReduceLongDouble128VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double128VectorTests.ASINDouble128VectorTests(double[-i * 5]): success [132ms]
test Double128VectorTests.ASINDouble128VectorTests(double[i * 5]): success [61ms]
test Double128VectorTests.ASINDouble128VectorTests(double[i + 1]): success [2ms]
test Double128VectorTests.ASINDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.ASINDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double128VectorTests.ASINDouble128VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double128VectorTests.ATAN2Double128VectorTests(double[-i * 5], double[i * 5]): success [200ms]
test Double128VectorTests.ATAN2Double128VectorTests(double[-i * 5], double[i + 1]): success [81ms]
test Double128VectorTests.ATAN2Double128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [1ms]
test Double128VectorTests.ATAN2Double128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [4ms]
test Double128VectorTests.ATAN2Double128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [3ms]
test Double128VectorTests.ATANDouble128VectorTests(double[-i * 5]): success [79ms]
test Double128VectorTests.ATANDouble128VectorTests(double[i * 5]): success [60ms]
test Double128VectorTests.ATANDouble128VectorTests(double[i + 1]): success [0ms]
test Double128VectorTests.ATANDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.ATANDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double128VectorTests.ATANDouble128VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double128VectorTests.BroadcastDouble128VectorTests(double[-i * 5]): success [117ms]
test Double128VectorTests.BroadcastDouble128VectorTests(double[i * 5]): success [72ms]
test Double128VectorTests.BroadcastDouble128VectorTests(double[i + 1]): success [0ms]
test Double128VectorTests.BroadcastDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.BroadcastDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.BroadcastDouble128VectorTests(double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.BroadcastLongDouble128VectorTestsSmokeTest(double[-i * 5]): success [5ms]
test Double128VectorTests.BroadcastLongDouble128VectorTestsSmokeTest(double[i * 5]): success [3ms]
test Double128VectorTests.BroadcastLongDouble128VectorTestsSmokeTest(double[i + 1]): success [3ms]
test Double128VectorTests.BroadcastLongDouble128VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [3ms]
test Double128VectorTests.CBRTDouble128VectorTests(double[-i * 5]): success [115ms]
test Double128VectorTests.CBRTDouble128VectorTests(double[i * 5]): success [94ms]
test Double128VectorTests.CBRTDouble128VectorTests(double[i + 1]): success [0ms]
test Double128VectorTests.CBRTDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.CBRTDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.CBRTDouble128VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double128VectorTests.COSDouble128VectorTests(double[-i * 5]): success [72ms]
test Double128VectorTests.COSDouble128VectorTests(double[i * 5]): success [62ms]
test Double128VectorTests.COSDouble128VectorTests(double[i + 1]): success [0ms]
test Double128VectorTests.COSDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [61ms]
test Double128VectorTests.COSDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.COSDouble128VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double128VectorTests.COSHDouble128VectorTests(double[-i * 5]): success [137ms]
test Double128VectorTests.COSHDouble128VectorTests(double[i * 5]): success [59ms]
test Double128VectorTests.COSHDouble128VectorTests(double[i + 1]): success [0ms]
test Double128VectorTests.COSHDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.COSHDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.COSHDouble128VectorTests(double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.DIVDouble128VectorTests(double[-i * 5], double[i * 5]): success [170ms]
test Double128VectorTests.DIVDouble128VectorTests(double[-i * 5], double[i + 1]): success [62ms]
test Double128VectorTests.DIVDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.DIVDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.DIVDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [41ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [69ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [3ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [3ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [16ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [2ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [2ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [2ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [2ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double128VectorTests.DIVDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double128VectorTests.EQDouble128VectorTests(double[i], double[i]): success [366ms]
test Double128VectorTests.EQDouble128VectorTests(double[i], double[i - length / 2]): success [183ms]
test Double128VectorTests.EQDouble128VectorTests(double[i], double[i + 1]): success [132ms]
test Double128VectorTests.EQDouble128VectorTests(double[i], double[i - 2]): success [112ms]
test Double128VectorTests.EQDouble128VectorTests(double[i], double[zigZag(i)]): success [79ms]
test Double128VectorTests.EQDouble128VectorTests(double[i], double[cornerCaseValue(i)]): success [80ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - length / 2], double[i]): success [77ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - length / 2], double[i - length / 2]): success [108ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - length / 2], double[i + 1]): success [73ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - length / 2], double[i - 2]): success [72ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - length / 2], double[zigZag(i)]): success [71ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [72ms]
test Double128VectorTests.EQDouble128VectorTests(double[i + 1], double[i]): success [75ms]
test Double128VectorTests.EQDouble128VectorTests(double[i + 1], double[i - length / 2]): success [103ms]
test Double128VectorTests.EQDouble128VectorTests(double[i + 1], double[i + 1]): success [75ms]
test Double128VectorTests.EQDouble128VectorTests(double[i + 1], double[i - 2]): success [73ms]
test Double128VectorTests.EQDouble128VectorTests(double[i + 1], double[zigZag(i)]): success [74ms]
test Double128VectorTests.EQDouble128VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [76ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - 2], double[i]): success [74ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - 2], double[i - length / 2]): success [75ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - 2], double[i + 1]): success [75ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - 2], double[i - 2]): success [76ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - 2], double[zigZag(i)]): success [75ms]
test Double128VectorTests.EQDouble128VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [72ms]
test Double128VectorTests.EQDouble128VectorTests(double[zigZag(i)], double[i]): success [73ms]
test Double128VectorTests.EQDouble128VectorTests(double[zigZag(i)], double[i - length / 2]): success [72ms]
test Double128VectorTests.EQDouble128VectorTests(double[zigZag(i)], double[i + 1]): success [73ms]
test Double128VectorTests.EQDouble128VectorTests(double[zigZag(i)], double[i - 2]): success [72ms]
test Double128VectorTests.EQDouble128VectorTests(double[zigZag(i)], double[zigZag(i)]): success [73ms]
test Double128VectorTests.EQDouble128VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [73ms]
test Double128VectorTests.EQDouble128VectorTests(double[cornerCaseValue(i)], double[i]): success [73ms]
test Double128VectorTests.EQDouble128VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [72ms]
test Double128VectorTests.EQDouble128VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [72ms]
test Double128VectorTests.EQDouble128VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [72ms]
test Double128VectorTests.EQDouble128VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [77ms]
test Double128VectorTests.EQDouble128VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [73ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[i % 2]): success [17ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[i % 2]): success [4ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[i % 2]): success [5ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[i % 2]): success [4ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[i % 2]): success [8ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[i % 2]): success [4ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[i % 2]): success [75ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[i % 2]): success [5ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[i % 2]): success [10ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2], mask[i % 2]): success [3ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)], mask[i % 2]): success [86ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[true]): success [1ms]
test Double128VectorTests.EQDouble128VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i -

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

okeTest(double[-i * 5], double[cornerCaseValue(i)], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.fmaDouble128VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.fmaDouble128VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.getDouble128VectorTests(double[-i * 5]): success [5ms]
test Double128VectorTests.getDouble128VectorTests(double[i * 5]): success [63ms]
test Double128VectorTests.getDouble128VectorTests(double[i + 1]): success [1ms]
test Double128VectorTests.getDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double128VectorTests.getDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double128VectorTests.getDouble128VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double128VectorTests.hashCodeDouble128VectorTestsSmokeTest(double[-i * 5]): success [39ms]
test Double128VectorTests.hashCodeDouble128VectorTestsSmokeTest(double[i * 5]): success [2ms]
test Double128VectorTests.hashCodeDouble128VectorTestsSmokeTest(double[i + 1]): success [5ms]
test Double128VectorTests.hashCodeDouble128VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [2ms]
test Double128VectorTests.hashCodeDouble128VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [8ms]
test Double128VectorTests.hashCodeDouble128VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [2ms]
test Double128VectorTests.indexInRangeDouble128VectorTestsSmokeTest(0): success [75ms]
test Double128VectorTests.indexInRangeDouble128VectorTestsSmokeTest(-1): success [18ms]
test Double128VectorTests.indexInRangeDouble128VectorTestsSmokeTest(1): success [18ms]
test Double128VectorTests.indexInRangeDouble128VectorTestsSmokeTest(2): success [3ms]
test Double128VectorTests.indexInRangeDouble128VectorTestsSmokeTest(-2): success [3ms]
test Double128VectorTests.indexInRangeLongDouble128VectorTestsSmokeTest(0): success [3ms]
test Double128VectorTests.indexInRangeLongDouble128VectorTestsSmokeTest(-1): success [3ms]
test Double128VectorTests.indexInRangeLongDouble128VectorTestsSmokeTest(1): success [3ms]
test Double128VectorTests.indexInRangeLongDouble128VectorTestsSmokeTest(2): success [4ms]
test Double128VectorTests.indexInRangeLongDouble128VectorTestsSmokeTest(-2): success [3ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(0): success [0ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(1): success [0ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(32): success [0ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(37): success [0ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(1024): success [0ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(1025): success [0ms]
test Double128VectorTests.loopBoundDouble128VectorTestsSmokeTest(1029): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(0): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(1): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(32): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(37): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(1024): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(1025): success [0ms]
test Double128VectorTests.loopBoundLongDouble128VectorTestsSmokeTest(1029): success [0ms]
test Double128VectorTests.ltDouble128VectorTests(double[i], double[i]): success [172ms]
test Double128VectorTests.ltDouble128VectorTests(double[i], double[i - length / 2]): success [73ms]
test Double128VectorTests.ltDouble128VectorTests(double[i], double[i + 1]): success [73ms]
test Double128VectorTests.ltDouble128VectorTests(double[i], double[i - 2]): success [73ms]
test Double128VectorTests.ltDouble128VectorTests(double[i], double[zigZag(i)]): success [73ms]
test Double128VectorTests.ltDouble128VectorTests(double[i], double[cornerCaseValue(i)]): success [73ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - length / 2], double[i]): success [73ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - length / 2], double[i - length / 2]): success [72ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - length / 2], double[i + 1]): success [72ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - length / 2], double[i - 2]): success [75ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - length / 2], double[zigZag(i)]): success [93ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [133ms]
test Double128VectorTests.ltDouble128VectorTests(double[i + 1], double[i]): success [93ms]
test Double128VectorTests.ltDouble128VectorTests(double[i + 1], double[i - length / 2]): success [72ms]
test Double128VectorTests.ltDouble128VectorTests(double[i + 1], double[i + 1]): success [73ms]
test Double128VectorTests.ltDouble128VectorTests(double[i + 1], double[i - 2]): success [73ms]
test Double128VectorTests.ltDouble128VectorTests(double[i + 1], double[zigZag(i)]): success [74ms]
test Double128VectorTests.ltDouble128VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [73ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - 2], double[i]): success [87ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - 2], double[i - length / 2]): success [72ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - 2], double[i + 1]): success [85ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - 2], double[i - 2]): success [85ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - 2], double[zigZag(i)]): success [72ms]
test Double128VectorTests.ltDouble128VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [73ms]
test Double128VectorTests.ltDouble128VectorTests(double[zigZag(i)], double[i]): success [73ms]
test Double128VectorTests.ltDouble128VectorTests(double[zigZag(i)], double[i - length / 2]): success [73ms]
test Double128VectorTests.ltDouble128VectorTests(double[zigZag(i)], double[i + 1]): success [73ms]
test Double128VectorTests.ltDouble128VectorTests(double[zigZag(i)], double[i - 2]): success [73ms]
test Double128VectorTests.ltDouble128VectorTests(double[zigZag(i)], double[zigZag(i)]): success [72ms]
test Double128VectorTests.ltDouble128VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [72ms]
test Double128VectorTests.ltDouble128VectorTests(double[cornerCaseValue(i)], double[i]): success [73ms]
test Double128VectorTests.ltDouble128VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [73ms]
test Double128VectorTests.ltDouble128VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [74ms]
test Double128VectorTests.ltDouble128VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [73ms]
test Double128VectorTests.ltDouble128VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [73ms]
test Double128VectorTests.ltDouble128VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [70ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i], double[i]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i], double[i - length / 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i], double[i + 1]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i], double[i - 2]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i], double[zigZag(i)]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i], double[cornerCaseValue(i)]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - length / 2]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i + 1]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - 2]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - length / 2], double[zigZag(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - length / 2], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i + 1], double[i]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i + 1], double[i - length / 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i + 1], double[i + 1]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i + 1], double[i - 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i + 1], double[zigZag(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i + 1], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - 2], double[i]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - 2], double[i - length / 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - 2], double[i + 1]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - 2], double[i - 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - 2], double[zigZag(i)]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[i - 2], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - length / 2]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i + 1]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[zigZag(i)]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - length / 2]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i + 1]): success [0ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - 2]): success [1ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)]): success [11ms]
test Double128VectorTests.ltDouble128VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [58ms]
test Double128VectorTests.maskAndDouble128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Double128VectorTests.maskAndDouble128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double128VectorTests.maskAndNotDouble128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test Double128VectorTests.maskAndNotDouble128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double128VectorTests.maskCompressDouble128VectorTestsSmokeTest(mask[i % 2]): success [221ms]
test Double128VectorTests.maskCompressDouble128VectorTestsSmokeTest(mask[true]): success [83ms]
test Double128VectorTests.maskCompressDouble128VectorTestsSmokeTest(mask[false]): success [63ms]
test Double128VectorTests.maskEqDouble128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Double128VectorTests.maskEqDouble128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double128VectorTests.maskEqualsDouble128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Double128VectorTests.maskEqualsDouble128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double128VectorTests.maskFirstTrueDouble128VectorTestsSmokeTest(mask[i % 2]): success [89ms]
test Double128VectorTests.maskFirstTrueDouble128VectorTestsSmokeTest(mask[true]): success [56ms]
test Double128VectorTests.maskFirstTrueDouble128VectorTestsSmokeTest(mask[false]): success [23ms]
test Double128VectorTests.maskFromToLongDouble128VectorTestsSmokeTest(-1): success [58ms]
test Double128VectorTests.maskFromToLongDouble128VectorTestsSmokeTest(0): success [0ms]
test Double128VectorTests.maskFromToLongDouble128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Double128VectorTests.maskFromToLongDouble128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Double128VectorTests.maskHashCodeDouble128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Double128VectorTests.maskHashCodeDouble128VectorTestsSmokeTest(mask[true]): success [0ms]
test Double128VectorTests.maskHashCodeDouble128VectorTestsSmokeTest(mask[false]): success [0ms]
test Double128VectorTests.maskLastTrueDouble128VectorTestsSmokeTest(mask[i % 2]): success [67ms]
test Double128VectorTests.maskLastTrueDouble128VectorTestsSmokeTest(mask[true]): success [57ms]
test Double128VectorTests.maskLastTrueDouble128VectorTestsSmokeTest(mask[false]): success [37ms]
test Double128VectorTests.maskOrDouble128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [47ms]
test Double128VectorTests.maskOrDouble128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double128VectorTests.maskTrueCountDouble128VectorTestsSmokeTest(mask[i % 2]): success [31ms]
test Double128VectorTests.maskTrueCountDouble128VectorTestsSmokeTest(mask[true]): success [64ms]
test Double128VectorTests.maskTrueCountDouble128VectorTestsSmokeTest(mask[false]): success [23ms]
test Double128VectorTests.maskXorDouble128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Double128VectorTests.maskXorDouble128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double128VectorTests.maxDouble128VectorTests(double[-i * 5], double[i * 5]): success [6ms]
test Double128VectorTests.maxDouble128VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.maxDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.maxDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.maxDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.maxDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [6ms]
test Double128VectorTests.maxDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.maxDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.maxDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.maxDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [37ms]
test Double128VectorTests.minDouble128VectorTests(double[-i * 5], double[i * 5]): success [8ms]
test Double128VectorTests.minDouble128VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.minDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.minDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.minDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.minDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [6ms]
test Double128VectorTests.minDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.minDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.minDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.minDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.mulDouble128VectorTests(double[-i * 5], double[i * 5]): success [6ms]
test Double128VectorTests.mulDouble128VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.mulDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.mulDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.mulDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [8ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [6ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double128VectorTests.mulDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double128VectorTests.negDouble128VectorTests(double[-i * 5]): success [15ms]
test Double128VectorTests.negDouble128VectorTests(double[i * 5]): success [47ms]
test Double128VectorTests.negDouble128VectorTests(double[i + 1]): success [0ms]
test Double128VectorTests.negDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.negDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.negDouble128VectorTests(double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.powDouble128VectorTests(double[-i * 5], double[i * 5]): success [26ms]
test Double128VectorTests.powDouble128VectorTests(double[-i * 5], double[i + 1]): success [73ms]
test Double128VectorTests.powDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double128VectorTests.powDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [2ms]
test Double128VectorTests.powDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [2ms]
test Double128VectorTests.powDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [14ms]
test Double128VectorTests.powDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.powDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.powDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.powDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.shuffleEqualsDouble128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [697ms]
test Double128VectorTests.shuffleEqualsDouble128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [47ms]
test Double128VectorTests.shuffleMiscellaneousDouble128VectorTestsSmokeTest(shuffle[random]): success [19ms]
test Double128VectorTests.shuffleTest(): success [828ms]
test Double128VectorTests.shuffleToStringDouble128VectorTestsSmokeTest(shuffle[random]): success [44ms]
test Double128VectorTests.sliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[i * 5]): success [903ms]
test Double128VectorTests.sliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[i + 1]): success [394ms]
test Double128VectorTests.sliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [217ms]
test Double128VectorTests.sliceBinaryDouble128VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [163ms]
test Double128VectorTests.sliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [149ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [244ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [438ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [150ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [149ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [149ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [174ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [214ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [148ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [275ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [146ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [145ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [146ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [144ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [145ms]
test Double128VectorTests.sliceDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [204ms]
test Double128VectorTests.sliceUnaryDouble128VectorTests(double[-i * 5]): success [334ms]
test Double128VectorTests.sliceUnaryDouble128VectorTests(double[i * 5]): success [387ms]
test Double128VectorTests.sliceUnaryDouble128VectorTests(double[i + 1]): success [139ms]
test Double128VectorTests.sliceUnaryDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [156ms]
test Double128VectorTests.sliceUnaryDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [146ms]
test Double128VectorTests.sliceUnaryDouble128VectorTests(double[cornerCaseValue(i)]): success [148ms]
test Double128VectorTests.smokeTest1(): success [0ms]
test Double128VectorTests.smokeTest2(): success [46ms]
test Double128VectorTests.sqrtDouble128VectorTests(double[-i * 5]): success [15ms]
test Double128VectorTests.sqrtDouble128VectorTests(double[i * 5]): success [46ms]
test Double128VectorTests.sqrtDouble128VectorTests(double[i + 1]): success [0ms]
test Double128VectorTests.sqrtDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.sqrtDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.sqrtDouble128VectorTests(double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.subDouble128VectorTests(double[-i * 5], double[i * 5]): success [7ms]
test Double128VectorTests.subDouble128VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.subDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.subDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.subDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [7ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [38ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [7ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.subDouble128VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double128VectorTests.subDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double128VectorTests.toIntArrayDouble128VectorTestsSmokeTest(double[-i * 5]): success [6ms]
test Double128VectorTests.toIntArrayDouble128VectorTestsSmokeTest(double[i * 5]): success [6ms]
test Double128VectorTests.toIntArrayDouble128VectorTestsSmokeTest(double[i + 1]): success [6ms]
test Double128VectorTests.toIntArrayDouble128VectorTestsSmokeTest(double[intCornerCaseValue(i)]): success [6ms]
test Double128VectorTests.toLongArrayDouble128VectorTestsSmokeTest(double[-i * 5]): success [0ms]
test Double128VectorTests.toLongArrayDouble128VectorTestsSmokeTest(double[i * 5]): success [4ms]
test Double128VectorTests.toLongArrayDouble128VectorTestsSmokeTest(double[i + 1]): success [0ms]
test Double128VectorTests.toLongArrayDouble128VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [0ms]
test Double128VectorTests.toStringDouble128VectorTestsSmokeTest(double[-i * 5]): success [2ms]
test Double128VectorTests.toStringDouble128VectorTestsSmokeTest(double[i * 5]): success [1ms]
test Double128VectorTests.toStringDouble128VectorTestsSmokeTest(double[i + 1]): success [8ms]
test Double128VectorTests.toStringDouble128VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [20ms]
test Double128VectorTests.toStringDouble128VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [8ms]
test Double128VectorTests.toStringDouble128VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [20ms]
test Double128VectorTests.unsliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[i * 5]): success [357ms]
test Double128VectorTests.unsliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[i + 1]): success [317ms]
test Double128VectorTests.unsliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [312ms]
test Double128VectorTests.unsliceBinaryDouble128VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [138ms]
test Double128VectorTests.unsliceBinaryDouble128VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [139ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [787ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [611ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [291ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [313ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [282ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [233ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [281ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [234ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [281ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [451ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [298ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [233ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [278ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [279ms]
test Double128VectorTests.unsliceDouble128VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [249ms]
test Double128VectorTests.unsliceUnaryDouble128VectorTests(double[-i * 5]): success [331ms]
test Double128VectorTests.unsliceUnaryDouble128VectorTests(double[i * 5]): success [282ms]
test Double128VectorTests.unsliceUnaryDouble128VectorTests(double[i + 1]): success [150ms]
test Double128VectorTests.unsliceUnaryDouble128VectorTests(double[0.01 + (i / (i + 1))]): success [138ms]
test Double128VectorTests.unsliceUnaryDouble128VectorTests(AbstractVectorTest$1@25daae7f): success [138ms]
test Double128VectorTests.unsliceUnaryDouble128VectorTests(double[cornerCaseValue(i)]): success [215ms]
test Double128VectorTests.viewAsFloatingLanesTest(): success [22ms]
test Double128VectorTests.viewAsIntegeralLanesTest(): success [25ms]
test Double128VectorTests.withDouble128VectorTests(double[-i * 5], double[i * 5]): success [21ms]
test Double128VectorTests.withDouble128VectorTests(double[-i * 5], double[i + 1]): success [90ms]
test Double128VectorTests.withDouble128VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double128VectorTests.withDouble128VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double128VectorTests.withDouble128VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]

===============================================
jdk/incubator/vector/Double128VectorTests.java
Total tests run: 3209, Passes: 3208, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/9 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Double128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Double128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Double128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Double128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Double128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Double128VectorTests.d/testng.0.jta jdk/incubator/vector/Double128VectorTests.java false Double128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/LongMaxVectorTests.java
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short128VectorTests.java
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short256VectorTests.java
Passed: jdk/incubator/vector/UnalignedHeapTest.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short64VectorTests.java
Passed: jdk/incubator/vector/Float512VectorTests.java
Passed: jdk/incubator/vector/ShortMaxVectorTests.java
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/VectorMathTest.java
TEST: jdk/incubator/vector/Long512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.873 seconds
messages:
command: build Long512VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 03:01:30 IST 2025
Test directory:
  compile: Long512VectorTests
finished: Thu Apr 17 03:01:31 IST 2025
elapsed time (seconds): 0.873

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.873 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long512VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 03:01:30 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 10
Process id: 2128604
finished: Thu Apr 17 03:01:31 IST 2025
elapsed time (seconds): 0.873
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Long512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Long512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Long512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Long512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long512VectorTests 
TIME:   180.748 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Long512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Long512VectorTests 
started: Thu Apr 17 03:01:31 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2131985
finished: Thu Apr 17 03:04:31 IST 2025
elapsed time (seconds): 180.748
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 1982961240106531144
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=1982961240106531144" to command line.
test Long512VectorTests.ABSLong512VectorTests(long[-i * 5]): success [474ms]
test Long512VectorTests.ABSLong512VectorTests(long[i * 5]): success [418ms]
test Long512VectorTests.ABSLong512VectorTests(long[i + 1]): success [9ms]
test Long512VectorTests.ABSLong512VectorTests(long[cornerCaseValue(i)]): success [6ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[-i * 5], mask[i % 2]): success [182ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i * 5], mask[i % 2]): success [102ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i + 1], mask[i % 2]): success [82ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [7ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[-i * 5], mask[true]): success [85ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i * 5], mask[true]): success [1ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i + 1], mask[true]): success [1ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[-i * 5], mask[false]): success [2ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i * 5], mask[false]): success [6ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.ABSMaskedLong512VectorTests(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.ADDLong512VectorTests(long[-i * 5], long[i * 5]): success [81ms]
test Long512VectorTests.ADDLong512VectorTests(long[-i * 5], long[i + 1]): success [262ms]
test Long512VectorTests.ADDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i * 5]): success [15ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [20ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long512VectorTests.ADDLong512VectorTestsBroadcastMaskedLongSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [245ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [81ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [11ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [87ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [3ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [3ms]
test Long512VectorTests.ADDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [9ms]
test Long512VectorTests.ADDReduceLong512VectorTests(long[-i * 5]): success [108ms]
test Long512VectorTests.ADDReduceLong512VectorTests(long[i * 5]): success [3ms]
test Long512VectorTests.ADDReduceLong512VectorTests(long[i + 1]): success [67ms]
test Long512VectorTests.ADDReduceLong512VectorTests(long[cornerCaseValue(i)]): success [2ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[-i * 5], mask[i % 2]): success [73ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i * 5], mask[i % 2]): success [3ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i + 1], mask[i % 2]): success [85ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [49ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[-i * 5], mask[true]): success [1ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i * 5], mask[true]): success [1ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i + 1], mask[true]): success [1ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[-i * 5], mask[false]): success [1ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[i + 1], mask[false]): success [2ms]
test Long512VectorTests.ADDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.ADDReduceLongLong512VectorTests(long[-i * 5]): success [5ms]
test Long512VectorTests.ADDReduceLongLong512VectorTests(long[i * 5]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTests(long[i + 1]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTests(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[-i * 5], mask[i % 2]): success [4ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i * 5], mask[i % 2]): success [1ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i + 1], mask[i % 2]): success [2ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [16ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.ADDReduceLongLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.ANDLong512VectorTests(long[-i * 5], long[i * 5]): success [299ms]
test Long512VectorTests.ANDLong512VectorTests(long[-i * 5], long[i + 1]): success [63ms]
test Long512VectorTests.ANDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [4ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [8ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [1ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [18ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [1ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [8ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [4ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [5ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [76ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.ANDLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long512VectorTests.ANDReduceLong512VectorTests(long[-i * 5]): success [153ms]
test Long512VectorTests.ANDReduceLong512VectorTests(long[i * 5]): success [4ms]
test Long512VectorTests.ANDReduceLong512VectorTests(long[i + 1]): success [64ms]
test Long512VectorTests.ANDReduceLong512VectorTests(long[cornerCaseValue(i)]): success [2ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[-i * 5], mask[i % 2]): success [23ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i * 5], mask[i % 2]): success [4ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i + 1], mask[i % 2]): success [84ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[-i * 5], mask[true]): success [2ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i * 5], mask[true]): success [3ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i + 1], mask[true]): success [30ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[true]): success [3ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[-i * 5], mask[false]): success [3ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i * 5], mask[false]): success [3ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[i + 1], mask[false]): success [3ms]
test Long512VectorTests.ANDReduceLong512VectorTestsMasked(long[cornerCaseValue(i)], mask[false]): success [5ms]
test Long512VectorTests.AND_NOTLong512VectorTests(long[-i * 5], long[i * 5]): success [304ms]
test Long512VectorTests.AND_NOTLong512VectorTests(long[-i * 5], long[i + 1]): success [201ms]
test Long512VectorTests.AND_NOTLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [62ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [100ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [98ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [63ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [63ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [189ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [92ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [35ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [35ms]
test Long512VectorTests.AND_NOTLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [35ms]
test Long512VectorTests.ASHRLong512VectorTests(long[-i * 5], long[i * 5]): success [107ms]
test Long512VectorTests.ASHRLong512VectorTests(long[-i * 5], long[i + 1]): success [143ms]
test Long512VectorTests.ASHRLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [45ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [91ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [81ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [34ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [34ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [133ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [34ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [34ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [38ms]
test Long512VectorTests.ASHRLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [36ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShift(long[-i * 5], long[i * 5]): success [131ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShift(long[-i * 5], long[i + 1]): success [250ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShift(long[-i * 5], long[cornerCaseValue(i)]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftConst(long[-i * 5]): success [6ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftConst(long[i * 5]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftConst(long[i + 1]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftConst(long[cornerCaseValue(i)]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [16ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [23ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[true]): success [61ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[i + 1], mask[false]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[i % 2]): success [11ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i * 5], mask[i % 2]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i + 1], mask[i % 2]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[true]): success [54ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i * 5], mask[true]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i + 1], mask[true]): success [2ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[true]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[-i * 5], mask[false]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.ASHRLong512VectorTestsScalarShiftMaskedConst(long[cornerCaseValue(i)], mask[false]): success [2ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i * 5], long[-i * 5]): success [15ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i * 5], long[i * 5]): success [81ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i * 5], long[i + 1]): success [7ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [7ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i + 1], long[-i * 5]): success [134ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i + 1], long[i * 5]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i + 1], long[i + 1]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [6ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [5ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [5ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [5ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [554ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [1ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [1ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [1ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [4ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [7ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [1ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsAltBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[i % 2]): success [7ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[true]): success [1ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[-i * 5]): success [4ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[-i * 5]): success [2ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i * 5]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.BITWISE_BLENDLong512VectorTests

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

uccess [0ms]
test Long512VectorTests.bitwiseBlendLong512VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.bitwiseBlendLong512VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[-i * 5]): success [0ms]
test Long512VectorTests.bitwiseBlendLong512VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i * 5]): success [0ms]
test Long512VectorTests.bitwiseBlendLong512VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long512VectorTests.bitwiseBlendLong512VectorTestsDoubleBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.bitwiseDivByZeroSmokeTest(): success [9ms]
test Long512VectorTests.blendLong512VectorTests(long[-i * 5], long[i * 5], mask[i % 2]): success [21ms]
test Long512VectorTests.blendLong512VectorTests(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long512VectorTests.blendLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Long512VectorTests.blendLong512VectorTests(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long512VectorTests.blendLong512VectorTests(long[-i * 5], long[i + 1], mask[true]): success [68ms]
test Long512VectorTests.blendLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long512VectorTests.blendLong512VectorTests(long[-i * 5], long[i * 5], mask[false]): success [1ms]
test Long512VectorTests.blendLong512VectorTests(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.blendLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.compressLong512VectorTests(long[-i * 5], mask[i % 2]): success [129ms]
test Long512VectorTests.compressLong512VectorTests(long[i * 5], mask[i % 2]): success [89ms]
test Long512VectorTests.compressLong512VectorTests(long[i + 1], mask[i % 2]): success [37ms]
test Long512VectorTests.compressLong512VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [37ms]
test Long512VectorTests.compressLong512VectorTests(long[-i * 5], mask[true]): success [152ms]
test Long512VectorTests.compressLong512VectorTests(long[i * 5], mask[true]): success [71ms]
test Long512VectorTests.compressLong512VectorTests(long[i + 1], mask[true]): success [2ms]
test Long512VectorTests.compressLong512VectorTests(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long512VectorTests.compressLong512VectorTests(long[-i * 5], mask[false]): success [3ms]
test Long512VectorTests.compressLong512VectorTests(long[i * 5], mask[false]): success [3ms]
test Long512VectorTests.compressLong512VectorTests(long[i + 1], mask[false]): success [3ms]
test Long512VectorTests.compressLong512VectorTests(long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long512VectorTests.divLong512VectorTests(long[-i * 5], long[i * 5]): success [88ms]
test Long512VectorTests.divLong512VectorTests(long[-i * 5], long[i + 1]): success [166ms]
test Long512VectorTests.divLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [75ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [9ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [2ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [159ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [2ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [1ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [2ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [1ms]
test Long512VectorTests.divLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [1ms]
test Long512VectorTests.divLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [8ms]
test Long512VectorTests.divLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [1ms]
test Long512VectorTests.divLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [1ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [164ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [316ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [170ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [149ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [313ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [149ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [148ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [148ms]
test Long512VectorTests.divLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [148ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[i]): success [122ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[i - length / 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[i + 1]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[i - 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[zigZag(i)]): success [43ms]
test Long512VectorTests.eqLong512VectorTests(long[i], long[cornerCaseValue(i)]): success [46ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[i]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[i - length / 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[i + 1]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[i - 2]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[zigZag(i)]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[i]): success [48ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[i - length / 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[i + 1]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[i - 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[zigZag(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[i]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[i - length / 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[i + 1]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[i - 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[zigZag(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[i]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[i - length / 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[i + 1]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[i - 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[zigZag(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [39ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[i]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [47ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[i]): success [1ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[i - 2]): success [1ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.eqLong512VectorTestsBroadcastMaskedSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.expandLong512VectorTests(long[-i * 5], mask[i % 2]): success [135ms]
test Long512VectorTests.expandLong512VectorTests(long[i * 5], mask[i % 2]): success [57ms]
test Long512VectorTests.expandLong512VectorTests(long[i + 1], mask[i % 2]): success [37ms]
test Long512VectorTests.expandLong512VectorTests(long[cornerCaseValue(i)], mask[i % 2]): success [37ms]
test Long512VectorTests.expandLong512VectorTests(long[-i * 5], mask[true]): success [78ms]
test Long512VectorTests.expandLong512VectorTests(long[i * 5], mask[true]): success [46ms]
test Long512VectorTests.expandLong512VectorTests(long[i + 1], mask[true]): success [2ms]
test Long512VectorTests.expandLong512VectorTests(long[cornerCaseValue(i)], mask[true]): success [2ms]
test Long512VectorTests.expandLong512VectorTests(long[-i * 5], mask[false]): success [3ms]
test Long512VectorTests.expandLong512VectorTests(long[i * 5], mask[false]): success [3ms]
test Long512VectorTests.expandLong512VectorTests(long[i + 1], mask[false]): success [3ms]
test Long512VectorTests.expandLong512VectorTests(long[cornerCaseValue(i)], mask[false]): success [3ms]
test Long512VectorTests.getLong512VectorTests(long[-i * 5]): success [4ms]
test Long512VectorTests.getLong512VectorTests(long[i * 5]): success [4ms]
test Long512VectorTests.getLong512VectorTests(long[i + 1]): success [3ms]
test Long512VectorTests.getLong512VectorTests(long[cornerCaseValue(i)]): success [7ms]
test Long512VectorTests.hashCodeLong512VectorTestsSmokeTest(long[-i * 5]): success [31ms]
test Long512VectorTests.hashCodeLong512VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long512VectorTests.hashCodeLong512VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long512VectorTests.hashCodeLong512VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(0): success [62ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(-1): success [1ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(1): success [14ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(2): success [1ms]
test Long512VectorTests.indexInRangeLong512VectorTestsSmokeTest(-2): success [1ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(0): success [1ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(-1): success [1ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(1): success [1ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(2): success [2ms]
test Long512VectorTests.indexInRangeLongLong512VectorTestsSmokeTest(-2): success [1ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(0): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(1): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(32): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(37): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(1024): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(1025): success [0ms]
test Long512VectorTests.loopBoundLong512VectorTestsSmokeTest(1029): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(0): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(1): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(32): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(37): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(1024): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(1025): success [0ms]
test Long512VectorTests.loopBoundLongLong512VectorTestsSmokeTest(1029): success [0ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[i]): success [122ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[i - length / 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[i + 1]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[i - 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[zigZag(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[i]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[i - length / 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[i + 1]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[i - 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[zigZag(i)]): success [39ms]
test Long512VectorTests.ltLong512VectorTests(long[i - length / 2], long[cornerCaseValue(i)]): success [53ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[i]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[i - length / 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[i + 1]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[i - 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[zigZag(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i + 1], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[i]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[i - length / 2]): success [39ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[i + 1]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[i - 2]): success [39ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[zigZag(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[i - 2], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[i]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[i - length / 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[i + 1]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[i - 2]): success [39ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[zigZag(i)]): success [39ms]
test Long512VectorTests.ltLong512VectorTests(long[zigZag(i)], long[cornerCaseValue(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[i]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[i - length / 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[i + 1]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[i - 2]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[zigZag(i)]): success [40ms]
test Long512VectorTests.ltLong512VectorTests(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [57ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[i]): success [1ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i + 1]): success [1ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - length / 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[zigZag(i)]): success [1ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i + 1], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[i - 2], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[zigZag(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - length / 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i + 1]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[i - 2]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[zigZag(i)]): success [0ms]
test Long512VectorTests.ltLong512VectorTestsBroadcastSmokeTest(long[cornerCaseValue(i)], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.maskAndLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Long512VectorTests.maskAndLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskAndNotLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [4ms]
test Long512VectorTests.maskAndNotLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskCompressLong512VectorTestsSmokeTest(mask[i % 2]): success [490ms]
test Long512VectorTests.maskCompressLong512VectorTestsSmokeTest(mask[true]): success [223ms]
test Long512VectorTests.maskCompressLong512VectorTestsSmokeTest(mask[false]): success [218ms]
test Long512VectorTests.maskEqLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long512VectorTests.maskEqLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskEqualsLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Long512VectorTests.maskEqualsLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskFirstTrueLong512VectorTestsSmokeTest(mask[i % 2]): success [48ms]
test Long512VectorTests.maskFirstTrueLong512VectorTestsSmokeTest(mask[true]): success [89ms]
test Long512VectorTests.maskFirstTrueLong512VectorTestsSmokeTest(mask[false]): success [39ms]
test Long512VectorTests.maskFromToLongLong512VectorTestsSmokeTest(-1): success [55ms]
test Long512VectorTests.maskFromToLongLong512VectorTestsSmokeTest(0): success [0ms]
test Long512VectorTests.maskFromToLongLong512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Long512VectorTests.maskFromToLongLong512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Long512VectorTests.maskHashCodeLong512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Long512VectorTests.maskHashCodeLong512VectorTestsSmokeTest(mask[true]): success [0ms]
test Long512VectorTests.maskHashCodeLong512VectorTestsSmokeTest(mask[false]): success [0ms]
test Long512VectorTests.maskLastTrueLong512VectorTestsSmokeTest(mask[i % 2]): success [100ms]
test Long512VectorTests.maskLastTrueLong512VectorTestsSmokeTest(mask[true]): success [79ms]
test Long512VectorTests.maskLastTrueLong512VectorTestsSmokeTest(mask[false]): success [64ms]
test Long512VectorTests.maskOrLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test Long512VectorTests.maskOrLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maskTrueCountLong512VectorTestsSmokeTest(mask[i % 2]): success [47ms]
test Long512VectorTests.maskTrueCountLong512VectorTestsSmokeTest(mask[true]): success [93ms]
test Long512VectorTests.maskTrueCountLong512VectorTestsSmokeTest(mask[false]): success [39ms]
test Long512VectorTests.maskXorLong512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Long512VectorTests.maskXorLong512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Long512VectorTests.maxLong512VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.maxLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.maxLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [8ms]
test Long512VectorTests.maxLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.maxLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.maxLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.minLong512VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.minLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.minLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.minLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.minLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.minLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.mulLong512VectorTests(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.mulLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.mulLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [4ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.mulLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.negLong512VectorTests(long[-i * 5]): success [7ms]
test Long512VectorTests.negLong512VectorTests(long[i * 5]): success [10ms]
test Long512VectorTests.negLong512VectorTests(long[i + 1]): success [2ms]
test Long512VectorTests.negLong512VectorTests(long[cornerCaseValue(i)]): success [1ms]
test Long512VectorTests.notLong512VectorTests(long[-i * 5]): success [37ms]
test Long512VectorTests.notLong512VectorTests(long[i * 5]): success [48ms]
test Long512VectorTests.notLong512VectorTests(long[i + 1]): success [32ms]
test Long512VectorTests.notLong512VectorTests(long[cornerCaseValue(i)]): success [32ms]
test Long512VectorTests.orLong512VectorTests(long[-i * 5], long[i * 5]): success [9ms]
test Long512VectorTests.orLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.orLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.orLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.orLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.orLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.shuffleEqualsLong512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [423ms]
test Long512VectorTests.shuffleEqualsLong512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [31ms]
test Long512VectorTests.shuffleMiscellaneousLong512VectorTestsSmokeTest(shuffle[random]): success [7ms]
test Long512VectorTests.shuffleTest(): success [613ms]
test Long512VectorTests.shuffleToStringLong512VectorTestsSmokeTest(shuffle[random]): success [32ms]
test Long512VectorTests.sliceBinaryLong512VectorTestsBinary(long[-i * 5], long[i * 5]): success [473ms]
test Long512VectorTests.sliceBinaryLong512VectorTestsBinary(long[-i * 5], long[i + 1]): success [868ms]
test Long512VectorTests.sliceBinaryLong512VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [229ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [277ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [451ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [266ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [264ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [824ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [265ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [264ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [265ms]
test Long512VectorTests.sliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [265ms]
test Long512VectorTests.sliceUnaryLong512VectorTests(long[-i * 5]): success [231ms]
test Long512VectorTests.sliceUnaryLong512VectorTests(long[i * 5]): success [489ms]
test Long512VectorTests.sliceUnaryLong512VectorTests(long[i + 1]): success [218ms]
test Long512VectorTests.sliceUnaryLong512VectorTests(long[cornerCaseValue(i)]): success [221ms]
test Long512VectorTests.smokeTest1(): success [0ms]
test Long512VectorTests.smokeTest2(): success [43ms]
test Long512VectorTests.subLong512VectorTests(long[-i * 5], long[i * 5]): success [4ms]
test Long512VectorTests.subLong512VectorTests(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.subLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastMaskedSmokeTest(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [23ms]
test Long512VectorTests.subLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i * 5]): success [5ms]
test Long512VectorTests.subLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[i + 1]): success [0ms]
test Long512VectorTests.subLong512VectorTestsBroadcastSmokeTest(long[-i * 5], long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [5ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [0ms]
test Long512VectorTests.subLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [0ms]
test Long512VectorTests.toDoubleArrayLong512VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long512VectorTests.toDoubleArrayLong512VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long512VectorTests.toDoubleArrayLong512VectorTestsSmokeTest(long[i + 1]): success [5ms]
test Long512VectorTests.toDoubleArrayLong512VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.toIntArrayLong512VectorTestsSmokeTest(long[-i * 5]): success [5ms]
test Long512VectorTests.toIntArrayLong512VectorTestsSmokeTest(long[i * 5]): success [7ms]
test Long512VectorTests.toIntArrayLong512VectorTestsSmokeTest(long[i + 1]): success [4ms]
test Long512VectorTests.toIntArrayLong512VectorTestsSmokeTest(long[intCornerCaseValue(i)]): success [4ms]
test Long512VectorTests.toLongArrayLong512VectorTestsSmokeTest(long[-i * 5]): success [0ms]
test Long512VectorTests.toLongArrayLong512VectorTestsSmokeTest(long[i * 5]): success [0ms]
test Long512VectorTests.toLongArrayLong512VectorTestsSmokeTest(long[i + 1]): success [0ms]
test Long512VectorTests.toLongArrayLong512VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.toStringLong512VectorTestsSmokeTest(long[-i * 5]): success [1ms]
test Long512VectorTests.toStringLong512VectorTestsSmokeTest(long[i * 5]): success [6ms]
test Long512VectorTests.toStringLong512VectorTestsSmokeTest(long[i + 1]): success [44ms]
test Long512VectorTests.toStringLong512VectorTestsSmokeTest(long[cornerCaseValue(i)]): success [0ms]
test Long512VectorTests.unsliceBinaryLong512VectorTestsBinary(long[-i * 5], long[i * 5]): success [238ms]
test Long512VectorTests.unsliceBinaryLong512VectorTestsBinary(long[-i * 5], long[i + 1]): success [605ms]
test Long512VectorTests.unsliceBinaryLong512VectorTestsBinary(long[-i * 5], long[cornerCaseValue(i)]): success [223ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[i % 2]): success [492ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[i % 2]): success [1401ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[i % 2]): success [459ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[true]): success [461ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[true]): success [1968ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[true]): success [469ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i * 5], mask[false]): success [488ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[i + 1], mask[false]): success [495ms]
test Long512VectorTests.unsliceLong512VectorTestsMasked(long[-i * 5], long[cornerCaseValue(i)], mask[false]): success [475ms]
test Long512VectorTests.unsliceUnaryLong512VectorTests(long[-i * 5]): success [231ms]
test Long512VectorTests.unsliceUnaryLong512VectorTests(long[i * 5]): success [528ms]
test Long512VectorTests.unsliceUnaryLong512VectorTests(long[i + 1]): success [226ms]
test Long512VectorTests.unsliceUnaryLong512VectorTests(long[cornerCaseValue(i)]): success [225ms]
test Long512VectorTests.viewAsFloatingLanesTest(): success [201ms]
test Long512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Long512VectorTests.withLong512VectorTests(long[-i * 5], long[i * 5]): success [11ms]
test Long512VectorTests.withLong512VectorTests(long[-i * 5], long[i + 1]): success [24ms]
test Long512VectorTests.withLong512VectorTests(long[-i * 5], long[cornerCaseValue(i)]): success [10ms]

===============================================
jdk/incubator/vector/Long512VectorTests.java
Total tests run: 3321, Passes: 3320, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Long512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Long512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Long512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/Long512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Long512VectorTests.d/testng.0.jta jdk/incubator/vector/Long512VectorTests.java false Long512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/Long128VectorTests.java
Passed: jdk/incubator/vector/Int512VectorTests.java
Passed: jdk/incubator/vector/Float64VectorTests.java
Passed: jdk/incubator/vector/Double64VectorTests.java
Passed: jdk/incubator/vector/Int64VectorTests.java
Passed: jdk/incubator/vector/Vector512ConversionTests.java
Passed: jdk/incubator/vector/Long64VectorTests.java
Passed: jdk/incubator/vector/Vector256ConversionTests.java
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#id0
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#Z
TEST: jdk/incubator/vector/Short512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.796 seconds
messages:
command: build Short512VectorTests
reason: Named class compiled on demand
started: Thu Apr 17 03:02:49 IST 2025
Test directory:
  compile: Short512VectorTests
finished: Thu Apr 17 03:02:50 IST 2025
elapsed time (seconds): 0.796

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.796 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 03:02:49 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 1
Process id: 2128025
finished: Thu Apr 17 03:02:50 IST 2025
elapsed time (seconds): 0.796
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Short512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/7 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Short512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Short512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Short512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short512VectorTests 
TIME:   507.392 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Short512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Short512VectorTests 
started: Thu Apr 17 03:02:50 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 2132790
finished: Thu Apr 17 03:11:17 IST 2025
elapsed time (seconds): 507.392
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: -103255463850944452
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-103255463850944452" to command line.
test Short512VectorTests.ABSMaskedShort512VectorTests(short[-i * 5], mask[i % 2]): success [492ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i * 5], mask[i % 2]): success [511ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i + 1], mask[i % 2]): success [18ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [11ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[-i * 5], mask[true]): success [143ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i + 1], mask[true]): success [36ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[-i * 5], mask[false]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.ABSMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.ABSShort512VectorTests(short[-i * 5]): success [258ms]
test Short512VectorTests.ABSShort512VectorTests(short[i * 5]): success [46ms]
test Short512VectorTests.ABSShort512VectorTests(short[i + 1]): success [3ms]
test Short512VectorTests.ABSShort512VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[-i * 5]): success [66ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[i * 5]): success [2ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[i + 1]): success [21ms]
test Short512VectorTests.ADDReduceLongShort512VectorTests(short[cornerCaseValue(i)]): success [4ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [12ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i + 1], mask[true]): success [25ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.ADDReduceLongShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [36ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[-i * 5]): success [225ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[i * 5]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[i + 1]): success [76ms]
test Short512VectorTests.ADDReduceShort512VectorTests(short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [60ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [99ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [34ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[-i * 5], mask[true]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i + 1], mask[true]): success [30ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ADDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.ADDShort512VectorTests(short[-i * 5], short[i * 5]): success [128ms]
test Short512VectorTests.ADDShort512VectorTests(short[-i * 5], short[i + 1]): success [638ms]
test Short512VectorTests.ADDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [5ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5]): success [15ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [23ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [8ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [2ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsBroadcastMaskedLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [536ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [115ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [9ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [9ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [136ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [5ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [4ms]
test Short512VectorTests.ADDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [5ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[-i * 5]): success [149ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[i * 5]): success [6ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[i + 1]): success [77ms]
test Short512VectorTests.ANDReduceShort512VectorTests(short[cornerCaseValue(i)]): success [4ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[-i * 5], mask[i % 2]): success [27ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i + 1], mask[i % 2]): success [100ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[-i * 5], mask[true]): success [4ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i + 1], mask[true]): success [27ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[-i * 5], mask[false]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i * 5], mask[false]): success [4ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ANDReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.ANDShort512VectorTests(short[-i * 5], short[i * 5]): success [840ms]
test Short512VectorTests.ANDShort512VectorTests(short[-i * 5], short[i + 1]): success [236ms]
test Short512VectorTests.ANDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [7ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [8ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [25ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [12ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [4ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [7ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [8ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [160ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [5ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ANDShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [7ms]
test Short512VectorTests.AND_NOTShort512VectorTests(short[-i * 5], short[i * 5]): success [765ms]
test Short512VectorTests.AND_NOTShort512VectorTests(short[-i * 5], short[i + 1]): success [504ms]
test Short512VectorTests.AND_NOTShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [74ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [112ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [159ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [76ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [75ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [272ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [76ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [75ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [75ms]
test Short512VectorTests.AND_NOTShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [88ms]
test Short512VectorTests.ASHRShort512VectorTests(short[-i * 5], short[i * 5]): success [189ms]
test Short512VectorTests.ASHRShort512VectorTests(short[-i * 5], short[i + 1]): success [453ms]
test Short512VectorTests.ASHRShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [72ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [344ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [187ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [73ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [73ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [271ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [73ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [73ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [73ms]
test Short512VectorTests.ASHRShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [72ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShift(short[-i * 5], short[i * 5]): success [158ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShift(short[-i * 5], short[i + 1]): success [583ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShift(short[-i * 5], short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[-i * 5]): success [159ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[i * 5]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[i + 1]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftConst(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [121ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [65ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[true]): success [90ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[i % 2]): success [11ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i * 5], mask[i % 2]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[true]): success [78ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i * 5], mask[true]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i + 1], mask[true]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[-i * 5], mask[false]): success [2ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.ASHRShort512VectorTestsScalarShiftMaskedConst(short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [15ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [238ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [293ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [8ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [8ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [8ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [8ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [9ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [321ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [106ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [72ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[i % 2]): success [8ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[true]): success [2ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[true]): success [46ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[true]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[-i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[-i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[i + 1], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.BITWISE_BLENDShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)], mask[false]): success [1ms]
test Short512VectorTests.BITWISE_BL

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

]): success [2ms]
test Short512VectorTests.XORReduceShort512VectorTestsMasked(short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.XORShort512VectorTests(short[-i * 5], short[i * 5]): success [11ms]
test Short512VectorTests.XORShort512VectorTests(short[-i * 5], short[i + 1]): success [4ms]
test Short512VectorTests.XORShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [10ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [121ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [4ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [3ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3ms]
test Short512VectorTests.XORShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [3ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[-i * 5], mask[i % 2]): success [448ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i * 5], mask[i % 2]): success [456ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i + 1], mask[i % 2]): success [391ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [388ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[-i * 5], mask[true]): success [541ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i * 5], mask[true]): success [386ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i + 1], mask[true]): success [391ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [386ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[-i * 5], mask[false]): success [390ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i * 5], mask[false]): success [386ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[i + 1], mask[false]): success [388ms]
test Short512VectorTests.ZOMOMaskedShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [385ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[-i * 5]): success [341ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[i * 5]): success [323ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[i + 1]): success [262ms]
test Short512VectorTests.ZOMOShort512VectorTests(short[cornerCaseValue(i)]): success [262ms]
test Short512VectorTests.ZeroShort512VectorTests(short[-i * 5]): success [63ms]
test Short512VectorTests.ZeroShort512VectorTests(short[i * 5]): success [79ms]
test Short512VectorTests.ZeroShort512VectorTests(short[i + 1]): success [62ms]
test Short512VectorTests.ZeroShort512VectorTests(short[cornerCaseValue(i)]): success [62ms]
test Short512VectorTests.absShort512VectorTests(short[-i * 5]): success [16ms]
test Short512VectorTests.absShort512VectorTests(short[i * 5]): success [12ms]
test Short512VectorTests.absShort512VectorTests(short[i + 1]): success [3ms]
test Short512VectorTests.absShort512VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.addShort512VectorTests(short[-i * 5], short[i * 5]): success [238ms]
test Short512VectorTests.addShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.addShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [365ms]
test Short512VectorTests.addShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [31ms]
test Short512VectorTests.addShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.addShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.allTrueShort512VectorTests(boolean[i % 2]): success [21ms]
test Short512VectorTests.allTrueShort512VectorTests(boolean[i % 5]): success [23ms]
test Short512VectorTests.andShort512VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.andShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.andShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.andShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.andShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.andShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.anyTrueShort512VectorTests(boolean[i % 2]): success [12ms]
test Short512VectorTests.anyTrueShort512VectorTests(boolean[i % 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[-i * 5]): success [5ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [54ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [77ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [72ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsAltBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [7ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [71ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[-i * 5]): success [8ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i * 5]): success [73ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[-i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[i + 1], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[-i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i * 5]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[i + 1]): success [1ms]
test Short512VectorTests.bitwiseBlendShort512VectorTestsDoubleBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.bitwiseDivByZeroSmokeTest(): success [12ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i * 5], mask[i % 2]): success [29ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i + 1], mask[i % 2]): success [4ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i * 5], mask[true]): success [4ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i + 1], mask[true]): success [115ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i * 5], mask[false]): success [2ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[i + 1], mask[false]): success [2ms]
test Short512VectorTests.blendShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [2ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [94ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [166ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [87ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [67ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [172ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [71ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [76ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [67ms]
test Short512VectorTests.blendShort512VectorTestsBroadcastLongSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [67ms]
test Short512VectorTests.compressShort512VectorTests(short[-i * 5], mask[i % 2]): success [1349ms]
test Short512VectorTests.compressShort512VectorTests(short[i * 5], mask[i % 2]): success [221ms]
test Short512VectorTests.compressShort512VectorTests(short[i + 1], mask[i % 2]): success [164ms]
test Short512VectorTests.compressShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [161ms]
test Short512VectorTests.compressShort512VectorTests(short[-i * 5], mask[true]): success [201ms]
test Short512VectorTests.compressShort512VectorTests(short[i * 5], mask[true]): success [754ms]
test Short512VectorTests.compressShort512VectorTests(short[i + 1], mask[true]): success [4ms]
test Short512VectorTests.compressShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.compressShort512VectorTests(short[-i * 5], mask[false]): success [12ms]
test Short512VectorTests.compressShort512VectorTests(short[i * 5], mask[false]): success [12ms]
test Short512VectorTests.compressShort512VectorTests(short[i + 1], mask[false]): success [12ms]
test Short512VectorTests.compressShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [12ms]
test Short512VectorTests.divShort512VectorTests(short[-i * 5], short[i * 5]): success [215ms]
test Short512VectorTests.divShort512VectorTests(short[-i * 5], short[i + 1]): success [439ms]
test Short512VectorTests.divShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [202ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [16ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [496ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [4ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [6ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [4ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [20ms]
test Short512VectorTests.divShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [5ms]
test Short512VectorTests.divShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [13ms]
test Short512VectorTests.divShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [3ms]
test Short512VectorTests.divShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [423ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [804ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [403ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [402ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): failure [761ms]
java.lang.ArithmeticException: / by zero
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.lambda$binaryOperationsMF$7(ShortVector.java:956)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.bOpTemplateMF(ShortVector.java:253)
	at jdk.incubator.vector/jdk.incubator.vector.Short512Vector.bOpMF(Short512Vector.java:209)
	at jdk.incubator.vector/jdk.incubator.vector.Short512Vector.bOpMF(Short512Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.lambda$binaryOperationsMF$6(ShortVector.java:956)
	at java.base/jdk.internal.vm.vector.VectorSupport.binaryOp(VectorSupport.java:1039)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.lanewiseTemplate(ShortVector.java:937)
	at jdk.incubator.vector/jdk.incubator.vector.Short512Vector.lanewise(Short512Vector.java:286)
	at jdk.incubator.vector/jdk.incubator.vector.Short512Vector.lanewise(Short512Vector.java:44)
	at jdk.incubator.vector/jdk.incubator.vector.ShortVector.div(ShortVector.java:1729)
	at Short512VectorTests.divShort512VectorTestsMasked(Short512VectorTests.java:1787)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [402ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [402ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [407ms]
test Short512VectorTests.divShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [407ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i]): success [327ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i - length / 2]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i + 1]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[i - 2]): success [125ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[zigZag(i)]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[i], short[cornerCaseValue(i)]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i - length / 2]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i + 1]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[i - 2]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[zigZag(i)]): success [129ms]
test Short512VectorTests.eqShort512VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i - length / 2]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i + 1]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[i - 2]): success [125ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[zigZag(i)]): success [127ms]
test Short512VectorTests.eqShort512VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i]): success [135ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i - length / 2]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i + 1]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[i - 2]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[zigZag(i)]): success [127ms]
test Short512VectorTests.eqShort512VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i]): success [127ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i - length / 2]): success [131ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i + 1]): success [127ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[i - 2]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[zigZag(i)]): success [127ms]
test Short512VectorTests.eqShort512VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [125ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [126ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [145ms]
test Short512VectorTests.eqShort512VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [126ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i]): success [97ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[i - 2]): success [10ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.eqShort512VectorTestsBroadcastMaskedSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.expandShort512VectorTests(short[-i * 5], mask[i % 2]): success [2472ms]
test Short512VectorTests.expandShort512VectorTests(short[i * 5], mask[i % 2]): success [176ms]
test Short512VectorTests.expandShort512VectorTests(short[i + 1], mask[i % 2]): success [146ms]
test Short512VectorTests.expandShort512VectorTests(short[cornerCaseValue(i)], mask[i % 2]): success [146ms]
test Short512VectorTests.expandShort512VectorTests(short[-i * 5], mask[true]): success [107ms]
test Short512VectorTests.expandShort512VectorTests(short[i * 5], mask[true]): success [1268ms]
test Short512VectorTests.expandShort512VectorTests(short[i + 1], mask[true]): success [3ms]
test Short512VectorTests.expandShort512VectorTests(short[cornerCaseValue(i)], mask[true]): success [3ms]
test Short512VectorTests.expandShort512VectorTests(short[-i * 5], mask[false]): success [8ms]
test Short512VectorTests.expandShort512VectorTests(short[i * 5], mask[false]): success [7ms]
test Short512VectorTests.expandShort512VectorTests(short[i + 1], mask[false]): success [7ms]
test Short512VectorTests.expandShort512VectorTests(short[cornerCaseValue(i)], mask[false]): success [7ms]
test Short512VectorTests.getShort512VectorTests(short[-i * 5]): success [18ms]
test Short512VectorTests.getShort512VectorTests(short[i * 5]): success [19ms]
test Short512VectorTests.getShort512VectorTests(short[i + 1]): success [18ms]
test Short512VectorTests.getShort512VectorTests(short[cornerCaseValue(i)]): success [27ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[-i * 5]): success [39ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.hashCodeShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(0): success [67ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(-1): success [3ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(1): success [19ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(2): success [3ms]
test Short512VectorTests.indexInRangeLongShort512VectorTestsSmokeTest(-2): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(0): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(-1): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(1): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(2): success [3ms]
test Short512VectorTests.indexInRangeShort512VectorTestsSmokeTest(-2): success [3ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(0): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(32): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(37): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1024): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1025): success [0ms]
test Short512VectorTests.loopBoundLongShort512VectorTestsSmokeTest(1029): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(0): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(32): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(37): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1024): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1025): success [0ms]
test Short512VectorTests.loopBoundShort512VectorTestsSmokeTest(1029): success [0ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i]): success [278ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i - length / 2]): success [127ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i + 1]): success [126ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[i - 2]): success [126ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[zigZag(i)]): success [127ms]
test Short512VectorTests.ltShort512VectorTests(short[i], short[cornerCaseValue(i)]): success [127ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i]): success [126ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i - length / 2]): success [126ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i + 1]): success [126ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[i - 2]): success [127ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[zigZag(i)]): success [126ms]
test Short512VectorTests.ltShort512VectorTests(short[i - length / 2], short[cornerCaseValue(i)]): success [126ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i]): success [131ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i - length / 2]): success [127ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i + 1]): success [127ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[i - 2]): success [126ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[zigZag(i)]): success [126ms]
test Short512VectorTests.ltShort512VectorTests(short[i + 1], short[cornerCaseValue(i)]): success [136ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i]): success [130ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i - length / 2]): success [126ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i + 1]): success [127ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[i - 2]): success [128ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[zigZag(i)]): success [127ms]
test Short512VectorTests.ltShort512VectorTests(short[i - 2], short[cornerCaseValue(i)]): success [127ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i]): success [127ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i - length / 2]): success [129ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i + 1]): success [127ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[i - 2]): success [126ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[zigZag(i)]): success [126ms]
test Short512VectorTests.ltShort512VectorTests(short[zigZag(i)], short[cornerCaseValue(i)]): success [127ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i]): success [175ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i - length / 2]): success [127ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i + 1]): success [126ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[i - 2]): success [127ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[zigZag(i)]): success [146ms]
test Short512VectorTests.ltShort512VectorTests(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [126ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - length / 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i]): success [97ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i + 1], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[i - 2], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[zigZag(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - length / 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i + 1]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[i - 2]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[zigZag(i)]): success [2ms]
test Short512VectorTests.ltShort512VectorTestsBroadcastSmokeTest(short[cornerCaseValue(i)], short[cornerCaseValue(i)]): success [2ms]
test Short512VectorTests.maskAndNotShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [13ms]
test Short512VectorTests.maskAndNotShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskAndShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Short512VectorTests.maskAndShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskCompressShort512VectorTestsSmokeTest(mask[i % 2]): success [797ms]
test Short512VectorTests.maskCompressShort512VectorTestsSmokeTest(mask[true]): success [585ms]
test Short512VectorTests.maskCompressShort512VectorTestsSmokeTest(mask[false]): success [554ms]
test Short512VectorTests.maskEqShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short512VectorTests.maskEqShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskEqualsShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Short512VectorTests.maskEqualsShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskFirstTrueShort512VectorTestsSmokeTest(mask[i % 2]): success [117ms]
test Short512VectorTests.maskFirstTrueShort512VectorTestsSmokeTest(mask[true]): success [138ms]
test Short512VectorTests.maskFirstTrueShort512VectorTestsSmokeTest(mask[false]): success [105ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(-1): success [62ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(0): success [0ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Short512VectorTests.maskFromToLongShort512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Short512VectorTests.maskHashCodeShort512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Short512VectorTests.maskHashCodeShort512VectorTestsSmokeTest(mask[true]): success [4ms]
test Short512VectorTests.maskHashCodeShort512VectorTestsSmokeTest(mask[false]): success [0ms]
test Short512VectorTests.maskLastTrueShort512VectorTestsSmokeTest(mask[i % 2]): success [158ms]
test Short512VectorTests.maskLastTrueShort512VectorTestsSmokeTest(mask[true]): success [137ms]
test Short512VectorTests.maskLastTrueShort512VectorTestsSmokeTest(mask[false]): success [130ms]
test Short512VectorTests.maskOrShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [20ms]
test Short512VectorTests.maskOrShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maskTrueCountShort512VectorTestsSmokeTest(mask[i % 2]): success [114ms]
test Short512VectorTests.maskTrueCountShort512VectorTestsSmokeTest(mask[true]): success [141ms]
test Short512VectorTests.maskTrueCountShort512VectorTestsSmokeTest(mask[false]): success [105ms]
test Short512VectorTests.maskXorShort512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Short512VectorTests.maskXorShort512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Short512VectorTests.maxShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.maxShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.maxShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [5ms]
test Short512VectorTests.maxShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.maxShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.maxShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [1ms]
test Short512VectorTests.minShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.minShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.minShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.minShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.minShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.minShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.mulShort512VectorTests(short[-i * 5], short[i * 5]): success [5ms]
test Short512VectorTests.mulShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.mulShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.mulShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.mulShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.negShort512VectorTests(short[-i * 5]): success [9ms]
test Short512VectorTests.negShort512VectorTests(short[i * 5]): success [12ms]
test Short512VectorTests.negShort512VectorTests(short[i + 1]): success [3ms]
test Short512VectorTests.negShort512VectorTests(short[cornerCaseValue(i)]): success [3ms]
test Short512VectorTests.notShort512VectorTests(short[-i * 5]): success [75ms]
test Short512VectorTests.notShort512VectorTests(short[i * 5]): success [89ms]
test Short512VectorTests.notShort512VectorTests(short[i + 1]): success [67ms]
test Short512VectorTests.notShort512VectorTests(short[cornerCaseValue(i)]): success [67ms]
test Short512VectorTests.orShort512VectorTests(short[-i * 5], short[i * 5]): success [8ms]
test Short512VectorTests.orShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.orShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.orShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.orShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [1ms]
test Short512VectorTests.orShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.shuffleEqualsShort512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [447ms]
test Short512VectorTests.shuffleEqualsShort512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [79ms]
test Short512VectorTests.shuffleMiscellaneousShort512VectorTestsSmokeTest(shuffle[random]): success [187ms]
test Short512VectorTests.shuffleTest(): success [1040ms]
test Short512VectorTests.shuffleToStringShort512VectorTestsSmokeTest(shuffle[random]): success [68ms]
test Short512VectorTests.sliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i * 5]): success [865ms]
test Short512VectorTests.sliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i + 1]): success [3150ms]
test Short512VectorTests.sliceBinaryShort512VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [618ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [694ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [1970ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [693ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [683ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [3686ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [685ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [742ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [2005ms]
test Short512VectorTests.sliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [694ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[-i * 5]): success [549ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[i * 5]): success [1604ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[i + 1]): success [551ms]
test Short512VectorTests.sliceUnaryShort512VectorTests(short[cornerCaseValue(i)]): success [553ms]
test Short512VectorTests.smokeTest1(): success [0ms]
test Short512VectorTests.smokeTest2(): success [105ms]
test Short512VectorTests.subShort512VectorTests(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.subShort512VectorTests(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.subShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[i % 2]): success [6ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastMaskedSmokeTest(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i * 5]): success [6ms]
test Short512VectorTests.subShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[i + 1]): success [0ms]
test Short512VectorTests.subShort512VectorTestsBroadcastSmokeTest(short[-i * 5], short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [5ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [0ms]
test Short512VectorTests.subShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[-i * 5]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[i * 5]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.toDoubleArrayShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[-i * 5]): success [3ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[i * 5]): success [2ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.toIntArrayShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [8ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[-i * 5]): success [3ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[i * 5]): success [26ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[i + 1]): success [2ms]
test Short512VectorTests.toLongArrayShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [15ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[-i * 5]): success [12ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[i * 5]): success [13ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[i + 1]): success [0ms]
test Short512VectorTests.toStringShort512VectorTestsSmokeTest(short[cornerCaseValue(i)]): success [0ms]
test Short512VectorTests.unsliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i * 5]): success [558ms]
test Short512VectorTests.unsliceBinaryShort512VectorTestsBinary(short[-i * 5], short[i + 1]): success [2435ms]
test Short512VectorTests.unsliceBinaryShort512VectorTestsBinary(short[-i * 5], short[cornerCaseValue(i)]): success [557ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[i % 2]): success [1169ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[i % 2]): success [6754ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[i % 2]): success [1199ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[true]): success [1186ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[true]): success [10400ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[true]): success [1210ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i * 5], mask[false]): success [1191ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[i + 1], mask[false]): success [3693ms]
test Short512VectorTests.unsliceShort512VectorTestsMasked(short[-i * 5], short[cornerCaseValue(i)], mask[false]): success [1196ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[-i * 5]): success [545ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[i * 5]): success [1596ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[i + 1]): success [552ms]
test Short512VectorTests.unsliceUnaryShort512VectorTests(short[cornerCaseValue(i)]): success [546ms]
test Short512VectorTests.viewAsFloatingLanesTest(): success [22ms]
test Short512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Short512VectorTests.withShort512VectorTests(short[-i * 5], short[i * 5]): success [11ms]
test Short512VectorTests.withShort512VectorTests(short[-i * 5], short[i + 1]): success [10ms]
test Short512VectorTests.withShort512VectorTests(short[-i * 5], short[cornerCaseValue(i)]): success [10ms]

===============================================
jdk/incubator/vector/Short512VectorTests.java
Total tests run: 3598, Passes: 3597, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/7 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Short512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Short512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Short512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Short512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Short512VectorTests.d/testng.0.jta jdk/incubator/vector/Short512VectorTests.java false Short512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Vector128ConversionTests.java
TEST: jdk/incubator/vector/VectorReshapeTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.401 seconds
messages:
command: build VectorReshapeTests
reason: Named class compiled on demand
started: Thu Apr 17 03:04:31 IST 2025
Test directory:
  compile: VectorReshapeTests
finished: Thu Apr 17 03:04:32 IST 2025
elapsed time (seconds): 0.401

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.401 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
reason: .class file out of date or does not exist
started: Thu Apr 17 03:04:31 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 10
Process id: 2128604
finished: Thu Apr 17 03:04:32 IST 2025
elapsed time (seconds): 0.401
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/VectorReshapeTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/VectorReshapeTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
REASON: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
TIME:   516.747 seconds
messages:
command: testng --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests
reason: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
started: Thu Apr 17 03:04:32 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 2133481
finished: Thu Apr 17 03:13:09 IST 2025
elapsed time (seconds): 516.747
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorReshapeTests.testCastFromByte(byte(i)): success [31241ms]
test VectorReshapeTests.testCastFromDouble(double(i)): success [2910ms]
test VectorReshapeTests.testCastFromFloat(float(i)): success [3061ms]
test VectorReshapeTests.testCastFromInt(int(i)): success [3247ms]
test VectorReshapeTests.testCastFromLong(long(i)): success [2564ms]
test VectorReshapeTests.testCastFromShort(short(i)): success [2977ms]
test VectorReshapeTests.testRebracket128(byte(i)): success [12495ms]
test VectorReshapeTests.testRebracket256(byte(i)): success [17609ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64]
Failing with Species[long, 8, S_512_BIT]->Species[short, 32, S_512_BIT] (lanewise), partLimit=-4, block=16, part=-1, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 9, 10, 17, 18, 25, 26, 33, 34, 41, 42, 49, 50, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket512(byte(i)): failure [58024ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket512(VectorReshapeTests.java:1019)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testRebracket64(byte(i)): success [11230ms]
test VectorReshapeTests.testRebracketMax(byte(i)): success [17914ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[byte, 8, S_64_BIT]->Species[byte, 64, S_512_BIT] (reinterpret), partLimit=-8, block=8, part=-6, origin=48
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeByte(byte(i)): failure [61080ms]
java.lang.AssertionError: arrays differ firstly at element [48]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeByte(VectorReshapeTests.java:441)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[double, 1, S_64_BIT]->Species[double, 8, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-4, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeDouble(byte(i)): failure [45899ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeDouble(VectorReshapeTests.java:671)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[float, 2, S_64_BIT]->Species[float, 16, S_512_BIT] (reinterpret), partLimit=-8, block=8, part=-2, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeFloat(byte(i)): failure [41436ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeFloat(VectorReshapeTests.java:625)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[int, 2, S_64_BIT]->Species[int, 16, S_512_BIT] (lanewise), partLimit=-8, block=8, part=-4, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeInt(byte(i)): failure [50897ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeInt(VectorReshapeTests.java:533)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testReshapeLong(byte(i)): success [70966ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
Failing with Species[short, 16, S_256_BIT]->Species[short, 32, S_512_BIT] (reinterpret), partLimit=-2, block=32, part=-1, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeShort(byte(i)): failure [48709ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeShort(VectorReshapeTests.java:499)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testUCastFromByte(byte(i)): success [19171ms]
test VectorReshapeTests.testUCastFromInt(int(i)): success [1ms]
test VectorReshapeTests.testUCastFromShort(short(i)): success [9814ms]

===============================================
jdk/incubator/vector/VectorReshapeTests.java
Total tests run: 20, Passes: 14, Failures: 6, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 6
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 6
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/3 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=2 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/9/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=2 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/VectorReshapeTests.d/testng.0.jta jdk/incubator/vector/VectorReshapeTests.java false VectorReshapeTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
--------------------------------------------------
Passed: jdk/incubator/vector/Vector64ConversionTests.java#id0
Passed: jdk/incubator/vector/Byte512VectorTests.java
Test results: passed: 75; failed: 5; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector
Finished running test 'jtreg:test/jdk:jdk_vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk:jdk_vector                            83    75     5     0     3 <<
==============================
TEST FAILURE

