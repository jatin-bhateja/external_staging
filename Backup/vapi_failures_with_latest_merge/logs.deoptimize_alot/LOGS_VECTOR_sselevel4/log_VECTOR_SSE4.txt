Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_1', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_1
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_1

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Passed: compiler/codegen/ShiftByZero.java
Passed: compiler/codegen/C1NullCheckOfNullStore.java
Passed: compiler/codegen/LoadWithMask.java
Passed: compiler/codegen/Test6378821.java
Passed: compiler/codegen/BMI2.java
Passed: compiler/codegen/Test6814842.java
Passed: compiler/codegen/IntRotateWithImmediate.java
Passed: compiler/codegen/Test6797305.java
Passed: compiler/codegen/LoadWithMask2.java
Passed: compiler/codegen/BadLogicCode.java
Passed: compiler/codegen/BMI1.java
Passed: compiler/codegen/Test6909839.java
Passed: compiler/codegen/CRCTest.java
Passed: compiler/codegen/Test7009231.java
Passed: compiler/codegen/ShiftTest.java
Passed: compiler/codegen/BitTests.java
Passed: compiler/codegen/Test8005033.java
Passed: compiler/codegen/Test6431242.java
Passed: compiler/codegen/ClearArrayTest.java
Passed: compiler/codegen/Test6942326.java
Passed: compiler/codegen/Test6823354.java
Passed: compiler/codegen/Test6879902.java
Passed: compiler/codegen/Test8011901.java
Passed: compiler/codegen/TestConvertImplicitNullCheck.java
Passed: compiler/codegen/TestBooleanVect.java
Passed: compiler/codegen/Test7100757.java
Passed: compiler/codegen/TestByteShortVect.java
Passed: compiler/codegen/TestByteIntVect.java
Passed: compiler/codegen/TestCharShortVect.java
Passed: compiler/codegen/TestDoubleVect.java
Passed: compiler/codegen/TestByteVect.java
Passed: compiler/codegen/TestGCMLoadPlacement.java
Passed: compiler/codegen/TestCharVect2.java#id0
Passed: compiler/codegen/TestFloatVect.java
Passed: compiler/codegen/TestCharVect.java
Passed: compiler/codegen/TestIntFloatVect.java
Passed: compiler/codegen/TestMultiMemInstructionMatching.java
Passed: compiler/codegen/TestByteLongVect.java
Passed: compiler/codegen/TestLongDoubleVect.java
Passed: compiler/codegen/TestByteDoubleVect.java
Passed: compiler/codegen/TestIntVect.java
Passed: compiler/codegen/TestFloatDoubleVect.java
Passed: compiler/codegen/TestShortIntVect.java
Passed: compiler/codegen/TestByteFloatVect.java
Passed: compiler/codegen/TestLongVect.java
Passed: compiler/codegen/TestLongFloatVect.java
Passed: compiler/loopopts/superword/AlignmentOnePack.java
Passed: compiler/loopopts/superword/CoLocatePackMemoryState.java
Passed: compiler/loopopts/superword/CoLocatePack.java
Passed: compiler/codegen/TestIntDoubleVect.java
Passed: compiler/codegen/TestOopCmp.java
Passed: compiler/codegen/TestShortVect.java
Passed: compiler/codegen/TestIntLongVect.java
Passed: compiler/codegen/TestCharVect2.java#id1
Passed: compiler/codegen/TestShortDoubleVect.java
Passed: compiler/loopopts/superword/ReductionPerf.java
Passed: compiler/codegen/TestShortFloatVect.java
Passed: compiler/codegen/TestShortLongVect.java
Passed: compiler/loopopts/superword/MinMaxRed_Long.java
Passed: compiler/codegen/TestSignedMultiplyLong.java
Passed: compiler/loopopts/superword/SuperWordIntermediateUse.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage.java
Passed: compiler/loopopts/superword/MinMaxRed_Int.java
Passed: compiler/loopopts/superword/TestAlignVector.java#VerifyAlignVector
Passed: compiler/loopopts/superword/TestAlignVector.java#AlignVector
Passed: compiler/loopopts/superword/RedTest_int.java
Passed: compiler/loopopts/superword/RedTest_long.java
Passed: compiler/loopopts/superword/TestAlignVector.java#NoAlignVector
Passed: compiler/loopopts/superword/TestBestAlign.java
Passed: compiler/loopopts/superword/TestCmpInvar.java
Passed: compiler/loopopts/superword/SumRed_Long.java
Passed: compiler/loopopts/superword/TestCompatibleUseDefTypeSize.java
Passed: compiler/loopopts/superword/TestCyclicDependency.java
Passed: compiler/loopopts/superword/ProdRed_Int.java
Passed: compiler/loopopts/superword/SumRed_Int.java
Passed: compiler/loopopts/superword/ProdRed_Float.java
Passed: compiler/loopopts/superword/SumRed_Float.java
Passed: compiler/loopopts/superword/ProdRed_Double.java
Passed: compiler/loopopts/superword/SumRed_Double.java
Passed: compiler/loopopts/superword/SumRedAbsNeg_Float.java
Passed: compiler/loopopts/superword/TestEliminateAllocationWithCastP2XUse.java
Passed: compiler/loopopts/superword/SumRedAbsNeg_Double.java
Passed: compiler/loopopts/superword/TestFuzzPreLoop.java
Passed: compiler/loopopts/superword/TestGeneralizedReductions.java
Passed: compiler/loopopts/superword/TestHoistedReductionNode.java
Passed: compiler/loopopts/superword/TestIndependentPacksWithCyclicDependency2.java
Passed: compiler/loopopts/superword/TestLargeCompilation.java
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-NoTieredCompilation-Xbatch
Passed: compiler/loopopts/superword/SumRedSqrt_Double.java
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#Vanilla
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v004-A
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector-Align16
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v004-U
Passed: compiler/loopopts/superword/TestAlignVectorFuzzer.java#VerifyAlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-array
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v008-A
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v008-U
Passed: compiler/loopopts/superword/TestMemorySegment.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v016-A
Passed: compiler/loopopts/superword/TestMemorySegment.java#char-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#double-array
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-A
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#sse4-v016-U
Passed: compiler/loopopts/superword/TestMemorySegmentMainLoopAlignment.java
Passed: compiler/loopopts/superword/TestMemorySegment.java#float-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#int-array-AlignVector
Passed: compiler/loopopts/superword/TestMemorySegment.java#long-array
Passed: compiler/loopopts/superword/TestMemorySegment.java#native
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct
Passed: compiler/loopopts/superword/TestNegBaseOffset.java
Passed: compiler/loopopts/superword/TestMemorySegment.java#native-AlignVector
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#Vanilla
Passed: compiler/loopopts/superword/TestMemorySegment.java#short-array
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-AlignVector
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithFlags
Passed: compiler/loopopts/superword/TestMultiversionRemoveUselessSlowLoop.java
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native-VerifyAlignVector
Passed: compiler/loopopts/superword/TestNoInputInLoop.java#WithMoreFlags
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-VerifyAlignVector
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#native
Passed: compiler/loopopts/superword/TestMemorySegmentUnalignedAddress.java#byte-buffer-direct-AlignVector
Passed: compiler/loopopts/superword/TestDependencyOffsets.java#vanilla-U
Passed: compiler/loopopts/superword/TestSearchAlignment.java
Passed: compiler/loopopts/superword/TestReductionWithLoopVariantUse.java
Passed: compiler/loopopts/superword/TestPickFirstMemoryState.java
Passed: compiler/loopopts/superword/TestPickLastMemoryState.java
Passed: compiler/loopopts/superword/TestParallelReduction.java
Passed: compiler/loopopts/superword/TestPeeledReductionNode.java
Passed: compiler/loopopts/superword/TestWronglyMarkedReduction.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize16-Unaligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Aligned
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#Vanilla-Unaligned
Passed: compiler/loopopts/superword/TestVectorizeTypeConversionWithUnsafe.java
Passed: compiler/loopopts/superword/TestUnorderedReduction.java#MaxVectorSize32-Aligned
Passed: compiler/loopopts/superword/TestVectorizationWithInvariant.java
Passed: compiler/vectorapi/TestIsLoadVector.java
Passed: compiler/vectorapi/Test8303508.java
Passed: compiler/loopopts/superword/TestVectorFPReduction.java
Passed: compiler/vectorapi/TestLongVectorNeg.java
Passed: compiler/vectorapi/Test8259353.java
Passed: compiler/vectorapi/TestBiMorphicMismatchedMemSegment.java
Passed: compiler/vectorapi/TestNoInline.java
Passed: compiler/vectorapi/TestLoopStoreVector.java#id0
Passed: compiler/vectorapi/TestLoopStoreVector.java#id1
Passed: compiler/vectorapi/TestIntrinsicBailOut.java#id0
Passed: compiler/vectorapi/TestVectorErgonomics.java
Passed: compiler/vectorapi/Test8278948.java
Passed: compiler/vectorapi/TestVectorShuffleIota.java
Passed: compiler/vectorapi/VectorBoxExpandTest.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#AlignVector
Passed: compiler/vectorapi/TestVectorAddMulReduction.java
Passed: compiler/vectorapi/TestVectorTest.java
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#StoreToLoadForwardingFailureDetection
Passed: compiler/loopopts/superword/TestLargeScaleAndStride.java#vanilla
Passed: compiler/loopopts/superword/TestMovingLoadBeforeStore.java
Passed: compiler/vectorapi/TestVectorShiftImm.java
Passed: compiler/vectorapi/VectorFPtoIntCastTest.java
Passed: compiler/vectorapi/VectorMemoryAlias.java
Passed: compiler/vectorapi/VectorCommutativeOperSharingTest.java
Passed: compiler/vectorapi/TestReverseByteTransforms.java
Passed: compiler/vectorapi/TestVectorShuffleIotaByte.java
Passed: compiler/loopopts/superword/TestEquivalentInvariants.java
Passed: compiler/vectorapi/VectorMaskCastTest.java
Passed: compiler/vectorapi/TestTwoVectorPermute.java
Passed: compiler/vectorapi/TestMaskedMacroLogicVector.java
Passed: compiler/c2/cr6340864/TestFloatVect.java
Passed: compiler/c2/cr6340864/TestDoubleVect.java
Passed: compiler/vectorapi/TestRawOopAtSafepoint.java
Passed: compiler/c2/irTests/blackhole/BlackholeHotInlineTest.java
Passed: compiler/c2/cr6340864/TestByteVect.java
Passed: compiler/c2/irTests/blackhole/BlackholeLoadOptoTest.java
Passed: compiler/c2/cr6340864/TestLongVectRotate.java
Passed: compiler/c2/cr6340864/TestIntVect.java
Passed: compiler/c2/irTests/blackhole/BlackholeStoreStoreEATest.java
Passed: compiler/c2/irTests/blackhole/BlackholeSyncEATest.java
Passed: compiler/c2/cr6340864/TestIntVectRotate.java
Passed: compiler/c2/cr6340864/TestShortVect.java
Passed: compiler/c2/irTests/igvn/TestCleanMemPhi.java
Passed: compiler/c2/irTests/igvn/TestCombineAddPWithConstantOffsets.java
Passed: compiler/codegen/TestAntiDependenciesHighMemUsage2.java
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id0
Passed: compiler/c2/irTests/loopOpts/LoopIdealizationTests.java
Passed: compiler/c2/irTests/igvn/TestIntegerMulRing.java
Passed: compiler/c2/cr6340864/TestLongVect.java
Passed: compiler/c2/irTests/igvn/TestLoadNIdeal.java
Passed: compiler/vectorapi/VectorGatherMaskFoldingTest.java
Passed: compiler/vectorapi/VectorMaskLoadStoreTest.java#id1
Passed: compiler/c2/irTests/scalarReplacement/ScalarReplacementTests.java
Passed: compiler/vectorapi/VectorCastShape128Test.java
Passed: compiler/c2/irTests/stringopts/TestNegativeArraySize.java
Passed: compiler/c2/irTests/AddINodeIdealizationTests.java
Passed: compiler/c2/irTests/AddLNodeIdealizationTests.java
Passed: compiler/c2/irTests/AndINodeIdealizationTests.java
Passed: compiler/c2/irTests/AndLNodeIdealizationTests.java
Passed: compiler/vectorapi/VectorCastShape64Test.java
Passed: compiler/vectorapi/VectorSaturatedOperationsTest.java
Passed: compiler/c2/irTests/CMoveLConstants.java
Passed: compiler/vectorapi/VectorMultiplyOpt.java
Passed: compiler/c2/irTests/CmpUWithZero.java
Passed: compiler/c2/irTests/stable/StablePrimPlainTest.java
Passed: compiler/c2/irTests/stable/StablePrimVolatileTest.java
Passed: compiler/c2/irTests/DeMorganLawIntTests.java
Passed: compiler/c2/irTests/ConstructorBarriers.java
Passed: compiler/c2/irTests/DivINodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StableRefVolatileTest.java
Passed: compiler/c2/irTests/DeMorganLawLongTests.java
Passed: compiler/c2/irTests/stable/StablePrimArrayTest.java
Passed: compiler/c2/irTests/stable/StableRefArrayTest.java
Passed: compiler/c2/irTests/LShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/DivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/LShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/MaxMinINodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StablePrimFinalTest.java
Passed: compiler/c2/irTests/ModINodeIdealizationTests.java
Passed: compiler/c2/irTests/ModDNodeTests.java
Passed: compiler/c2/irTests/OrINodeIdealizationTests.java
Passed: compiler/c2/irTests/ModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/ModFNodeTests.java
Passed: compiler/c2/irTests/stable/StableRefFinalTest.java
Passed: compiler/c2/irTests/OrLNodeIdealizationTests.java
Passed: compiler/c2/irTests/MulINodeIdealizationTests.java
Passed: compiler/c2/irTests/MulLNodeIdealizationTests.java
Passed: compiler/c2/irTests/stable/StableRefPlainTest.java
Passed: compiler/c2/irTests/MulHFNodeIdealizationTests.java
Passed: compiler/c2/irTests/RShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestArrayElementTypeLoad.java
Passed: compiler/c2/irTests/RShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/TestAutoVectorization2DArray.java
Passed: compiler/c2/irTests/TestAutoVecCountingDownLoop.java
Passed: compiler/c2/irTests/TestBackToBackIfs.java
Passed: compiler/c2/irTests/TestBackToBackMustBeNotNull.java
Passed: compiler/c2/irTests/TestCMoveCCP.java
Passed: compiler/c2/irTests/SubINodeIdealizationTests.java
Passed: compiler/c2/irTests/SubLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestConv2BExpansion.java
Passed: compiler/c2/irTests/TestConvI2LCastLongLoop.java
Passed: compiler/c2/irTests/TestEnumFinalFold.java
Passed: compiler/c2/irTests/TestDebugInfo.java
Passed: compiler/c2/irTests/TestFPConversion.java
Passed: compiler/c2/irTests/TestGetAndAdd.java
Passed: compiler/c2/irTests/TestFPComparison.java
Passed: compiler/c2/irTests/TestCountedLoopPhiValue.java
Passed: compiler/c2/irTests/TestFewIterationsCountedLoop.java
Passed: compiler/c2/irTests/TestCountedLoopSafepoint.java
Passed: compiler/c2/irTests/TestIRLShiftIdeal_XPlusX_LShiftC.java
Passed: compiler/c2/irTests/TestIRAbs.java
Passed: compiler/c2/irTests/TestIterativeEA.java
Passed: compiler/c2/irTests/TestMulNodeIdealization.java
Passed: compiler/c2/irTests/TestMinMaxIdentities.java
Passed: compiler/c2/irTests/TestIfMinMax.java
Passed: compiler/c2/irTests/TestOptimizeUnstableIf.java
Passed: compiler/c2/irTests/TestPadding.java
Passed: compiler/c2/irTests/TestPhiDuplicatedConversion.java
Passed: compiler/c2/irTests/TestIRFma.java
Passed: compiler/c2/irTests/TestPushAddThruCast.java
Passed: compiler/c2/irTests/TestScalarReplacement.java
Passed: compiler/c2/irTests/TestRemixAddressExpressions.java
Passed: compiler/c2/irTests/TestPostParseCallDevirtualization.java
Passed: compiler/c2/irTests/TestScheduleSmallMethod.java
Passed: compiler/c2/irTests/TestLongRangeChecks.java
Passed: compiler/c2/irTests/gc/ReferenceRefersToTests.java
Passed: compiler/c2/irTests/TestSpecialCasesOf_AMinusB_Plus_CMinusD_InAddIdeal.java
Passed: compiler/c2/irTests/TestShiftAndMask.java
Passed: compiler/c2/irTests/TestLSMMissedEmptyLoop.java
Passed: compiler/c2/irTests/TestSkeletonPredicates.java
Passed: compiler/c2/irTests/TestSuperwordFailsUnrolling.java
Passed: compiler/c2/irTests/TestTestRemovalPeephole.java
Passed: compiler/c2/irTests/TestTypeSpeculation.java
Passed: compiler/c2/irTests/TestStripMiningDropsSafepoint.java
Passed: compiler/c2/irTests/TestVectorizeURShiftSubword.java
Passed: compiler/c2/irTests/UDivLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestFloat16ScalarOperations.java
Passed: compiler/c2/irTests/TestUnsignedComparison.java
Passed: compiler/c2/irTests/UModINodeIdealizationTests.java
Passed: compiler/c2/irTests/UDivINodeIdealizationTests.java
Passed: compiler/c2/irTests/UModLNodeIdealizationTests.java
Passed: compiler/c2/irTests/gc/ReferenceClearTests.java
Passed: compiler/c2/irTests/URShiftINodeIdealizationTests.java
Passed: compiler/c2/irTests/ProfileAtTypeCheck.java
Passed: compiler/c2/irTests/URShiftLNodeIdealizationTests.java
Passed: compiler/c2/irTests/TestVectorizationMultiInvar.java
Passed: compiler/c2/irTests/XorINodeIdealizationTests.java
Passed: compiler/c2/irTests/XorLNodeIdealizationTests.java
Passed: compiler/c2/irTests/ConvF2HFIdealizationTests.java
Passed: compiler/vectorization/runner/ArrayCopyTest.java
Passed: compiler/vectorization/runner/BasicBooleanOpTest.java
Passed: compiler/vectorization/runner/ArrayUnsafeOpTest.java
Passed: compiler/vectorization/runner/ArrayIndexFillTest.java
Passed: compiler/vectorization/runner/ArrayShiftOpTest.java
Passed: compiler/vectorization/runner/BasicCharOpTest.java
Passed: compiler/vectorization/runner/BasicByteOpTest.java
Passed: compiler/vectorization/TestAbsCharVector.java
Passed: compiler/vectorization/runner/LoopControlFlowTest.java
Passed: compiler/vectorization/runner/BasicShortOpTest.java
Passed: compiler/vectorization/TestCMoveWithoutBoolPack.java
Passed: compiler/vectorization/runner/BasicLongOpTest.java
Passed: compiler/vectorization/runner/BasicIntOpTest.java
Passed: compiler/vectorization/runner/LoopLiveOutNodesTest.java
Passed: compiler/vectorization/runner/LoopArrayIndexComputeTest.java
Passed: compiler/vectorization/TestMemoryVectorMismatched.java
Passed: compiler/vectorization/runner/MultipleLoopsTest.java
Passed: compiler/vectorization/runner/LoopRangeStrideTest.java
Passed: compiler/vectorization/TestNarrowedIntegerReverseBytes.java
Passed: compiler/vectorization/runner/StripMinedLoopTest.java
Passed: compiler/vectorization/runner/LoopReductionOpTest.java
Passed: compiler/vectorization/runner/ArrayInvariantFillTest.java
Passed: compiler/vectorization/TestMaskedVectors.java
Passed: compiler/vectorization/TestNaNVector.java
Passed: compiler/vectorization/TestOptionVectorize.java
Passed: compiler/vectorization/TestRotateByteAndShortVector.java
Passed: compiler/vectorization/TestPopCountVector.java
Passed: compiler/vectorization/TestAutoVecIntMinMax.java
Passed: compiler/vectorization/TestReplicateAtConv.java
Passed: compiler/vectorization/TestMacroLogicVector.java
Passed: compiler/vectorization/TestReplicateLoopIV.java
Passed: compiler/vectorization/TestOverlappingMismatchedAccesses.java
Passed: compiler/vectorization/TestComplexAddrExpr.java
Passed: compiler/vectorization/TestSmallVectorPopIndex.java
Passed: compiler/vectorization/TestUnexpectedLoadOrdering.java
Passed: compiler/vectorization/TestVectorUnalignedOffset.java
Passed: compiler/vectorization/TestOffsetSorting.java
Passed: compiler/vectorization/TestVectorizationNegativeScale.java
Passed: compiler/vectorization/TestFloat16ToFloatConv.java
Passed: compiler/vectorization/TestOptionVectorizeIR.java
Passed: compiler/vectorization/runner/BasicFloatOpTest.java
Passed: compiler/vectorization/TestForEachRem.java
Passed: compiler/vectorization/TestSubwordReverseBytes.java
Passed: compiler/vectorization/TestVectorsNotSavedAtSafepoint.java
Passed: compiler/vectorization/TestBufferVectorization.java
Passed: compiler/vectorization/runner/BasicDoubleOpTest.java
Passed: compiler/vectorization/TestVectorZeroCount.java
Test results: passed: 335; excluded: 18; did not meet platform requirements: 73
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_1
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_1'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_1

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
   jtreg:test/hotspot/jtreg:hotspot_vector_1           426   335     0     0    91   
==============================
TEST SUCCESS

Finished building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/hotspot/jtreg:hotspot_vector_2', will run:
* jtreg:test/hotspot/jtreg:hotspot_vector_2
Clean up dirs for jtreg_test_hotspot_jtreg_hotspot_vector_2

Running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Passed: compiler/intrinsics/string/TestStringEqualsBadLength.java
Passed: compiler/intrinsics/string/TestStringIndexOfCharIntrinsics.java
Passed: compiler/intrinsics/string/TestStringConstruction.java
Passed: compiler/intrinsics/string/TestCopyValueOf.java
Passed: compiler/intrinsics/string/TestStringIntrinsicRangeChecks.java
Passed: compiler/intrinsics/string/TestStringIntrinsicMemoryFlow.java
Passed: compiler/intrinsics/Test6982370.java
Passed: compiler/intrinsics/Test8005419.java
Passed: compiler/intrinsics/Test8215792.java
Passed: compiler/intrinsics/IntrinsicDisabledTest.java
Passed: compiler/intrinsics/string/TestStringIntrinsics2.java
Passed: compiler/intrinsics/IntrinsicAvailableTest.java
Passed: compiler/intrinsics/TestArraysHashCode.java
Passed: compiler/intrinsics/TestContinuationPinningAndEA.java
Passed: compiler/intrinsics/TestArrayGuardWithInterfaces.java
Passed: compiler/intrinsics/Test8237524.java
Passed: compiler/intrinsics/TestCheckIndex.java
Passed: compiler/intrinsics/TestReferenceGetWithNull.java
Passed: compiler/intrinsics/TestReferenceRefersTo.java
Passed: compiler/intrinsics/string/TestCountPositives.java#id0
Passed: compiler/intrinsics/string/TestHasNegatives.java#id0
Passed: compiler/intrinsics/VectorizedMismatchTest.java
Passed: compiler/intrinsics/string/TestStringUTF16IntrinsicRangeChecks.java
Passed: compiler/intrinsics/TestCompareUnsigned.java
Passed: compiler/codegen/aes/Test8292158.java
Passed: compiler/codegen/Test6935535.java#id1
Passed: compiler/intrinsics/TestRotate.java
Passed: compiler/intrinsics/string/TestStringConstructionIntrinsics.java#id0
Passed: compiler/codegen/aes/Test8299817.java
Passed: compiler/intrinsics/TestIntegerUnsignedDivMod.java
Passed: compiler/intrinsics/base64/TestBase64.java
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLenReturnProfile.java
Passed: compiler/intrinsics/string/TestEncodeIntrinsics.java
Passed: compiler/codegen/Test6875866.java
Passed: compiler/intrinsics/bmi/verifycode/AndnTestI.java
Passed: compiler/intrinsics/bigInteger/TestSquareToLen.java
Passed: compiler/codegen/Test6935535.java#id0
Passed: compiler/intrinsics/bigInteger/TestMulAdd.java
Passed: compiler/intrinsics/bmi/verifycode/AndnTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestI.java
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestL.java
Passed: compiler/intrinsics/bigInteger/TestShift.java
Passed: compiler/intrinsics/bmi/verifycode/BzhiTestI2L.java
Passed: compiler/intrinsics/string/TestStringIntrinsics.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestL.java
Passed: compiler/intrinsics/bmi/verifycode/BlsrTestI.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestI.java
Passed: compiler/intrinsics/bigInteger/TestMultiplyToLen.java
Passed: compiler/intrinsics/bmi/verifycode/LZcntTestL.java
Passed: compiler/intrinsics/TestLongUnsignedDivMod.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestI.java
Passed: compiler/intrinsics/bigInteger/MontgomeryMultiplyTest.java
Passed: compiler/intrinsics/bmi/verifycode/BlsiTestI.java
Passed: compiler/intrinsics/bmi/verifycode/BlsmskTestL.java
Passed: compiler/intrinsics/TestBitShuffleOpers.java
Passed: compiler/intrinsics/bmi/TestLzcntI.java
Passed: compiler/intrinsics/bmi/TestBlsiI.java
Passed: compiler/intrinsics/bmi/verifycode/TZcntTestL.java
Passed: compiler/intrinsics/bmi/TestBlsmskI.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id0
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id1
Passed: compiler/intrinsics/bmi/TestLzcntL.java
Passed: compiler/intrinsics/bmi/TestBlsiL.java
Passed: compiler/intrinsics/bmi/TestBlsrI.java
Passed: compiler/intrinsics/klass/TestGetModifiers.java#id2
Passed: compiler/intrinsics/bmi/TestTzcntI.java
Passed: compiler/intrinsics/math/Test8210461.java
Passed: compiler/intrinsics/bmi/TestBlsmskL.java
Passed: compiler/intrinsics/bmi/TestTzcntL.java
Passed: compiler/intrinsics/bmi/TestBlsrL.java
Passed: compiler/intrinsics/bmi/TestAndnI.java
Passed: compiler/intrinsics/math/TestMinMaxIntrinsics.java
Passed: compiler/intrinsics/bmi/TestAndnL.java
Passed: compiler/intrinsics/math/TestPow0Dot5Opt.java
Passed: compiler/intrinsics/math/TestPow2Opt.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactIntTest.java
Passed: compiler/intrinsics/math/TestFpMinMaxIntrinsics.java
Passed: compiler/intrinsics/math/TestMinMaxOpt.java
Passed: compiler/intrinsics/mathexact/sanity/AddExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactIntTest.java
Passed: compiler/intrinsics/klass/TestIsPrimitive.java
Passed: compiler/intrinsics/mathexact/sanity/DecrementExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/IncrementExactLongTest.java
Passed: compiler/intrinsics/bmi/TestBzhiI2L.java
Passed: compiler/intrinsics/math/TestMinMaxInlining.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/SubtractExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactIntTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/NegateExactLongTest.java
Passed: compiler/intrinsics/mathexact/sanity/MultiplyExactIntTest.java
Passed: compiler/intrinsics/mathexact/AddExactICondTest.java
Passed: compiler/intrinsics/mathexact/AddExactLConstantTest.java
Passed: compiler/intrinsics/math/MaxMinOptimizeTest.java
Passed: compiler/intrinsics/mathexact/CompareTest.java
Passed: compiler/codegen/aes/TestCipherBlockChainingEncrypt.java
Passed: compiler/intrinsics/klass/CastNullCheckDroppingsTest.java
Passed: compiler/intrinsics/mathexact/AddExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/AddExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/AddExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/AddExactILoadTest.java
Passed: compiler/intrinsics/mathexact/GVNTest.java
Passed: compiler/intrinsics/mathexact/AddExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactICondTest.java
Passed: compiler/intrinsics/mathexact/IncExactLTest.java
Passed: compiler/intrinsics/mathexact/IncExactITest.java
Passed: compiler/intrinsics/mathexact/DecExactITest.java
Passed: compiler/intrinsics/mathexact/DecExactLTest.java
Passed: compiler/intrinsics/mathexact/NegExactILoadTest.java
Passed: compiler/intrinsics/mathexact/NegExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/NegExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/NestedMathExactTest.java
Passed: compiler/intrinsics/mathexact/NegExactLNonConstantTest.java
Passed: compiler/intrinsics/mathexact/SplitThruPhiTest.java
Passed: compiler/intrinsics/mathexact/SubExactICondTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/SubExactILoadTest.java
Passed: compiler/intrinsics/mathexact/MulExactIConstantTest.java
Passed: compiler/intrinsics/SortingDeoptimizationTest.java
Passed: compiler/intrinsics/mathexact/NegExactIConstantTest.java
Passed: compiler/intrinsics/mathexact/NegExactLConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactLConstantTest.java
Passed: compiler/intrinsics/object/TestHashCode.java
Passed: compiler/intrinsics/mathexact/MulExactILoadTest.java
Passed: compiler/intrinsics/mathexact/SubExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/MulExactILoopDependentTest.java
Passed: compiler/intrinsics/mathexact/MulExactINonConstantTest.java
Passed: compiler/intrinsics/mathexact/LongMulOverflowTest.java
Passed: compiler/intrinsics/mathexact/SubExactLNonConstantTest.java
Passed: compiler/intrinsics/math/TestSignumIntrinsic.java
Passed: compiler/intrinsics/mathexact/SubExactIConstantTest.java
Passed: compiler/loopopts/superword/Vec_MulAddS2I.java
Passed: compiler/intrinsics/mathexact/SubExactIRepeatTest.java
Passed: compiler/intrinsics/mathexact/MulExactLNonConstantTest.java
Passed: compiler/intrinsics/sha/sanity/TestMD5Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1Intrinsics.java
Passed: compiler/intrinsics/mathexact/SubExactLConstantTest.java
Passed: compiler/intrinsics/unsafe/TestCAEAntiDep.java
Passed: compiler/intrinsics/unsafe/TestUnsafeMismatchedArrayFieldAccess.java
Passed: compiler/intrinsics/sha/sanity/TestMD5MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/UnsafeGetAddressTest.java
Passed: compiler/intrinsics/sha/sanity/TestSHA1MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/TestUnsafeUnalignedMismatchedAccesses.java
Passed: compiler/intrinsics/object/TestClone.java
Passed: compiler/intrinsics/sha/sanity/TestSHA256Intrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512Intrinsics.java
Passed: compiler/intrinsics/unsafe/UnsafeTwoCASLong.java
Passed: compiler/intrinsics/zip/TestCRC32.java
Passed: compiler/intrinsics/zip/TestCRC32C.java
Passed: compiler/intrinsics/sha/sanity/TestSHA512MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3Intrinsics.java
Passed: compiler/intrinsics/zip/TestFpRegsABI.java
Passed: compiler/intrinsics/sha/sanity/TestSHA3MultiBlockIntrinsics.java
Passed: compiler/intrinsics/unsafe/AllocateUninitializedArray.java
Passed: compiler/intrinsics/zip/TestAdler32.java
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id1
Passed: compiler/intrinsics/unsafe/DirectByteBufferTest.java
Passed: compiler/intrinsics/unsafe/HeapByteBufferTest.java#id0
Passed: compiler/intrinsics/sha/sanity/TestSHA256MultiBlockIntrinsics.java
Passed: compiler/intrinsics/sha/TestDigest.java
Passed: compiler/codegen/aes/TestAESMain.java
Test results: passed: 164; skipped: 1; excluded: 1; did not meet platform requirements: 27
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_hotspot_vector_2
Finished running test 'jtreg:test/hotspot/jtreg:hotspot_vector_2'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_hotspot_jtreg_hotspot_vector_2

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
   jtreg:test/hotspot/jtreg:hotspot_vector_2           192   163     0     0    29   
==============================
TEST SUCCESS

Finished building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Building target 'test' in configuration 'linux-x86_64-server-fastdebug'
Running tests using JTREG control variable 'RETAIN=all;JOBS=16;TIMEOUT_FACTOR=16;JAVA_OPTIONS=-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot'
Test selection 'test/jdk/:jdk_vector', will run:
* jtreg:test/jdk:jdk_vector
Clean up dirs for jtreg_test_jdk_jdk_vector

Running test 'jtreg:test/jdk:jdk_vector'
Passed: jdk/incubator/vector/BasicFloat16ArithTests.java
Passed: jdk/incubator/vector/CovarOverrideTest.java
Passed: jdk/incubator/vector/ByteMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Byte512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/DoubleMaxVectorTests.java
--------------------------------------------------
TEST: jdk/incubator/vector/Double512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   2.055 seconds
messages:
command: build Double512VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 23:06:32 IST 2025
Test directory:
  compile: Double512VectorTests
finished: Wed Apr 16 23:06:34 IST 2025
elapsed time (seconds): 2.055

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   2.055 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double512VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 23:06:32 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 6
Process id: 1789061
finished: Wed Apr 16 23:06:34 IST 2025
elapsed time (seconds): 2.055
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Double512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double512VectorTests 
TIME:   171.4 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Double512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Double512VectorTests 
started: Wed Apr 16 23:06:34 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1791187
finished: Wed Apr 16 23:09:25 IST 2025
elapsed time (seconds): 171.4
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 547807480253519954
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=547807480253519954" to command line.
test Double512VectorTests.ABSDouble512VectorTests(double[-i * 5]): success [368ms]
test Double512VectorTests.ABSDouble512VectorTests(double[i * 5]): success [418ms]
test Double512VectorTests.ABSDouble512VectorTests(double[i + 1]): success [13ms]
test Double512VectorTests.ABSDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [4ms]
test Double512VectorTests.ABSDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [51ms]
test Double512VectorTests.ABSDouble512VectorTests(double[cornerCaseValue(i)]): success [5ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[-i * 5], mask[i % 2]): success [167ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i * 5], mask[i % 2]): success [194ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i + 1], mask[i % 2]): success [26ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [71ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[-i * 5], mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i * 5], mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(AbstractVectorTest$1@25daae7f, mask[true]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[cornerCaseValue(i)], mask[true]): success [6ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[-i * 5], mask[false]): success [2ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i * 5], mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[i + 1], mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double512VectorTests.ABSMaskedDouble512VectorTests(double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[-i * 5]): success [108ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[i * 5]): success [42ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[i + 1]): success [9ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [7ms]
test Double512VectorTests.ACOSDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [61ms]
test Double512VectorTests.ACOSDouble512VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], double[i * 5]): success [109ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], double[i + 1]): success [367ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [3ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [4ms]
test Double512VectorTests.ADDDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [71ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i * 5]): success [16ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [21ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [8ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [3ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [14ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsBroadcastMaskedLongSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [183ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [62ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [7ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [72ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double512VectorTests.ADDDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[-i * 5]): success [121ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[i * 5]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[i + 1]): success [74ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [1ms]
test Double512VectorTests.ADDReduceDouble512VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[-i * 5], mask[i % 2]): success [75ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i * 5], mask[i % 2]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i + 1], mask[i % 2]): success [92ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [1ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[-i * 5], mask[true]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i * 5], mask[true]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i + 1], mask[true]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[-i * 5], mask[false]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i * 5], mask[false]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[i + 1], mask[false]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [12ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double512VectorTests.ADDReduceDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [3ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[-i * 5]): success [10ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[i * 5]): success [1ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[i + 1]): success [1ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [2ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTests(double[cornerCaseValue(i)]): success [3ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[-i * 5], mask[i % 2]): success [8ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i * 5], mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[-i * 5], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[-i * 5], mask[false]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i * 5], mask[false]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[0.01 + (i / (i + 1))], mask[false]): success [10ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(AbstractVectorTest$1@25daae7f, mask[false]): success [1ms]
test Double512VectorTests.ADDReduceLongDouble512VectorTestsMasked(double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.ASINDouble512VectorTests(double[-i * 5]): success [149ms]
test Double512VectorTests.ASINDouble512VectorTests(double[i * 5]): success [86ms]
test Double512VectorTests.ASINDouble512VectorTests(double[i + 1]): success [8ms]
test Double512VectorTests.ASINDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [3ms]
test Double512VectorTests.ASINDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [57ms]
test Double512VectorTests.ASINDouble512VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], double[i * 5]): success [337ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], double[i + 1]): success [83ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [11ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [30ms]
test Double512VectorTests.ATAN2Double512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [80ms]
test Double512VectorTests.ATANDouble512VectorTests(double[-i * 5]): success [20ms]
test Double512VectorTests.ATANDouble512VectorTests(double[i * 5]): success [84ms]
test Double512VectorTests.ATANDouble512VectorTests(double[i + 1]): success [8ms]
test Double512VectorTests.ATANDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [10ms]
test Double512VectorTests.ATANDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [63ms]
test Double512VectorTests.ATANDouble512VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[-i * 5]): success [44ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[i * 5]): success [62ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[i + 1]): success [46ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [47ms]
test Double512VectorTests.BroadcastDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [112ms]
test Double512VectorTests.BroadcastDouble512VectorTests(double[cornerCaseValue(i)]): success [39ms]
test Double512VectorTests.BroadcastLongDouble512VectorTestsSmokeTest(double[-i * 5]): success [2ms]
test Double512VectorTests.BroadcastLongDouble512VectorTestsSmokeTest(double[i * 5]): success [2ms]
test Double512VectorTests.BroadcastLongDouble512VectorTestsSmokeTest(double[i + 1]): success [2ms]
test Double512VectorTests.BroadcastLongDouble512VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [2ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[-i * 5]): success [36ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[i * 5]): success [129ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[i + 1]): success [2ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double512VectorTests.CBRTDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [92ms]
test Double512VectorTests.CBRTDouble512VectorTests(double[cornerCaseValue(i)]): success [57ms]
test Double512VectorTests.COSDouble512VectorTests(double[-i * 5]): success [16ms]
test Double512VectorTests.COSDouble512VectorTests(double[i * 5]): success [85ms]
test Double512VectorTests.COSDouble512VectorTests(double[i + 1]): success [2ms]
test Double512VectorTests.COSDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [2ms]
test Double512VectorTests.COSDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [75ms]
test Double512VectorTests.COSDouble512VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.COSHDouble512VectorTests(double[-i * 5]): success [51ms]
test Double512VectorTests.COSHDouble512VectorTests(double[i * 5]): success [126ms]
test Double512VectorTests.COSHDouble512VectorTests(double[i + 1]): success [8ms]
test Double512VectorTests.COSHDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [3ms]
test Double512VectorTests.COSHDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [76ms]
test Double512VectorTests.COSHDouble512VectorTests(double[cornerCaseValue(i)]): success [67ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], double[i * 5]): success [184ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], double[i + 1]): success [148ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [2ms]
test Double512VectorTests.DIVDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [68ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [18ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [21ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [72ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [1ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [2ms]
test Double512VectorTests.DIVDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [3ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[i]): success [207ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[i - length / 2]): success [163ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[i + 1]): success [46ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[i - 2]): success [46ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[zigZag(i)]): success [113ms]
test Double512VectorTests.EQDouble512VectorTests(double[i], double[cornerCaseValue(i)]): success [45ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[i]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[i - length / 2]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[i + 1]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[i - 2]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[zigZag(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [78ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[i]): success [42ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[i - length / 2]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[i + 1]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[i - 2]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[zigZag(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [40ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[i]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[i - length / 2]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[i + 1]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[i - 2]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[zigZag(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[i]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[i - length / 2]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[i + 1]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[i - 2]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[zigZag(i)]): success [49ms]
test Double512VectorTests.EQDouble512VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [44ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[i]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [41ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[i % 2]): success [15ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[i % 2]): success [2ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[i % 2]): success [3ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[i % 2]): success [2ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[i % 2]): success [2ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[i % 2]): success [68ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[i % 2]): success [4ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[i % 2]): success [4ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - length / 2], mask[i % 2]): success [5ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i + 1], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i - 2], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - length / 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[i - 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[zigZag(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - length / 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[i - 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[zigZag(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - length / 2], double[cornerCaseValue(i)], mask[true]): success [86ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - length / 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[i - 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[zigZag(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i + 1], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - length / 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[i - 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[zigZag(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[i - 2], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - length / 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i + 1], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[i - 2], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[zigZag(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)], mask[true]): success [1ms]
test Double512VectorTests.EQDouble512VectorTestsBroadcastLongMaskedSmokeTest(double[cornerCaseValue(i)], double[i], mask[true]): success [1ms]
test 

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

)], AbstractVectorTest$1@25daae7f): success [48ms]
test Double512VectorTests.fmaDouble512VectorTestsDoubleBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.getDouble512VectorTests(double[-i * 5]): success [4ms]
test Double512VectorTests.getDouble512VectorTests(double[i * 5]): success [5ms]
test Double512VectorTests.getDouble512VectorTests(double[i + 1]): success [5ms]
test Double512VectorTests.getDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [4ms]
test Double512VectorTests.getDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [103ms]
test Double512VectorTests.getDouble512VectorTests(double[cornerCaseValue(i)]): success [2ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[-i * 5]): success [35ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[i * 5]): success [0ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[i + 1]): success [0ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.hashCodeDouble512VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(0): success [64ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(-1): success [16ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(1): success [15ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(2): success [1ms]
test Double512VectorTests.indexInRangeDouble512VectorTestsSmokeTest(-2): success [1ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(0): success [1ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(-1): success [1ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(1): success [1ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(2): success [2ms]
test Double512VectorTests.indexInRangeLongDouble512VectorTestsSmokeTest(-2): success [1ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(0): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(1): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(32): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(37): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(1024): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(1025): success [0ms]
test Double512VectorTests.loopBoundDouble512VectorTestsSmokeTest(1029): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(0): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(1): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(32): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(37): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(1024): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(1025): success [0ms]
test Double512VectorTests.loopBoundLongDouble512VectorTestsSmokeTest(1029): success [0ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[i]): success [108ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[i - length / 2]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[i + 1]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[i - 2]): success [46ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[zigZag(i)]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i], double[cornerCaseValue(i)]): success [47ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[i]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[i - length / 2]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[i + 1]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[i - 2]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[zigZag(i)]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - length / 2], double[cornerCaseValue(i)]): success [47ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[i]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[i - length / 2]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[i + 1]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[i - 2]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[zigZag(i)]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[i + 1], double[cornerCaseValue(i)]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[i]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[i - length / 2]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[i + 1]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[i - 2]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[zigZag(i)]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[i - 2], double[cornerCaseValue(i)]): success [46ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[i]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[i - length / 2]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[i + 1]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[i - 2]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[zigZag(i)]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[zigZag(i)], double[cornerCaseValue(i)]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[i]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[i - length / 2]): success [39ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[i + 1]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[i - 2]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[zigZag(i)]): success [40ms]
test Double512VectorTests.ltDouble512VectorTests(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [40ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[i]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[i - 2]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[i - 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - length / 2], double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[i]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[i - 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i + 1], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[i]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[i - length / 2]): success [1ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[i - 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[i - 2], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[i - 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[zigZag(i)], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - length / 2]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i + 1]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[i - 2]): success [43ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[zigZag(i)]): success [0ms]
test Double512VectorTests.ltDouble512VectorTestsBroadcastSmokeTest(double[cornerCaseValue(i)], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.maskAndDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Double512VectorTests.maskAndDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskAndNotDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Double512VectorTests.maskAndNotDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskCompressDouble512VectorTestsSmokeTest(mask[i % 2]): success [430ms]
test Double512VectorTests.maskCompressDouble512VectorTestsSmokeTest(mask[true]): success [211ms]
test Double512VectorTests.maskCompressDouble512VectorTestsSmokeTest(mask[false]): success [210ms]
test Double512VectorTests.maskEqDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [7ms]
test Double512VectorTests.maskEqDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskEqualsDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Double512VectorTests.maskEqualsDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskFirstTrueDouble512VectorTestsSmokeTest(mask[i % 2]): success [85ms]
test Double512VectorTests.maskFirstTrueDouble512VectorTestsSmokeTest(mask[true]): success [73ms]
test Double512VectorTests.maskFirstTrueDouble512VectorTestsSmokeTest(mask[false]): success [46ms]
test Double512VectorTests.maskFromToLongDouble512VectorTestsSmokeTest(-1): success [53ms]
test Double512VectorTests.maskFromToLongDouble512VectorTestsSmokeTest(0): success [0ms]
test Double512VectorTests.maskFromToLongDouble512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Double512VectorTests.maskFromToLongDouble512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Double512VectorTests.maskHashCodeDouble512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Double512VectorTests.maskHashCodeDouble512VectorTestsSmokeTest(mask[true]): success [0ms]
test Double512VectorTests.maskHashCodeDouble512VectorTestsSmokeTest(mask[false]): success [0ms]
test Double512VectorTests.maskLastTrueDouble512VectorTestsSmokeTest(mask[i % 2]): success [88ms]
test Double512VectorTests.maskLastTrueDouble512VectorTestsSmokeTest(mask[true]): success [73ms]
test Double512VectorTests.maskLastTrueDouble512VectorTestsSmokeTest(mask[false]): success [57ms]
test Double512VectorTests.maskOrDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [45ms]
test Double512VectorTests.maskOrDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maskTrueCountDouble512VectorTestsSmokeTest(mask[i % 2]): success [59ms]
test Double512VectorTests.maskTrueCountDouble512VectorTestsSmokeTest(mask[true]): success [72ms]
test Double512VectorTests.maskTrueCountDouble512VectorTestsSmokeTest(mask[false]): success [39ms]
test Double512VectorTests.maskXorDouble512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [8ms]
test Double512VectorTests.maskXorDouble512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.maxDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.maxDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.minDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.minDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.mulDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [30ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [5ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [5ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double512VectorTests.mulDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.negDouble512VectorTests(double[-i * 5]): success [7ms]
test Double512VectorTests.negDouble512VectorTests(double[i * 5]): success [7ms]
test Double512VectorTests.negDouble512VectorTests(double[i + 1]): success [1ms]
test Double512VectorTests.negDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double512VectorTests.negDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [46ms]
test Double512VectorTests.negDouble512VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], double[i * 5]): success [24ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], double[i + 1]): success [13ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [2ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [3ms]
test Double512VectorTests.powDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [79ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [12ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.powDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.shuffleEqualsDouble512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [224ms]
test Double512VectorTests.shuffleEqualsDouble512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [23ms]
test Double512VectorTests.shuffleMiscellaneousDouble512VectorTestsSmokeTest(shuffle[random]): success [6ms]
test Double512VectorTests.shuffleTest(): success [991ms]
test Double512VectorTests.shuffleToStringDouble512VectorTestsSmokeTest(shuffle[random]): success [35ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[i * 5]): success [535ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[i + 1]): success [1250ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [310ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [288ms]
test Double512VectorTests.sliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [1128ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [311ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [492ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [298ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [297ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [1064ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [301ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [373ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [305ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [295ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [313ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [296ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [294ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [294ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [307ms]
test Double512VectorTests.sliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [296ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[-i * 5]): success [263ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[i * 5]): success [527ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[i + 1]): success [241ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [242ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [669ms]
test Double512VectorTests.sliceUnaryDouble512VectorTests(double[cornerCaseValue(i)]): success [269ms]
test Double512VectorTests.smokeTest1(): success [0ms]
test Double512VectorTests.smokeTest2(): success [44ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[-i * 5]): success [8ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[i * 5]): success [7ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[i + 1]): success [1ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [1ms]
test Double512VectorTests.sqrtDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [63ms]
test Double512VectorTests.sqrtDouble512VectorTests(double[cornerCaseValue(i)]): success [1ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], double[i * 5]): success [7ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.subDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [38ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastMaskedSmokeTest(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i * 5]): success [6ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[i + 1]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[0.01 + (i / (i + 1))]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], AbstractVectorTest$1@25daae7f): success [0ms]
test Double512VectorTests.subDouble512VectorTestsBroadcastSmokeTest(double[-i * 5], double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [6ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [0ms]
test Double512VectorTests.subDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [0ms]
test Double512VectorTests.toIntArrayDouble512VectorTestsSmokeTest(double[-i * 5]): success [5ms]
test Double512VectorTests.toIntArrayDouble512VectorTestsSmokeTest(double[i * 5]): success [5ms]
test Double512VectorTests.toIntArrayDouble512VectorTestsSmokeTest(double[i + 1]): success [5ms]
test Double512VectorTests.toIntArrayDouble512VectorTestsSmokeTest(double[intCornerCaseValue(i)]): success [5ms]
test Double512VectorTests.toLongArrayDouble512VectorTestsSmokeTest(double[-i * 5]): success [0ms]
test Double512VectorTests.toLongArrayDouble512VectorTestsSmokeTest(double[i * 5]): success [2ms]
test Double512VectorTests.toLongArrayDouble512VectorTestsSmokeTest(double[i + 1]): success [0ms]
test Double512VectorTests.toLongArrayDouble512VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [0ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[-i * 5]): success [7ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[i * 5]): success [1ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[i + 1]): success [1ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[0.01 + (i / (i + 1))]): success [18ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(AbstractVectorTest$1@25daae7f): success [2ms]
test Double512VectorTests.toStringDouble512VectorTestsSmokeTest(double[cornerCaseValue(i)]): success [14ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[i * 5]): success [265ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[i + 1]): success [629ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[0.01 + (i / (i + 1))]): success [330ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], AbstractVectorTest$1@25daae7f): success [383ms]
test Double512VectorTests.unsliceBinaryDouble512VectorTestsBinary(double[-i * 5], double[cornerCaseValue(i)]): success [850ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[i % 2]): success [664ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[i % 2]): success [1774ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[i % 2]): success [515ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[i % 2]): success [527ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[i % 2]): success [2060ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[true]): success [516ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[true]): success [529ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[true]): success [539ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[true]): success [556ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[true]): success [1059ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i * 5], mask[false]): success [616ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[i + 1], mask[false]): success [512ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[0.01 + (i / (i + 1))], mask[false]): success [511ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], AbstractVectorTest$1@25daae7f, mask[false]): success [526ms]
test Double512VectorTests.unsliceDouble512VectorTestsMasked(double[-i * 5], double[cornerCaseValue(i)], mask[false]): success [528ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[-i * 5]): success [264ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[i * 5]): success [533ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[i + 1]): success [264ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[0.01 + (i / (i + 1))]): success [250ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(AbstractVectorTest$1@25daae7f): success [512ms]
test Double512VectorTests.unsliceUnaryDouble512VectorTests(double[cornerCaseValue(i)]): success [249ms]
test Double512VectorTests.viewAsFloatingLanesTest(): success [21ms]
test Double512VectorTests.viewAsIntegeralLanesTest(): success [28ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], double[i * 5]): success [12ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], double[i + 1]): success [24ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], double[0.01 + (i / (i + 1))]): success [10ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], AbstractVectorTest$1@25daae7f): success [10ms]
test Double512VectorTests.withDouble512VectorTests(double[-i * 5], double[cornerCaseValue(i)]): success [173ms]

===============================================
jdk/incubator/vector/Double512VectorTests.java
Total tests run: 3209, Passes: 3208, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Double512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Double512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/Double512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=4 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Double512VectorTests.d/testng.0.jta jdk/incubator/vector/Double512VectorTests.java false Double512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Double256VectorTests.java
Passed: jdk/incubator/vector/Float64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Double128VectorTests.java
Passed: jdk/incubator/vector/FloatMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/ImageTest.java
Passed: jdk/incubator/vector/Int128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float128VectorTests.java
Passed: jdk/incubator/vector/ByteMaxVectorTests.java
Passed: jdk/incubator/vector/Int256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/FloatMaxVectorTests.java
Passed: jdk/incubator/vector/Int64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float256VectorTests.java
Passed: jdk/incubator/vector/Long128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Float512VectorTests.java
TEST: jdk/incubator/vector/Int128VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   1.851 seconds
messages:
command: build Int128VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 23:09:41 IST 2025
Test directory:
  compile: Int128VectorTests
finished: Wed Apr 16 23:09:43 IST 2025
elapsed time (seconds): 1.851

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   1.851 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 23:09:41 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 11
Process id: 1789525
finished: Wed Apr 16 23:09:43 IST 2025
elapsed time (seconds): 1.851
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/14 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int128VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests 
TIME:   275.301 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int128VectorTests 
started: Wed Apr 16 23:09:43 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1793441
finished: Wed Apr 16 23:14:18 IST 2025
elapsed time (seconds): 275.301
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 2800461280399391833
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=2800461280399391833" to command line.
test Int128VectorTests.ABSInt128VectorTests(int[-i * 5]): success [563ms]
test Int128VectorTests.ABSInt128VectorTests(int[i * 5]): success [53ms]
test Int128VectorTests.ABSInt128VectorTests(int[i + 1]): success [6ms]
test Int128VectorTests.ABSInt128VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[i % 2]): success [204ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[i % 2]): success [75ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[i % 2]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[true]): success [27ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.ABSMaskedInt128VectorTests(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[i * 5]): success [276ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[i + 1]): success [65ms]
test Int128VectorTests.ADDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [17ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [9ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [23ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [4ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [4ms]
test Int128VectorTests.ADDInt128VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [10ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [192ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [67ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.ADDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[-i * 5]): success [136ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[i * 5]): success [0ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[i + 1]): success [94ms]
test Int128VectorTests.ADDReduceInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [129ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [126ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [11ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[-i * 5]): success [19ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[i * 5]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [8ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [12ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.ADDReduceLongInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[i * 5]): success [116ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[i + 1]): success [60ms]
test Int128VectorTests.ANDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [19ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [2ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [7ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [8ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [67ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.ANDInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[-i * 5]): success [158ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[i * 5]): success [0ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[i + 1]): success [98ms]
test Int128VectorTests.ANDReduceInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[i % 2]): success [98ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[i % 2]): success [125ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [12ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.ANDReduceInt128VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[i * 5]): success [201ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[i + 1]): success [70ms]
test Int128VectorTests.AND_NOTInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [60ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [77ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.AND_NOTInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [36ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[i * 5]): success [113ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[i + 1]): success [72ms]
test Int128VectorTests.ASHRInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [3ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [87ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [77ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [3ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [3ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int128VectorTests.ASHRInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [221ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [61ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[-i * 5]): success [9ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[i * 5]): success [54ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[i + 1]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [66ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [65ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [12ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [51ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [3ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.ASHRInt128VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [131ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [93ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [370ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [4ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [105ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [72ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [6ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [74ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [45ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [19ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [4ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [3ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.BITWISE_BLENDInt128VectorTestsDoubleBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

eqInt128VectorTests(int[i], int[i]): success [221ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i - length / 2]): success [139ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i + 1]): success [98ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[i - 2]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[zigZag(i)]): success [98ms]
test Int128VectorTests.eqInt128VectorTests(int[i], int[cornerCaseValue(i)]): success [103ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i]): success [180ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i - length / 2]): success [142ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i + 1]): success [101ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[i - 2]): success [125ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[zigZag(i)]): success [109ms]
test Int128VectorTests.eqInt128VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [103ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i]): success [103ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i - length / 2]): success [174ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i + 1]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[i - 2]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[zigZag(i)]): success [107ms]
test Int128VectorTests.eqInt128VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [126ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i]): success [170ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i - length / 2]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i + 1]): success [97ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[i - 2]): success [138ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[zigZag(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [140ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i - length / 2]): success [120ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i + 1]): success [113ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[i - 2]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[zigZag(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [136ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i]): success [106ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [98ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [115ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [118ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [99ms]
test Int128VectorTests.eqInt128VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [9ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [55ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [30ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [0ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.eqInt128VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[i % 2]): success [150ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[i % 2]): success [76ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[i % 2]): success [4ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[true]): success [26ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[true]): success [1ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[true]): success [1ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int128VectorTests.expandInt128VectorTests(int[-i * 5], mask[false]): success [3ms]
test Int128VectorTests.expandInt128VectorTests(int[i * 5], mask[false]): success [3ms]
test Int128VectorTests.expandInt128VectorTests(int[i + 1], mask[false]): success [3ms]
test Int128VectorTests.expandInt128VectorTests(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int128VectorTests.getInt128VectorTests(int[-i * 5]): success [5ms]
test Int128VectorTests.getInt128VectorTests(int[i * 5]): success [78ms]
test Int128VectorTests.getInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.getInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[-i * 5]): success [15ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[i * 5]): success [2ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[i + 1]): success [21ms]
test Int128VectorTests.hashCodeInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [2ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(0): success [101ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(-1): success [4ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(1): success [28ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(2): success [3ms]
test Int128VectorTests.indexInRangeInt128VectorTestsSmokeTest(-2): success [4ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(0): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(-1): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(1): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(2): success [3ms]
test Int128VectorTests.indexInRangeLongInt128VectorTestsSmokeTest(-2): success [3ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(0): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(32): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(37): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1024): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1025): success [0ms]
test Int128VectorTests.loopBoundInt128VectorTestsSmokeTest(1029): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(0): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1): success [4ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(32): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(37): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1024): success [1ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1025): success [0ms]
test Int128VectorTests.loopBoundLongInt128VectorTestsSmokeTest(1029): success [0ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i]): success [205ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i - length / 2]): success [108ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i + 1]): success [173ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[i - 2]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[zigZag(i)]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i], int[cornerCaseValue(i)]): success [135ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i]): success [140ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i - length / 2]): success [137ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i + 1]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[i - 2]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[zigZag(i)]): success [105ms]
test Int128VectorTests.ltInt128VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [165ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i]): success [137ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i - length / 2]): success [98ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i + 1]): success [105ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[i - 2]): success [135ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[zigZag(i)]): success [136ms]
test Int128VectorTests.ltInt128VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [182ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i]): success [115ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i - length / 2]): success [108ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i + 1]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[i - 2]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[zigZag(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i - length / 2]): success [99ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i + 1]): success [102ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[i - 2]): success [111ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[zigZag(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [135ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [100ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [101ms]
test Int128VectorTests.ltInt128VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [99ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [6ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [57ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [3ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [2ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [4ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [43ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int128VectorTests.ltInt128VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int128VectorTests.maskAndInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [14ms]
test Int128VectorTests.maskAndInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskAndNotInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [6ms]
test Int128VectorTests.maskAndNotInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[i % 2]): success [262ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[true]): success [106ms]
test Int128VectorTests.maskCompressInt128VectorTestsSmokeTest(mask[false]): success [100ms]
test Int128VectorTests.maskEqInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test Int128VectorTests.maskEqInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskEqualsInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int128VectorTests.maskEqualsInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[i % 2]): success [69ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[true]): success [49ms]
test Int128VectorTests.maskFirstTrueInt128VectorTestsSmokeTest(mask[false]): success [0ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(-1): success [79ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(0): success [0ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int128VectorTests.maskFromToLongInt128VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[true]): success [0ms]
test Int128VectorTests.maskHashCodeInt128VectorTestsSmokeTest(mask[false]): success [0ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[i % 2]): success [75ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[true]): success [37ms]
test Int128VectorTests.maskLastTrueInt128VectorTestsSmokeTest(mask[false]): success [19ms]
test Int128VectorTests.maskOrInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [20ms]
test Int128VectorTests.maskOrInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[i % 2]): success [50ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[true]): success [38ms]
test Int128VectorTests.maskTrueCountInt128VectorTestsSmokeTest(mask[false]): success [0ms]
test Int128VectorTests.maskXorInt128VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Int128VectorTests.maskXorInt128VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.maxInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.maxInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.minInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.minInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [46ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[i * 5]): success [11ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.mulInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [9ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [10ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [10ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.mulInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.negInt128VectorTests(int[-i * 5]): success [25ms]
test Int128VectorTests.negInt128VectorTests(int[i * 5]): success [86ms]
test Int128VectorTests.negInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.negInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.notInt128VectorTests(int[-i * 5]): success [31ms]
test Int128VectorTests.notInt128VectorTests(int[i * 5]): success [82ms]
test Int128VectorTests.notInt128VectorTests(int[i + 1]): success [0ms]
test Int128VectorTests.notInt128VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[i * 5]): success [15ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.orInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [22ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.orInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.shuffleEqualsInt128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [22ms]
test Int128VectorTests.shuffleEqualsInt128VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [17ms]
test Int128VectorTests.shuffleMiscellaneousInt128VectorTestsSmokeTest(shuffle[random]): success [15ms]
test Int128VectorTests.shuffleTest(): success [317ms]
test Int128VectorTests.shuffleToStringInt128VectorTestsSmokeTest(shuffle[random]): success [40ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i * 5]): success [662ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i + 1]): success [227ms]
test Int128VectorTests.sliceBinaryInt128VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [107ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [170ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [270ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [108ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [99ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [112ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [99ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [127ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [99ms]
test Int128VectorTests.sliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [135ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[-i * 5]): success [241ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[i * 5]): success [214ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[i + 1]): success [102ms]
test Int128VectorTests.sliceUnaryInt128VectorTests(int[cornerCaseValue(i)]): success [97ms]
test Int128VectorTests.smokeTest1(): success [0ms]
test Int128VectorTests.smokeTest2(): success [82ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.subInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int128VectorTests.subInt128VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int128VectorTests.subInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toDoubleArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toIntArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[-i * 5]): success [1ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int128VectorTests.toLongArrayInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[-i * 5]): success [5ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[i * 5]): success [1ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[i + 1]): success [13ms]
test Int128VectorTests.toStringInt128VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [14ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i * 5]): success [240ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[i + 1]): success [321ms]
test Int128VectorTests.unsliceBinaryInt128VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [311ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [579ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [484ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [218ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [215ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [209ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [425ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [201ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [204ms]
test Int128VectorTests.unsliceInt128VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [194ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[-i * 5]): success [239ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[i * 5]): success [201ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[i + 1]): success [97ms]
test Int128VectorTests.unsliceUnaryInt128VectorTests(int[cornerCaseValue(i)]): success [97ms]
test Int128VectorTests.viewAsFloatingLanesTest(): success [489ms]
test Int128VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[i * 5]): success [26ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[i + 1]): success [112ms]
test Int128VectorTests.withInt128VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]

===============================================
jdk/incubator/vector/Int128VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/14 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int128VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int128VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/jdk/incubator/vector/Int128VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/11/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=4 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Int128VectorTests.d/testng.0.jta jdk/incubator/vector/Int128VectorTests.java false Int128VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/Long256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/IntMaxVectorTests.java
Passed: jdk/incubator/vector/Double64VectorTests.java
Passed: jdk/incubator/vector/Long64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/MethodOverideTest.java
Passed: jdk/incubator/vector/LongMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/MismatchTest.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id0
Passed: jdk/incubator/vector/Byte128VectorTests.java
Passed: jdk/incubator/vector/PreferredSpeciesTest.java#id1
TEST: jdk/incubator/vector/Int512VectorTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.928 seconds
messages:
command: build Int512VectorTests
reason: Named class compiled on demand
started: Wed Apr 16 23:10:19 IST 2025
Test directory:
  compile: Int512VectorTests
finished: Wed Apr 16 23:10:20 IST 2025
elapsed time (seconds): 0.928

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.927 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 23:10:19 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector
Mode: agentvm
Agent id: 2
Process id: 1788863
finished: Wed Apr 16 23:10:20 IST 2025
elapsed time (seconds): 0.927
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int512VectorTests.d
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/6 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/Int512VectorTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int512VectorTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -J-Dtest.modules=jdk.incubator.vector \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int512VectorTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
REASON: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int512VectorTests 
TIME:   350.744 seconds
messages:
command: testng -ea -esa -Xbatch -XX:-TieredCompilation Int512VectorTests
reason: User specified action: run testng/othervm/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Int512VectorTests 
started: Wed Apr 16 23:10:20 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector
Process id: 1796426
finished: Wed Apr 16 23:16:11 IST 2025
elapsed time (seconds): 350.744
configuration:
Boot Layer
  add modules: jdk.incubator.vector

STDOUT:
For random generator using seed: 6407450535992472861
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=6407450535992472861" to command line.
test Int512VectorTests.ABSInt512VectorTests(int[-i * 5]): success [460ms]
test Int512VectorTests.ABSInt512VectorTests(int[i * 5]): success [522ms]
test Int512VectorTests.ABSInt512VectorTests(int[i + 1]): success [11ms]
test Int512VectorTests.ABSInt512VectorTests(int[cornerCaseValue(i)]): success [9ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[-i * 5], mask[i % 2]): success [237ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i * 5], mask[i % 2]): success [210ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i + 1], mask[i % 2]): success [194ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [14ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[-i * 5], mask[true]): success [208ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i * 5], mask[true]): success [3ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i + 1], mask[true]): success [3ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[-i * 5], mask[false]): success [2ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i * 5], mask[false]): success [2ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[i + 1], mask[false]): success [3ms]
test Int512VectorTests.ABSMaskedInt512VectorTests(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int512VectorTests.ADDInt512VectorTests(int[-i * 5], int[i * 5]): success [228ms]
test Int512VectorTests.ADDInt512VectorTests(int[-i * 5], int[i + 1]): success [481ms]
test Int512VectorTests.ADDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [5ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i * 5]): success [22ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[i + 1]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [9ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [41ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [4ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [3ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [5ms]
test Int512VectorTests.ADDInt512VectorTestsBroadcastMaskedLongSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [14ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): failure [357ms]
java.lang.AssertionError: at index #257, input1 = -1285, input2 = 1285, mask = false expected [-1285] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:907)
	at Int512VectorTests.assertArraysEquals(Int512VectorTests.java:455)
	at Int512VectorTests.assertArraysEquals(Int512VectorTests.java:445)
	at Int512VectorTests.ADDInt512VectorTestsMasked(Int512VectorTests.java:1498)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [80ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [7ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [103ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [4ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [22ms]
test Int512VectorTests.ADDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [6ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[-i * 5]): success [203ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[i * 5]): success [5ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[i + 1]): success [95ms]
test Int512VectorTests.ADDReduceInt512VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[-i * 5], mask[i % 2]): success [110ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i * 5], mask[i % 2]): success [3ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i + 1], mask[i % 2]): success [118ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [34ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[-i * 5], mask[true]): success [3ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i * 5], mask[true]): success [3ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i + 1], mask[true]): success [3ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[-i * 5], mask[false]): success [2ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i * 5], mask[false]): success [19ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int512VectorTests.ADDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[-i * 5]): success [16ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[i * 5]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[i + 1]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTests(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[-i * 5], mask[i % 2]): success [15ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[-i * 5], mask[false]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i * 5], mask[false]): success [22ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.ADDReduceLongInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.ANDInt512VectorTests(int[-i * 5], int[i * 5]): success [542ms]
test Int512VectorTests.ANDInt512VectorTests(int[-i * 5], int[i + 1]): success [129ms]
test Int512VectorTests.ANDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [6ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [6ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [32ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [2ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [14ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [2ms]
test Int512VectorTests.ANDInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [2ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [11ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [6ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [6ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [6ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [110ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [5ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [5ms]
test Int512VectorTests.ANDInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [6ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[-i * 5]): success [231ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[i * 5]): success [3ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[i + 1]): success [84ms]
test Int512VectorTests.ANDReduceInt512VectorTests(int[cornerCaseValue(i)]): success [3ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[-i * 5], mask[i % 2]): success [29ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i + 1], mask[i % 2]): success [109ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[i % 2]): success [4ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[-i * 5], mask[true]): success [4ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i * 5], mask[true]): success [4ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i + 1], mask[true]): success [4ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[-i * 5], mask[false]): success [3ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i * 5], mask[false]): success [19ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[i + 1], mask[false]): success [3ms]
test Int512VectorTests.ANDReduceInt512VectorTestsMasked(int[cornerCaseValue(i)], mask[false]): success [25ms]
test Int512VectorTests.AND_NOTInt512VectorTests(int[-i * 5], int[i * 5]): success [508ms]
test Int512VectorTests.AND_NOTInt512VectorTests(int[-i * 5], int[i + 1]): success [445ms]
test Int512VectorTests.AND_NOTInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [86ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [141ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [168ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [89ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [83ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [241ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [84ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [173ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [84ms]
test Int512VectorTests.AND_NOTInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [86ms]
test Int512VectorTests.ASHRInt512VectorTests(int[-i * 5], int[i * 5]): success [164ms]
test Int512VectorTests.ASHRInt512VectorTests(int[-i * 5], int[i + 1]): success [349ms]
test Int512VectorTests.ASHRInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [83ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [230ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [145ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [68ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [56ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [209ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [65ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [78ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [53ms]
test Int512VectorTests.ASHRInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [53ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShift(int[-i * 5], int[i * 5]): success [123ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShift(int[-i * 5], int[i + 1]): success [346ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShift(int[-i * 5], int[cornerCaseValue(i)]): success [4ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[-i * 5]): success [11ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[i * 5]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[i + 1]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftConst(int[cornerCaseValue(i)]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [25ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [47ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[true]): success [5ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[true]): success [109ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [5ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i * 5], mask[false]): success [4ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[i + 1], mask[false]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[i % 2]): success [16ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i + 1], mask[i % 2]): success [5ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[i % 2]): success [5ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[true]): success [96ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i * 5], mask[true]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i + 1], mask[true]): success [4ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[true]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[-i * 5], mask[false]): success [8ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i * 5], mask[false]): success [3ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[i + 1], mask[false]): success [2ms]
test Int512VectorTests.ASHRInt512VectorTestsScalarShiftMaskedConst(int[cornerCaseValue(i)], mask[false]): success [2ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[-i * 5]): success [16ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[i * 5]): success [166ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[i + 1]): success [8ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [8ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[-i * 5]): success [189ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[i * 5]): success [10ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[i + 1]): success [8ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [7ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [8ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [8ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [8ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [8ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [567ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [0ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [60ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[-i * 5]): success [9ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[-i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5]): success [2ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsAltBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[i % 2]): success [11ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[i % 2]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[i % 2]): success [2ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[true]): success [2ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i * 5], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[-i * 5], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i * 5], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[i + 1], mask[false]): success [79ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[-i * 5], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i * 5], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[i + 1], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], int[cornerCaseValue(i)], mask[false]): success [1ms]
test Int512VectorTests.BITWISE_BLENDInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], int[-i * 5], mask[false]): success [1ms]
test Int512VectorTests.B

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...

Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [245ms]
test Int512VectorTests.divInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [304ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i]): success [191ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i - length / 2]): success [71ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i + 1]): success [76ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[i - 2]): success [104ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[zigZag(i)]): success [70ms]
test Int512VectorTests.eqInt512VectorTests(int[i], int[cornerCaseValue(i)]): success [109ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i - length / 2]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i + 1]): success [70ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[i - 2]): success [72ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[zigZag(i)]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [103ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i]): success [71ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i - length / 2]): success [71ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i + 1]): success [72ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[i - 2]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[zigZag(i)]): success [102ms]
test Int512VectorTests.eqInt512VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i]): success [71ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i - length / 2]): success [75ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i + 1]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[i - 2]): success [101ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[zigZag(i)]): success [83ms]
test Int512VectorTests.eqInt512VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [71ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i]): success [70ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i - length / 2]): success [116ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i + 1]): success [70ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[i - 2]): success [70ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[zigZag(i)]): success [70ms]
test Int512VectorTests.eqInt512VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [71ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i]): success [133ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [73ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [70ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [69ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [99ms]
test Int512VectorTests.eqInt512VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [108ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i]): success [2ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[i - 2]): success [14ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - length / 2]): success [125ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.eqInt512VectorTestsBroadcastMaskedSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.expandInt512VectorTests(int[-i * 5], mask[i % 2]): success [544ms]
test Int512VectorTests.expandInt512VectorTests(int[i * 5], mask[i % 2]): success [110ms]
test Int512VectorTests.expandInt512VectorTests(int[i + 1], mask[i % 2]): success [105ms]
test Int512VectorTests.expandInt512VectorTests(int[cornerCaseValue(i)], mask[i % 2]): success [84ms]
test Int512VectorTests.expandInt512VectorTests(int[-i * 5], mask[true]): success [99ms]
test Int512VectorTests.expandInt512VectorTests(int[i * 5], mask[true]): success [226ms]
test Int512VectorTests.expandInt512VectorTests(int[i + 1], mask[true]): success [2ms]
test Int512VectorTests.expandInt512VectorTests(int[cornerCaseValue(i)], mask[true]): success [2ms]
test Int512VectorTests.expandInt512VectorTests(int[-i * 5], mask[false]): success [5ms]
test Int512VectorTests.expandInt512VectorTests(int[i * 5], mask[false]): success [5ms]
test Int512VectorTests.expandInt512VectorTests(int[i + 1], mask[false]): success [11ms]
test Int512VectorTests.expandInt512VectorTests(int[cornerCaseValue(i)], mask[false]): success [12ms]
test Int512VectorTests.getInt512VectorTests(int[-i * 5]): success [25ms]
test Int512VectorTests.getInt512VectorTests(int[i * 5]): success [8ms]
test Int512VectorTests.getInt512VectorTests(int[i + 1]): success [7ms]
test Int512VectorTests.getInt512VectorTests(int[cornerCaseValue(i)]): success [8ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[-i * 5]): success [40ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.hashCodeInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(0): success [70ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(-1): success [2ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(1): success [19ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(2): success [2ms]
test Int512VectorTests.indexInRangeInt512VectorTestsSmokeTest(-2): success [3ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(0): success [2ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(-1): success [2ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(1): success [1ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(2): success [1ms]
test Int512VectorTests.indexInRangeLongInt512VectorTestsSmokeTest(-2): success [2ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(0): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(32): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(37): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1024): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1025): success [0ms]
test Int512VectorTests.loopBoundInt512VectorTestsSmokeTest(1029): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(0): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1): success [4ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(32): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(37): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1024): success [1ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1025): success [0ms]
test Int512VectorTests.loopBoundLongInt512VectorTestsSmokeTest(1029): success [0ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i]): success [194ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i - length / 2]): success [72ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i + 1]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[i - 2]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[zigZag(i)]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i], int[cornerCaseValue(i)]): success [103ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i]): success [119ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i - length / 2]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i + 1]): success [68ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[i - 2]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[zigZag(i)]): success [93ms]
test Int512VectorTests.ltInt512VectorTests(int[i - length / 2], int[cornerCaseValue(i)]): success [118ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i - length / 2]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i + 1]): success [81ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[i - 2]): success [88ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[zigZag(i)]): success [98ms]
test Int512VectorTests.ltInt512VectorTests(int[i + 1], int[cornerCaseValue(i)]): success [72ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i]): success [69ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i - length / 2]): success [89ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i + 1]): success [83ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[i - 2]): success [80ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[zigZag(i)]): success [72ms]
test Int512VectorTests.ltInt512VectorTests(int[i - 2], int[cornerCaseValue(i)]): success [81ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i]): success [91ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i - length / 2]): success [78ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i + 1]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[i - 2]): success [100ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[zigZag(i)]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[zigZag(i)], int[cornerCaseValue(i)]): success [97ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i]): success [71ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i - length / 2]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i + 1]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[i - 2]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[zigZag(i)]): success [70ms]
test Int512VectorTests.ltInt512VectorTests(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [71ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i]): success [2ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i + 1]): success [6ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - length / 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i + 1], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[i - 2], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - length / 2]): success [77ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[zigZag(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - length / 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i + 1]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[i - 2]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[zigZag(i)]): success [1ms]
test Int512VectorTests.ltInt512VectorTestsBroadcastSmokeTest(int[cornerCaseValue(i)], int[cornerCaseValue(i)]): success [1ms]
test Int512VectorTests.maskAndInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [12ms]
test Int512VectorTests.maskAndInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskAndNotInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [5ms]
test Int512VectorTests.maskAndNotInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskCompressInt512VectorTestsSmokeTest(mask[i % 2]): success [582ms]
test Int512VectorTests.maskCompressInt512VectorTestsSmokeTest(mask[true]): success [327ms]
test Int512VectorTests.maskCompressInt512VectorTestsSmokeTest(mask[false]): success [363ms]
test Int512VectorTests.maskEqInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [11ms]
test Int512VectorTests.maskEqInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskEqualsInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [0ms]
test Int512VectorTests.maskEqualsInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskFirstTrueInt512VectorTestsSmokeTest(mask[i % 2]): success [106ms]
test Int512VectorTests.maskFirstTrueInt512VectorTestsSmokeTest(mask[true]): success [99ms]
test Int512VectorTests.maskFirstTrueInt512VectorTestsSmokeTest(mask[false]): success [61ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(-1): success [63ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(0): success [0ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(6148914691236517205): success [0ms]
test Int512VectorTests.maskFromToLongInt512VectorTestsSmokeTest(81985529216486895): success [0ms]
test Int512VectorTests.maskHashCodeInt512VectorTestsSmokeTest(mask[i % 2]): success [0ms]
test Int512VectorTests.maskHashCodeInt512VectorTestsSmokeTest(mask[true]): success [0ms]
test Int512VectorTests.maskHashCodeInt512VectorTestsSmokeTest(mask[false]): success [0ms]
test Int512VectorTests.maskLastTrueInt512VectorTestsSmokeTest(mask[i % 2]): success [154ms]
test Int512VectorTests.maskLastTrueInt512VectorTestsSmokeTest(mask[true]): success [95ms]
test Int512VectorTests.maskLastTrueInt512VectorTestsSmokeTest(mask[false]): success [80ms]
test Int512VectorTests.maskOrInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [17ms]
test Int512VectorTests.maskOrInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maskTrueCountInt512VectorTestsSmokeTest(mask[i % 2]): success [72ms]
test Int512VectorTests.maskTrueCountInt512VectorTestsSmokeTest(mask[true]): success [130ms]
test Int512VectorTests.maskTrueCountInt512VectorTestsSmokeTest(mask[false]): success [75ms]
test Int512VectorTests.maskXorInt512VectorTestsSmokeTest(mask[i % 2], mask[true]): success [10ms]
test Int512VectorTests.maskXorInt512VectorTestsSmokeTest(mask[i % 2], mask[false]): success [0ms]
test Int512VectorTests.maxInt512VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int512VectorTests.maxInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.maxInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [5ms]
test Int512VectorTests.maxInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int512VectorTests.maxInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.maxInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.minInt512VectorTests(int[-i * 5], int[i * 5]): success [6ms]
test Int512VectorTests.minInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.minInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.minInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [6ms]
test Int512VectorTests.minInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.minInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [42ms]
test Int512VectorTests.mulInt512VectorTests(int[-i * 5], int[i * 5]): success [8ms]
test Int512VectorTests.mulInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.mulInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [9ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [1ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [1ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [7ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.mulInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.mulInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.negInt512VectorTests(int[-i * 5]): success [8ms]
test Int512VectorTests.negInt512VectorTests(int[i * 5]): success [8ms]
test Int512VectorTests.negInt512VectorTests(int[i + 1]): success [2ms]
test Int512VectorTests.negInt512VectorTests(int[cornerCaseValue(i)]): success [2ms]
test Int512VectorTests.notInt512VectorTests(int[-i * 5]): success [60ms]
test Int512VectorTests.notInt512VectorTests(int[i * 5]): success [60ms]
test Int512VectorTests.notInt512VectorTests(int[i + 1]): success [75ms]
test Int512VectorTests.notInt512VectorTests(int[cornerCaseValue(i)]): success [81ms]
test Int512VectorTests.orInt512VectorTests(int[-i * 5], int[i * 5]): success [11ms]
test Int512VectorTests.orInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.orInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.orInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [10ms]
test Int512VectorTests.orInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.orInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.shuffleEqualsInt512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [15ms]
test Int512VectorTests.shuffleEqualsInt512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success [11ms]
test Int512VectorTests.shuffleMiscellaneousInt512VectorTestsSmokeTest(shuffle[random]): success [3ms]
test Int512VectorTests.shuffleTest(): success [644ms]
test Int512VectorTests.shuffleToStringInt512VectorTestsSmokeTest(shuffle[random]): success [34ms]
test Int512VectorTests.sliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i * 5]): success [839ms]
test Int512VectorTests.sliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i + 1]): success [1382ms]
test Int512VectorTests.sliceBinaryInt512VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [360ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [411ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [1055ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [466ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [450ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [1291ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [412ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [399ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [420ms]
test Int512VectorTests.sliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [443ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[-i * 5]): success [414ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[i * 5]): success [886ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[i + 1]): success [368ms]
test Int512VectorTests.sliceUnaryInt512VectorTests(int[cornerCaseValue(i)]): success [418ms]
test Int512VectorTests.smokeTest1(): success [1ms]
test Int512VectorTests.smokeTest2(): success [89ms]
test Int512VectorTests.subInt512VectorTests(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.subInt512VectorTests(int[-i * 5], int[i + 1]): success [0ms]
test Int512VectorTests.subInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastMaskedSmokeTest(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i * 5]): success [5ms]
test Int512VectorTests.subInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[i + 1]): success [1ms]
test Int512VectorTests.subInt512VectorTestsBroadcastSmokeTest(int[-i * 5], int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [5ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [0ms]
test Int512VectorTests.subInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toDoubleArrayInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[-i * 5]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toIntArrayInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[-i * 5]): success [3ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[i * 5]): success [0ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[i + 1]): success [0ms]
test Int512VectorTests.toLongArrayInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [2ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[-i * 5]): success [5ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[i * 5]): success [1ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[i + 1]): success [26ms]
test Int512VectorTests.toStringInt512VectorTestsSmokeTest(int[cornerCaseValue(i)]): success [0ms]
test Int512VectorTests.unsliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i * 5]): success [369ms]
test Int512VectorTests.unsliceBinaryInt512VectorTestsBinary(int[-i * 5], int[i + 1]): success [983ms]
test Int512VectorTests.unsliceBinaryInt512VectorTestsBinary(int[-i * 5], int[cornerCaseValue(i)]): success [361ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[i % 2]): success [1048ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[i % 2]): success [3175ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[i % 2]): success [773ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[true]): success [804ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[true]): success [4999ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[true]): success [752ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i * 5], mask[false]): success [751ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[i + 1], mask[false]): success [721ms]
test Int512VectorTests.unsliceInt512VectorTestsMasked(int[-i * 5], int[cornerCaseValue(i)], mask[false]): success [897ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[-i * 5]): success [456ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[i * 5]): success [873ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[i + 1]): success [333ms]
test Int512VectorTests.unsliceUnaryInt512VectorTests(int[cornerCaseValue(i)]): success [370ms]
test Int512VectorTests.viewAsFloatingLanesTest(): success [484ms]
test Int512VectorTests.viewAsIntegeralLanesTest(): success [0ms]
test Int512VectorTests.withInt512VectorTests(int[-i * 5], int[i * 5]): success [10ms]
test Int512VectorTests.withInt512VectorTests(int[-i * 5], int[i + 1]): success [10ms]
test Int512VectorTests.withInt512VectorTests(int[-i * 5], int[cornerCaseValue(i)]): success [10ms]

===============================================
jdk/incubator/vector/Int512VectorTests.java
Total tests run: 3622, Passes: 3621, Failures: 1, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/6 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/Int512VectorTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/Int512VectorTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/lib \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int512VectorTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/jdk/incubator/vector/Int512VectorTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/12/test/lib \
        -Dtest.modules=jdk.incubator.vector \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=4 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -ea \
        -esa \
        -Xbatch \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/Int512VectorTests.d/testng.0.jta jdk/incubator/vector/Int512VectorTests.java false Int512VectorTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 1
--------------------------------------------------
Passed: jdk/incubator/vector/ScalarFloat16OperationsTest.java
Passed: jdk/incubator/vector/Float64VectorTests.java
Passed: jdk/incubator/vector/Int256VectorTests.java
Passed: jdk/incubator/vector/Short128VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short64VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Long256VectorTests.java
Passed: jdk/incubator/vector/Long128VectorTests.java
Passed: jdk/incubator/vector/Byte64VectorTests.java
Passed: jdk/incubator/vector/UnalignedHeapTest.java
Passed: jdk/incubator/vector/Long512VectorTests.java
Passed: jdk/incubator/vector/ShortMaxVectorLoadStoreTests.java
Passed: jdk/incubator/vector/Short256VectorLoadStoreTests.java
Passed: jdk/incubator/vector/LongMaxVectorTests.java
Passed: jdk/incubator/vector/VectorHash.java
Passed: jdk/incubator/vector/VectorMathTest.java
Passed: jdk/incubator/vector/Short512VectorLoadStoreTests.java
Passed: jdk/incubator/vector/Int64VectorTests.java
Passed: jdk/incubator/vector/ShortMaxVectorTests.java
Passed: jdk/incubator/vector/VectorRuns.java
Passed: jdk/incubator/vector/Short128VectorTests.java
Passed: jdk/incubator/vector/Long64VectorTests.java
Passed: jdk/incubator/vector/AddTest.java
Passed: jdk/incubator/vector/Vector512ConversionTests.java
Passed: jdk/incubator/vector/Byte256VectorTests.java
Passed: jdk/incubator/vector/Short64VectorTests.java
Passed: jdk/incubator/vector/Short256VectorTests.java
Passed: jdk/incubator/vector/Short512VectorTests.java
Passed: jdk/incubator/vector/Vector256ConversionTests.java
Passed: jdk/incubator/vector/Byte512VectorTests.java
Passed: jdk/incubator/vector/Vector128ConversionTests.java
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#id0
Passed: jdk/incubator/vector/VectorMaxConversionTests.java#Z
TEST: jdk/incubator/vector/VectorReshapeTests.java
TEST JDK: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk

ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.478 seconds
messages:
command: build VectorReshapeTests
reason: Named class compiled on demand
started: Wed Apr 16 23:20:16 IST 2025
Test directory:
  compile: VectorReshapeTests
finished: Wed Apr 16 23:20:17 IST 2025
elapsed time (seconds): 0.478

ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.478 seconds
messages:
command: compile /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
reason: .class file out of date or does not exist
started: Wed Apr 16 23:20:16 IST 2025
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Mode: agentvm
Agent id: 6
Process id: 1789061
finished: Wed Apr 16 23:20:17 IST 2025
elapsed time (seconds): 0.478
configuration:
Boot Layer (javac runtime environment)
  class path: /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar 
              /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar 
  patch:      java.base /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/patches/java.base

javac compilation environment
  add modules: jdk.incubator.vector java.base       
  add exports: java.base/jdk.internal.vm.annotation ALL-UNNAMED
  source path: /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
  class path:  /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector 
               /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar 
               /home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar 

rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/javac \
        -J-Xmx768m \
        -J-XX:MaxRAMPercentage=1.5625 \
        -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -J-ea \
        -J-esa \
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -J-Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -J-Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -J-Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -J-Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -J-Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -J-Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -J-Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -J-Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -d /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -sourcepath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -classpath /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar \
        --enable-preview \
        -source 25 /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java
direct:
warning: [incubating] using incubating module(s): jdk.incubator.vector
1 warning

ACTION: testng -- Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
REASON: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
TIME:   1223.807 seconds
messages:
command: testng --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests
reason: User specified action: run testng/othervm/timeout=240 --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED -XX:-TieredCompilation VectorReshapeTests 
started: Wed Apr 16 23:20:17 IST 2025
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.incubator.vector,java.base --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED
Process id: 1816377
finished: Wed Apr 16 23:40:40 IST 2025
elapsed time (seconds): 1223.807
configuration:
Boot Layer
  add modules: jdk.incubator.vector java.base            
  add exports: java.base/jdk.internal.vm.annotation      ALL-UNNAMED
  add opens:   jdk.incubator.vector/jdk.incubator.vector ALL-UNNAMED

STDOUT:
test VectorReshapeTests.testCastFromByte(byte(i)): success [40455ms]
test VectorReshapeTests.testCastFromDouble(double(i)): success [3323ms]
test VectorReshapeTests.testCastFromFloat(float(i)): success [4142ms]
test VectorReshapeTests.testCastFromInt(int(i)): success [4154ms]
test VectorReshapeTests.testCastFromLong(long(i)): success [3140ms]
test VectorReshapeTests.testCastFromShort(short(i)): success [4193ms]
test VectorReshapeTests.testRebracket128(byte(i)): success [19994ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
Failing with Species[long, 4, S_256_BIT]->Species[byte, 32, S_256_BIT] (lanewise), partLimit=-8, block=4, part=-2, origin=8
expect: [0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 17, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testRebracket256(byte(i)): failure [101923ms]
java.lang.AssertionError: arrays differ firstly at element [8]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:768)
	at VectorReshapeTests.testVectorRebracketLanewise(VectorReshapeTests.java:708)
	at VectorReshapeTests.testVectorRebracket(VectorReshapeTests.java:703)
	at VectorReshapeTests.testRebracket256(VectorReshapeTests.java:969)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testRebracket512(byte(i)): success [201697ms]
test VectorReshapeTests.testRebracket64(byte(i)): success [22643ms]
test VectorReshapeTests.testRebracketMax(byte(i)): success [26731ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[byte, 16, S_Max_BIT]->Species[byte, 64, S_512_BIT] (lanewise), partLimit=-4, block=16, part=-2, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeByte(byte(i)): failure [298024ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeByte(VectorReshapeTests.java:465)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[double, 1, S_64_BIT]->Species[double, 8, S_512_BIT] (reinterpret), partLimit=-8, block=8, part=-2, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeDouble(byte(i)): failure [10141ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeDouble(VectorReshapeTests.java:671)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
Failing with Species[float, 4, S_128_BIT]->Species[float, 16, S_512_BIT] (lanewise), partLimit=-4, block=16, part=-1, origin=16
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeFloat(byte(i)): failure [114666ms]
java.lang.AssertionError: arrays differ firstly at element [16]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeFloat(VectorReshapeTests.java:631)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
input:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
Failing with Species[int, 8, S_256_BIT]->Species[int, 16, S_512_BIT] (lanewise), partLimit=-2, block=32, part=-1, origin=32
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeInt(byte(i)): failure [132234ms]
java.lang.AssertionError: arrays differ firstly at element [32]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshapeLanewise(VectorReshapeTests.java:329)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:324)
	at VectorReshapeTests.testReshapeInt(VectorReshapeTests.java:545)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testReshapeLong(byte(i)): success [97177ms]
input:  [1, 2, 3, 4, 5, 6, 7, 8]
Failing with Species[short, 4, S_64_BIT]->Species[short, 32, S_512_BIT] (reinterpret), partLimit=-8, block=8, part=-5, origin=40
expect: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
test VectorReshapeTests.testReshapeShort(byte(i)): failure [92040ms]
java.lang.AssertionError: arrays differ firstly at element [40]; expected value is <1> but was <0>. 
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at org.testng.Assert.assertEquals(Assert.java:220)
	at VectorReshapeTests.checkPartialResult(VectorReshapeTests.java:421)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:377)
	at VectorReshapeTests.testVectorReshape(VectorReshapeTests.java:323)
	at VectorReshapeTests.testReshapeShort(VectorReshapeTests.java:487)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:107)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)
test VectorReshapeTests.testUCastFromByte(byte(i)): success [24413ms]
test VectorReshapeTests.testUCastFromInt(int(i)): success [1ms]
test VectorReshapeTests.testUCastFromShort(short(i)): success [14652ms]

===============================================
jdk/incubator/vector/VectorReshapeTests.java
Total tests run: 20, Passes: 14, Failures: 6, Skips: 0
===============================================

STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: config failures: 0, test failures: 6
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:111)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
	at java.base/java.lang.Thread.run(Thread.java:1447)

JavaTest Message: Test threw exception: java.lang.Exception: config failures: 0, test failures: 6
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
rerun:
cd /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/scratch/11 && \
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus \
DOCS_JDK_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/docs \
HOME=/home/jatinbha \
LANG=en_IN \
LC_ALL=C.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test \
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop \
XDG_RUNTIME_DIR=/run/user/1000 \
XDG_SESSION_CLASS=user \
XDG_SESSION_ID=23039 \
XDG_SESSION_TYPE=tty \
_JVM_DWARF_PATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/symbols \
CLASSPATH=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/testng-7.3.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/guice-5.1.0.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jcommander-1.82.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/javatest.jar:/home/jatinbha/sandboxes/jtreg/build/images/jtreg/lib/jtreg.jar \
    /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=1.5625 -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=1.5625 -J-Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 -J-Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts='-XX:UseAVX=0 -XX:UseSSE=4 -Xbatch -XX:+DeoptimizeALot -XX:+SafepointALot' \
        -Dtest.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dcompile.jdk=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/jdk \
        -Dtest.timeout.factor=16.0 \
        -Dtest.nativepath=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        -Dtest.root=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk \
        -Dtest.name=jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.verbose=Verbose[p=SUMMARY,f=FULL,e=FULL,t=false,m=false] \
        -Dtest.file=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector/VectorReshapeTests.java \
        -Dtest.src=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d \
        -Dtest.class.path.prefix=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/classes/4/jdk/incubator/vector/VectorReshapeTests.d:/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        -Dtest.enable.preview=true \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -Xmx768m \
        -XX:MaxRAMPercentage=1.5625 \
        -Dtest.boot.jdk=/home/jatinbha/softwares/jdk-24 \
        -Djava.io.tmpdir=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/tmp \
        -ea \
        -esa \
        -XX:UseAVX=0 \
        -XX:UseSSE=4 \
        -Xbatch \
        -XX:+DeoptimizeALot \
        -XX:+SafepointALot \
        -Djava.library.path=/home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/images/test/jdk/jtreg/native \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        -XX:-TieredCompilation \
        --enable-preview \
        com.sun.javatest.regtest.agent.MainWrapper /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector/jdk/incubator/vector/VectorReshapeTests.d/testng.0.jta jdk/incubator/vector/VectorReshapeTests.java false VectorReshapeTests

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.Exception: config failures: 0, test failures: 6
--------------------------------------------------
Passed: jdk/incubator/vector/Vector64ConversionTests.java#id0
Test results: passed: 76; failed: 4; did not meet platform requirements: 3
Report written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector/html/report.html
Results written to /home/jatinbha/sandboxes/lworld+vector/valhalla.new_merge/valhalla/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_jdk_jdk_vector
Finished running test 'jtreg:test/jdk:jdk_vector'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/jtreg_test_jdk_jdk_vector

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
>> jtreg:test/jdk:jdk_vector                            83    76     4     0     3 <<
==============================
TEST FAILURE

