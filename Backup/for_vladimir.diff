diff --git a/src/hotspot/share/classfile/classFileParser.cpp b/src/hotspot/share/classfile/classFileParser.cpp
index 4f6e0f0a2ba..1611f680d7c 100644
--- a/src/hotspot/share/classfile/classFileParser.cpp
+++ b/src/hotspot/share/classfile/classFileParser.cpp
@@ -6495,8 +6495,8 @@ bool ClassFileParser::is_jdk_internal_class(const Klass* cls) {
       return true;
     }
     cls = cls->super();
-   }
-   return false;
+  }
+  return false;
 }
 
 void ClassFileParser::post_process_parsed_stream(const ClassFileStream* const stream,
diff --git a/src/hotspot/share/classfile/vmSymbols.hpp b/src/hotspot/share/classfile/vmSymbols.hpp
index dfa8819dab9..77d2aae0552 100644
--- a/src/hotspot/share/classfile/vmSymbols.hpp
+++ b/src/hotspot/share/classfile/vmSymbols.hpp
@@ -320,40 +320,40 @@ class SerializeClosure;
   template(jdk_internal_ValueBased_signature,                                "Ljdk/internal/ValueBased;") \
                                                                                                   \
   /* VectorAPI support */                                                                         \
-  template(vector_VectorPayloadMF8Z_signature,        "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF8Z;")   \
-  template(vector_VectorPayloadMF16Z_signature,       "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF16Z;")  \
-  template(vector_VectorPayloadMF32Z_signature,       "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF32Z;")  \
-  template(vector_VectorPayloadMF64Z_signature,       "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF64Z;")  \
-  template(vector_VectorPayloadMF128Z_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF128Z;") \
-  template(vector_VectorPayloadMF256Z_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF256Z;") \
-  template(vector_VectorPayloadMF512Z_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF512Z;") \
-  template(vector_VectorPayloadMF8B_signature,        "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF8B;")   \
-  template(vector_VectorPayloadMF16B_signature,       "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF16B;")  \
-  template(vector_VectorPayloadMF32B_signature,       "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF32B;")  \
-  template(vector_VectorPayloadMF64B_signature,       "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF64B;")  \
-  template(vector_VectorPayloadMF128B_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF128B;") \
-  template(vector_VectorPayloadMF256B_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF256B;") \
-  template(vector_VectorPayloadMF512B_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF512B;") \
-  template(vector_VectorPayloadMF64S_signature,       "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF64S;")  \
-  template(vector_VectorPayloadMF128S_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF128S;") \
-  template(vector_VectorPayloadMF256S_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF256S;") \
-  template(vector_VectorPayloadMF512S_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF512S;") \
-  template(vector_VectorPayloadMF64I_signature,       "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF64I;")  \
-  template(vector_VectorPayloadMF128I_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF128I;") \
-  template(vector_VectorPayloadMF256I_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF256I;") \
-  template(vector_VectorPayloadMF512I_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF512I;") \
-  template(vector_VectorPayloadMF64L_signature,       "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF64L;")  \
-  template(vector_VectorPayloadMF128L_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF128L;") \
-  template(vector_VectorPayloadMF256L_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF256L;") \
-  template(vector_VectorPayloadMF512L_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF512L;") \
-  template(vector_VectorPayloadMF64F_signature,       "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF64F;")  \
-  template(vector_VectorPayloadMF128F_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF128F;") \
-  template(vector_VectorPayloadMF256F_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF256F;") \
-  template(vector_VectorPayloadMF512F_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF512F;") \
-  template(vector_VectorPayloadMF64D_signature,       "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF64D;")  \
-  template(vector_VectorPayloadMF128D_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF128D;") \
-  template(vector_VectorPayloadMF256D_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF256D;") \
-  template(vector_VectorPayloadMF512D_signature,      "Qjdk/internal/vm/vector/VectorSupport$VectorPayloadMF512D;") \
+  template(vector_VectorPayloadMF8Z_signature,        "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF8Z;")   \
+  template(vector_VectorPayloadMF16Z_signature,       "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF16Z;")  \
+  template(vector_VectorPayloadMF32Z_signature,       "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF32Z;")  \
+  template(vector_VectorPayloadMF64Z_signature,       "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF64Z;")  \
+  template(vector_VectorPayloadMF128Z_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF128Z;") \
+  template(vector_VectorPayloadMF256Z_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF256Z;") \
+  template(vector_VectorPayloadMF512Z_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF512Z;") \
+  template(vector_VectorPayloadMF8B_signature,        "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF8B;")   \
+  template(vector_VectorPayloadMF16B_signature,       "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF16B;")  \
+  template(vector_VectorPayloadMF32B_signature,       "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF32B;")  \
+  template(vector_VectorPayloadMF64B_signature,       "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF64B;")  \
+  template(vector_VectorPayloadMF128B_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF128B;") \
+  template(vector_VectorPayloadMF256B_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF256B;") \
+  template(vector_VectorPayloadMF512B_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF512B;") \
+  template(vector_VectorPayloadMF64S_signature,       "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF64S;")  \
+  template(vector_VectorPayloadMF128S_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF128S;") \
+  template(vector_VectorPayloadMF256S_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF256S;") \
+  template(vector_VectorPayloadMF512S_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF512S;") \
+  template(vector_VectorPayloadMF64I_signature,       "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF64I;")  \
+  template(vector_VectorPayloadMF128I_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF128I;") \
+  template(vector_VectorPayloadMF256I_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF256I;") \
+  template(vector_VectorPayloadMF512I_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF512I;") \
+  template(vector_VectorPayloadMF64L_signature,       "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF64L;")  \
+  template(vector_VectorPayloadMF128L_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF128L;") \
+  template(vector_VectorPayloadMF256L_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF256L;") \
+  template(vector_VectorPayloadMF512L_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF512L;") \
+  template(vector_VectorPayloadMF64F_signature,       "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF64F;")  \
+  template(vector_VectorPayloadMF128F_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF128F;") \
+  template(vector_VectorPayloadMF256F_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF256F;") \
+  template(vector_VectorPayloadMF512F_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF512F;") \
+  template(vector_VectorPayloadMF64D_signature,       "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF64D;")  \
+  template(vector_VectorPayloadMF128D_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF128D;") \
+  template(vector_VectorPayloadMF256D_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF256D;") \
+  template(vector_VectorPayloadMF512D_signature,      "Ljdk/internal/vm/vector/VectorSupport$VectorPayloadMF512D;") \
                                                                                                   \
   /* class symbols needed by intrinsics */                                                        \
   VM_INTRINSICS_DO(VM_INTRINSIC_IGNORE, template, VM_SYMBOL_IGNORE, VM_SYMBOL_IGNORE, VM_ALIAS_IGNORE) \
diff --git a/src/hotspot/share/opto/inlinetypenode.cpp b/src/hotspot/share/opto/inlinetypenode.cpp
index b6e62c85a50..00d1b77999d 100644
--- a/src/hotspot/share/opto/inlinetypenode.cpp
+++ b/src/hotspot/share/opto/inlinetypenode.cpp
@@ -301,22 +301,9 @@ bool InlineTypeNode::field_is_null_free(uint index) const {
   return field->is_null_free();
 }
 
-static bool is_vector_payload(ciKlass* klass) {
-  return klass->is_subclass_of(ciEnv::current()->vector_VectorPayload_klass());
-}
-
-static bool is_vector_payload_mf(ciKlass* klass) {
-  return klass->is_subclass_of(ciEnv::current()->vector_VectorPayloadMF_klass());
-}
-
 void InlineTypeNode::make_scalar_in_safepoint(PhaseIterGVN* igvn, Unique_Node_List& worklist, SafePointNode* sfpt) {
   ciInlineKlass* vk = inline_klass();
   uint nfields = vk->nof_nonstatic_fields();
-  if (is_vector_payload_mf(vk)) {
-     assert(field_count() == nfields, "");
-  } else if (is_vector_payload(vk)) {
-     assert(field_value(0)->as_InlineType()->field_count() == nfields, "");
-  }
   JVMState* jvms = sfpt->jvms();
   // Replace safepoint edge by SafePointScalarObjectNode and add field values
   assert(jvms != nullptr, "missing JVMS");
@@ -327,7 +314,7 @@ void InlineTypeNode::make_scalar_in_safepoint(PhaseIterGVN* igvn, Unique_Node_Li
   sobj->init_req(0, igvn->C->root());
   // Nullable inline types have an IsInit field that needs
   // to be checked before using the field values.
-  if (!igvn->type(get_is_init())->is_int()->is_con(1)) {
+  if (!vk->is_null_free()) {
     sfpt->add_req(get_is_init());
   } else {
     sfpt->add_req(igvn->C->top());
diff --git a/src/hotspot/share/opto/inlinetypenode.hpp b/src/hotspot/share/opto/inlinetypenode.hpp
index 2a575724746..d82c55756ba 100644
--- a/src/hotspot/share/opto/inlinetypenode.hpp
+++ b/src/hotspot/share/opto/inlinetypenode.hpp
@@ -56,7 +56,7 @@ protected:
   const TypePtr* field_adr_type(Node* base, int offset, ciInstanceKlass* holder, DecoratorSet decorators, PhaseGVN& gvn) const;
 
   // Checks if the inline type fields are all set to default values
-  bool is_default(PhaseGVN* gvn) const;
+  virtual bool is_default(PhaseGVN* gvn) const;
 
   // Checks if the inline type oop is an allocated buffer with larval state
   bool is_larval(PhaseGVN* gvn) const;
diff --git a/src/hotspot/share/opto/library_call.cpp b/src/hotspot/share/opto/library_call.cpp
index ce3c060d9ab..c2e4a167f3a 100644
--- a/src/hotspot/share/opto/library_call.cpp
+++ b/src/hotspot/share/opto/library_call.cpp
@@ -2661,9 +2661,11 @@ bool LibraryCallKit::inline_unsafe_finish_private_buffer() {
 
   // Allocation node must exist to generate IR for transitioning allocation out
   // of larval state. Disable the intrinsic and take unsafe slow path if allocation
-  // is not reachable,  oop returned by Unsafe_finishPrivateBuffer native method
-  // will automatically rematerialize InlineTypeNode.
+  // is not reachable, this can happen if makePrivateBuffer was not intrinsified and
+  // was falling over to unsafe implementation which return a larval transitioned oop.
   if (AllocateNode::Ideal_allocation(buffer) == nullptr) {
+    // Oop returned by Unsafe_finishPrivateBuffer native method
+    // will automatically re-materialize InlineTypeNode.
     return false;
   }
   receiver = null_check(receiver);
diff --git a/src/hotspot/share/opto/macro.cpp b/src/hotspot/share/opto/macro.cpp
index 82a9df55b00..e9315f0152d 100644
--- a/src/hotspot/share/opto/macro.cpp
+++ b/src/hotspot/share/opto/macro.cpp
@@ -853,6 +853,12 @@ SafePointScalarObjectNode* PhaseMacroExpand::create_scalarized_object_descriptio
   sobj->init_req(0, C->root());
   transform_later(sobj);
 
+  if (iklass && iklass->is_inlinetype()) {
+    // Value object has two additional inputs before the non-static fields
+    sfpt->add_req(_igvn.intcon(1));
+    sfpt->add_req(_igvn.intcon(alloc->_larval ? 1 : 0));
+  }
+
   // Scan object's fields adding an input to the safepoint for each field.
   for (int j = 0; j < nfields; j++) {
     intptr_t offset;
diff --git a/src/hotspot/share/opto/vector.cpp b/src/hotspot/share/opto/vector.cpp
index bd35b19d7de..5607988b3a4 100644
--- a/src/hotspot/share/opto/vector.cpp
+++ b/src/hotspot/share/opto/vector.cpp
@@ -320,7 +320,7 @@ Node* PhaseVector::expand_vbox_alloc_node(VectorBoxAllocateNode* vbox_alloc,
   // in case the input "vect" is not the original vector value when creating the
   // VectorBox (e.g. original vector value is a PhiNode).
   ciInlineKlass* payload = vk->declared_nonstatic_field_at(0)->type()->as_inline_klass();
-  Node* payload_value = InlineTypeNode::make_uninitialized(gvn, payload, true);
+  Node* payload_value = InlineTypeNode::make_uninitialized(gvn, payload, false);
   payload_value->as_InlineType()->set_field_value(0, vect);
   payload_value = gvn.transform(payload_value);
 
@@ -331,7 +331,7 @@ Node* PhaseVector::expand_vbox_alloc_node(VectorBoxAllocateNode* vbox_alloc,
   vector = gvn.transform(vector)->as_InlineType();
 
   Node* klass_node = kit.makecon(TypeKlassPtr::make(vk));
-  Node* alloc_oop  = kit.new_instance(klass_node, NULL, NULL, /* deoptimize_on_exception */ true);
+  Node* alloc_oop  = kit.new_instance(klass_node, nullptr, nullptr, /* deoptimize_on_exception */ true);
   vector->store(&kit, alloc_oop, alloc_oop, vk);
 
   C->set_max_vector_size(MAX2(C->max_vector_size(), vect_type->length_in_bytes()));
@@ -351,7 +351,7 @@ void PhaseVector::expand_vunbox_node(VectorUnboxNode* vec_unbox) {
       node = node->as_InlineType()->field_value(0);
     }
 
-    assert(node->bottom_type()->isa_vect() != NULL, "not a vector");
+    assert(node->bottom_type()->isa_vect() != nullptr, "not a vector");
     assert(Type::cmp(vec_unbox->bottom_type(), node->bottom_type()) == 0, "type is not matched");
 
     C->set_max_vector_size(MAX2(C->max_vector_size(), vec_unbox->bottom_type()->is_vect()->length_in_bytes()));
diff --git a/src/hotspot/share/opto/vectornode.hpp b/src/hotspot/share/opto/vectornode.hpp
index db16aba617b..e47e921f5f7 100644
--- a/src/hotspot/share/opto/vectornode.hpp
+++ b/src/hotspot/share/opto/vectornode.hpp
@@ -1697,17 +1697,18 @@ class VectorBoxNode : public InlineTypeNode {
     VectorBoxNode* box_node = new VectorBoxNode(C, vk, box, box_type, vt, false);
 
     ciInlineKlass* payload = vk->declared_nonstatic_field_at(0)->type()->as_inline_klass();
-    Node* payload_value = InlineTypeNode::make_uninitialized(gvn, payload, true);
+    Node* payload_value = InlineTypeNode::make_uninitialized(gvn, payload, false);
     payload_value->as_InlineType()->set_field_value(0, val);
     payload_value = gvn.transform(payload_value);
 
     box_node->set_field_value(0, payload_value);
     box_node->set_is_buffered(gvn, false);
-    box_node->set_is_init(gvn);
+    box_node->set_is_init(gvn, true);
 
     return box_node;
   }
 
+  virtual bool is_default(PhaseGVN* gvn) const { return false; }
   const  TypeInstPtr* box_type() const { assert(_box_type != nullptr, ""); return _box_type; };
   const  TypeVect*    vec_type() const { assert(_vec_type != nullptr, ""); return _vec_type; };
 
diff --git a/src/hotspot/share/runtime/deoptimization.cpp b/src/hotspot/share/runtime/deoptimization.cpp
index 10b22ca97f3..9b8208f63df 100644
--- a/src/hotspot/share/runtime/deoptimization.cpp
+++ b/src/hotspot/share/runtime/deoptimization.cpp
@@ -1238,12 +1238,10 @@ bool Deoptimization::realloc_objects(JavaThread* thread, frame* fr, RegisterMap*
   thread->clear_pending_exception();
 
   bool failures = false;
-
   for (int i = 0; i < objects->length(); i++) {
     assert(objects->at(i)->is_object(), "invalid debug information");
     ObjectValue* sv = (ObjectValue*) objects->at(i);
     Klass* k = java_lang_Class::as_Klass(sv->klass()->as_ConstantOopReadValue()->value()());
-
     // Check if the object may be null and has an additional is_init input that needs
     // to be checked before using the field values. Skip re-allocation if it is null.
     if (sv->maybe_null()) {
diff --git a/src/java.base/share/classes/jdk/internal/vm/vector/VectorSupport.java b/src/java.base/share/classes/jdk/internal/vm/vector/VectorSupport.java
index 92b88a96cea..a02ed61b578 100644
--- a/src/java.base/share/classes/jdk/internal/vm/vector/VectorSupport.java
+++ b/src/java.base/share/classes/jdk/internal/vm/vector/VectorSupport.java
@@ -382,7 +382,7 @@ public class VectorSupport {
         }
     }
 
-    public primitive static class VectorPayloadMFMaxB extends VectorPayloadMF {
+    public value static class VectorPayloadMFMaxB extends VectorPayloadMF {
         @MultiField(value = -1)
         byte mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxB.class);
@@ -391,7 +391,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMFMaxS extends VectorPayloadMF {
+    public value static class VectorPayloadMFMaxS extends VectorPayloadMF {
         @MultiField(value = -1)
         short mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxS.class);
@@ -400,7 +400,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMFMaxI extends VectorPayloadMF {
+    public value static class VectorPayloadMFMaxI extends VectorPayloadMF {
         @MultiField(value = -1)
         int mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxI.class);
@@ -409,7 +409,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMFMaxL extends VectorPayloadMF {
+    public value static class VectorPayloadMFMaxL extends VectorPayloadMF {
         @MultiField(value = -1)
         long mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxL.class);
@@ -418,7 +418,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMFMaxF extends VectorPayloadMF {
+    public value static class VectorPayloadMFMaxF extends VectorPayloadMF {
         @MultiField(value = -1)
         float mfield = 0.0f;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxF.class);
@@ -427,7 +427,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMFMaxD extends VectorPayloadMF {
+    public value static class VectorPayloadMFMaxD extends VectorPayloadMF {
         @MultiField(value = -1)
         double mfield = 0.0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxD.class);
@@ -436,7 +436,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF8Z extends VectorPayloadMF {
+    public value static class VectorPayloadMF8Z extends VectorPayloadMF {
         @MultiField(value = 1)
         boolean mfield = false;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF8Z.class);
@@ -445,7 +445,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF16Z extends VectorPayloadMF {
+    public value static class VectorPayloadMF16Z extends VectorPayloadMF {
         @MultiField(value = 2)
         boolean mfield = false;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF16Z.class);
@@ -454,7 +454,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF32Z extends VectorPayloadMF {
+    public value static class VectorPayloadMF32Z extends VectorPayloadMF {
         @MultiField(value = 4)
         boolean mfield = false;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF32Z.class);
@@ -463,7 +463,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF64Z extends VectorPayloadMF {
+    public value static class VectorPayloadMF64Z extends VectorPayloadMF {
         @MultiField(value = 8)
         boolean mfield = false;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF64Z.class);
@@ -472,7 +472,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF128Z extends VectorPayloadMF {
+    public value static class VectorPayloadMF128Z extends VectorPayloadMF {
         @MultiField(value = 16)
         boolean mfield = false;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF128Z.class);
@@ -481,7 +481,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF256Z extends VectorPayloadMF {
+    public value static class VectorPayloadMF256Z extends VectorPayloadMF {
         @MultiField(value = 32)
         boolean mfield = false;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF256Z.class);
@@ -490,7 +490,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF512Z extends VectorPayloadMF {
+    public value static class VectorPayloadMF512Z extends VectorPayloadMF {
         @MultiField(value = 64)
         boolean mfield = false;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF512Z.class);
@@ -499,7 +499,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMFMaxBZ extends VectorPayloadMF {
+    public value static class VectorPayloadMFMaxBZ extends VectorPayloadMF {
         @MultiField(value = -1)
         boolean mfield = false;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxBZ.class);
@@ -508,7 +508,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMFMaxSZ extends VectorPayloadMF {
+    public value static class VectorPayloadMFMaxSZ extends VectorPayloadMF {
         @MultiField(value = -1)
         boolean mfield = false;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxSZ.class);
@@ -517,7 +517,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMFMaxIZ extends VectorPayloadMF {
+    public value static class VectorPayloadMFMaxIZ extends VectorPayloadMF {
         @MultiField(value = -1)
         boolean mfield = false;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxIZ.class);
@@ -526,7 +526,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMFMaxLZ extends VectorPayloadMF {
+    public value static class VectorPayloadMFMaxLZ extends VectorPayloadMF {
         @MultiField(value = -1)
         boolean mfield = false;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxLZ.class);
@@ -535,7 +535,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF8B extends VectorPayloadMF {
+    public value static class VectorPayloadMF8B extends VectorPayloadMF {
         @MultiField(value = 1)
         byte mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF8B.class);
@@ -544,7 +544,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF16B extends VectorPayloadMF {
+    public value static class VectorPayloadMF16B extends VectorPayloadMF {
         @MultiField(value = 2)
         byte mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF16B.class);
@@ -553,7 +553,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF32B extends VectorPayloadMF {
+    public value static class VectorPayloadMF32B extends VectorPayloadMF {
         @MultiField(value = 4)
         byte mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF32B.class);
@@ -562,7 +562,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF64B extends VectorPayloadMF {
+    public value static class VectorPayloadMF64B extends VectorPayloadMF {
         @MultiField(value = 8)
         byte mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF64B.class);
@@ -571,7 +571,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF128B extends VectorPayloadMF {
+    public value static class VectorPayloadMF128B extends VectorPayloadMF {
         @MultiField(value = 16)
         byte mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF128B.class);
@@ -580,7 +580,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF256B extends VectorPayloadMF {
+    public value static class VectorPayloadMF256B extends VectorPayloadMF {
         @MultiField(value = 32)
         byte mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF256B.class);
@@ -589,7 +589,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF512B extends VectorPayloadMF {
+    public value static class VectorPayloadMF512B extends VectorPayloadMF {
         @MultiField(value = 64)
         byte mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF512B.class);
@@ -598,7 +598,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMFMaxBB extends VectorPayloadMF {
+    public value static class VectorPayloadMFMaxBB extends VectorPayloadMF {
         @MultiField(value = -1)
         byte mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxBB.class);
@@ -607,7 +607,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMFMaxSB extends VectorPayloadMF {
+    public value static class VectorPayloadMFMaxSB extends VectorPayloadMF {
         @MultiField(value = -1)
         byte mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxSB.class);
@@ -616,7 +616,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMFMaxIB extends VectorPayloadMF {
+    public value static class VectorPayloadMFMaxIB extends VectorPayloadMF {
         @MultiField(value = -1)
         byte mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxIB.class);
@@ -625,7 +625,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMFMaxLB extends VectorPayloadMF {
+    public value static class VectorPayloadMFMaxLB extends VectorPayloadMF {
         @MultiField(value = -1)
         byte mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxLB.class);
@@ -634,7 +634,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF64S extends VectorPayloadMF {
+    public value static class VectorPayloadMF64S extends VectorPayloadMF {
         @MultiField(value = 4)
         short mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF64S.class);
@@ -643,7 +643,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF128S extends VectorPayloadMF {
+    public value static class VectorPayloadMF128S extends VectorPayloadMF {
         @MultiField(value = 8)
         short mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF128S.class);
@@ -652,7 +652,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF256S extends VectorPayloadMF {
+    public value static class VectorPayloadMF256S extends VectorPayloadMF {
         @MultiField(value = 16)
         short mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF256S.class);
@@ -661,7 +661,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF512S extends VectorPayloadMF {
+    public value static class VectorPayloadMF512S extends VectorPayloadMF {
         @MultiField(value = 32)
         short mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF512S.class);
@@ -670,7 +670,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF64I extends VectorPayloadMF {
+    public value static class VectorPayloadMF64I extends VectorPayloadMF {
         @MultiField(value = 2)
         int mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF64I.class);
@@ -679,7 +679,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF128I extends VectorPayloadMF {
+    public value static class VectorPayloadMF128I extends VectorPayloadMF {
         @MultiField(value = 4)
         int mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF128I.class);
@@ -688,7 +688,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF256I extends VectorPayloadMF {
+    public value static class VectorPayloadMF256I extends VectorPayloadMF {
         @MultiField(value = 8)
         int mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF256I.class);
@@ -697,7 +697,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF512I extends VectorPayloadMF {
+    public value static class VectorPayloadMF512I extends VectorPayloadMF {
         @MultiField(value = 16)
         int mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF512I.class);
@@ -706,7 +706,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF64L extends VectorPayloadMF {
+    public value static class VectorPayloadMF64L extends VectorPayloadMF {
         @MultiField(value = 1)
         final long mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF64L.class);
@@ -715,7 +715,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF128L extends VectorPayloadMF {
+    public value static class VectorPayloadMF128L extends VectorPayloadMF {
         @MultiField(value = 2)
         final long mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF128L.class);
@@ -724,7 +724,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF256L extends VectorPayloadMF {
+    public value static class VectorPayloadMF256L extends VectorPayloadMF {
         @MultiField(value = 4)
         final long mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF256L.class);
@@ -733,7 +733,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF512L extends VectorPayloadMF {
+    public value static class VectorPayloadMF512L extends VectorPayloadMF {
         @MultiField(value = 8)
         final long mfield = 0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF512L.class);
@@ -742,7 +742,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF64F extends VectorPayloadMF {
+    public value static class VectorPayloadMF64F extends VectorPayloadMF {
         @MultiField(value = 2)
         float mfield = 0.0f;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF64F.class);
@@ -751,7 +751,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF128F extends VectorPayloadMF {
+    public value static class VectorPayloadMF128F extends VectorPayloadMF {
         @MultiField(value = 4)
         float mfield = 0.0f;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF128F.class);
@@ -760,7 +760,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF256F extends VectorPayloadMF {
+    public value static class VectorPayloadMF256F extends VectorPayloadMF {
         @MultiField(value = 8)
         float mfield = 0.0f;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF256F.class);
@@ -769,7 +769,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF512F extends VectorPayloadMF {
+    public value static class VectorPayloadMF512F extends VectorPayloadMF {
         @MultiField(value = 16)
         float mfield = 0.0f;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF512F.class);
@@ -778,7 +778,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF64D extends VectorPayloadMF {
+    public value static class VectorPayloadMF64D extends VectorPayloadMF {
         @MultiField(value = 1)
         double mfield = 0.0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF64D.class);
@@ -787,7 +787,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF128D extends VectorPayloadMF {
+    public value static class VectorPayloadMF128D extends VectorPayloadMF {
         @MultiField(value = 2)
         double mfield = 0.0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF128D.class);
@@ -796,7 +796,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF256D extends VectorPayloadMF {
+    public value static class VectorPayloadMF256D extends VectorPayloadMF {
         @MultiField(value = 4)
         double mfield = 0.0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF256D.class);
@@ -805,7 +805,7 @@ public class VectorSupport {
         public long multiFieldOffset() { return MFOFFSET; }
     }
 
-    public primitive static class VectorPayloadMF512D extends VectorPayloadMF {
+    public value static class VectorPayloadMF512D extends VectorPayloadMF {
         @MultiField(value = 8)
         double mfield = 0.0;
         static final long MFOFFSET = multiFieldOffset(VectorPayloadMF512D.class);
diff --git a/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/gen-src.sh b/src/jdk.incubator.vector/share/classes/jdk/incubator/vector/gen-src.sh
old mode 100644
new mode 100755
